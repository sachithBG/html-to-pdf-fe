{"version":3,"file":"static/chunks/app/(pages)/dashboard/page-c607da5a8b0f25ac.js","mappings":"AAAA","sources":["webpack://_N_E/?9b8a","webpack://_N_E/./src/app/services/logsService.ts","webpack://_N_E/./src/app/(pages)/dashboard/page.tsx","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/organizationService.ts","webpack://_N_E/./src/app/services/pdfService.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\dashboard\\\\page.tsx\");\n","import { API } from \"./api\";\r\n\r\n\r\nexport const chartMonthlyData = async (organization_id: number, token: string) => {\r\n    return API.get(`/logs/chart-data/monthly?organizationId=${organization_id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}","'use client';\r\n\r\nimport { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n    Box,\r\n    Card,\r\n    Typography,\r\n    Grid2,\r\n    Skeleton,\r\n    IconButton,\r\n    Tooltip,\r\n    useTheme,\r\n} from '@mui/material';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { ContentCopy as ContentCopyIcon, CheckCircle as CheckCircleIcon } from '@mui/icons-material';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip as ChartTooltip, Legend } from 'chart.js';\r\nimport { motion } from 'framer-motion';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addOrganizationAll, clearOrganizationState, getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { setDefaultOrganization } from '@/app/services/organizationService';\r\nimport { chartMonthlyData } from '@/app/services/logsService';\r\nimport { readAllPdfTemplatePage } from '@/app/services/pdfService';\r\nimport dynamic from 'next/dynamic';\r\nimport { RootState } from '@/redux/store';\r\nconst PdfTemplatesList = dynamic(() => import('@/app/(pages)/setup/pdf-template/PdfTemplatesList'), { ssr: false });\r\n\r\n\r\n// Registering Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, ChartTooltip, Legend);\r\n\r\n// Sample chart data\r\n// const chartData = {\r\n//     labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n//     datasets: [\r\n//         {\r\n//             label: 'PDF Requests',\r\n//             data: [120, 90, 80, 110, 130, 140],\r\n//             borderColor: '#4caf50',\r\n//             tension: 0.2,\r\n//             pointBackgroundColor: '#4caf50',\r\n//         },\r\n//     ],\r\n// };\r\n\r\nconst chartOptions: any = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            display: true, // Show or hide the legend\r\n            position: 'top', // Position of the legend (e.g., 'top', 'bottom')\r\n        },\r\n    },\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true, // Start the Y-axis at 0\r\n            ticks: {\r\n                stepSize: 1, // Ensure ticks are whole numbers\r\n                callback: function (value: any) {\r\n                    return Number.isInteger(value) ? value : null; // Only display whole numbers\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\n// Animation variants\r\nconst fadeIn = {\r\n    hidden: { opacity: 0, y: 20 },\r\n    visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nconst Dashboard = () => {\r\n    const theme = useTheme(); // Accessing MUI theme for dynamic background\r\n    const { organizations } = useSelector((state: any) => state.organization);\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [orgs, setOrgs] = useState<Organization[]>(organizations);\r\n    const [copiedToken, setCopiedToken] = useState(false);\r\n    const [chartData, setChartData] = useState<any>({});\r\n\r\n\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const dispatch = useDispatch();\r\n\r\n    const [page, setPage] = useState(1);\r\n    const pageSize = 5;\r\n\r\n    const handlePageChange = (event: any, value: any) => {\r\n        setPage(value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setOrgs(organizations);\r\n        const fetchChartData = async () => {\r\n            await chartMonthlyData(currentOrg.id, token).then((response) => {\r\n                if (response.status == 200) {\r\n                    const labels: string[] = response.data.map((item: any) => item.label);\r\n                    const data = response.data.map((item: any) => item.value);\r\n                    // console.log(\"Chart data:\", data);\r\n                    // console.log(\"Chart data:\", labels);\r\n                    setChartData({\r\n                        labels: labels,\r\n                        datasets: [\r\n                            {\r\n                                label: 'PDF Requests',\r\n                                data,\r\n                                borderColor: theme.palette.mode == 'dark' ? '#90caf9' : '#045da5',\r\n                                tension: .2,\r\n                                pointBackgroundColor: '#4caf50',\r\n                            },\r\n                        ],\r\n                    });\r\n                }\r\n                setIsLoading(false);\r\n            }).catch((error) => {\r\n                console.error('Error fetching chart data:', error);\r\n                setIsLoading(false);\r\n            });\r\n        };\r\n        setTimeout(() => {\r\n            if (currentOrg?.id && token) {\r\n                fetchChartData();\r\n            }\r\n        }, 1500);\r\n    }, [currentOrg]);\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText('my_generated_token_12345').then(() => {\r\n            setCopiedToken(true);\r\n            setTimeout(() => setCopiedToken(false), 2000);\r\n        });\r\n    };\r\n\r\n    const setDefault = (orgId: number) => {\r\n        // Implement the setDefault API call here\r\n        // This function should update the default organization\r\n        setDefaultOrganization(orgId, token).then((res: any) => {\r\n            if (res?.status == 200) {\r\n                const updatedOrgs = organizations.map((org: any) => ({ ...org, is_default: org.id === orgId }));\r\n                dispatch(clearOrganizationState());\r\n                dispatch(addOrganizationAll(updatedOrgs));\r\n            }\r\n        }).catch((err: any) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n\r\n    // Memoize the truncated token calculation to avoid recalculating on every render\r\n    const truncatedToken = useMemo(() => {\r\n        return currentOrg?.refresh_token?.length > 15\r\n            ? `${currentOrg?.refresh_token?.slice(0, 40)}...`\r\n            : currentOrg?.refresh_token || 'No token available';\r\n    }, [currentOrg?.refresh_token]);\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                p: 4,\r\n                backgroundColor: theme.palette.background.default, // Dynamically applied background color\r\n                minHeight: '100vh',\r\n            }}\r\n        >\r\n\r\n            {/* Organization Switcher */}\r\n            <motion.div initial=\"hidden\" animate=\"visible\" variants={fadeIn} transition={{ duration: 0.5 }}>\r\n                <Card sx={{ p: 3, mb: 4 }}>\r\n                    <Typography variant=\"h6\">Active Organization</Typography>\r\n                    <Typography variant=\"body1\" sx={{ mb: 2 }}>\r\n                        {currentOrg?.name}\r\n                    </Typography>\r\n                    <Grid2 container spacing={2}>\r\n                        {orgs.map((org, index) => (\r\n                            <Grid2 size={4} key={index}>\r\n                                <Card\r\n                                    sx={{\r\n                                        p: 2,\r\n                                        cursor: 'pointer',\r\n                                        backgroundColor: currentOrg?.name === org?.name ? 'var(--mui-palette-primary-main)' : theme.palette.background.paper,\r\n                                        color: currentOrg?.name === org?.name ? '#fff' : theme.palette.text.primary,\r\n                                    }}\r\n                                    onClick={() => setDefault(org.id)}\r\n                                >\r\n                                    <Typography align=\"center\">{org?.name}</Typography>\r\n                                </Card>\r\n                            </Grid2>\r\n                        ))}\r\n                    </Grid2>\r\n                </Card>\r\n            </motion.div>\r\n\r\n            {/* PDF Generation Trends */}\r\n            <motion.div initial=\"hidden\" animate=\"visible\" variants={fadeIn} transition={{ duration: 0.5, delay: 0.2 }}>\r\n                <Card sx={{ p: 3, mb: 4 }}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n                        PDF Requests Trends\r\n                    </Typography>\r\n                    {isLoading && chartData ? (\r\n                        <Skeleton variant=\"rectangular\" height={300} />\r\n                    ) : (\r\n                        <Line data={chartData} options={chartOptions} />\r\n                    )}\r\n                </Card>\r\n            </motion.div>\r\n\r\n            {/* Dashboard Sections */}\r\n            {/* PDF Templates List Section */}\r\n            {!isLoading && <PdfTemplatesList\r\n                currentOrg={currentOrg}\r\n                token={token}\r\n                page={page}\r\n                pageSize={pageSize}\r\n                onPageChange={handlePageChange}\r\n                readAllPdfTemplatePage={readAllPdfTemplatePage} // API function to fetch templates\r\n            />}\r\n            {/* <Grid2 container spacing={3}> */}\r\n            {/* PDF Templates */}\r\n            {/* <Grid2 size={{ xs: 12, sm: 6, md: 4 }} >\r\n                    <motion.div initial=\"hidden\" animate=\"visible\" variants={fadeIn} transition={{ duration: 0.5, delay: 0.3 }}>\r\n                        <Card sx={{ p: 3 }}>\r\n                            <Typography variant=\"h6\">PDF Templates</Typography>\r\n                            {isLoading\r\n                                ? [...Array(3)].map((_, i) => <Skeleton key={i} height={20} sx={{ mb: 1 }} />)\r\n                                : pdfTemplates.map((template, i) => (\r\n                                    <Typography key={i} sx={{ mb: 1 }}>\r\n                                        {template}\r\n                                    </Typography>\r\n                                ))}\r\n                        </Card>\r\n                    </motion.div>\r\n                </Grid2> */}\r\n            {/* </Grid2> */}\r\n\r\n            {/* API Token Section */}\r\n            <motion.div initial=\"hidden\" animate=\"visible\" variants={fadeIn} transition={{ duration: 0.5, delay: 0.6 }}>\r\n                <Card sx={{ mt: 4, p: 3 }}>\r\n                    <Typography variant=\"h6\">API Token</Typography>\r\n                    <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>\r\n                        <Typography variant=\"body1\" sx={{ mr: 2 }}>\r\n                            {truncatedToken || 'No token available'}\r\n                        </Typography>\r\n                        <Tooltip title={copiedToken ? 'Copied!' : 'Copy'}>\r\n                            <IconButton onClick={handleCopy}>\r\n                                {copiedToken ? <CheckCircleIcon color=\"success\" /> : <ContentCopyIcon />}\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Box>\r\n                </Card>\r\n            </motion.div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { Organization } from \"@/redux/slice/organizationSlice\";\r\nimport { API } from \"./api\";\r\n\r\nexport const findOrganizationsByUserId = async (userId: number, token: string) => {\r\n    return API.get('/organizations/' + userId, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n};\r\n\r\nexport const createOrganization = async (organization: Organization | any, token: string | any) => {\r\n    return API.post('/organizations', organization, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateOrg = async (data: any, token: string) => {\r\n    return API.put('/organizations/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const setDefaultOrganization = async (id: number, token: string) => {\r\n    return API.put('/organizations/' + id + '/default', {}, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findOrganizationById = async (id: any, token: string) => {\r\n    return API.get('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteOrganization = async (id: any, token: string) => {\r\n    return API.delete('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import { API } from \"./api\";\r\n\r\nexport const createPdfTemplate = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/resource', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const generatePdfBufferById = async (id: number, organization_id: number, token: string, subcategoriesFilter: string[] = []) => {\r\n    return API.get('/pdf-templates/preview/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: { organization_id: organization_id, subcategoriesFilter: subcategoriesFilter }\r\n    });\r\n}\r\n\r\nexport const generatePdfBuffer = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/convert', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readPdfTemplate = async (id: number, token: string) => {\r\n    return API.get(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readAllPdfTemplatePage = async (\r\n    orgId: string,\r\n    token: string,\r\n    {\r\n        sortOrder = 'asc',   // Default value for sortOrder\r\n        startFrom = 0,      // Default value for startFrom (pagination)\r\n        to = 10,            // Default value for to (pagination)\r\n        sortBy = 'name',    // Default value for sortBy\r\n        addonsFilter = '',  // Default value for addonsFilter\r\n        search = '',        // Default value for search filter\r\n    } = {} // Default empty object if no parameters are passed\r\n) => {\r\n    return API.get(`/pdf-templates/template/page`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        params: {\r\n            sortOrder,   // sorting order, default is 'asc'\r\n            startFrom,   // starting index, default is 0\r\n            to,          // number of items to return, default is 10\r\n            sortBy,      // field to sort by, default is 'name'\r\n            addonsFilter, // any additional filter, default is empty string\r\n            search,      // search filter, default is empty string\r\n            organization_id: orgId\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const updatePdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateDummyDataPdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/dummy-data/${id}`, { json: data }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deletePdfTemplate = async (id: number, token: string) => {\r\n    return API.delete(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}