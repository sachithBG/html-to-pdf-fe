{"version":3,"file":"static/chunks/app/(pages)/test/page-0820a49ffeb21930.js","mappings":"AAAA","sources":["webpack://_N_E/?92d4","webpack://_N_E/./node_modules/@mui/icons-material/esm/Save.js","webpack://_N_E/./node_modules/next/dist/api/app-dynamic.js","webpack://_N_E/../../../src/shared/lib/app-dynamic.tsx","webpack://_N_E/../../../src/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.tsx","webpack://_N_E/../../../src/shared/lib/lazy-dynamic/loadable.tsx","webpack://_N_E/../../../src/shared/lib/lazy-dynamic/preload-chunks.tsx","webpack://_N_E/./src/app/(pages)/test/page.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\test\\\\page.tsx\");\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z\"\n}), 'Save');","export * from '../shared/lib/app-dynamic';\nexport { default } from '../shared/lib/app-dynamic';\n\n//# sourceMappingURL=app-dynamic.js.map","import type React from 'react'\nimport type { JSX } from 'react'\nimport Loadable from './lazy-dynamic/loadable'\n\nimport type {\n  LoadableGeneratedOptions,\n  DynamicOptionsLoadingProps,\n  Loader,\n  LoaderComponent,\n} from './lazy-dynamic/types'\n\nexport {\n  type LoadableGeneratedOptions,\n  type DynamicOptionsLoadingProps,\n  type Loader,\n  type LoaderComponent,\n}\n\nexport type DynamicOptions<P = {}> = LoadableGeneratedOptions & {\n  loading?: () => JSX.Element | null\n  loader?: Loader<P>\n  loadableGenerated?: LoadableGeneratedOptions\n  modules?: string[]\n  ssr?: boolean\n}\n\nexport type LoadableOptions<P = {}> = DynamicOptions<P>\n\nexport type LoadableFn<P = {}> = (\n  opts: LoadableOptions<P>\n) => React.ComponentType<P>\n\nexport type LoadableComponent<P = {}> = React.ComponentType<P>\n\nexport default function dynamic<P = {}>(\n  dynamicOptions: DynamicOptions<P> | Loader<P>,\n  options?: DynamicOptions<P>\n): React.ComponentType<P> {\n  const loadableOptions: LoadableOptions<P> = {}\n\n  if (typeof dynamicOptions === 'function') {\n    loadableOptions.loader = dynamicOptions\n  }\n\n  const mergedOptions = {\n    ...loadableOptions,\n    ...options,\n  }\n\n  return Loadable({\n    ...mergedOptions,\n    modules: mergedOptions.loadableGenerated?.modules,\n  })\n}\n","'use client'\n\nimport type { ReactElement } from 'react'\nimport { BailoutToCSRError } from './bailout-to-csr'\n\ninterface BailoutToCSRProps {\n  reason: string\n  children: ReactElement\n}\n\n/**\n * If rendered on the server, this component throws an error\n * to signal Next.js that it should bail out to client-side rendering instead.\n */\nexport function BailoutToCSR({ reason, children }: BailoutToCSRProps) {\n  if (typeof window === 'undefined') {\n    throw new BailoutToCSRError(reason)\n  }\n\n  return children\n}\n","import { Suspense, Fragment, lazy } from 'react'\nimport { BailoutToCSR } from './dynamic-bailout-to-csr'\nimport type { ComponentModule } from './types'\nimport { PreloadChunks } from './preload-chunks'\n\n// Normalize loader to return the module as form { default: Component } for `React.lazy`.\n// Also for backward compatible since next/dynamic allows to resolve a component directly with loader\n// Client component reference proxy need to be converted to a module.\nfunction convertModule<P>(\n  mod: React.ComponentType<P> | ComponentModule<P> | undefined\n): {\n  default: React.ComponentType<P>\n} {\n  // Check \"default\" prop before accessing it, as it could be client reference proxy that could break it reference.\n  // Cases:\n  // mod: { default: Component }\n  // mod: Component\n  // mod: { default: proxy(Component) }\n  // mod: proxy(Component)\n  const hasDefault = mod && 'default' in mod\n  return {\n    default: hasDefault\n      ? (mod as ComponentModule<P>).default\n      : (mod as React.ComponentType<P>),\n  }\n}\n\nconst defaultOptions = {\n  loader: () => Promise.resolve(convertModule(() => null)),\n  loading: null,\n  ssr: true,\n}\n\ninterface LoadableOptions {\n  loader?: () => Promise<React.ComponentType<any> | ComponentModule<any>>\n  loading?: React.ComponentType<any> | null\n  ssr?: boolean\n  modules?: string[]\n}\n\nfunction Loadable(options: LoadableOptions) {\n  const opts = { ...defaultOptions, ...options }\n  const Lazy = lazy(() => opts.loader().then(convertModule))\n  const Loading = opts.loading\n\n  function LoadableComponent(props: any) {\n    const fallbackElement = Loading ? (\n      <Loading isLoading={true} pastDelay={true} error={null} />\n    ) : null\n\n    // If it's non-SSR or provided a loading component, wrap it in a suspense boundary\n    const hasSuspenseBoundary = !opts.ssr || !!opts.loading\n    const Wrap = hasSuspenseBoundary ? Suspense : Fragment\n    const wrapProps = hasSuspenseBoundary ? { fallback: fallbackElement } : {}\n    const children = opts.ssr ? (\n      <>\n        {/* During SSR, we need to preload the CSS from the dynamic component to avoid flash of unstyled content */}\n        {typeof window === 'undefined' ? (\n          <PreloadChunks moduleIds={opts.modules} />\n        ) : null}\n        <Lazy {...props} />\n      </>\n    ) : (\n      <BailoutToCSR reason=\"next/dynamic\">\n        <Lazy {...props} />\n      </BailoutToCSR>\n    )\n\n    return <Wrap {...wrapProps}>{children}</Wrap>\n  }\n\n  LoadableComponent.displayName = 'LoadableComponent'\n\n  return LoadableComponent\n}\n\nexport default Loadable\n","'use client'\n\nimport { preload } from 'react-dom'\n\nimport { workAsyncStorage } from '../../../server/app-render/work-async-storage.external'\nimport { encodeURIPath } from '../encode-uri-path'\n\nexport function PreloadChunks({\n  moduleIds,\n}: {\n  moduleIds: string[] | undefined\n}) {\n  // Early return in client compilation and only load requestStore on server side\n  if (typeof window !== 'undefined') {\n    return null\n  }\n\n  const workStore = workAsyncStorage.getStore()\n  if (workStore === undefined) {\n    return null\n  }\n\n  const allFiles = []\n\n  // Search the current dynamic call unique key id in react loadable manifest,\n  // and find the corresponding CSS files to preload\n  if (workStore.reactLoadableManifest && moduleIds) {\n    const manifest = workStore.reactLoadableManifest\n    for (const key of moduleIds) {\n      if (!manifest[key]) continue\n      const chunks = manifest[key].files\n      allFiles.push(...chunks)\n    }\n  }\n\n  if (allFiles.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      {allFiles.map((chunk) => {\n        const href = `${workStore.assetPrefix}/_next/${encodeURIPath(chunk)}`\n        const isCss = chunk.endsWith('.css')\n        // If it's stylesheet we use `precedence` o help hoist with React Float.\n        // For stylesheets we actually need to render the CSS because nothing else is going to do it so it needs to be part of the component tree.\n        // The `preload` for stylesheet is not optional.\n        if (isCss) {\n          return (\n            <link\n              key={chunk}\n              // @ts-ignore\n              precedence=\"dynamic\"\n              href={href}\n              rel=\"stylesheet\"\n              as=\"style\"\n            />\n          )\n        } else {\n          // If it's script we use ReactDOM.preload to preload the resources\n          preload(href, {\n            as: 'script',\n            fetchPriority: 'low',\n          })\n          return null\n        }\n      })}\n    </>\n  )\n}\n","\"use client\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Collapse,\r\n    Grid2 as Grid,\r\n    useMediaQuery,\r\n} from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Save as SaveIcon } from \"@mui/icons-material\";\r\nimport dynamic from \"next/dynamic\";\r\n// const EditableTextField = dynamic(() => import('@/app/components/EditableTextField'), { ssr: false });\r\nconst PdfPreviewButton = dynamic(() => import('@/app/components/PdfPreviewButton'), { ssr: false });\r\nconst DownloadButton = dynamic(() => import('@/app/components/DownloadButton'), { ssr: false });\r\nconst CKTextField = dynamic(() => import('@/app/(pages)/setup/components/CKTextField'), { ssr: false });\r\n\r\nconst imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\n// eslint-disable-next-line\r\nconst hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n// eslint-disable-next-line\r\nconst ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n// eslint-disable-next-line\r\nconst bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`\r\n\r\nconst HtmlTestEditor = () => {\r\n    const [headerContent, setHeaderContent] = useState<string>(\"\");\r\n    const [bodyContent, setBodyContent] = useState<string>(\"\");\r\n    const [footerContent, setFooterContent] = useState<string>(\"\");\r\n    const [collapsed, setCollapsed] = useState<{\r\n        header: boolean;\r\n        body: boolean;\r\n        footer: boolean;\r\n    }>({\r\n        header: true,\r\n        body: true,\r\n        footer: true,\r\n    });\r\n    const [pdfData, setPdfData] = useState<Buffer | null | any>(null);\r\n    const [isClient, setIsClient] = useState(false);\r\n    const isMobile = useMediaQuery((theme) => theme.breakpoints.down('sm'));\r\n    const [isEditorLoading, setIsEditorLoading] = useState<boolean>(true);\r\n    // @typescript-eslint / no - unused - vars\r\n    // const [pdfPrevButton, setPdfPrevButton] = useState(true);\r\n\r\n\r\n    useEffect(() => {\r\n        setIsClient(true); // Ensures PDF rendering runs on the client side\r\n        // setTimeout(() => {\r\n        //     setHeaderContent(hdr);\r\n        //     setBodyContent(bdy);\r\n        //     setFooterContent(ftr);\r\n        // }, 100)\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => setIsEditorLoading(false), 2000); // Simulate loading\r\n        return () => clearTimeout(timeout);\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     // setPdfPrevButton(false);\r\n    //     const tt = setTimeout(() => {\r\n    //         // setPdfPrevButton(true);\r\n    //         clearTimeout(tt);\r\n    //     }, 2000);\r\n    // }, [headerContent, bodyContent, footerContent]);\r\n\r\n    if (!isClient) {\r\n        return null; // Or render a loading state\r\n    }\r\n\r\n\r\n    const handleCollapse = (section: \"header\" | \"body\" | \"footer\") => {\r\n        setCollapsed((prevState) => ({\r\n            ...prevState,\r\n            [section]: !prevState[section],\r\n        }));\r\n    };\r\n    // eslint-disable-next-line\r\n    const handleGeneratePdf = async () => {\r\n        try {\r\n            const response = await axios.post(\"http://localhost:4000/api/v1/pdf-templates/test\", {\r\n                headerContent, bodyContent, footerContent\r\n            });\r\n            const { pdf } = response.data;\r\n            setPdfData(() => pdf); // Base64 PDF data\r\n        } catch (error) {\r\n            console.error(\"Error generating PDF:\", error);\r\n        }\r\n    };\r\n\r\n    const openPdfInNewTab = () => {\r\n        try {\r\n            const binaryPdf = atob(pdfData);\r\n            // Convert the binary string into an ArrayBuffer\r\n            const len = binaryPdf.length;\r\n            const buffer = new Uint8Array(len);\r\n            for (let i = 0; i < len; i++) {\r\n                buffer[i] = binaryPdf.charCodeAt(i);\r\n            }\r\n            const blob = new Blob([buffer], { type: \"application/pdf\" });\r\n            const blobUrl = URL.createObjectURL(blob);\r\n            window.open(blobUrl, \"_blank\");\r\n            setTimeout(() => URL.revokeObjectURL(blobUrl), 60000);\r\n        } catch (error) {\r\n            console.error(\"Error generating PDF:\", error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Box className=\"container mx-auto p-4\">\r\n            {/* <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n                HTML Editor\r\n            </Typography> */}\r\n            <Box mb={4}>\r\n                <Grid\r\n                    container\r\n                    spacing={2} // Spacing between the buttons\r\n                    direction={isMobile ? 'column' : 'row'} // Stack vertically on mobile, horizontally on larger screens\r\n                    alignItems=\"right\" // Align items to the center\r\n                    justifyContent=\"end\" // Center the items horizontally\r\n                >\r\n                    <Grid >\r\n                        <PdfPreviewButton htmlContent={\r\n                            `<div className=\"ck ck-editor__main\">\r\n                                    <div class=\"ck ck-content\">\r\n                                    <div>${headerContent}</div>\r\n                                    ${bodyContent}\r\n                                    <footer>${footerContent}</footer>\r\n                                    </div>\r\n                                    </div>\r\n                            `} id={null} isIconButton={false} organization_id={0} subcategories={[]}/>\r\n                    </Grid>\r\n                    {/* <Grid >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={handleGeneratePdf}\r\n                            size=\"small\"\r\n                        >\r\n                            Generate PDF\r\n                        </Button>\r\n                    </Grid> */}\r\n\r\n                    {pdfData && <> <Grid >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={openPdfInNewTab}\r\n                            size=\"small\"\r\n                        >\r\n                            Open In New Tab\r\n                        </Button>\r\n                    </Grid>\r\n                        <Grid >\r\n                            <DownloadButton pdfData={pdfData} />\r\n                        </Grid></>}\r\n                </Grid>\r\n            </Box>\r\n\r\n            <Box key={'header'} mb={4}>\r\n                <Button onClick={() => handleCollapse('header')}>\r\n                    {'header'.charAt(0).toUpperCase() + 'header'.slice(1)} Editor{\" \"}\r\n                    {collapsed['header'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['header']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                        <Box flex={1}>\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                label={`${'header'.charAt(0).toUpperCase() + 'header'.slice(1)} Content`}\r\n                                defaultValue={headerContent}\r\n                                onChange={(e) => setHeaderContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                            <CKTextField\r\n                                value={headerContent}\r\n                                onChange={setHeaderContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                            />\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `<h1>${headerContent}</h1>`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n                </Collapse>\r\n            </Box>\r\n\r\n            <Box key={'body'} mb={4}>\r\n                <Button onClick={() => handleCollapse('body')}>\r\n                    {'body'.charAt(0).toUpperCase() + 'body'.slice(1)} Editor{\" \"}\r\n                    {collapsed['body'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['body']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                        <Box flex={1}>\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                label={`${'body'.charAt(0).toUpperCase() + 'body'.slice(1)} Content`}\r\n                                defaultValue={bodyContent}\r\n                                onChange={(e) => setBodyContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                            <CKTextField\r\n                                value={bodyContent}\r\n                                onChange={setBodyContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                            />\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `<h1>${bodyContent}</h1>`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n                </Collapse>\r\n            </Box>\r\n\r\n            <Box key={'footer'} mb={4}>\r\n                <Button onClick={() => handleCollapse('footer')}>\r\n                    {'footer'.charAt(0).toUpperCase() + 'footer'.slice(1)} Editor{\" \"}\r\n                    {collapsed['footer'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['footer']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                         <Box flex={1}>\r\n                            {/*<TextField\r\n                                fullWidth\r\n                                label={`${'footer'.charAt(0).toUpperCase() + 'footer'.slice(1)} Content`}\r\n                                defaultValue={footerContent}\r\n                                onChange={(e) => setFooterContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                            <CKTextField\r\n                                value={footerContent}\r\n                                onChange={setFooterContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                            />\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <div\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `<h1>${footerContent}</h1>`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n                </Collapse>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default HtmlTestEditor;\r\n\r\n"],"names":[],"sourceRoot":""}