{"version":3,"file":"static/chunks/app/(pages)/integrations/page-8c8455f024316385.js","mappings":"AAAA","sources":["webpack://_N_E/?196b","webpack://_N_E/./node_modules/@mui/icons-material/esm/CheckCircle.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/ContentCopy.js","webpack://_N_E/./node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js","webpack://_N_E/./node_modules/@mui/material/DialogContentText/DialogContentText.js","webpack://_N_E/./node_modules/@mui/material/IconButton/iconButtonClasses.js","webpack://_N_E/./node_modules/@mui/material/IconButton/IconButton.js","webpack://_N_E/./src/app/services/tokenService.ts","webpack://_N_E/./src/app/(pages)/setup/components/ConfirmButton.tsx","webpack://_N_E/./src/app/(pages)/integrations/page.tsx","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\integrations\\\\page.tsx\");\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckCircle');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2m0 16H8V7h11z\"\n}), 'ContentCopy');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getDialogContentTextUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogContentText', slot);\n}\nconst dialogContentTextClasses = generateUtilityClasses('MuiDialogContentText', ['root']);\nexport default dialogContentTextClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport { getDialogContentTextUtilityClass } from \"./dialogContentTextClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);\n  return {\n    ...classes,\n    // forward classes to the Typography\n    ...composedClasses\n  };\n};\nconst DialogContentTextRoot = styled(Typography, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiDialogContentText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiDialogContentText'\n  });\n  const {\n    children,\n    className,\n    ...ownerState\n  } = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogContentTextRoot, {\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ...props,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogContentText;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getIconButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiIconButton', slot);\n}\nconst iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'loading', 'loadingIndicator', 'loadingWrapper']);\nexport default iconButtonClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { alpha } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport CircularProgress from \"../CircularProgress/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport iconButtonClasses, { getIconButtonUtilityClass } from \"./iconButtonClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    color,\n    edge,\n    size,\n    loading\n  } = ownerState;\n  const slots = {\n    root: ['root', loading && 'loading', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],\n    loadingIndicator: ['loadingIndicator'],\n    loadingWrapper: ['loadingWrapper']\n  };\n  return composeClasses(slots, getIconButtonUtilityClass, classes);\n};\nconst IconButtonRoot = styled(ButtonBase, {\n  name: 'MuiIconButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.loading && styles.loading, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  textAlign: 'center',\n  flex: '0 0 auto',\n  fontSize: theme.typography.pxToRem(24),\n  padding: 8,\n  borderRadius: '50%',\n  color: (theme.vars || theme).palette.action.active,\n  transition: theme.transitions.create('background-color', {\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: props => !props.disableRipple,\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      '&:hover': {\n        backgroundColor: 'var(--IconButton-hoverBg)',\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }, {\n    props: {\n      edge: 'start'\n    },\n    style: {\n      marginLeft: -12\n    }\n  }, {\n    props: {\n      edge: 'start',\n      size: 'small'\n    },\n    style: {\n      marginLeft: -3\n    }\n  }, {\n    props: {\n      edge: 'end'\n    },\n    style: {\n      marginRight: -12\n    }\n  }, {\n    props: {\n      edge: 'end',\n      size: 'small'\n    },\n    style: {\n      marginRight: -3\n    }\n  }]\n})), memoTheme(({\n  theme\n}) => ({\n  variants: [{\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: 'inherit'\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${(theme.vars || theme).palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha((theme.vars || theme).palette[color].main, theme.palette.action.hoverOpacity)\n    }\n  })), {\n    props: {\n      size: 'small'\n    },\n    style: {\n      padding: 5,\n      fontSize: theme.typography.pxToRem(18)\n    }\n  }, {\n    props: {\n      size: 'large'\n    },\n    style: {\n      padding: 12,\n      fontSize: theme.typography.pxToRem(28)\n    }\n  }],\n  [`&.${iconButtonClasses.disabled}`]: {\n    backgroundColor: 'transparent',\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  [`&.${iconButtonClasses.loading}`]: {\n    color: 'transparent'\n  }\n})));\nconst IconButtonLoadingIndicator = styled('span', {\n  name: 'MuiIconButton',\n  slot: 'LoadingIndicator',\n  overridesResolver: (props, styles) => styles.loadingIndicator\n})(({\n  theme\n}) => ({\n  display: 'none',\n  position: 'absolute',\n  visibility: 'visible',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  color: (theme.vars || theme).palette.action.disabled,\n  variants: [{\n    props: {\n      loading: true\n    },\n    style: {\n      display: 'flex'\n    }\n  }]\n}));\n\n/**\n * Refer to the [Icons](/material-ui/icons/) section of the documentation\n * regarding the available icon options.\n */\nconst IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiIconButton'\n  });\n  const {\n    edge = false,\n    children,\n    className,\n    color = 'default',\n    disabled = false,\n    disableFocusRipple = false,\n    size = 'medium',\n    id: idProp,\n    loading = null,\n    loadingIndicator: loadingIndicatorProp,\n    ...other\n  } = props;\n  const id = useId(idProp);\n  const loadingIndicator = loadingIndicatorProp ?? /*#__PURE__*/_jsx(CircularProgress, {\n    \"aria-labelledby\": id,\n    color: \"inherit\",\n    size: 16\n  });\n  const ownerState = {\n    ...props,\n    edge,\n    color,\n    disabled,\n    disableFocusRipple,\n    loading,\n    loadingIndicator,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(IconButtonRoot, {\n    id: id,\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled || loading,\n    ref: ref,\n    ...other,\n    ownerState: ownerState,\n    children: [typeof loading === 'boolean' &&\n    /*#__PURE__*/\n    // use plain HTML span to minimize the runtime overhead\n    _jsx(\"span\", {\n      className: classes.loadingWrapper,\n      style: {\n        display: 'contents'\n      },\n      children: /*#__PURE__*/_jsx(IconButtonLoadingIndicator, {\n        className: classes.loadingIndicator,\n        ownerState: ownerState,\n        children: loading && loadingIndicator\n      })\n    }), children]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? IconButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The icon to display.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    const found = React.Children.toArray(props.children).some(child => /*#__PURE__*/React.isValidElement(child) && child.props.onClick);\n    if (found) {\n      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the loading indicator is visible and the button is disabled.\n   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).\n   * @default null\n   */\n  loading: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in loading state.\n   * The node should contain an element with `role=\"progressbar\"` with an accessible name.\n   * By default, it renders a `CircularProgress` that is labeled by the button itself.\n   * @default <CircularProgress color=\"inherit\" size={16} />\n   */\n  loadingIndicator: PropTypes.node,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default IconButton;","import { API } from \"./api\";\r\n\r\nexport const generateTokens = async (organizationId: string, token: string) => {\r\n    return API.post(\r\n        `/tokens/generate`,\r\n        {},  // Empty body, no data is being sent\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n            params: {\r\n                organizationId: organizationId,  // Pass organizationId as a query parameter\r\n            }\r\n        }\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\r\n\r\ninterface ConfirmButtonProps {\r\n    title?: string;\r\n    description?: string;\r\n    onConfirm: (data: any) => void;\r\n    buttonText: string;\r\n    buttonProps?: React.ComponentProps<typeof Button>;\r\n    confirmData?: any; // Data to parse and pass to the confirm handler\r\n}\r\n\r\n/*usage \r\n    < ConfirmButton\r\ntitle = \"Delete Item\"\r\ndescription = \"Are you sure you want to delete this item? This action cannot be undone.\"\r\nonConfirm = { generateToken }\r\nbuttonText = \"Delete\"\r\nconfirmData = {{ }}\r\nbuttonProps = {{ variant: 'contained', color: 'error' }}\r\n            />\r\n*/\r\n\r\nconst ConfirmButton: React.FC<ConfirmButtonProps> = ({\r\n    title = \"Confirm Action\",\r\n    description = \"Are you sure you want to proceed?\",\r\n    onConfirm,\r\n    buttonText,\r\n    buttonProps,\r\n    confirmData,\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleConfirm = () => {\r\n        onConfirm(confirmData); // Pass parsed data to the confirm handler\r\n        handleClose();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"outlined\" size='small' color=\"primary\" onClick={handleOpen} {...buttonProps}>\r\n                {buttonText }\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose}>\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>{description}</DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"secondary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirm} color=\"primary\">\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ConfirmButton;\r\n","'use client'\r\n\r\nimport { Button, Typography, Box, IconButton, Tooltip, useTheme } from '@mui/material';\r\nimport { useEffect, useState } from 'react';\r\nimport { ContentCopy as ContentCopyIcon, CheckCircle as CheckCircleIcon } from '@mui/icons-material';\r\nimport { generateTokens } from '@/app/services/tokenService';\r\nimport { addOrganizationAll, clearOrganizationState, getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '@/redux/store';\r\nimport ConfirmButton from '../setup/components/ConfirmButton';\r\n\r\nexport default function Page() {\r\n    const [token_, setToken] = useState('');\r\n    const [curlCommand, setCurlCommand] = useState('');\r\n    const [curlCommand2, setCurlCommand2] = useState('');\r\n    const [copiedToken, setCopiedToken] = useState(false); // Track if token was copied\r\n    const [copiedCurl, setCopiedCurl] = useState(false); // Track if cURL command was copied\r\n    const [copiedCurl2, setCopiedCurl2] = useState(false); // Track if cURL command was copied\r\n    const [tooltipToken, setTooltipToken] = useState('Copy'); // Tooltip text for Token\r\n    const [tooltipCurl, setTooltipCurl] = useState('Copy'); // Tooltip text for cURL Command\r\n    const [tooltipCurl2, setTooltipCurl2] = useState('Copy'); // Tooltip text for cURL Command\r\n\r\n    const theme = useTheme();\r\n    const { organizations } = useSelector((state: any) => state.organization);\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const dispatch = useDispatch();\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    // Define styles that adjust for dark and light modes\r\n    const backgroundColor = theme.palette.mode === 'dark' ? '#333' : '#fff';\r\n    const textColor = theme.palette.mode === 'dark' ? '#fff' : '#000';\r\n    const borderColor = theme.palette.mode === 'dark' ? '#444' : '#ccc';\r\n\r\n    useEffect(() => {\r\n        if (currentOrg?.refresh_token) {\r\n            setToken(currentOrg.refresh_token);\r\n            setCurls(currentOrg.refresh_token);\r\n        } else {\r\n            setToken(''); setCurlCommand('');\r\n        }\r\n    }, [currentOrg?.id]);\r\n\r\n\r\n    const generateToken = async () => {\r\n        // Simulate token generation\r\n        generateTokens(currentOrg?.id, token).then((res: any) => {\r\n            if (res?.status == 200) {\r\n                // console.log(res)\r\n                const newToken = res.data?.refreshToken;\r\n                setToken(newToken);\r\n                setCurls(newToken)\r\n\r\n                // Update the organizations state with the new token\r\n                const updatedOrgs = organizations.map((org: any) =>\r\n                    org.id === currentOrg.id ? { ...org, refresh_token: newToken } : org\r\n                );\r\n                dispatch(clearOrganizationState());\r\n                dispatch(addOrganizationAll(updatedOrgs));\r\n            }\r\n        }).catch((err: any) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n\r\n    const setCurls = (curlToken: string) => {\r\n        setCurlCommand(`curl --location 'http://localhost:4000/api/v2/pdf/convert/${'{templateId}'}' \\\r\n                        --header 'Content-Type: application/json' \\\r\n                        --header 'Authorization: Bearer ${curlToken}' \\\r\n                        --data-raw '{\r\n                            \"subcategoriesFilter\": [],\r\n                            \"allowAllSections\": false,\r\n                            \"jsonData\": {}\r\n                        }'\r\n                        `);\r\n        setCurlCommand2(`curl --location 'http://localhost:4000/api/v2/pdf/convert/by-addon' \\\r\n                        --header 'Content-Type: application/json' \\\r\n                        --header 'Authorization: Bearer ${curlToken}' \\\r\n                        --data-raw '{\r\n                            \"addonName\": \"${'{addonName}'}\",\r\n                            \"typeStatus\": \"${'{typeStatus}'}\",\r\n                            \"subcategoriesFilter\": [],\r\n                            \"allowAllSections\": false,\r\n                            \"jsonData\": {}\r\n                        }'\r\n                        `);\r\n    }\r\n\r\n    const handleCopy = (text: any, type: any) => {\r\n        // Copy the text to the clipboard\r\n        navigator.clipboard.writeText(text)\r\n            .then(() => {\r\n                if (type === 'token') {\r\n                    setCopiedToken(true);\r\n                    setTooltipToken('Copied');\r\n                    setTimeout(() => {\r\n                        setCopiedToken(false);\r\n                        setTooltipToken('Copy');\r\n                    }, 2000); // Reset tooltip after 2 seconds\r\n                } else if (type === 'curl') {\r\n                    setCopiedCurl(true);\r\n                    setTooltipCurl('Copied');\r\n                    setTimeout(() => {\r\n                        setCopiedCurl(false);\r\n                        setTooltipCurl('Copy');\r\n                    }, 2000); // Reset tooltip after 2 seconds\r\n                } else if (type === 'curl2') {\r\n                    setCopiedCurl2(true);\r\n                    setTooltipCurl2('Copied');\r\n                    setTimeout(() => {\r\n                        setCopiedCurl2(false);\r\n                        setTooltipCurl2('Copy');\r\n                    }, 2000); // Reset tooltip after 2 seconds\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.error('Error copying text: ', err);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ p: 3 }}>\r\n            {/* <Typography variant=\"h6\">Integration Page</Typography> */}\r\n            {!token_ ? <Button variant=\"outlined\" size='small' color=\"primary\" onClick={generateToken} sx={{ mt: 2 }} disabled={!currentOrg?.id}>\r\n                Generate Refresh Token\r\n            </Button> :\r\n            <ConfirmButton\r\n                title=\"Confirm Item\"\r\n                description=\"Are you sure you want to proceed ? This action cannot be undone.\"\r\n                onConfirm={generateToken}\r\n                buttonText=\"Renew Refresh Token\"\r\n                confirmData={{}}\r\n                // buttonProps={{ variant: 'contained', color: 'error' }}\r\n            />}\r\n            {token_ && (\r\n                <Box sx={{ mt: 2 }}>\r\n                    <Box sx={{ width: '100%', mt: 2, borderRadius: '8px', border: `1px solid ${borderColor}` }}>\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            sx={{\r\n                                padding: 2,\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#f5f5f5',\r\n                                borderTopLeftRadius: '8px',\r\n                                borderTopRightRadius: '8px',\r\n                                fontWeight: 600,\r\n                                color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n                            }}\r\n                        >\r\n                            Generated Token:\r\n                        </Typography>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center',\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#fafafa',\r\n                                padding: 2,\r\n                                borderBottom: `1px solid ${borderColor}`,\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    flex: 1,\r\n                                    backgroundColor: backgroundColor,\r\n                                    fontFamily: 'monospace',\r\n                                    fontSize: '14px',\r\n                                    padding: '10px',\r\n                                    borderRadius: '4px',\r\n                                    overflowWrap: 'break-word',\r\n                                    wordBreak: 'break-word',\r\n                                    color: textColor,\r\n                                }}\r\n                            >\r\n                                <code>{token_}</code>\r\n                            </Box>\r\n                            <Tooltip title={tooltipToken}>\r\n                                <IconButton onClick={() => handleCopy(token_, 'token')}>\r\n                                    {copiedToken ? <CheckCircleIcon color=\"success\" /> : <ContentCopyIcon />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ width: '100%', mt: 2, borderRadius: '8px', border: `1px solid ${borderColor}` }}>\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            sx={{\r\n                                padding: 2,\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#f5f5f5',\r\n                                borderTopLeftRadius: '8px',\r\n                                borderTopRightRadius: '8px',\r\n                                fontWeight: 600,\r\n                                color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n                            }}\r\n                        >\r\n                            cURL Command: Using Id\r\n                        </Typography>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center',\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#fafafa',\r\n                                padding: 2,\r\n                                borderBottom: `1px solid ${borderColor}`,\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    flex: 1,\r\n                                    backgroundColor: backgroundColor,\r\n                                    fontFamily: 'monospace',\r\n                                    fontSize: '14px',\r\n                                    padding: '10px',\r\n                                    borderRadius: '4px',\r\n                                    overflowWrap: 'break-word',\r\n                                    wordBreak: 'break-word',\r\n                                    color: textColor,\r\n                                }}\r\n                            >\r\n                                <code>{curlCommand}</code>\r\n                            </Box>\r\n                            <Tooltip title={tooltipCurl}>\r\n                                <IconButton onClick={() => handleCopy(curlCommand, 'curl')}>\r\n                                    {copiedCurl ? <CheckCircleIcon color=\"success\" /> : <ContentCopyIcon />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box sx={{ width: '100%', mt: 2, borderRadius: '8px', border: `1px solid ${borderColor}` }}>\r\n                        <Typography\r\n                            variant=\"h6\"\r\n                            sx={{\r\n                                padding: 2,\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#f5f5f5',\r\n                                borderTopLeftRadius: '8px',\r\n                                borderTopRightRadius: '8px',\r\n                                fontWeight: 600,\r\n                                color: theme.palette.mode === 'dark' ? '#fff' : '#000',\r\n                            }}\r\n                        >\r\n                            cURL Command: Using Addon & Type/Status\r\n                        </Typography>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center',\r\n                                backgroundColor: theme.palette.mode === 'dark' ? '#444' : '#fafafa',\r\n                                padding: 2,\r\n                                borderBottom: `1px solid ${borderColor}`,\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    flex: 1,\r\n                                    backgroundColor: backgroundColor,\r\n                                    fontFamily: 'monospace',\r\n                                    fontSize: '14px',\r\n                                    padding: '10px',\r\n                                    borderRadius: '4px',\r\n                                    overflowWrap: 'break-word',\r\n                                    wordBreak: 'break-word',\r\n                                    color: textColor,\r\n                                }}\r\n                            >\r\n                                <code>{curlCommand2}</code>\r\n                            </Box>\r\n                            <Tooltip title={tooltipCurl2}>\r\n                                <IconButton onClick={() => handleCopy(curlCommand2, 'curl2')}>\r\n                                    {copiedCurl2 ? <CheckCircleIcon color=\"success\" /> : <ContentCopyIcon />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}