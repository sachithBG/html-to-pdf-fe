{"version":3,"file":"static/chunks/app/(pages)/organization/page-3d14c7003c69a8a2.js","mappings":"AAAA","sources":["webpack://_N_E/?7056","webpack://_N_E/./node_modules/@mui/icons-material/esm/Add.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Close.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Delete.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Edit.js","webpack://_N_E/./node_modules/@mui/lab/LoadingButton/loadingButtonClasses.js","webpack://_N_E/./node_modules/@mui/lab/LoadingButton/LoadingButton.js","webpack://_N_E/./src/app/(pages)/organization/page.tsx","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/mediaService.ts","webpack://_N_E/./src/app/services/organizationService.ts","webpack://_N_E/./src/app/utils/constant.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\organization\\\\page.tsx\");\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Edit');","import generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nexport function getLoadingButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiLoadingButton', slot);\n}\nconst loadingButtonClasses = generateUtilityClasses('MuiLoadingButton', ['root', 'label', 'loading', 'loadingIndicator', 'loadingIndicatorCenter', 'loadingIndicatorStart', 'loadingIndicatorEnd', 'endIconLoadingEnd', 'startIconLoadingStart']);\nexport default loadingButtonClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@mui/utils';\nimport { capitalize, unstable_useId as useId, unstable_memoTheme as memoTheme } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { useDefaultProps } from '@mui/material/DefaultPropsProvider';\nimport Button from '@mui/material/Button';\nimport { ButtonGroupContext } from '@mui/material/ButtonGroup';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport resolveProps from '@mui/utils/resolveProps';\nimport { styled } from \"../zero-styled/index.js\";\nimport loadingButtonClasses, { getLoadingButtonUtilityClass } from \"./loadingButtonClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    loading,\n    loadingPosition,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', loading && 'loading'],\n    label: ['label'],\n    startIcon: [loading && `startIconLoading${capitalize(loadingPosition)}`],\n    endIcon: [loading && `endIconLoading${capitalize(loadingPosition)}`],\n    loadingIndicator: ['loadingIndicator', loading && `loadingIndicator${capitalize(loadingPosition)}`]\n  };\n  const composedClasses = composeClasses(slots, getLoadingButtonUtilityClass, classes);\n  return {\n    ...classes,\n    // forward the outlined, color, etc. classes to Button\n    ...composedClasses\n  };\n};\n\n// TODO use `import rootShouldForwardProp from '../styles/rootShouldForwardProp';` once move to core\nconst rootShouldForwardProp = prop => prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as' && prop !== 'classes';\nconst LoadingButtonRoot = styled(Button, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiLoadingButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    return [styles.root, styles.startIconLoadingStart && {\n      [`& .${loadingButtonClasses.startIconLoadingStart}`]: styles.startIconLoadingStart\n    }, styles.endIconLoadingEnd && {\n      [`& .${loadingButtonClasses.endIconLoadingEnd}`]: styles.endIconLoadingEnd\n    }];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-flex',\n  [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n    transition: theme.transitions.create(['opacity'], {\n      duration: theme.transitions.duration.short\n    }),\n    opacity: 0\n  },\n  variants: [{\n    props: {\n      loadingPosition: 'center'\n    },\n    style: {\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {\n        duration: theme.transitions.duration.short\n      }),\n      [`&.${loadingButtonClasses.loading}`]: {\n        color: 'transparent'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.loadingPosition === 'start' && ownerState.fullWidth,\n    style: {\n      [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n        transition: theme.transitions.create(['opacity'], {\n          duration: theme.transitions.duration.short\n        }),\n        opacity: 0,\n        marginRight: -8\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.loadingPosition === 'end' && ownerState.fullWidth,\n    style: {\n      [`& .${loadingButtonClasses.startIconLoadingStart}, & .${loadingButtonClasses.endIconLoadingEnd}`]: {\n        transition: theme.transitions.create(['opacity'], {\n          duration: theme.transitions.duration.short\n        }),\n        opacity: 0,\n        marginLeft: -8\n      }\n    }\n  }]\n})));\nconst LoadingButtonLoadingIndicator = styled('span', {\n  name: 'MuiLoadingButton',\n  slot: 'LoadingIndicator',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.loadingIndicator, styles[`loadingIndicator${capitalize(ownerState.loadingPosition)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  position: 'absolute',\n  visibility: 'visible',\n  display: 'flex',\n  variants: [{\n    props: {\n      loadingPosition: 'start',\n      size: 'small'\n    },\n    style: {\n      left: 10\n    }\n  }, {\n    props: ({\n      loadingPosition,\n      ownerState\n    }) => loadingPosition === 'start' && ownerState.size !== 'small',\n    style: {\n      left: 14\n    }\n  }, {\n    props: {\n      variant: 'text',\n      loadingPosition: 'start'\n    },\n    style: {\n      left: 6\n    }\n  }, {\n    props: {\n      loadingPosition: 'center'\n    },\n    style: {\n      left: '50%',\n      transform: 'translate(-50%)',\n      color: (theme.vars || theme).palette.action.disabled\n    }\n  }, {\n    props: {\n      loadingPosition: 'end',\n      size: 'small'\n    },\n    style: {\n      right: 10\n    }\n  }, {\n    props: ({\n      loadingPosition,\n      ownerState\n    }) => loadingPosition === 'end' && ownerState.size !== 'small',\n    style: {\n      right: 14\n    }\n  }, {\n    props: {\n      variant: 'text',\n      loadingPosition: 'end'\n    },\n    style: {\n      right: 6\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.loadingPosition === 'start' && ownerState.fullWidth,\n    style: {\n      position: 'relative',\n      left: -10\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.loadingPosition === 'end' && ownerState.fullWidth,\n    style: {\n      position: 'relative',\n      right: -10\n    }\n  }]\n})));\nconst LoadingButtonLabel = styled('span', {\n  name: 'MuiLoadingButton',\n  slot: 'Label',\n  overridesResolver: (props, styles) => {\n    return [styles.label];\n  }\n})({\n  display: 'inherit',\n  alignItems: 'inherit',\n  justifyContent: 'inherit'\n});\nconst LoadingButton = /*#__PURE__*/React.forwardRef(function LoadingButton(inProps, ref) {\n  const contextProps = React.useContext(ButtonGroupContext);\n  const resolvedProps = resolveProps(contextProps, inProps);\n  const props = useDefaultProps({\n    props: resolvedProps,\n    name: 'MuiLoadingButton'\n  });\n  const {\n    children,\n    disabled = false,\n    id: idProp,\n    loading = false,\n    loadingIndicator: loadingIndicatorProp,\n    loadingPosition = 'center',\n    variant = 'text',\n    ...other\n  } = props;\n  const id = useId(idProp);\n  const loadingIndicator = loadingIndicatorProp ?? /*#__PURE__*/_jsx(CircularProgress, {\n    \"aria-labelledby\": id,\n    color: \"inherit\",\n    size: 16\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    loading,\n    loadingIndicator,\n    loadingPosition,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const loadingButtonLoadingIndicator = loading ? /*#__PURE__*/_jsx(LoadingButtonLoadingIndicator, {\n    className: classes.loadingIndicator,\n    ownerState: ownerState,\n    children: loadingIndicator\n  }) : null;\n  return /*#__PURE__*/_jsxs(LoadingButtonRoot, {\n    disabled: disabled || loading,\n    id: id,\n    ref: ref,\n    ...other,\n    variant: variant,\n    classes: classes,\n    ownerState: ownerState,\n    children: [ownerState.loadingPosition === 'end' ? /*#__PURE__*/_jsx(LoadingButtonLabel, {\n      className: classes.label,\n      children: children\n    }) : loadingButtonLoadingIndicator, ownerState.loadingPosition === 'end' ? loadingButtonLoadingIndicator : /*#__PURE__*/_jsx(LoadingButtonLabel, {\n      className: classes.label,\n      children: children\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? LoadingButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the loading indicator is shown and the button becomes disabled.\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in loading state.\n   * The node should contain an element with `role=\"progressbar\"` with an accessible name.\n   * By default we render a `CircularProgress` that is labelled by the button itself.\n   * @default <CircularProgress color=\"inherit\" size={16} />\n   */\n  loadingIndicator: PropTypes.node,\n  /**\n   * The loading indicator can be positioned on the start, end, or the center of the button.\n   * @default 'center'\n   */\n  loadingPosition: chainPropTypes(PropTypes.oneOf(['start', 'end', 'center']), props => {\n    if (props.loadingPosition === 'start' && !props.startIcon) {\n      return new Error(`MUI: The loadingPosition=\"start\" should be used in combination with startIcon.`);\n    }\n    if (props.loadingPosition === 'end' && !props.endIcon) {\n      return new Error(`MUI: The loadingPosition=\"end\" should be used in combination with endIcon.`);\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default LoadingButton;","'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    TextField,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    IconButton,\r\n    Switch,\r\n    Divider,\r\n    FormGroup,\r\n    Box,\r\n    Chip,\r\n    Grid2,\r\n    Avatar,\r\n    Popover,\r\n    Paper\r\n} from '@mui/material';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { createOrganization, findOrganizationsByUserId, setDefaultOrganization, updateOrg } from '@/app/services/organizationService';\r\nimport { RootState } from '@/redux/store';\r\nimport { addOrganization, addOrganizationAll, clearOrganizationState, Organization, updateOrganization } from '@/redux/slice/organizationSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createAddon, deleteAddon, findAllAddons, updateAddon } from '@/app/services/addonService';\r\nimport { uploadOrgLogo } from '@/app/services/mediaService';\r\nimport { isValidS3Url } from '@/app/utils/constant';\r\n\r\nexport default function OrganizationPage() {\r\n    const [organizations, setOrganizations] = useState<Organization[]>([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [currentOrg, setCurrentOrg] = useState<Partial<Organization> | Organization | any>({});\r\n    const [errors, setErrors] = useState<{ name?: string, addonName?: string }>({});\r\n    const [addons, setAddons] = useState<any[]>([]);\r\n    const [newAddon, setNewAddon] = useState<string>('');\r\n    const [loadingSave, setLoadingSave] = useState(false);\r\n    const [loadingAddons, setLoadingAddons] = useState(false);\r\n    const [saveSuccess, setSaveSuccess] = useState<boolean | null>(null);\r\n    const [addonsSuccess, setAddonsSuccess] = useState<boolean | null>(null);\r\n\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [editAddon, setEditAddon] = useState<{ id: number; name: string } | null | any>(null);\r\n    const [deleteAnchorEl, setDeleteAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [addonToDelete, setAddonToDelete] = useState<number | null>(null);\r\n\r\n    const { token, user } = useSelector((state: RootState) => state.session);\r\n    const dispatch = useDispatch();\r\n\r\n    const avatarUrl =\r\n        typeof currentOrg?.logo === 'string' && isValidS3Url(currentOrg?.logo)\r\n            ? currentOrg?.logo // Use the validated URL\r\n            : currentOrg?.logo instanceof File\r\n                ? URL.createObjectURL(currentOrg?.logo) // Use a blob URL for a File object\r\n                : undefined;\r\n\r\n    useEffect(() => {\r\n        // Fetch organizations from API\r\n        console.log(user, 'Session');\r\n        if (user?.id) {\r\n            // API call to get organizations\r\n            findOrganizationsByUserId(user?.id, token)\r\n                .then((res: any) => {\r\n                    // console.log(res.data, 'Organizations fetched2');\r\n                    if (res.data) {\r\n                        dispatch(clearOrganizationState());\r\n                        dispatch(addOrganizationAll(res.data));\r\n                        setOrganizations(res.data);\r\n                    }\r\n                }).catch((err: any) => {\r\n                    console.error(err);\r\n                });\r\n        }\r\n    }, [user?.id]);\r\n\r\n    const handleOpen = (org?: Organization) => {\r\n        setCurrentOrg(org || {});\r\n        setErrors({});\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setCurrentOrg({});\r\n        setErrors({});\r\n        setSaveSuccess(null);\r\n    };\r\n\r\n    const validate = () => {\r\n        const tempErrors: { name?: string } = {};\r\n        if (!currentOrg.name) tempErrors.name = \"Name is required\";\r\n        setErrors(tempErrors);\r\n        return Object.keys(tempErrors).length === 0;\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (!validate()) return;\r\n\r\n        const uploadImage = async (file: any) => {\r\n            // Implement the image upload logic here\r\n            // This function should return a promise that resolves with the uploaded image URL\r\n            if (file) console.log('file exsit');\r\n            return await uploadOrgLogo(currentOrg?.id, file!, token);\r\n        };\r\n        \r\n\r\n        const saveOrganization = (org: Organization | any) => {\r\n            if (org.id) {\r\n                // Update organization API call\r\n                // org = { ...org, userId: session?.user?.id };\r\n                updateOrg(org, token)\r\n                    .then((res: any) => {\r\n                        console.log(res);\r\n                        if (res.status == 200) {\r\n                            dispatch(updateOrganization(org));\r\n                            setOrganizations(organizations.map((o) => (o.id === org.id ? org : o)));\r\n                        }\r\n                    }).catch((err: any) => {\r\n                        console.error(err);\r\n                    });\r\n            } else {\r\n                // Create organization API call\r\n                org = { ...org, user_id: user?.id };\r\n                createOrganization(org, token)\r\n                    .then((res: any) => {\r\n                        if (res.data) {\r\n                            dispatch(addOrganization(res.data));\r\n                            setOrganizations([...organizations, res.data]);\r\n                        }\r\n                    }).catch((err: any) => {\r\n                        console.error(err);\r\n                    });\r\n            }\r\n            // handleClose();\r\n        };\r\n\r\n        if (typeof currentOrg?.logo === 'string' && !isValidS3Url(currentOrg.logo)) {// && currentOrg.logo.startsWith('blob:')\r\n            // If the logo is a blob URL, upload the image first\r\n            setLoadingSave(true);\r\n            uploadImage(currentOrg.logo).then((uploadedImageUrl) => {\r\n                // console.log(uploadedImageUrl)\r\n                const updatedOrg: any = { ...currentOrg, logo: uploadedImageUrl?.url || currentOrg.logo };\r\n                saveOrganization(updatedOrg);\r\n                setLoadingSave(false);\r\n                setSaveSuccess(true);\r\n            }).catch((err: any) => {\r\n                console.error('Image upload failed', err);\r\n                setLoadingSave(false);\r\n                setSaveSuccess(false);\r\n            });\r\n        } else {\r\n            // If the logo is already a URL, proceed with saving the organization\r\n            saveOrganization(currentOrg);\r\n        }\r\n    };\r\n\r\n    const setDefault = (orgId: number) => {\r\n        // Implement the setDefault API call here\r\n        // This function should update the default organization\r\n        setDefaultOrganization(orgId, token).then((res: any) => {\r\n            if (res?.status == 200) {\r\n                const updatedOrgs = organizations.map((org) => ({ ...org, is_default: org.id === orgId }));\r\n                setOrganizations(() => updatedOrgs);\r\n                dispatch(clearOrganizationState());\r\n                dispatch(addOrganizationAll(updatedOrgs));\r\n            }\r\n        }).catch((err: any) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n\r\n    const handleSaveAddons = () => {\r\n        setLoadingAddons(true);\r\n        handleAddAddon();\r\n        // Implement the save addons logic here\r\n        // This function should update the addons for the organization\r\n        setTimeout(() => {\r\n            setAddonsSuccess(true);\r\n            setLoadingAddons(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleAddAddon = async () => {\r\n        if (!newAddon.match(/^[A-Z_]+$/)) {\r\n            setErrors({ addonName: 'Addon name must be in capital letters and underscores only' });\r\n            return;\r\n        }\r\n        const res = await createAddon(newAddon, currentOrg?.id || 0, token);\r\n        console.log(res.data)\r\n        setAddons([...addons, { id: res.data.id, name: newAddon, organization_id: currentOrg.id }]);\r\n        setNewAddon('');\r\n    };\r\n\r\n    const handleDeleteAddon = async (addonId: number) => {\r\n        const res = await deleteAddon(addonId, token);\r\n        if (res.status == 204) {\r\n            setAddons(addons.filter((addon) => addon.id !== addonId));\r\n        }\r\n    };\r\n\r\n    const handleEditClick = (event: React.MouseEvent<HTMLElement>, addon: { id: number; name: string }) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setEditAddon(addon);\r\n    };\r\n\r\n    const handleEditClose = () => {\r\n        setAnchorEl(null);\r\n        setEditAddon(null);\r\n    };\r\n\r\n    const handleEditSave = async () => {\r\n        if (editAddon) {\r\n            const res = await updateAddon(editAddon, token);\r\n            if (res.status == 200) {\r\n                setAddons(addons.map((addon) => (addon.id === editAddon.id ? { ...addon, name: editAddon.name } : addon)));\r\n                handleEditClose();\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteClick = (event: React.MouseEvent<HTMLElement>, addonId: number) => {\r\n        setDeleteAnchorEl(event.currentTarget);\r\n        setAddonToDelete(addonId);\r\n    };\r\n\r\n    const handleDeleteClose = () => {\r\n        setDeleteAnchorEl(null);\r\n        setAddonToDelete(null);\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n        if (addonToDelete !== null) {\r\n            handleDeleteAddon(addonToDelete);\r\n            handleDeleteClose();\r\n        }\r\n    };\r\n\r\n    const openPopover = Boolean(anchorEl);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n\r\n    const openDelete = Boolean(deleteAnchorEl);\r\n    const idDelete = openDelete ? 'delete-popover' : undefined;\r\n\r\n    useEffect(() => {\r\n        const fetchAddons = async () => {\r\n            const res = await findAllAddons(currentOrg.id, token);\r\n            if (res.status == 200) {\r\n                setAddons(() => res.data)\r\n            }\r\n        }\r\n        if (currentOrg.id && token) fetchAddons();\r\n    }, [currentOrg.id])\r\n\r\n    return (\r\n        <Container>\r\n            {/* <Typography variant=\"h4\" gutterBottom>\r\n                Manage Organizations\r\n            </Typography> */}\r\n            <Button variant=\"outlined\" size='small' color=\"primary\" sx={{ float: 'right' }} startIcon={<AddIcon />} onClick={() => handleOpen()}>\r\n                New\r\n            </Button>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Default</TableCell>\r\n                        <TableCell>Created At</TableCell>\r\n                        <TableCell>Actions</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {organizations.map((org) => (\r\n                        <TableRow key={org.id}>\r\n                            <TableCell>{org.name}</TableCell>\r\n                            <TableCell><Switch\r\n                                checked={org.is_default}\r\n                                onChange={() => setDefault(org.id)}\r\n                                color=\"primary\"\r\n                            /></TableCell>\r\n                            <TableCell>{new Date(org.created_at).toLocaleDateString()}</TableCell>\r\n                            <TableCell>\r\n                                <IconButton onClick={() => handleOpen(org)}>\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n            <Dialog  open={open} onClose={(event, reason) => {\r\n                if (reason !== 'backdropClick') {\r\n                    handleClose();\r\n                }\r\n            }} hideBackdrop={false} maxWidth='md' fullWidth>\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={() => handleClose()}\r\n                    sx={(theme) => ({\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: theme.palette.grey[500],\r\n                    })}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n\r\n                <DialogTitle>{currentOrg.id ? 'Edit Organization' : 'Add Organization'}</DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Name\"\r\n                        fullWidth\r\n                        value={currentOrg.name || ''}\r\n                        onChange={(e) => setCurrentOrg({ ...currentOrg, name: e.target.value })}\r\n                        error={!!errors.name}\r\n                        helperText={errors.name}\r\n                    />\r\n                </DialogContent>\r\n                <DialogContent sx={{ justifyItems: 'center' }}>\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        type=\"file\"\r\n                        onChange={(e: any) => {\r\n                            const file = e.target?.files[0];\r\n                            setCurrentOrg({ ...currentOrg, logo: file });\r\n                            // if (file && false) {\r\n                            //     const reader = new FileReader();\r\n                            //     reader.onloadend = () => {\r\n                            //         const logoUrl = URL.createObjectURL(file);\r\n                            //         setCurrentOrg({ ...currentOrg, logo: logoUrl });\r\n                            //     };\r\n                            //     reader.readAsDataURL(file);\r\n                            // }\r\n                        }}\r\n                        // style={{ display: 'none' }}\r\n                        id=\"logo-upload\"\r\n                    />\r\n\r\n                    <label htmlFor=\"logo-upload\" style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n                        <IconButton component=\"span\">\r\n                            <Avatar\r\n                                src={avatarUrl}\r\n                                alt=\"logo\"\r\n                                sx={{ width: 100, height: 100 }}\r\n                            >\r\n                                {!currentOrg.logo && currentOrg.name?.charAt(0)}\r\n                            </Avatar>\r\n                        </IconButton>\r\n                    </label>\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <LoadingButton\r\n                        onClick={handleSave}\r\n                        color=\"primary\"\r\n                        loading={loadingSave}\r\n                        startIcon={saveSuccess === true ? <CheckCircleIcon color=\"success\" /> : saveSuccess === false ? <ErrorIcon color=\"error\" /> : null}\r\n                        sx={{ float: 'right' }}\r\n                        variant='outlined'\r\n                        size='small'\r\n                    >\r\n                        Save\r\n                    </LoadingButton>\r\n                    <Divider sx={{ margin: '16px 0', mt: 5 }} />\r\n                    {currentOrg.id && <Box>\r\n                        <Typography variant=\"h6\" gutterBottom>\r\n                            Manage Addons\r\n                        </Typography>\r\n\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            label=\"Addon Name\"\r\n                            fullWidth\r\n                            value={newAddon}\r\n                            onChange={(e) => {\r\n                                const value = e.target.value.toUpperCase().replace(/[^A-Z_]/g, '_');\r\n                                setNewAddon(value);\r\n                                setErrors({ addonName: undefined });\r\n                                setAddonsSuccess(null);\r\n                            }}\r\n                            error={!!errors.addonName}\r\n                            helperText={errors.addonName}\r\n                        />\r\n                        {/* <LoadingButton\r\n                            onClick={handleAddAddon}\r\n                            color=\"primary\"\r\n                            loading={loadingAddons}\r\n                            startIcon={addonsSuccess === true ? <CheckCircleIcon color=\"success\" /> : addonsSuccess === false ? <ErrorIcon color=\"error\" /> : null}\r\n                            sx={{ mr: 1 }}\r\n                        >\r\n                            Add Addon\r\n                        </LoadingButton>| */}\r\n                        <Grid2 sx={{ width: '100%' }}>\r\n                            <LoadingButton\r\n                                onClick={handleSaveAddons}\r\n                                color=\"primary\"\r\n                                loading={loadingAddons}\r\n                                startIcon={addonsSuccess === true ? <CheckCircleIcon color=\"success\" /> : addonsSuccess === false ? <ErrorIcon color=\"error\" /> : null}\r\n                                sx={{ m: 1, float: 'right' }}\r\n                                size='small'\r\n                                variant='outlined'\r\n                            >\r\n                                Save\r\n                            </LoadingButton>\r\n                        </Grid2>\r\n                        <FormGroup sx={{ width: '100%' }}>\r\n                            <Grid2 container direction=\"row\" spacing={1} mt={1} sx={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                {addons.map((addon) => (\r\n                                    <Paper elevation={3} key={addon.id} sx={{\r\n                                        display: 'flex', alignItems: 'center', mb: 1, p: 0,\r\n                                        pl: .5, width: 'min-content',\r\n                                        // borderRadius: '100px 0 0 100px',\r\n                                    }} >\r\n                                        <Chip\r\n                                            key={addon.id}\r\n                                            label={addon.name}\r\n                                            onDelete={(event) => handleEditClick(event, addon)}\r\n                                            deleteIcon={<EditIcon sx={(theme) => ({\r\n                                                color: theme.palette.mode === 'light' ? theme.palette.success.dark : theme.palette.secondary.light,\r\n                                            })} />}\r\n                                            sx={{ ml: -.5, border: 'none' }}\r\n                                            variant=\"outlined\"\r\n                                        />|\r\n                                        <IconButton onClick={(event) => handleDeleteClick(event, addon.id)} size='small'>\r\n                                            <DeleteIcon sx={{ fontSize: 16 }} />\r\n                                        </IconButton>\r\n                                    </Paper>\r\n                                ))}\r\n                                <Popover\r\n                                    id={id}\r\n                                    open={openPopover}\r\n                                    anchorEl={anchorEl}\r\n                                    onClose={handleEditClose}\r\n                                    anchorOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'center',\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'center',\r\n                                    }}\r\n                                >\r\n                                    <Box sx={{ p: 2, display: 'flex', alignItems: 'center' }}>\r\n                                        <TextField\r\n                                            value={editAddon?.name || ''}\r\n                                            onChange={(e) => setEditAddon({ ...editAddon, name: e.target.value })}\r\n                                            size=\"small\"\r\n                                        />\r\n                                        <IconButton onClick={handleEditSave}>\r\n                                            <SaveIcon />\r\n                                        </IconButton>\r\n                                    </Box>\r\n                                </Popover>\r\n                                <Popover\r\n                                    id={idDelete}\r\n                                    open={openDelete}\r\n                                    anchorEl={deleteAnchorEl}\r\n                                    onClose={handleDeleteClose}\r\n                                    anchorOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'center',\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'center',\r\n                                    }}\r\n                                >\r\n                                    <Box sx={{ p: 2, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                        <Typography>Are you sure you want to delete this addon?</Typography>\r\n                                        <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', width: '100%' }}>\r\n                                            <Button variant='outlined' size='small' onClick={handleDeleteClose} color=\"primary\">\r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button variant='outlined' size='small' onClick={handleConfirmDelete} color=\"secondary\">\r\n                                                Confirm\r\n                                            </Button>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Popover>\r\n                            </Grid2>\r\n                        </FormGroup>\r\n                    </Box>}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant='outlined' size='small' onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Container>\r\n    );\r\n};\r\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const uploadAvator = async (userId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('avatar', image);\r\n\r\n    try {\r\n        const response = await API.put(`/profiles/${userId}/avatar`, formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadOrgLogo = async (currentOrgId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('logo', image);\r\n\r\n    try {\r\n        const response = await API.post('/s3/upload/org/logo', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadMedia = async (currentOrgId: number, image: File, addon_ids:number[]=[], token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('media', image);\r\n\r\n    return await API.post('/s3/media/upload', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organization_id: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n};\r\n\r\nexport const findAllImages = async (currentOrgId: number, token: string, addon_ids: number[] = []) => {\r\n    try {\r\n        const response = await API.get('/media/organization/' + currentOrgId, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteImg = async (key: any, token: string) => {\r\n    return API.delete('/s3/delete/img', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            fileKey: key\r\n        }\r\n    });\r\n}","import { Organization } from \"@/redux/slice/organizationSlice\";\r\nimport { API } from \"./api\";\r\n\r\nexport const findOrganizationsByUserId = async (userId: number, token: string) => {\r\n    return API.get('/organizations/' + userId, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n};\r\n\r\nexport const createOrganization = async (organization: Organization | any, token: string | any) => {\r\n    return API.post('/organizations', organization, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateOrg = async (data: any, token: string) => {\r\n    return API.put('/organizations/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const setDefaultOrganization = async (id: number, token: string) => {\r\n    return API.put('/organizations/' + id + '/default', {}, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findOrganizationById = async (id: any, token: string) => {\r\n    return API.get('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteOrganization = async (id: any, token: string) => {\r\n    return API.delete('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","export const TAG_TYPES = ['CONTENT', 'TABLE', 'IMAGE'];\r\n\r\n\r\n// Animation variants\r\nexport const fadeIn = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nexport const isValidS3Url = (url: string): boolean => {\r\n    const s3UrlPattern = /^https:\\/\\/pdf-crafter2\\.s3\\.us-east-1\\.amazonaws\\.com\\/.+$/;\r\n    return s3UrlPattern.test(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\nexport const hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n\r\nexport const ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n\r\nexport const bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`;\r\n\r\n\r\nexport const initialTableData = {\r\n  initialColumns: 3,\r\n  initialRows: [\r\n    { col1: \"Data 1\", col2: \"Data 2\", col3: \"Data 3\" }, // Default row data\r\n  ],\r\n  initialStyles: Array.from({ length: 3 }, () => ({\r\n    backgroundColor: \"#f4f4f4\", // Default background color\r\n    fontSize: \"14\", // Default font size\r\n    padding: \"8px\", // Default padding\r\n    color: \"#000\", // Default text color\r\n  })),\r\n  customHtml: `<table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #007bff; color: #ffffff;\">\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 1</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 2</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 3</th>\r\n                            </tr>\r\n                        </thead><tbody></tbody></table>`\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}