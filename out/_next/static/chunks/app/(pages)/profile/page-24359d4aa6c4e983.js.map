{"version":3,"file":"static/chunks/app/(pages)/profile/page-24359d4aa6c4e983.js","mappings":"AAAA","sources":["webpack://_N_E/?fb46","webpack://_N_E/./node_modules/next/dist/compiled/events/events.js","webpack://_N_E/./src/app/services/profileService.ts","webpack://_N_E/./src/app/(pages)/profile/page.tsx","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/mediaService.ts","webpack://_N_E/./src/app/utils/authEvents.ts","webpack://_N_E/./src/app/utils/constant.ts","webpack://_N_E/./src/redux/slice/ToggleTheme.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\profile\\\\page.tsx\");\n","(function(){\"use strict\";var e={864:function(e){var t=typeof Reflect===\"object\"?Reflect:null;var n=t&&typeof t.apply===\"function\"?t.apply:function ReflectApply(e,t,n){return Function.prototype.apply.call(e,t,n)};var r;if(t&&typeof t.ownKeys===\"function\"){r=t.ownKeys}else if(Object.getOwnPropertySymbols){r=function ReflectOwnKeys(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}}else{r=function ReflectOwnKeys(e){return Object.getOwnPropertyNames(e)}}function ProcessEmitWarning(e){if(console&&console.warn)console.warn(e)}var i=Number.isNaN||function NumberIsNaN(e){return e!==e};function EventEmitter(){EventEmitter.init.call(this)}e.exports=EventEmitter;e.exports.once=once;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=undefined;EventEmitter.prototype._eventsCount=0;EventEmitter.prototype._maxListeners=undefined;var s=10;function checkListener(e){if(typeof e!==\"function\"){throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}}Object.defineProperty(EventEmitter,\"defaultMaxListeners\",{enumerable:true,get:function(){return s},set:function(e){if(typeof e!==\"number\"||e<0||i(e)){throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\")}s=e}});EventEmitter.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0}this._maxListeners=this._maxListeners||undefined};EventEmitter.prototype.setMaxListeners=function setMaxListeners(e){if(typeof e!==\"number\"||e<0||i(e)){throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\")}this._maxListeners=e;return this};function _getMaxListeners(e){if(e._maxListeners===undefined)return EventEmitter.defaultMaxListeners;return e._maxListeners}EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return _getMaxListeners(this)};EventEmitter.prototype.emit=function emit(e){var t=[];for(var r=1;r<arguments.length;r++)t.push(arguments[r]);var i=e===\"error\";var s=this._events;if(s!==undefined)i=i&&s.error===undefined;else if(!i)return false;if(i){var o;if(t.length>0)o=t[0];if(o instanceof Error){throw o}var f=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));f.context=o;throw f}var u=s[e];if(u===undefined)return false;if(typeof u===\"function\"){n(u,this,t)}else{var a=u.length;var c=arrayClone(u,a);for(var r=0;r<a;++r)n(c[r],this,t)}return true};function _addListener(e,t,n,r){var i;var s;var o;checkListener(n);s=e._events;if(s===undefined){s=e._events=Object.create(null);e._eventsCount=0}else{if(s.newListener!==undefined){e.emit(\"newListener\",t,n.listener?n.listener:n);s=e._events}o=s[t]}if(o===undefined){o=s[t]=n;++e._eventsCount}else{if(typeof o===\"function\"){o=s[t]=r?[n,o]:[o,n]}else if(r){o.unshift(n)}else{o.push(n)}i=_getMaxListeners(e);if(i>0&&o.length>i&&!o.warned){o.warned=true;var f=new Error(\"Possible EventEmitter memory leak detected. \"+o.length+\" \"+String(t)+\" listeners \"+\"added. Use emitter.setMaxListeners() to \"+\"increase limit\");f.name=\"MaxListenersExceededWarning\";f.emitter=e;f.type=t;f.count=o.length;ProcessEmitWarning(f)}}return e}EventEmitter.prototype.addListener=function addListener(e,t){return _addListener(this,e,t,false)};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function prependListener(e,t){return _addListener(this,e,t,true)};function onceWrapper(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments)}}function _onceWrap(e,t,n){var r={fired:false,wrapFn:undefined,target:e,type:t,listener:n};var i=onceWrapper.bind(r);i.listener=n;r.wrapFn=i;return i}EventEmitter.prototype.once=function once(e,t){checkListener(t);this.on(e,_onceWrap(this,e,t));return this};EventEmitter.prototype.prependOnceListener=function prependOnceListener(e,t){checkListener(t);this.prependListener(e,_onceWrap(this,e,t));return this};EventEmitter.prototype.removeListener=function removeListener(e,t){var n,r,i,s,o;checkListener(t);r=this._events;if(r===undefined)return this;n=r[e];if(n===undefined)return this;if(n===t||n.listener===t){if(--this._eventsCount===0)this._events=Object.create(null);else{delete r[e];if(r.removeListener)this.emit(\"removeListener\",e,n.listener||t)}}else if(typeof n!==\"function\"){i=-1;for(s=n.length-1;s>=0;s--){if(n[s]===t||n[s].listener===t){o=n[s].listener;i=s;break}}if(i<0)return this;if(i===0)n.shift();else{spliceOne(n,i)}if(n.length===1)r[e]=n[0];if(r.removeListener!==undefined)this.emit(\"removeListener\",e,o||t)}return this};EventEmitter.prototype.off=EventEmitter.prototype.removeListener;EventEmitter.prototype.removeAllListeners=function removeAllListeners(e){var t,n,r;n=this._events;if(n===undefined)return this;if(n.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0}else if(n[e]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete n[e]}return this}if(arguments.length===0){var i=Object.keys(n);var s;for(r=0;r<i.length;++r){s=i[r];if(s===\"removeListener\")continue;this.removeAllListeners(s)}this.removeAllListeners(\"removeListener\");this._events=Object.create(null);this._eventsCount=0;return this}t=n[e];if(typeof t===\"function\"){this.removeListener(e,t)}else if(t!==undefined){for(r=t.length-1;r>=0;r--){this.removeListener(e,t[r])}}return this};function _listeners(e,t,n){var r=e._events;if(r===undefined)return[];var i=r[t];if(i===undefined)return[];if(typeof i===\"function\")return n?[i.listener||i]:[i];return n?unwrapListeners(i):arrayClone(i,i.length)}EventEmitter.prototype.listeners=function listeners(e){return _listeners(this,e,true)};EventEmitter.prototype.rawListeners=function rawListeners(e){return _listeners(this,e,false)};EventEmitter.listenerCount=function(e,t){if(typeof e.listenerCount===\"function\"){return e.listenerCount(t)}else{return listenerCount.call(e,t)}};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(e){var t=this._events;if(t!==undefined){var n=t[e];if(typeof n===\"function\"){return 1}else if(n!==undefined){return n.length}}return 0}EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?r(this._events):[]};function arrayClone(e,t){var n=new Array(t);for(var r=0;r<t;++r)n[r]=e[r];return n}function spliceOne(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function unwrapListeners(e){var t=new Array(e.length);for(var n=0;n<t.length;++n){t[n]=e[n].listener||e[n]}return t}function once(e,t){return new Promise((function(n,r){function errorListener(n){e.removeListener(t,resolver);r(n)}function resolver(){if(typeof e.removeListener===\"function\"){e.removeListener(\"error\",errorListener)}n([].slice.call(arguments))}eventTargetAgnosticAddListener(e,t,resolver,{once:true});if(t!==\"error\"){addErrorHandlerIfEventEmitter(e,errorListener,{once:true})}}))}function addErrorHandlerIfEventEmitter(e,t,n){if(typeof e.on===\"function\"){eventTargetAgnosticAddListener(e,\"error\",t,n)}}function eventTargetAgnosticAddListener(e,t,n,r){if(typeof e.on===\"function\"){if(r.once){e.once(t,n)}else{e.on(t,n)}}else if(typeof e.addEventListener===\"function\"){e.addEventListener(t,(function wrapListener(i){if(r.once){e.removeEventListener(t,wrapListener)}n(i)}))}else{throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type '+typeof e)}}}};var t={};function __nccwpck_require__(n){var r=t[n];if(r!==undefined){return r.exports}var i=t[n]={exports:{}};var s=true;try{e[n](i,i.exports,__nccwpck_require__);s=false}finally{if(s)delete t[n]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n=__nccwpck_require__(864);module.exports=n})();","import { API } from \"./api\";\r\n\r\nexport const updateNameByUserId = async (userId: number, name: string, token: string) => {\r\n    return API.put(`/profiles/${userId}/name`,\r\n        { name: name },\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateThemeByUserId = async (userId: number, theme: string, token: string) => {\r\n    return API.put(`/profiles/${userId}/theme`,\r\n        { theme: theme },\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n};\r\n\r\nexport const updateImageByUserId = async (userId: number, image: string, token: string) => {\r\n    return API.put(`/profiles/${userId}/image`,\r\n        { image: image },\r\n        {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        });\r\n};","'use client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, TextField, Avatar, Switch, FormControlLabel, FormGroup, Paper, Typography, Box, Container, Divider, IconButton, Grid2, useColorScheme } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport { updateNameByUserId, updateThemeByUserId } from '@/app/services/profileService';\r\nimport { uploadAvator } from '@/app/services/mediaService';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleTheme } from '@/redux/slice/ToggleTheme';\r\nimport { isValidS3Url } from '@/app/utils/constant';\r\nimport { RootState } from '@/redux/store';\r\nimport { authEvents } from '@/app/utils/authEvents';\r\n\r\n\r\nconst ProfilePage: React.FC = () => {\r\n    const [theme, setTheme] = useState<'dark' | 'light'>('light');\r\n    const [avatar, setAvatar] = useState<File | null>(null);\r\n    const [name, setName] = useState<string>('');\r\n    const [errors, setErrors] = useState<{ name?: string; avatar?: string }>({});\r\n    const [loadingName, setLoadingName] = useState(false);\r\n    const [loadingTheme, setLoadingTheme] = useState(false);\r\n    const [loadingAvatar, setLoadingAvatar] = useState(false);\r\n    const [success, setSuccess] = useState<{ name?: boolean; avatar?: boolean; theme?: boolean }>({});\r\n    const { token, user, status } = useSelector((state: RootState) => state.session);\r\n    const dispatch = useDispatch();\r\n    const { setMode } = useColorScheme();\r\n    \r\n    const avatarUrl =\r\n        typeof avatar === 'string' && isValidS3Url(avatar)\r\n            ? avatar // Use the validated URL\r\n            : avatar instanceof File\r\n                ? URL.createObjectURL(avatar) // Use a blob URL for a File object\r\n                : undefined;\r\n\r\n    const handleThemeToggle = async (t: 'dark' | 'light') => {\r\n        setTheme(t);\r\n        setLoadingTheme(true);\r\n        dispatch(toggleTheme(t));\r\n        setMode(t);\r\n        try {\r\n            await updateThemeByUserId(user?.id, t, token);\r\n            setSuccess((prev) => ({ ...prev, theme: true }));\r\n        } catch (error) {\r\n            setSuccess((prev) => ({ ...prev, theme: false }));\r\n            console.error(error);\r\n        } finally {\r\n            setLoadingTheme(false);\r\n        }\r\n    };\r\n\r\n    const handleAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            setAvatar(event.target.files[0]);\r\n            setErrors((prev) => ({ ...prev, avatar: undefined }));\r\n            setSuccess((prev) => ({ ...prev, theme: undefined }));\r\n        }\r\n    };\r\n\r\n    const handleUserNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(event.target.value);\r\n        setErrors((prev) => ({ ...prev, name: undefined }));\r\n        setSuccess((prev) => ({ ...prev, name: undefined }));\r\n    };\r\n\r\n    const handleChangeName = async () => {\r\n        try {\r\n            if (!name) {\r\n                setErrors((prev) => ({ ...prev, name: 'Name is required' }));\r\n                return;\r\n            }\r\n            setLoadingName(true);\r\n            const res = await updateNameByUserId(user?.id, name, token);\r\n            if (res?.status === 200) {\r\n                setSuccess((prev) => ({ ...prev, name: true }));\r\n            }\r\n        } catch (error) {\r\n            setSuccess((prev) => ({ ...prev, name: false }));\r\n            setErrors((prev) => ({ ...prev, name: 'Error updating name' }));\r\n            console.error(error);\r\n        } finally {\r\n            setLoadingName(false);\r\n        }\r\n    };\r\n\r\n    const validate = () => {\r\n        const newErrors: { name?: string; avatar?: string } = {};\r\n        if (!name) newErrors.name = 'User name is required';\r\n        if (!avatar) newErrors.avatar = 'Avatar is required';\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!validate()) return;\r\n        setLoadingAvatar(true);\r\n        try {\r\n            const avatarUrl = await uploadAvator(user?.id, avatar!, token);\r\n            if (!avatarUrl?.url) {\r\n                setErrors((prev) => ({ ...prev, avatar: 'Error uploading avatar' }));\r\n                setSuccess((prev) => ({ ...prev, avatar: false }));\r\n                return;\r\n            }\r\n            // await updateImageByUserId(session?.user?.id, avatarUrl.url, token);\r\n            setSuccess((prev) => ({ ...prev, avatar: true }));\r\n        } catch (error) {\r\n            setSuccess((prev) => ({ ...prev, avatar: false }));\r\n            setErrors((prev) => ({ ...prev, avatar: 'Error updating avatar' }));\r\n            console.error(error);\r\n        } finally {\r\n            setLoadingAvatar(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (user?.name) {\r\n            setName(user?.name);\r\n        }\r\n        if (user?.profile?.theme) {\r\n            setTheme(user?.profile?.theme);\r\n        }\r\n        if (user?.profile?.avatar) {\r\n            setAvatar(user?.profile?.avatar);\r\n        }\r\n    }, [user?.name, user?.profile?.theme]);\r\n\r\n    if (status === 'loading') {\r\n        return <Typography>Loading...</Typography>;\r\n    }\r\n\r\n    if (status === 'unauthenticated') {\r\n        return (\r\n            <Container>\r\n                <Typography>Please sign in to view your profile.</Typography>\r\n                <Button variant='outlined' size='small' onClick={() => authEvents.emit('triggerSignIn')}>Sign In</Button>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <Paper elevation={3} sx={{ padding: 3, marginTop: 5 }}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Profile Management\r\n                </Typography>\r\n                <FormGroup>\r\n                    <Grid2 container spacing={2}>\r\n                        <Grid2 size={8}>\r\n                            <TextField\r\n                                label=\"Name\"\r\n                                value={name}\r\n                                onChange={handleUserNameChange}\r\n                                error={!!errors.name}\r\n                                helperText={errors.name}\r\n                                required\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                            />\r\n                        </Grid2>\r\n                        <Grid2 size={4} sx={{ display: 'flex', alignItems: 'center' }}>\r\n                            <LoadingButton\r\n                                variant=\"outlined\"\r\n                                color=\"inherit\"\r\n                                size='small'\r\n                                onClick={handleChangeName}\r\n                                loading={loadingName}\r\n                                startIcon={success.name === true ? <CheckCircleIcon color=\"success\" /> : success.name === false ? <ErrorIcon color=\"error\" /> : null}\r\n                            >\r\n                                Update\r\n                            </LoadingButton>\r\n                        </Grid2>\r\n                    </Grid2>\r\n                    <Divider sx={{ margin: '16px 0' }} />\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={theme === 'dark'}\r\n                                    onChange={() => handleThemeToggle(theme === 'dark' ? 'light' : 'dark')}\r\n                                />\r\n                            }\r\n                            label={`Theme: ${theme}`}\r\n                        />\r\n                        {success.theme === true && <CheckCircleIcon color=\"success\" sx={{ ml: 1 }} />}\r\n                        {success.theme === false && <ErrorIcon color=\"error\" sx={{ ml: 1 }} />}\r\n                        {loadingTheme && <Typography sx={{ ml: 1 }}>Loading...</Typography>}\r\n                    </Box>\r\n                    <Divider sx={{ margin: '16px 0' }} />\r\n                    <input\r\n                        accept=\"image/*\"\r\n                        type=\"file\"\r\n                        onChange={handleAvatarChange}\r\n                        style={{ display: 'none' }}\r\n                        id=\"avatar-upload\"\r\n                    />\r\n                    <label htmlFor=\"avatar-upload\">\r\n                        <Box sx={{ display: 'flex', justifyContent: 'center', marginTop: 2 }}>\r\n                            <IconButton component=\"span\">\r\n                                <Avatar\r\n                                    src={avatarUrl}\r\n                                    alt=\"Profile Avatar\"\r\n                                    sx={{ width: 100, height: 100 }}\r\n                                >\r\n                                    {!avatar && name.charAt(0)}\r\n                                </Avatar>\r\n                            </IconButton>\r\n                        </Box>\r\n                    </label>\r\n                    {errors.avatar && <Typography color=\"error\" sx={{ marginTop: 1, textAlign: 'center' }}>{errors.avatar}</Typography>}\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 2 }}>\r\n                        <Typography variant=\"caption\" color=\"textSecondary\">\r\n                            Click on the avatar to upload a new one\r\n                        </Typography>\r\n                        {success.avatar === true && <CheckCircleIcon color=\"success\" sx={{ ml: 1 }} />}\r\n                        <LoadingButton\r\n                            variant=\"outlined\"\r\n                            size='small'\r\n                            color=\"primary\"\r\n                            onClick={handleSubmit}\r\n                            loading={loadingAvatar}\r\n                            sx={{ marginTop: 3 }}\r\n\r\n                            startIcon={success.avatar === true ? <CheckCircleIcon color=\"success\" /> : success.avatar === false ? <ErrorIcon color=\"error\" /> : null}\r\n                        >\r\n                            Update Profile Image\r\n                        </LoadingButton>\r\n                    </Box>\r\n\r\n                </FormGroup>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const uploadAvator = async (userId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('avatar', image);\r\n\r\n    try {\r\n        const response = await API.put(`/profiles/${userId}/avatar`, formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadOrgLogo = async (currentOrgId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('logo', image);\r\n\r\n    try {\r\n        const response = await API.post('/s3/upload/org/logo', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadMedia = async (currentOrgId: number, image: File, addon_ids:number[]=[], token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('media', image);\r\n\r\n    return await API.post('/s3/media/upload', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organization_id: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n};\r\n\r\nexport const findAllImages = async (currentOrgId: number, token: string, addon_ids: number[] = []) => {\r\n    try {\r\n        const response = await API.get('/media/organization/' + currentOrgId, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteImg = async (key: any, token: string) => {\r\n    return API.delete('/s3/delete/img', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            fileKey: key\r\n        }\r\n    });\r\n}","import EventEmitter from 'events';\r\n\r\nexport const authEvents = new EventEmitter();\r\n","export const TAG_TYPES = ['CONTENT', 'TABLE', 'IMAGE'];\r\n\r\n\r\n// Animation variants\r\nexport const fadeIn = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nexport const isValidS3Url = (url: string): boolean => {\r\n    const s3UrlPattern = /^https:\\/\\/pdf-crafter2\\.s3\\.us-east-1\\.amazonaws\\.com\\/.+$/;\r\n    return s3UrlPattern.test(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\nexport const hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n\r\nexport const ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n\r\nexport const bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`;\r\n\r\n\r\nexport const initialTableData = {\r\n  initialColumns: 3,\r\n  initialRows: [\r\n    { col1: \"Data 1\", col2: \"Data 2\", col3: \"Data 3\" }, // Default row data\r\n  ],\r\n  initialStyles: Array.from({ length: 3 }, () => ({\r\n    backgroundColor: \"#f4f4f4\", // Default background color\r\n    fontSize: \"14\", // Default font size\r\n    padding: \"8px\", // Default padding\r\n    color: \"#000\", // Default text color\r\n  })),\r\n  customHtml: `<table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #007bff; color: #ffffff;\">\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 1</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 2</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 3</th>\r\n                            </tr>\r\n                        </thead><tbody></tbody></table>`\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nexport const ToggleTheme = createSlice({\r\n  name: 'ToggleTheme',\r\n  initialState: {\r\n    theme: 'light',\r\n    matches: {\r\n      matches_xs_up: false,\r\n      matches_sm_up: false,\r\n      matches_md_up: false,\r\n      matches_lg_up: false,\r\n      matches_sm_down: false,\r\n      matches_md_down: false,\r\n    },\r\n  },\r\n  reducers: {\r\n    toggleTheme(state, action) {\r\n      state.theme = action.payload === 'dark' ? 'light' : 'dark';\r\n    },\r\n    deviceMatches(state, action) {\r\n      state.matches = { ...state.matches, ...action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleTheme, deviceMatches } = ToggleTheme.actions;\r\nexport default ToggleTheme.reducer;\r\n"],"names":[],"sourceRoot":""}