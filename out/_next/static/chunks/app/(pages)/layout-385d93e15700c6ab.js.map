{"version":3,"file":"static/chunks/app/(pages)/layout-385d93e15700c6ab.js","mappings":"AAAA","sources":["webpack://_N_E/","webpack://_N_E/./src/app/(pages)/auth/components/CustomMenu.tsx","webpack://_N_E/./src/app/services/authService.ts","webpack://_N_E/./src/app/(pages)/auth/ThemeSignInPage.tsx","webpack://_N_E/./src/app/(pages)/auth/ThemeSignUpPage.tsx","webpack://_N_E/./src/app/(pages)/auth/components/AccountSlotsAccountSwitcher.tsx","webpack://_N_E/./src/app/(pages)/auth/useInitializeSession.tsx","webpack://_N_E/./src/app/(pages)/layout.tsx","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/organizationService.ts","webpack://_N_E/./src/app/utils/authEvents.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts","webpack://_N_E/./src/redux/slice/sessionSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\layout.tsx\");\n","import * as React from 'react';\r\nimport {\r\n    MenuItem,\r\n    MenuList,\r\n    Button,\r\n    Divider,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    Avatar,\r\n    Stack,\r\n} from '@mui/material';\r\nimport {\r\n    AccountPreview,\r\n    SignOutButton,\r\n    AccountPopoverFooter,\r\n} from '@toolpad/core/Account';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addOrganizationAll, clearOrganizationState, Organization } from '@/redux/slice/organizationSlice';\r\nimport { setDefaultOrganization } from '@/app/services/organizationService';\r\nimport { useRouter } from 'next/navigation';\r\nimport { RootState } from '@/redux/store';\r\n\r\nexport default function CustomMenu() {\r\n    const { organizations } = useSelector((state: any) => state.organization);\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const setDefault = (orgId: number) => {\r\n        // Implement the setDefault API call here\r\n        // This function should update the default organization\r\n        setDefaultOrganization(orgId, token).then((res: any) => {\r\n            if (res?.status == 200) {\r\n                dispatch(clearOrganizationState());\r\n                dispatch(addOrganizationAll(organizations.map((org: any) => ({ ...org, is_default: org.id === orgId }))));\r\n            }\r\n        }).catch((err: any) => {\r\n            console.error(err);\r\n        });\r\n    };\r\n    return (\r\n        <Stack direction=\"column\">\r\n            <AccountPreview variant=\"expanded\" />\r\n            <Divider />\r\n            <Typography variant=\"body2\" mx={2} mt={1}>\r\n                Organizations\r\n            </Typography>\r\n            <MenuList>\r\n                {organizations?.map((organization: Organization) => (\r\n                    <MenuItem\r\n                        key={organization.id}\r\n                        component=\"button\"\r\n                        sx={{\r\n                            justifyContent: 'flex-start',\r\n                            width: '100%',\r\n                            columnGap: 2,\r\n                        }}\r\n                        onClick={() => setDefault(organization.id)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Avatar\r\n                                sx={{\r\n                                    width: 32,\r\n                                    height: 32,\r\n                                    fontSize: '0.95rem',\r\n                                    bgcolor: '#8B4513',\r\n                                }}\r\n                                src={organization.logo ?? ''}\r\n                                alt={organization.name ?? ''}\r\n                            >\r\n                                {organization.name[0]}\r\n                            </Avatar>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'flex-start',\r\n                                width: '100%',\r\n                            }}\r\n                            primary={organization.name}\r\n                            secondary={organization.is_default ? 'Active' : ''}\r\n                            slotProps={{ 'primary': { variant: 'body2' }, 'secondary': { variant: 'caption' } }}\r\n                        />\r\n                    </MenuItem>\r\n                ))}\r\n                <Divider />\r\n                <Button\r\n                    variant=\"text\"\r\n                    sx={{ textTransform: 'capitalize', display: 'flex', mx: 'auto' }}\r\n                    size=\"small\"\r\n                    startIcon={<AddIcon />}\r\n                    disableElevation\r\n                    onClick={() => router.push('/organization')}\r\n                >\r\n                    Add new\r\n                </Button>\r\n            </MenuList>\r\n            <Divider />\r\n            <AccountPopoverFooter>\r\n                <SignOutButton />\r\n            </AccountPopoverFooter>\r\n        </Stack>\r\n    );\r\n}\r\n","import { API } from './api';\r\n\r\n\r\nexport const signInUser = async (email: string, password: string, rememberMe: boolean) => {\r\n    return API.post('/users/login', { email, password, rememberMe }, { withCredentials: true });\r\n};\r\n\r\nexport const signUpUser = async (name: string, email: string, password: string) => {\r\n    try {\r\n        const response = await API.post('/users/register', { name, email, password }, { withCredentials: true });\r\n        return response.data; // Assuming the response has the data like { id, name, email }\r\n    } catch (error: any) {\r\n        if (error.response) {\r\n            // If the backend responded with a status code outside the 2xx range\r\n            throw new Error(error.response.data.error || 'An error occurred during registration.');\r\n        } else if (error.request) {\r\n            // If the request was made but no response was received\r\n            throw new Error('No response from the server. Please try again later.');\r\n        } else {\r\n            // Something happened in setting up the request\r\n            throw new Error('Error in setting up the request. Please try again.');\r\n        }\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n    SignInPage,\r\n    type AuthProvider,\r\n    type AuthResponse,\r\n} from '@toolpad/core/SignInPage';\r\nimport { Button, Checkbox, Dialog, FormControl, FormControlLabel, IconButton, InputAdornment, InputLabel, OutlinedInput, TextField, Typography } from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { AccountCircle, Visibility, VisibilityOff } from '@mui/icons-material';\r\nimport { signInUser } from \"@/app/services/authService\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { clearSession, setSession } from '@/redux/slice/sessionSlice';\r\nimport { setLoading } from '@/redux/slice/sessionSlice';\r\n\r\nconst providers = [\r\n    // { id: 'github', name: 'GitHub' },\r\n    // { id: 'google', name: 'Google' },\r\n    { id: 'credentials', name: 'Email and Password' },\r\n];\r\n\r\nfunction CustomEmailField() {\r\n    return (\r\n        <TextField\r\n            id=\"input-with-icon-textfield\"\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            size=\"small\"\r\n            required\r\n            fullWidth\r\n            slotProps={{\r\n                input: {\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <AccountCircle fontSize=\"inherit\" />\r\n                        </InputAdornment>\r\n                    ),\r\n                },\r\n            }}\r\n            variant=\"outlined\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction CustomPasswordField() {\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n\r\n    const handleClickShowPassword = () => setShowPassword((show) => !show);\r\n\r\n    const handleMouseDownPassword = (event: React.MouseEvent) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <FormControl sx={{ my: 2 }} fullWidth variant=\"outlined\">\r\n            <InputLabel size=\"small\" htmlFor=\"outlined-adornment-password\">\r\n                Password\r\n            </InputLabel>\r\n            <OutlinedInput\r\n                id=\"outlined-adornment-password\"\r\n                type={showPassword ? 'text' : 'password'}\r\n                name=\"password\"\r\n                size=\"small\"\r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={handleClickShowPassword}\r\n                            onMouseDown={handleMouseDownPassword}\r\n                            edge=\"end\"\r\n                            size=\"small\"\r\n                        >\r\n                            {showPassword ? (\r\n                                <VisibilityOff fontSize=\"inherit\" />\r\n                            ) : (\r\n                                <Visibility fontSize=\"inherit\" />\r\n                            )}\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                }\r\n                label=\"Password\"\r\n            />\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nfunction CustomButton() {\r\n    return (\r\n        <Button\r\n            type=\"submit\"\r\n            variant=\"outlined\"\r\n            color=\"info\"\r\n            size=\"small\"\r\n            disableElevation\r\n            fullWidth\r\n            sx={{ my: 2 }}\r\n        >\r\n            Log In\r\n        </Button>\r\n    );\r\n}\r\n\r\nconst signIn_: (provider: AuthProvider, formData: any, onOpen: any, dispatch: any) => void | Promise<AuthResponse> = async (\r\n    provider, formData: any, onOpen: any, dispatch: any\r\n) => {\r\n\r\n    const promise = new Promise<AuthResponse>(async (resolve) => {\r\n        if (provider.id === \"credentials\") {\r\n            dispatch(setLoading());\r\n            const data = {\r\n                redirect: false,\r\n                email: formData?.get('email'),\r\n                password: formData?.get('password'),\r\n                rememberMe: formData?.get('rememberMe'),\r\n            };\r\n            try {\r\n                const result = await signInUser(data.email, data.password, data.rememberMe);\r\n                if (result.status == 200) {\r\n                    const { token, user } = result.data;\r\n                    dispatch(setSession({ token, user, status: 'authenticated' }));\r\n                    localStorage.setItem('token', token);\r\n                    resolve({\r\n                        success: 'Check your email for a verification link.',\r\n                    });\r\n                    onOpen(false);\r\n                } else {\r\n                    // console.log('hghgfhghgfh');\r\n\r\n                    dispatch(clearSession());\r\n                    resolve({ error: 'An error occurred during signin.' });\r\n                }\r\n                \r\n            }catch(e:any){\r\n                console.log(e);\r\n                dispatch(clearSession());\r\n                resolve({ error: e?.error });\r\n            }\r\n        } else {\r\n            // Handle other providers if needed\r\n            onOpen(false);\r\n            setTimeout(() => {\r\n                console.log(`Sign in with ${provider.id}`);\r\n                resolve({ error: 'Invalid credentials.' });\r\n            }, 500);\r\n        }\r\n    });\r\n    return promise;\r\n};\r\n\r\nfunction RememberMe() {\r\n    const [checked, setChecked] = React.useState(false);\r\n    return (\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    name=\"rememberMe\"\r\n                    checked={checked}\r\n                    value={checked}\r\n                    onChange={(event) => setChecked(event.target.checked)}\r\n                    color=\"primary\"\r\n                    sx={{ padding: 0.5, '& .MuiSvgIcon-root': { fontSize: 20 } }}\r\n                />\r\n            }\r\n            slotProps={{\r\n                typography: {\r\n                    fontSize: 14,\r\n                },\r\n            }}\r\n            color=\"textSecondary\"\r\n            label=\"Remember me\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default function SignIn({ open, onClose, setSignUpModalOpen }: any) {\r\n    const dispatch = useDispatch();\r\n    const handleClose = () => {\r\n        onClose(false);\r\n    };\r\n\r\n    const handleSignUp = () => {\r\n        onClose(false);\r\n        setSignUpModalOpen(true);\r\n    };\r\n\r\n    const handleForgotPassword = () => {\r\n        onClose(false);\r\n        setSignUpModalOpen(true);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={open} onClose={handleClose} sx={{\r\n            m: 0, p: 0,\r\n            '& .MuiPaper-root, .MuiBox-root': { minHeight: 'unset' },\r\n            '& .MuiContainer-root': { p: 0 }\r\n        }} >\r\n            <IconButton\r\n                aria-label=\"close\"\r\n                onClick={() => onClose(false)}\r\n                sx={(theme) => ({\r\n                    position: 'absolute',\r\n                    right: 8,\r\n                    top: 8,\r\n                    color: theme.palette.grey[500],\r\n                })}\r\n            >\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <SignInPage\r\n                signIn={(provider, formData): any => signIn_(provider, formData, onClose, dispatch)}\r\n                providers={providers}\r\n                sx={{\r\n                    '& form > .MuiStack-root': {\r\n                        marginTop: '2rem',\r\n                        rowGap: '0.5rem',\r\n                    },\r\n                }}\r\n                slots={{\r\n                    title: () => <h2 style={{ marginBottom: 8, minWidth: '400px', textAlign: 'center' }}>Login</h2>,\r\n                    // subtitle: () => <Alert sx={{ mb: 2, px: 1, py: 0.25 }} severity=\"success\">\r\n                    //     We are investigating an ongoing outage.\r\n                    // </Alert>,\r\n                    // emailField: CustomEmailField,\r\n                    // passwordField: CustomPasswordField,\r\n                    // submitButton: CustomButton,\r\n                    signUpLink: () => <Typography variant=\"body2\" onClick={handleSignUp} sx={{ cursor: 'pointer' }}>\r\n                        Sign up\r\n                    </Typography>,\r\n                    forgotPasswordLink: () => <Typography variant=\"body2\" onClick={handleForgotPassword}>\r\n                        Forgot password?\r\n                    </Typography>,\r\n                    // userNameField: () => null,\r\n                    emailField: CustomEmailField,\r\n                    passwordField: CustomPasswordField,\r\n                    submitButton: CustomButton,\r\n                    rememberMe: RememberMe,\r\n                }}\r\n            />\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { Box, TextField, Typography, Button, Alert, IconButton, Dialog } from '@mui/material';\r\nimport Grid2 from '@mui/material/Grid2'; // Grid2 component\r\nimport LineStyleIcon from '@mui/icons-material/LineStyle';\r\nimport { signUpUser } from '@/app/services/authService';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst SignUp = ({ setSignInModalOpen, openSignUp, setSignUpModalOpen }: any) => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const [errorName, setErrorName] = useState(false);\r\n    const [errorEmail, setErrorEmail] = useState(false);\r\n    const [errorPassword, setErrorPassword] = useState(false);\r\n\r\n    const nameRef = useRef<HTMLInputElement | null>(null);\r\n    const emailRef = useRef<HTMLInputElement | null>(null);\r\n    const passwordRef = useRef<HTMLInputElement | null>(null);\r\n\r\n    // const handleOpen = () => setSignUpModalOpen(true);\r\n    const handleClose = () => setSignUpModalOpen(false);\r\n\r\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n    const handleValidation = () => {\r\n        let isValid = true;\r\n\r\n        if (!name.trim()) {\r\n            setErrorName(true);\r\n            nameRef.current?.focus();\r\n            isValid = false;\r\n        }\r\n\r\n        if (!email.trim()) {\r\n            setErrorEmail(true);\r\n            if (isValid) emailRef.current?.focus();\r\n            isValid = false;\r\n        }\r\n\r\n        if (!password.trim()) {\r\n            setErrorPassword(true);\r\n            if (isValid) passwordRef.current?.focus();\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const handleSubmit = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        if (handleValidation()) {\r\n            try {\r\n                const res = await signUpUser(name, email, password); // API call function for signup\r\n                console.log(res);\r\n\r\n                if (res?.name && res?.email) {\r\n                    // Show success message\r\n                    setSuccessMessage('Signup successful! Redirecting to sign-in...');\r\n                    setErrorMessage(null); // Clear any previous error\r\n\r\n                    setTimeout(() => {\r\n                        setSuccessMessage(null); // Clear success message\r\n                        handleSignIn(); // Navigate to sign-in modal\r\n                    }, 2000);\r\n                } else if (res?.error) {\r\n                    // Show error message\r\n                    setErrorMessage(res.error);\r\n                    setSuccessMessage(null); // Clear any previous success\r\n                } else {\r\n                    // Generic error handling\r\n                    setErrorMessage('Something went wrong. Please try again.');\r\n                    setSuccessMessage(null); // Clear any previous success\r\n                }\r\n            } catch (error: any) {\r\n\r\n                console.error('Signup error:', error);\r\n                // if (error?.error) {\r\n                // Show error message\r\n                setErrorMessage(error.message);\r\n                setSuccessMessage(null); // Clear any previous success\r\n                // } else {\r\n                //     // Generic error handling\r\n                //     setErrorMessage('An error occurred during signup. Please try again later.');\r\n                //     setSuccessMessage(null); // Clear any previous success\r\n                // }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSignIn = () => {\r\n        setSignInModalOpen(true);\r\n        setSignUpModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Dialog open={openSignUp} onClose={handleClose}>\r\n            <IconButton\r\n                aria-label=\"close\"\r\n                onClick={() => setSignUpModalOpen(false)}\r\n                sx={(theme) => ({\r\n                    position: 'absolute',\r\n                    right: 8,\r\n                    top: 8,\r\n                    color: theme.palette.grey[500],\r\n                })}\r\n            >\r\n                <CloseIcon />\r\n            </IconButton>\r\n            <Box\r\n                component=\"form\"\r\n                onSubmit={handleSubmit}\r\n                sx={{\r\n                    // position: 'absolute',\r\n                    // top: '50%',\r\n                    // left: '50%',\r\n                    // transform: 'translate(-50%, -50%)',\r\n                    width: \"100%\",\r\n                    maxWidth: '444px',\r\n                    bgcolor: 'background.paper',\r\n                    boxShadow: 24,\r\n                    p: 4,\r\n                }}\r\n            >\r\n                <Grid2 container spacing={2} direction=\"column\" alignItems=\"center\">\r\n                    <Grid2>\r\n                        <LineStyleIcon color=\"info\" />\r\n                    </Grid2>\r\n                    <Grid2>\r\n                        <Typography>Sign Up</Typography>\r\n                    </Grid2>\r\n                </Grid2>\r\n\r\n                <TextField\r\n                    inputRef={nameRef}\r\n                    label=\"Name\"\r\n                    value={name}\r\n                    onChange={(e) => {\r\n                        setName(e.target.value);\r\n                        setErrorName(false);\r\n                    }}\r\n                    onBlur={() => !name.trim() && setErrorName(true)}\r\n                    error={errorName}\r\n                    helperText={errorName ? 'Name is required.' : ''}\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                />\r\n\r\n                <TextField\r\n                    inputRef={emailRef}\r\n                    label=\"Email\"\r\n                    type=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                        setEmail(e.target.value);\r\n                        setErrorEmail(false);\r\n                    }}\r\n                    onBlur={() => !email.trim() && setErrorEmail(true)}\r\n                    error={errorEmail}\r\n                    helperText={errorEmail ? 'Email is required.' : ''}\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                />\r\n\r\n                <TextField\r\n                    inputRef={passwordRef}\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => {\r\n                        setPassword(e.target.value);\r\n                        setErrorPassword(false);\r\n                    }}\r\n                    onBlur={() => !password.trim() && setErrorPassword(true)}\r\n                    error={errorPassword}\r\n                    helperText={errorPassword ? 'Password is required.' : ''}\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    slotProps={{\r\n                        htmlInput(ownerState) {\r\n                            console.log(ownerState);\r\n                            return { maxLength: 8, minLength: 3 };\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                {/* Success Message */}\r\n                {successMessage && (\r\n                    <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n                        {successMessage}\r\n                    </Alert>\r\n                )}\r\n\r\n                {/* Error Message */}\r\n                {errorMessage && (\r\n                    <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n                        {errorMessage}\r\n                    </Alert>\r\n                )}\r\n\r\n                <Button type=\"submit\" variant=\"outlined\" size='small' color=\"primary\" fullWidth>\r\n                    Sign Up\r\n                </Button>\r\n\r\n                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\r\n                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n                        Already have an account?{' '}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        onClick={handleSignIn}\r\n                        sx={{ cursor: 'pointer' }}\r\n                        color=\"primary\"\r\n                    >\r\n                        Sign In\r\n                    </Typography>\r\n                </Box>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","import * as React from 'react';\r\nimport {\r\n    AuthenticationContext,\r\n    SessionContext,\r\n    type Session,\r\n} from '@toolpad/core/AppProvider';\r\nimport { Account } from '@toolpad/core/Account';\r\nimport CustomMenu from './CustomMenu';\r\nimport { ThemeSwitcher } from '@toolpad/core/DashboardLayout';\r\nimport SignIn from '../ThemeSignInPage';\r\nimport SignUp from '../ThemeSignUpPage';\r\nimport { findOrganizationsByUserId } from '@/app/services/organizationService';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addOrganizationAll, clearOrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { authEvents } from '@/app/utils/authEvents';\r\nimport { useColorScheme } from '@mui/material';\r\nimport { clearSession } from '@/redux/slice/sessionSlice';\r\nimport { RootState } from '@/redux/store';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\n\r\n// const demoSession = {\r\n//     user: {\r\n//         name: 'Bharat Kashyap',\r\n//         email: 'bharatkashyap@outlook.com',\r\n//         image: 'https://avatars.githubusercontent.com/u/19550456',\r\n//     },\r\n// };\r\n\r\nclass DemoSession {\r\n    user: {\r\n        name: string;\r\n        email: string;\r\n        image: string;\r\n    };\r\n    constructor(data: any) {\r\n        this.user = {\r\n            name: data?.name,\r\n            email: data?.email,\r\n            image: data?.avatar,\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default function AccountSlotsAccountSwitcher() {\r\n    const [session, setSession] = React.useState<Session | any>(null);\r\n    const [isSignInModalOpen, setSignInModalOpen] = React.useState(false);\r\n    const [isSignUpModalOpen, setSignUpModalOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const { setMode } = useColorScheme();\r\n    const { token, user } = useSelector((state: RootState) => state.session);\r\n\r\n    const handleSignIn = () => {\r\n        setSignInModalOpen(true);\r\n    };\r\n    const authentication = React.useMemo(() => {\r\n        return {\r\n            signIn: () => {\r\n                handleSignIn();\r\n                // setSession(new DemoSession(session2?.user));\r\n            },\r\n            signOut: () => {\r\n                setSession(null);\r\n                console.log('Sign out');\r\n                dispatch(clearSession());\r\n                localStorage.removeItem('token');\r\n            },\r\n        };\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        const storedToken: any = localStorage.getItem('token');\r\n        const decoded: { sub: string; name: string; email: string } | any = jwt.decode(storedToken) as JwtPayload | any;\r\n        const storedUser = decoded?.user ? JSON.parse(decoded?.user) : null;\r\n        if (storedUser) {\r\n            // console.log(session2);\r\n            setSession(() => new DemoSession({...storedUser, avatar: storedUser?.profile?.avatar}));\r\n            console.log(storedUser)\r\n            findOrganizationsByUserId(storedUser.id, token).then((res) => {\r\n                console.log(res.data, 'Organizations fetched');\r\n                if (res.data && res.data.length > 0) {\r\n                    console.log('Dispatching organizations');\r\n                    dispatch(clearOrganizationState());\r\n                    dispatch(addOrganizationAll(res.data));\r\n\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err, 'Error fetching organizations');\r\n            });\r\n            setMode(storedUser?.profile?.theme || 'light');\r\n        }\r\n\r\n        //clear the organization state on signout\r\n        // if (!session2) {\r\n        //     dispatch(clearOrganizationState());\r\n        // }\r\n        authEvents.on('triggerSignIn', handleSignIn);\r\n        return () => {\r\n            dispatch(clearOrganizationState());\r\n            authEvents.off('triggerSignIn', handleSignIn);\r\n        }\r\n    }, [user?.id]);\r\n\r\n    return (\r\n        <AuthenticationContext.Provider value={authentication}>\r\n            <SessionContext.Provider value={session} >\r\n                {/* preview-start */}\r\n\r\n                <ThemeSwitcher />\r\n                <SignIn open={isSignInModalOpen} onClose={setSignInModalOpen} setSignUpModalOpen={setSignUpModalOpen}></SignIn>\r\n                <SignUp setSignInModalOpen={setSignInModalOpen} openSignUp={isSignUpModalOpen} setSignUpModalOpen={setSignUpModalOpen}></SignUp>\r\n                <Account\r\n                    slots={{\r\n                        popoverContent: CustomMenu,\r\n                    }}\r\n                />\r\n                {/* preview-end */}\r\n            </SessionContext.Provider>\r\n        </AuthenticationContext.Provider>\r\n    );\r\n}\r\n\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { clearSession, setLoading, setSession } from '@/redux/slice/sessionSlice';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\n\r\nconst useInitializeSession = () => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        const initializeSession = async () => {\r\n            dispatch(setLoading());\r\n            const storedToken:any = localStorage.getItem('token');\r\n            // Validate the token in the Redux store\r\n            // dispatch(validateSession());\r\n\r\n            if (storedToken) {\r\n                try {\r\n                    // You can directly set user info from the token if needed (assuming token has user data)\r\n                    const decoded: { sub: string; name: string; email: string } | any = jwt.decode(storedToken) as JwtPayload | any;\r\n                    if (decoded) {\r\n                        // console.log(storedToken)\r\n                        // console.log(decoded)\r\n                        const storedUser = decoded?.user ? JSON.parse(decoded?.user) : null;\r\n                        // storedUser = storedUser ? JSON.parse(storedUser) : null;\r\n                        // console.log('storedUser', storedUser);\r\n                        dispatch(setSession({\r\n                            token: storedToken, user: {\r\n                                id: decoded.sub, name: decoded.name, email: decoded.email,\r\n                                profile: storedUser?.profile || { id: null, theme: 'light', avatar: null }\r\n                            },\r\n                            status: 'authenticated'\r\n                        }));\r\n                    } else {\r\n                        // alert('Invalid token init');\r\n                        dispatch(clearSession());\r\n                        localStorage.removeItem('token');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Failed to decode or fetch user data:', error);\r\n                    dispatch(clearSession());\r\n                    localStorage.removeItem('token');\r\n                }\r\n            }\r\n        };\r\n\r\n        initializeSession();\r\n    }, [dispatch]);\r\n};\r\n\r\nexport default useInitializeSession;\r\n","\"use client\";\r\nimport * as React from 'react';\r\nimport { extendTheme } from '@mui/material/styles';\r\nimport DashboardIcon from '@mui/icons-material/Dashboard';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport LayersIcon from '@mui/icons-material/Layers';\r\nimport { AppProvider, Router } from '@toolpad/core/AppProvider';\r\nimport { DashboardLayout, SidebarFooterProps } from '@toolpad/core/DashboardLayout';\r\nimport { PageContainer } from '@toolpad/core/PageContainer';\r\nimport Grid from '@mui/material/Grid2';\r\nimport { Storage, Image as Img } from '@mui/icons-material';\r\nimport { usePathname, useRouter } from 'next/navigation';\r\nimport { Box } from '@mui/material';\r\nimport LineStyleIcon from '@mui/icons-material/LineStyle';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport AddCardIcon from '@mui/icons-material/AddCard';\r\nimport BallotIcon from '@mui/icons-material/Ballot';\r\nimport BackupTableIcon from '@mui/icons-material/BackupTable';\r\nimport ManageAccountsIcon from '@mui/icons-material/ManageAccounts';\r\nimport AccountSlotsAccountSwitcher from './auth/components/AccountSlotsAccountSwitcher';\r\n\r\nimport { RootState } from '@/redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { authEvents } from '../utils/authEvents';\r\nimport useInitializeSession from './auth/useInitializeSession';\r\n\r\ntype NavigationItem = {\r\n    topNav?: {\r\n        icon: React.ReactNode;\r\n        name: string;\r\n    };\r\n    kind?: 'header' | 'divider';\r\n    segment?: string;\r\n    title?: string;\r\n    icon?: React.ReactNode;\r\n    children?: NavigationItem[];\r\n};\r\n\r\ntype Navigation = NavigationItem[] | any[];\r\n\r\nconst NAVIGATION: Navigation | any = [\r\n    // {\r\n    //     topNav: {\r\n    //         icon: <Brightness7 />,\r\n    //         name: 'Custom App Name', \r\n    //     }\r\n    // },\r\n    {\r\n        kind: 'header',\r\n        title: 'Main items',\r\n    },\r\n    {\r\n        segment: 'dashboard',\r\n        title: 'Dashboard',\r\n        icon: <DashboardIcon />,\r\n    },\r\n    {\r\n        segment: 'test',\r\n        title: 'TestZone',\r\n        icon: <ReceiptIcon />,\r\n    },\r\n    {\r\n        kind: 'divider',\r\n    },\r\n    {\r\n        kind: 'header',\r\n        title: 'Setup',\r\n    },\r\n    {\r\n        segment: 'setup',\r\n        title: 'Pdf Design',\r\n        icon: <BarChartIcon />,\r\n        children: [\r\n            {\r\n                segment: 'pdf-template',\r\n                title: 'Template',\r\n                icon: <AddCardIcon />,\r\n                // children: [{\r\n                //     segment: 'edit',\r\n                //     title: 'Edit',\r\n                // },\r\n                // {\r\n                //     segment: 'create',\r\n                //     title: 'New',\r\n                // }]\r\n            },\r\n            {\r\n                segment: 'table-manage',\r\n                title: 'Table Manage',\r\n                icon: <BackupTableIcon />,\r\n            },\r\n            {\r\n                segment: 'media',\r\n                title: 'Media',\r\n                icon: <Img />,\r\n            },\r\n            {\r\n                segment: 'data-manage',\r\n                title: 'Config',\r\n                icon: <Storage />,\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        segment: 'integrations',\r\n        title: 'Integrations',\r\n        icon: <LayersIcon />,\r\n    },\r\n    {\r\n        segment: 'organization',\r\n        title: 'Manage Organizations',\r\n        icon: <BallotIcon />,\r\n    },\r\n    {\r\n        segment: 'profile',\r\n        title: 'Manage Profile',\r\n        icon: <ManageAccountsIcon />,\r\n    },\r\n];\r\n\r\nconst demoTheme = extendTheme({\r\n    colorSchemes: {\r\n        light: {\r\n            palette: {\r\n                mode: 'light',\r\n                background: {\r\n                    default: '#f9f9f9',\r\n                    paper: '#ffffff',\r\n                },\r\n                text: {\r\n                    primary: '#000000',\r\n                    secondary: '#555555',\r\n                },\r\n            },\r\n        },\r\n        dark: {\r\n            palette: {\r\n                mode: 'dark',\r\n                background: {\r\n                    default: '#28292a', // Set dark background to #28292a\r\n                    paper: '#28292a',   // Slightly lighter for card-like components\r\n                },\r\n                text: {\r\n                    primary: '#ffffff', // Bright text for dark background\r\n                    secondary: '#b0b0b0',\r\n                },\r\n            },\r\n        },\r\n    },\r\n    colorSchemeSelector: 'class',\r\n    breakpoints: {\r\n        values: {\r\n            xs: 0,\r\n            sm: 600,\r\n            md: 600,\r\n            lg: 1200,\r\n            xl: 1536,\r\n        },\r\n    },\r\n});\r\n\r\nfunction useDemoRouter(initialPath: string): Router {\r\n    const [pathname, setPathname] = React.useState(initialPath);\r\n    const nextRouter = useRouter();\r\n    const { status } = useSelector((state: RootState) => state.session);\r\n\r\n    return {\r\n        pathname,\r\n        searchParams: new URLSearchParams(),\r\n        navigate: (path: string | URL) => {\r\n            if (path == '/setup') {\r\n                path = '/setup/editor';\r\n            } else if (status === 'unauthenticated' && path != '/' && path != '/test') {\r\n                // alert(path)\r\n                path = '/dashboard';\r\n                authEvents.emit('triggerSignIn');\r\n            }\r\n            nextRouter.push(String(path));\r\n            return setPathname(String(path));\r\n        },\r\n    };\r\n}\r\n\r\n// const Skeleton = styled('div')<{ height: number }>(({ theme, height }) => ({\r\n//     backgroundColor: theme.palette.action.hover,\r\n//     borderRadius: theme.shape.borderRadius,\r\n//     height,\r\n//     content: '\" \"',\r\n// }));\r\n\r\nfunction SidebarFooter({ mini }: SidebarFooterProps) {\r\n    const { organizations } = useSelector((state: any) => state.organization);\r\n\r\n    return (\r\n        <Box\r\n            // variant=\"caption\"\r\n            sx={{ m: 1, whiteSpace: 'nowrap', overflow: 'hidden' }}\r\n        >\r\n            {\r\n                organizations.find((organization: any) =>\r\n                    organization.is_default)?.name ?? 'No organization selected'\r\n            }\r\n            {mini ? '© ' : ` © ${new Date(organizations.find((organization: any) =>\r\n                organization.is_default)?.updated_at).getFullYear()} Made with Pdf Tool`}\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default function DashboardLayoutBasic(props: any) {\r\n    useInitializeSession();\r\n    const { window } = props;\r\n    const [mounted, setMounted] = React.useState(false);\r\n    // const theme = useSelector((state: any) => state.toggleTheme.theme);\r\n    // cuurent route url\r\n    const pathname = usePathname();\r\n    // const { data: session, status }: any = useSession();\r\n    // const router_ = useRouter();\r\n    const router = useDemoRouter(pathname ?? '/');\r\n    // const r = useDemoRouter('/dashboard');\r\n    // const [router_app, setRouter_app] = React.useState(router);\r\n\r\n    // const [session, setSession] = React.useState<Session | null>({\r\n    //     user: {\r\n    //         name: 'Bharat Kashyap',\r\n    //         email: 'bharatkashyap@outlook.com',\r\n    //         image: 'https://avatars.githubusercontent.com/u/19550456',\r\n    //     },\r\n    // });\r\n\r\n\r\n\r\n    // const authentication = React.useMemo(() => {\r\n    //     return {\r\n    //         signIn: () => {\r\n    //             setSession({\r\n    //                 user: {\r\n    //                     name: 'Bharat Kashyap',\r\n    //                     email: 'bharatkashyap@outlook.com',\r\n    //                     image: 'https://avatars.githubusercontent.com/u/19550456',\r\n    //                 },\r\n    //             });\r\n    //         },\r\n    //         signOut: () => {\r\n    //             setSession(null);\r\n    //         },\r\n    //     };\r\n    // }, []);\r\n\r\n    // React.useEffect(() => {\r\n    //     if (status === 'unauthenticated') {\r\n    //         router_.push('/dashboard');\r\n    //         setRouter_app(r);\r\n    //     } else\r\n    //         setRouter_app(router);\r\n    // }, []);\r\n    React.useEffect(() => {\r\n        console.log(pathname, 'Pathname');\r\n        setMounted(true);\r\n    }, []);\r\n\r\n    // Only render the component after the client has mounted (to avoid hydration errors)\r\n    if (!mounted) {\r\n        return null; // This prevents rendering until the component is mounted on the client side\r\n    }\r\n\r\n    // Remove this const when copying and pasting into your project.\r\n    const demoWindow = window ? window() : undefined;\r\n    // const theme = mode === 'light' ? lightTheme : darkTheme;\r\n    return (\r\n        //\r\n\r\n        <AppProvider\r\n            navigation={NAVIGATION}\r\n            branding={{\r\n                title: 'PDF Crafter: HTML to PDF Tool',\r\n                logo: <LineStyleIcon color='info' />\r\n            }}\r\n            router={router}\r\n            theme={demoTheme}\r\n            window={demoWindow}\r\n\r\n        // authentication={authentication}\r\n        // session={session}\r\n\r\n        >\r\n            {/* <SignIn></SignIn> */}\r\n            <DashboardLayout slots={{ sidebarFooter: SidebarFooter, toolbarActions: AccountSlotsAccountSwitcher }}>\r\n                <PageContainer>\r\n                    <Grid container spacing={1}>\r\n                        {/* {JSON.stringify(session)} */}\r\n                    </Grid>\r\n                    {props.children}\r\n                </PageContainer>\r\n            </DashboardLayout>\r\n        </AppProvider>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { Organization } from \"@/redux/slice/organizationSlice\";\r\nimport { API } from \"./api\";\r\n\r\nexport const findOrganizationsByUserId = async (userId: number, token: string) => {\r\n    return API.get('/organizations/' + userId, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n};\r\n\r\nexport const createOrganization = async (organization: Organization | any, token: string | any) => {\r\n    return API.post('/organizations', organization, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateOrg = async (data: any, token: string) => {\r\n    return API.put('/organizations/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const setDefaultOrganization = async (id: number, token: string) => {\r\n    return API.put('/organizations/' + id + '/default', {}, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findOrganizationById = async (id: any, token: string) => {\r\n    return API.get('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteOrganization = async (id: any, token: string) => {\r\n    return API.delete('/organizations/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import EventEmitter from 'events';\r\n\r\nexport const authEvents = new EventEmitter();\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\n\r\ninterface User {\r\n    id: number | any;\r\n    name: string;\r\n    email: string;\r\n    profile: {\r\n        id: number | any;\r\n        theme: 'dark' | 'light';\r\n        avatar: string | any;\r\n    };\r\n}\r\n\r\ninterface SessionState {\r\n    token: string | any;\r\n    user: User | null;\r\n    status?: 'unauthenticated' | 'authenticated' | 'loading';\r\n}\r\n\r\nconst initialState: SessionState = {\r\n    token: null,\r\n    user: null,\r\n    status: 'unauthenticated',\r\n};\r\n\r\nconst sessionSlice = createSlice({\r\n    name: 'session',\r\n    initialState,\r\n    reducers: {\r\n        setSession: (state, action: PayloadAction<SessionState>) => {\r\n            state.token = action.payload.token;\r\n            state.user = action.payload.user;\r\n            state.status = 'authenticated';\r\n        },\r\n        clearSession: (state) => {\r\n            state.token = null;\r\n            state.user = { id: null, name: '', email: '', profile: {id: null,theme: 'light', avatar: null} };\r\n            state.status = 'unauthenticated';\r\n        },\r\n        setLoading: (state) => {\r\n            state.status = 'loading';\r\n        },\r\n        validateSession: (state) => {\r\n            if (state.token) {\r\n                try {\r\n                    const decoded: { exp: number } = jwt.decode(state.token) as JwtPayload | any;;\r\n                    console.log('decoded', decoded);\r\n                    // Check if the token is expired\r\n                    if (decoded && decoded.exp * 1000 < Date.now()) {\r\n                        state.token = null;\r\n                        state.user = { id: null, name: '', email: '', profile: { id: null, theme: 'light', avatar: null } };\r\n                        state.status = 'unauthenticated';\r\n                    } else {\r\n                        state.status = 'authenticated';\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Invalid token:', error);\r\n                    state.token = null;\r\n                    state.user = { id: null, name: '', email: '', profile: { id: null, theme: 'light', avatar: null } };\r\n                    state.status = 'unauthenticated';\r\n                }\r\n            } else {\r\n                state.status = 'unauthenticated';\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSession, clearSession, setLoading, validateSession } = sessionSlice.actions;\r\nexport default sessionSlice.reducer;\r\n"],"names":[],"sourceRoot":""}