{"version":3,"file":"static/chunks/app/(pages)/setup/media/page-37b9c6addfdb86ee.js","mappings":"AAAA","sources":["webpack://_N_E/?9f1e","webpack://_N_E/./src/app/(pages)/setup/components/ImageArrange.tsx","webpack://_N_E/./src/app/(pages)/setup/media/page.tsx","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/mediaService.ts","webpack://_N_E/./src/app/utils/constant.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\setup\\\\media\\\\page.tsx\");\n","import React, { useState } from 'react';\r\nimport { Box, Button, TextField, FormControl, InputLabel, Select, MenuItem, CircularProgress, Grid2 } from '@mui/material';\r\nimport { Checkbox, ListItemText } from '@mui/material';\r\nimport Image from 'next/image';\r\nimport { isValidS3Url } from '@/app/utils/constant';\r\n\r\ninterface ImageManageProps {\r\n    onImageUpload: (image: any) => void;\r\n    addons: any[];\r\n}\r\n\r\nconst ImageManage: React.FC<ImageManageProps> = ({ onImageUpload, addons }) => {\r\n    const [selectedAddons, setSelectedAddons] = useState<string[]>([]);\r\n    const [key, setKey] = useState('');\r\n    const [image, setImage] = useState<File | null>(null);\r\n    // const [preview, setPreview] = useState<string | null>(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n\r\n    const imgUrl =\r\n        typeof image === 'string' && isValidS3Url(image)\r\n            ? image // Use the validated URL\r\n            : image instanceof File\r\n                ? URL.createObjectURL(image) // Use a blob URL for a File object\r\n                : undefined;\r\n\r\n    // Handle Addon Change\r\n    const handleAddonChange = (event: any) => {\r\n        setSelectedAddons(event.target.value as string[]);\r\n    };\r\n\r\n    // Handle Key Change\r\n    const handleKeyChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setKey(event.target.value);\r\n    };\r\n\r\n    // Handle Image Selection\r\n    const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            const file = event.target.files[0];\r\n            setImage(file);\r\n            // const reader = new FileReader();\r\n            // reader.onloadend = () => setPreview(reader.result as string);\r\n            // reader.readAsDataURL(file);\r\n        }\r\n    };\r\n\r\n    // Validate Form before Upload\r\n    const isValidForm = () => {\r\n        return selectedAddons.length > 0 && image !== null;//&& key.trim() !== ''\r\n    };\r\n\r\n    // Handle Image Upload\r\n    const handleUploadImage = async () => {\r\n        if (!isValidForm()) {\r\n            // alert('Please complete all fields.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true);\r\n\r\n        // Create image object to be passed to the parent\r\n        const newImage = {\r\n            key,\r\n            addons: selectedAddons,\r\n            preview: image,\r\n        };\r\n        try {\r\n            await onImageUpload(newImage);\r\n            resetForm();\r\n            setIsUploading(false);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsUploading(false);\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setSelectedAddons([]);\r\n        setKey('');\r\n        setImage(null);\r\n        // setPreview(null);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Box sx={{ width: '100%', padding: 4 }}>\r\n            <Grid2 container spacing={2}>\r\n                {/* Addons select input */}\r\n                <Grid2 size={{ sm: 6 }}>\r\n                    <FormControl fullWidth size='small'>\r\n                        <InputLabel>Addons</InputLabel>\r\n                        <Select\r\n                            multiple\r\n                            value={selectedAddons}\r\n                            onChange={handleAddonChange}\r\n                            label=\"Addons\"\r\n                            required\r\n                            size='small'\r\n                            renderValue={(selected) => selected.join(', ')}\r\n                        >\r\n                            {addons?.map((addon) => (\r\n                                <MenuItem key={addon.id} value={addon.name}>\r\n                                    <Checkbox checked={selectedAddons.includes(addon.name)} />\r\n                                    <ListItemText primary={addon.name} />\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid2>\r\n\r\n                <Grid2 size={{ sm: 6 }} display={'none'}>\r\n                    <TextField\r\n                        label=\"Key\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        value={key}\r\n                        onChange={handleKeyChange}\r\n                        required\r\n                        size='small'\r\n                    />\r\n                </Grid2>\r\n            </Grid2>\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={handleImageChange}\r\n                className=\"block  mt-5\"\r\n            />\r\n            <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'center' }}>\r\n                {imgUrl && <div className=\"mb-4\">\r\n                    {/* <h3 className=\"text-xl mb-2\">Image Preview</h3> */}\r\n                    <Image width={100} height={100} src={imgUrl} alt=\"Preview\" className=\"w-60 h-auto\" />\r\n                </div>}\r\n            </Box>\r\n            <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'end' }}>\r\n                <Button\r\n                    onClick={handleUploadImage}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    disabled={!isValidForm() || isUploading}\r\n                    size='small'\r\n                >\r\n                    {isUploading ? <CircularProgress size={24} /> : 'Upload Image'}\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ImageManage;\r\n","\"use client\";\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport { Box, Tab, Tabs, Typography, Container, Grid2 as Grid, Grid2, FormControl, InputLabel, Select, MenuItem, Checkbox, ListItemText } from '@mui/material';\r\nimport dynamic from 'next/dynamic';\r\nimport { deleteImg, findAllImages, uploadMedia } from '@/app/services/mediaService';\r\nimport { findAllAddons } from '@/app/services/addonService';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport ImageManage from '../components/ImageArrange';\r\nimport { RootState } from '@/redux/store';\r\n// const ImageManage = dynamic(() => import('../components/ImageManage'), { ssr: false });\r\nconst ImageList = dynamic(() => import('../components/ImageList'), { ssr: false });\r\n\r\ninterface Addon {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nfunction MediaManageParent() {\r\n    const [tabValue, setTabValue] = useState('1');\r\n    const [imageList, setImageList] = useState<any[]>([]); // For storing list of images\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [addons, setAddons] = useState<Addon[]>([]);\r\n    const [copiedToken, setCopiedToken] = useState<Map<number, boolean>>(new Map()); // Track if token was copied for each image\r\n    const [tooltipToken, setTooltipToken] = useState<Map<number, string>>(new Map()); // Track tooltip text for each image\r\n    const [selectedAddons, setSelectedAddons] = useState<number[]>([]);\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    // Handle Tab Change\r\n    const handleChange = (event: React.SyntheticEvent, newValue: string) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n\r\n    // Callback function for uploading image (pass to MediaManage)\r\n    const handleImageUpload = useCallback(\r\n        async (newImage: any) => {\r\n            try {\r\n                // console.log(newImage);\r\n                const add = addons.filter(a => newImage.addons.includes(a.name)).map(a => a.id);\r\n                // console.log(add);\r\n                const res = await uploadMedia(currentOrg.id, newImage.preview!, add, token);\r\n                if (res.status == 201) {\r\n                    enqueueSnackbar(`Uploaded`, { variant: 'success' });\r\n                    const img = res.data?.data;\r\n                    // console.log(img)\r\n                    setImageList((prevList) => [...prevList, {\r\n                        id: img.id,\r\n                        file_key: img.file_key,\r\n                        addon_ids: img.addon_ids,\r\n                        url: img.url,\r\n                        organization_id: img.organization_id\r\n                    }]);\r\n                }\r\n            } catch (e: any) {\r\n                enqueueSnackbar(`Failed ${e?.message}`, { variant: 'error' });\r\n                console.error(e);\r\n            }\r\n        },\r\n        [currentOrg?.id, token, addons]\r\n    );\r\n\r\n    useEffect(() => {\r\n        // Fetch the available addons from the API\r\n        // alert(tabValue)\r\n        const fetchAddons = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const res = await findAllAddons(currentOrg?.id, token);\r\n                if (res.status == 200) {\r\n                    setAddons(() => res.data);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching addons:\", error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n\r\n        const fetchImgs = async () => {\r\n            try {\r\n                const res = await findAllImages(currentOrg?.id, token);\r\n                setImageList(() => res);\r\n            } catch (error) {\r\n                console.error(\"Error fetching addons:\", error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        if (token) {\r\n            fetchAddons();\r\n            fetchImgs();\r\n        }\r\n        return () => {\r\n            setAddons([]);\r\n        }\r\n    }, [currentOrg?.id]);\r\n\r\n    useEffect(() => {\r\n        if (currentOrg?.id) {\r\n            const fetchImgs = async () => {\r\n                try {\r\n                    const res = await findAllImages(currentOrg?.id, token, selectedAddons);\r\n                    setImageList(() => res);\r\n                } catch (error) {\r\n                    console.error(\"Error fetching addons:\", error);\r\n                } finally {\r\n                    setIsLoading(false);\r\n                }\r\n            }\r\n            setIsLoading(true);\r\n            fetchImgs();\r\n        }\r\n    }, [selectedAddons]);\r\n\r\n    const handleCopyUrl = (url: string, id: number) => {\r\n        if (!url) return;\r\n\r\n        // Copy URL to clipboard\r\n        navigator.clipboard.writeText(url)\r\n            .then(() => {\r\n                // Update copiedToken state to mark it as copied for the specific image ID\r\n                setCopiedToken((prev) => new Map(prev).set(id, true));\r\n\r\n                // Set tooltip text to 'Copied' for this specific image\r\n                setTooltipToken((prev) => new Map(prev).set(id, 'Copied'));\r\n\r\n                // Reset after a short delay\r\n                const t = setTimeout(() => {\r\n                    setCopiedToken((prev) => new Map(prev).set(id, false));\r\n                    setTooltipToken((prev) => new Map(prev).set(id, 'Copy URL'));\r\n                    clearTimeout(t);\r\n                }, 2000);\r\n            })\r\n            .catch(err => {\r\n                console.error('Failed to copy: ', err);\r\n            });\r\n    };\r\n\r\n    const handleDelete = async (fileKey: string) => {\r\n        try {\r\n            const response = await deleteImg(fileKey, token);\r\n            if (response.status == 204) {\r\n                setImageList((prev) => [...prev.filter(i => i.file_key != fileKey)]);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching addons:\", error);\r\n        }\r\n    };\r\n\r\n    const handleAddonChange = (event: any) => {\r\n        setSelectedAddons(event.target.value as number[]);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs value={tabValue} onChange={handleChange} aria-label=\"Media management tabs\">\r\n                    <Tab label=\"All Images\" value=\"1\" />\r\n                    <Tab label=\"New Image\" value=\"2\" />\r\n                </Tabs>\r\n            </Box>\r\n\r\n            {/* All Images Tab */}\r\n            <TabPanel value={tabValue} index=\"1\">\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    All Created Images\r\n                </Typography>\r\n                <Grid2 size={{ lg: 6 }} sx={{m:5}}>\r\n                    <FormControl fullWidth size='small'>\r\n                        <InputLabel>Filter By Addons</InputLabel>\r\n                        <Select\r\n                            multiple\r\n                            value={selectedAddons}\r\n                            onChange={handleAddonChange}\r\n                            label=\"Filter By Addons\"\r\n                            required\r\n                            size='small'\r\n                            renderValue={(selected) => addons.filter(a => selected.includes(a.id)).map(a=> a.name).join(', ')}\r\n                        >\r\n                            {addons?.map((addon) => (\r\n                                <MenuItem key={addon.id} value={addon.id}>\r\n                                    <Checkbox checked={selectedAddons.includes(addon.id)} />\r\n                                    <ListItemText primary={addon.name} />\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid2>\r\n                {!isLoading && <Grid container spacing={2}>\r\n                    <ImageList\r\n                        imageList={imageList}\r\n                        addons={addons}\r\n                        handleDelete={(fileKey: string) => handleDelete(fileKey)}\r\n                        handleCopy={(url: string, id: number) => handleCopyUrl(url, id)}\r\n                        tooltipImg={tooltipToken}\r\n                        copiedToken={copiedToken}\r\n                    />\r\n                    {/* {imageList.map((image, index) => (\r\n                        <Grid size={{ xs: 6, md: 4 }} key={index + image.file_key}>\r\n                            <Box sx={{ border: '1px solid #ccc', padding: 2 }}>\r\n                                <Image src={image.url} width={200} height={200} alt={`image-${index}`} className=\"w-full h-auto\" />\r\n                                <Typography variant=\"body2\" mt={1}>\r\n                                    Created At: {new Date(image.updated_at).toLocaleDateString()}\r\n                                </Typography>\r\n                                <Stack direction=\"row\" spacing={1}>\r\n                                    {addons?.filter((a: any) => image.addon_ids.includes(a.id + '')) ?.map(a=> a.name)?.map((addon: string, i: number) => (\r\n                                        <Button key={i} size='small' sx={{ fontSize: 8 }} variant=\"outlined\">\r\n                                            {addon}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Stack>\r\n                            </Box>\r\n                        </Grid>\r\n                    ))} */}\r\n                </Grid>}\r\n            </TabPanel>\r\n\r\n            {/* New Image Tab */}\r\n            <TabPanel value={tabValue} index=\"2\">\r\n                <ImageManage onImageUpload={handleImageUpload} addons={addons} />\r\n            </TabPanel>\r\n        </Container>\r\n    );\r\n}\r\n\r\n// TabPanel Component\r\nfunction TabPanel(props: { value: string; index: string; children: React.ReactNode }) {\r\n    const { value, index, children } = props;\r\n    return value === index && <Box sx={{ padding: 2 }}>{children}</Box>;\r\n}\r\n\r\nexport default MediaManageParent;\r\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const uploadAvator = async (userId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('avatar', image);\r\n\r\n    try {\r\n        const response = await API.put(`/profiles/${userId}/avatar`, formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadOrgLogo = async (currentOrgId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('logo', image);\r\n\r\n    try {\r\n        const response = await API.post('/s3/upload/org/logo', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadMedia = async (currentOrgId: number, image: File, addon_ids:number[]=[], token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('media', image);\r\n\r\n    return await API.post('/s3/media/upload', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organization_id: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n};\r\n\r\nexport const findAllImages = async (currentOrgId: number, token: string, addon_ids: number[] = []) => {\r\n    try {\r\n        const response = await API.get('/media/organization/' + currentOrgId, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteImg = async (key: any, token: string) => {\r\n    return API.delete('/s3/delete/img', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            fileKey: key\r\n        }\r\n    });\r\n}","export const TAG_TYPES = ['CONTENT', 'TABLE', 'IMAGE'];\r\n\r\n\r\n// Animation variants\r\nexport const fadeIn = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nexport const isValidS3Url = (url: string): boolean => {\r\n    const s3UrlPattern = /^https:\\/\\/pdf-crafter2\\.s3\\.us-east-1\\.amazonaws\\.com\\/.+$/;\r\n    return s3UrlPattern.test(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\nexport const hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n\r\nexport const ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n\r\nexport const bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`;\r\n\r\n\r\nexport const initialTableData = {\r\n  initialColumns: 3,\r\n  initialRows: [\r\n    { col1: \"Data 1\", col2: \"Data 2\", col3: \"Data 3\" }, // Default row data\r\n  ],\r\n  initialStyles: Array.from({ length: 3 }, () => ({\r\n    backgroundColor: \"#f4f4f4\", // Default background color\r\n    fontSize: \"14\", // Default font size\r\n    padding: \"8px\", // Default padding\r\n    color: \"#000\", // Default text color\r\n  })),\r\n  customHtml: `<table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #007bff; color: #ffffff;\">\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 1</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 2</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 3</th>\r\n                            </tr>\r\n                        </thead><tbody></tbody></table>`\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}