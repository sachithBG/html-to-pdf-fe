{"version":3,"file":"static/chunks/app/(pages)/setup/table-manage/page-02abacd940303010.js","mappings":"AAAA","sources":["webpack://_N_E/?1f4b","webpack://_N_E/./src/app/(pages)/setup/components/DeleteConfirmDialog.tsx","webpack://_N_E/./src/app/services/dynamicHtmlTableService.ts","webpack://_N_E/./src/app/(pages)/setup/components/TableManage.tsx","webpack://_N_E/./src/app/(pages)/setup/table-manage/page.tsx","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/utils/constant.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\setup\\\\table-manage\\\\page.tsx\");\n","import React, { FC, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    IconButton,\r\n    ButtonProps,\r\n    IconButtonProps,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox';\r\n\r\ninterface DeleteConfirmDialogProps {\r\n    id: string | number; // The ID of the item to delete\r\n    onDelete: (id: string | number) => void; // Callback with the ID of the item\r\n    title?: string; // Optional title for the dialog\r\n    description?: string; // Optional description for the dialog\r\n    variant?: \"icon\" | \"normal\"; // Button type: icon or normal\r\n    buttonProps?: ButtonProps | IconButtonProps; // Props for the button\r\n    iconType?: 'delete' | 'remove' \r\n}\r\n\r\n/* usege --------------------------------------------\r\n<DeleteConfirmDialog\r\n    id={template.id}\r\n    onDelete={(id:any) => handleDelete(id)}\r\n    variant=\"icon\"\r\n    buttonProps={{ size: \"small\", color: \"error\" }} // IconButton props\r\n/>\r\n<DeleteConfirmDialog\r\n  id={102}\r\n  onDelete={(id) => console.log(\"Deleted:\", id)}\r\n  variant=\"normal\"\r\n  buttonProps={{ size: \"medium\", variant: \"outlined\", color: \"primary\" }} // Button props\r\n/>\r\n\r\n*/\r\n\r\nconst DeleteConfirmDialog: FC<DeleteConfirmDialogProps> = ({\r\n    id,\r\n    onDelete,\r\n    title = \"Confirm Deletion\",\r\n    description = \"Are you sure you want to delete this item? This action cannot be undone.\",\r\n    variant = \"normal\",\r\n    buttonProps,\r\n    iconType = 'delete'\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleConfirmDelete = () => {\r\n        onDelete(id); // Pass the ID to the delete action\r\n        handleClose(); // Close the dialog\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Trigger Button */}\r\n            {variant === \"icon\" ? (\r\n                <IconButton onClick={handleOpen} {...(buttonProps as IconButtonProps)}>\r\n                    {iconType == 'delete' ? <DeleteIcon /> : <IndeterminateCheckBoxIcon />}\r\n                </IconButton>\r\n            ) : (\r\n                <Button onClick={handleOpen} {...(buttonProps as ButtonProps)}>\r\n                    Delete\r\n                </Button>\r\n            )}\r\n\r\n            {/* Confirmation Dialog */}\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"delete-dialog-title\">{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"delete-dialog-description\">\r\n                        {description}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirmDelete} color=\"error\" autoFocus>\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeleteConfirmDialog;\r\n","import { API } from \"./api\";\r\n\r\nexport const createPdfTable = async (data: any, token: string) => {\r\n    return API.post(`/dynamic-html-table`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};\r\n\r\nexport const getPdfTable = async (id: number, token: string) => {\r\n    return API.get(`/dynamic-html-table/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};\r\n\r\nexport const readAllPdfTablePage = async (\r\n    orgId: number,\r\n    token: string,\r\n    {\r\n        sortOrder = 'asc',   // Default value for sortOrder\r\n        startFrom = 0,      // Default value for startFrom (pagination)\r\n        to = 10,            // Default value for to (pagination)\r\n        sortBy = 'name',    // Default value for sortBy\r\n        addonsFilter = '',  // Default value for addonsFilter\r\n        search = '',        // Default value for search filter\r\n    } = {} // Default empty object if no parameters are passed\r\n) => {\r\n    return API.get(`/dynamic-html-table/page`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        params: {\r\n            sortOrder,   // sorting order, default is 'asc'\r\n            startFrom,   // starting index, default is 0\r\n            to,          // number of items to return, default is 10\r\n            sortBy,      // field to sort by, default is 'name'\r\n            addonsFilter, // any additional filter, default is empty string\r\n            search,      // search filter, default is empty string\r\n            organization_id: orgId\r\n        },\r\n    });\r\n};\r\n\r\nexport const updatePdfTable = async (id: string, data: any, token: string) => {\r\n    return API.put(`/dynamic-html-table/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};\r\n\r\nexport const deletePdfTable = async (id: string, token: string) => {\r\n    return API.delete(`/dynamic-html-table/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport { TextField, Button, Typography, Box, InputAdornment, Grid2, Divider } from \"@mui/material\";\r\n\r\nconst TableManagePage = ({ id, fetchTable, handleSubmit, currentTable }: any) => {\r\n\r\n    const [rows, setRows] = useState<any>(currentTable.table_rows); // Row data\r\n    const [colKeys, setColKeys] = useState<any>(currentTable.col_keys || {}); // Row data\r\n    const [numColumns, setNumColumns] = useState(currentTable.num_columns); // Number of columns\r\n    const [customHtml, setCustomHtml] = useState(currentTable.custom_html); // Custom HTML table\r\n    const [previewHtml, setPreviewHtml] = useState(\"\"); // Preview HTML table\r\n    const [cellStyles, setCellStyles] = useState(currentTable.cell_styles); // Cell styles\r\n    const [isEdit, setIsEdit] = useState<boolean>(id && Number(id) > 0); // Flag to check if editing existing table\r\n\r\n    // Handle changes to form inputs for dynamic rows\r\n    const handleRowChange = (e: React.ChangeEvent<HTMLInputElement> | any, index: number) => {\r\n        const { name, value } = e.target;\r\n        setRows((prevRows: any) => {\r\n            const updatedRows = [...prevRows];\r\n            updatedRows[index][name] = value;\r\n            generatePreview(updatedRows); // Regenerate preview when data changes\r\n            return updatedRows;\r\n        });\r\n    };\r\n\r\n    const handleColKeyChange = (e: React.ChangeEvent<HTMLInputElement> | any) => {\r\n        const { name, value } = e.target;\r\n        // console.log(colKeys)\r\n        setColKeys((prev: any) => {\r\n            const updatedRows = { ...prev };\r\n            updatedRows[name] = value;\r\n            // generatePreview(updatedRows); // Regenerate preview when data changes\r\n            return updatedRows;\r\n        });\r\n    };\r\n\r\n    // Add a new row to the table\r\n    const addRow = () => {\r\n        setRows((prevRows: any) => [...prevRows, { [`col${numColumns}`]: \"\" }]);\r\n    };\r\n\r\n    // Remove a row from the table\r\n    const removeRow = (index: number) => {\r\n        setRows((prevRows: any) => {\r\n            const updatedRows = prevRows.filter((_: any, i: number) => i !== index);\r\n            generatePreview(updatedRows); // Regenerate preview when a row is removed\r\n            return updatedRows;\r\n        });\r\n    };\r\n\r\n    // Handle number of columns change\r\n    const handleNumColumnsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = parseInt(e.target.value, 10);\r\n        if (!isNaN(value) && value > 0 && value <= 6) {  // Max number of columns is 6\r\n            setNumColumns(value);\r\n            setCellStyles(\r\n                Array.from({ length: value }, () => ({\r\n                    backgroundColor: \"#f4f4f4\", // Default background color\r\n                    fontSize: \"14\", // Default font size\r\n                    padding: \"8px\", // Default padding\r\n                    color: \"#000\", // Default text color\r\n                }))\r\n            );\r\n            generatePreview(rows); // Regenerate preview when the number of columns changes\r\n        }\r\n    };\r\n\r\n    // Handle changes to individual cell styles (background, font size, padding, text color)\r\n    const handleCellStyleChange = (index: number, style: string, value: string) => {\r\n        setCellStyles((prevStyles: any) => {\r\n            const updatedStyles = [...prevStyles];\r\n            updatedStyles[index] = { ...updatedStyles[index], [style]: value };\r\n            generatePreview(rows); // Regenerate preview when styles are updated\r\n            return updatedStyles;\r\n        });\r\n    };\r\n\r\n    // Generate the HTML for the table preview with styles and custom HTML content\r\n    const generatePreview = (rowsData: any[]) => {\r\n        const tableBody = rowsData\r\n            .map((row, rowIndex) => {\r\n                return `\r\n      <tr style=\"background-color: ${cellStyles[rowIndex]?.backgroundColor};\">\r\n        ${Array.from({ length: numColumns }).map((_, colIndex) => {\r\n                    return `\r\n            <td style=\"background-color: ${cellStyles[colIndex].backgroundColor}; font-size: ${cellStyles[colIndex].fontSize}; padding: ${cellStyles[colIndex].padding}; color: ${cellStyles[colIndex].color}; border: 1px solid #ddd; text-align: left;\">\r\n              ${row[`col${colIndex + 1}`]}\r\n            </td>`;\r\n                }).join(\"\")}\r\n      </tr>`;\r\n            })\r\n            .join(\"\");\r\n\r\n        const tableTemplate = customHtml.replace(\"<tbody></tbody>\", `<tbody>${tableBody}</tbody>`);\r\n        setPreviewHtml(tableTemplate); // Update the preview with generated table body\r\n    };\r\n\r\n    // Handle changes to the custom HTML table structure (for table, thead, tbody, etc.)\r\n    const handleCustomHtmlChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        let textV = e.target.value;\r\n        if (textV) textV = textV.replace(/<\\/thead>.*<\\/table>/s, \"</thead><tbody></tbody></table>\")\r\n        setCustomHtml(textV);\r\n        generatePreview(rows); // Regenerate the preview based on the new custom HTML structure\r\n    };\r\n\r\n    // Function to save table data (called when the user clicks save)\r\n    const saveTableData = async (e: any) => {\r\n        e.preventDefault();\r\n        handleSubmit({\r\n            ...currentTable,\r\n            custom_html: customHtml, table_rows: rows,\r\n            cell_styles: cellStyles, num_columns: numColumns,\r\n            col_keys: colKeys\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        generatePreview(rows);\r\n    }, [rows, customHtml]);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            // Make API call to save table data\r\n            setIsEdit(() => true);\r\n            fetchTable(id);\r\n            // getExternalKey(id, token)\r\n            setRows(currentTable.table_rows);\r\n            setColKeys(currentTable.col_keys);\r\n            setNumColumns(currentTable.num_columns);\r\n            setCustomHtml(currentTable.custom_html);\r\n            setCellStyles(currentTable.cell_styles);\r\n            //     .then(response => {\r\n            //         let data = response.data;\r\n            //         setRows(data.table_rows);\r\n            //         setCustomHtml(data.custom_html);\r\n            //         setCellStyles(data.cell_styles);\r\n            //         setNumColumns(data.num_columns);\r\n            //     }).catch(error => {\r\n            //         console.error(\"Error saving table data:\", error);\r\n            //     });\r\n        }\r\n    }, [id]);\r\n\r\n    return (\r\n        <Box sx={{ margin: '0 auto' }} className=\"space-y-6\">\r\n            {/* Save or Update Button */}\r\n            <Box sx={{ position: 'relative', width: '100%' }}>\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={saveTableData}\r\n                size=\"small\"\r\n                className=\"mt-6\"\r\n                sx={{ mt: -34, display: 'flex', justifyContent: 'flex-end', right:'1.2%', float:'right'}}\r\n            >\r\n                {isEdit ? \"Update Table\" : \"Save Table\"}\r\n                </Button>\r\n            </Box>\r\n            {/* <Typography variant=\"h4\" className=\"text-center font-bold mb-6\">\r\n                {isEdit ? \"Edit Table\" : \"Create Table\"}\r\n            </Typography> */}\r\n            <Box>\r\n                <Typography variant=\"h6\" className=\"mb-5\">Table Design</Typography>\r\n\r\n                {/* Number of Columns Input */}\r\n                <TextField\r\n                    label=\"Number of Columns\"\r\n                    type=\"number\"\r\n                    value={numColumns}\r\n                    onChange={handleNumColumnsChange}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    sx={{ marginBottom: 2, mt: 4 }}\r\n                    inputProps={{ min: 1, max: 6 }}\r\n                    size=\"small\"\r\n                />\r\n\r\n                <Typography variant=\"h6\" className=\"mb-2\">Table Col Keys</Typography>\r\n\r\n                {/* Dynamic Table Col Key Input */}\r\n\r\n                <Box className=\"flex items-center space-x-2 mb-3 mt-3\">\r\n                    {Array.from({ length: numColumns }).map((_, colIndex) => (\r\n                        <TextField\r\n                            key={colIndex}\r\n                            label={`Column Key ${colIndex + 1}`}\r\n                            name={`col_key${colIndex + 1}`}\r\n                            value={colKeys[`col_key${colIndex + 1}`] || \"\"}\r\n                            onChange={(e) => handleColKeyChange(e)}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            className=\"flex-1\"\r\n                            size=\"small\"\r\n                        />\r\n                    ))}\r\n                </Box>\r\n\r\n                {/* Custom HTML Textarea */}\r\n                <Typography variant=\"body1\" className=\"mb-2\">Custom HTML Table</Typography>\r\n                <TextField\r\n                    value={customHtml}\r\n                    onChange={handleCustomHtmlChange}\r\n                    multiline\r\n                    sx={{\r\n                        padding: 2,\r\n                        width: '100%',\r\n                        border: '1px solid #ddd',\r\n                        borderRadius: '8px',\r\n                        marginBottom: 3,\r\n                        fontFamily: 'monospace',\r\n                        fontSize: '14px',\r\n                    }}\r\n                    placeholder=\"Enter your custom HTML table here\"\r\n                />\r\n            </Box>\r\n\r\n            <Box>\r\n                <Typography variant=\"h6\" className=\"mb-2\">Table Data</Typography>\r\n                {/* Add Row Button */}\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={addRow}\r\n                    size=\"small\"\r\n                    className=\"mb-3\"\r\n                    sx={{ float: 'right', mb: 2, mt: -2 }}\r\n                >\r\n                    Add Row\r\n                </Button>\r\n                <Divider sx={{ width: '100%', my: 2 }}></Divider>\r\n                {/* Dynamic Table Data Input */}\r\n                {rows.map((row: any, index: number) => (\r\n                    <Box key={index} className=\"flex items-center space-x-2 mb-3 mt-3\">\r\n                        {Array.from({ length: numColumns }).map((_, colIndex) => (\r\n                            <TextField\r\n                                key={colIndex}\r\n                                label={`Column ${colIndex + 1}`}\r\n                                name={`col${colIndex + 1}`}\r\n                                value={row[`col${colIndex + 1}`] || \"\"}\r\n                                onChange={(e) => handleRowChange(e, index)}\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                className=\"flex-1\"\r\n                                size=\"small\"\r\n                            />\r\n                        ))}\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"error\"\r\n                            onClick={() => removeRow(index)}\r\n                            size=\"small\"\r\n                        >\r\n                            Remove\r\n                        </Button>\r\n                    </Box>\r\n                ))}\r\n            </Box>\r\n\r\n            {/* Cell Styles */}\r\n            <Box>\r\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>Cell Styles</Typography>\r\n                {Array.from({ length: numColumns }).map((_, colIndex) => (\r\n                    <Box key={colIndex} className=\"mb-6\">\r\n                        <Typography variant=\"body1\" className=\"mb-2\">Column {colIndex + 1} Styles</Typography>\r\n                        <Grid2 container spacing={2} className=\"mt-4\">\r\n                            <Grid2 size={3}>\r\n                                <TextField\r\n                                    label=\"Background Color\"\r\n                                    value={cellStyles[colIndex].backgroundColor}\r\n                                    onChange={(e) => handleCellStyleChange(colIndex, \"backgroundColor\", e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                />\r\n                            </Grid2>\r\n                            <Grid2 size={3}>\r\n                                <TextField\r\n                                    label=\"Font Size\"\r\n                                    value={cellStyles[colIndex].fontSize}\r\n                                    onChange={(e) => handleCellStyleChange(colIndex, \"fontSize\", e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    slotProps={{\r\n                                        input: {\r\n                                            endAdornment: (\r\n                                                <InputAdornment position=\"end\">px</InputAdornment>\r\n                                            ),\r\n                                        },\r\n                                    }}\r\n                                // InputProps={{\r\n                                //     endAdornment: <InputAdornment position=\"end\">px</InputAdornment>,\r\n                                // }}\r\n                                />\r\n                            </Grid2>\r\n                            <Grid2 size={3}>\r\n                                <TextField\r\n                                    label=\"Padding\"\r\n                                    value={cellStyles[colIndex].padding}\r\n                                    onChange={(e) => handleCellStyleChange(colIndex, \"padding\", e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                />\r\n                            </Grid2>\r\n                            <Grid2 size={3}>\r\n                                <TextField\r\n                                    label=\"Text Color\"\r\n                                    value={cellStyles[colIndex].color}\r\n                                    onChange={(e) => handleCellStyleChange(colIndex, \"color\", e.target.value)}\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                />\r\n                            </Grid2>\r\n                        </Grid2>\r\n                    </Box>\r\n                ))}\r\n            </Box>\r\n\r\n            {/* Table Preview */}\r\n            <Typography variant=\"h6\" className=\"mb-2\">Table Preview</Typography>\r\n            <Box className=\"p-4 border rounded-lg border-gray-300\" dangerouslySetInnerHTML={{ __html: previewHtml }} />\r\n\r\n            {/* Save or Update Button */}\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={saveTableData}\r\n                size=\"small\"\r\n                className=\"mt-6\"\r\n                sx={{ mt: 5, float: 'right' }}\r\n            >\r\n                {isEdit ? \"Update Table\" : \"Save Table\"}\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default TableManagePage;\r\n","'use client'\r\nimport React, { useState, useEffect, useCallback, SyntheticEvent } from 'react';\r\nimport {\r\n    Box,\r\n    Tab,\r\n    Tabs,\r\n    Typography,\r\n    Paper,\r\n    Skeleton,\r\n    TextField,\r\n    MenuItem,\r\n    Select,\r\n    FormControl,\r\n    InputLabel,\r\n    Alert,\r\n    IconButton,\r\n    Tooltip,\r\n    Pagination,\r\n    Button\r\n} from '@mui/material';\r\nimport { TabContext, TabPanel } from '@mui/lab';\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport { useSelector } from 'react-redux';\r\nimport { findAllAddons } from '@/app/services/addonService';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { createPdfTable, deletePdfTable, getPdfTable, readAllPdfTablePage, updatePdfTable } from '@/app/services/dynamicHtmlTableService';\r\nimport { initialTableData } from '@/app/utils/constant';\r\nimport { AddBox as AddBoxIcon } from '@mui/icons-material';\r\nimport { useSnackbar } from 'notistack';\r\n// @typescript-eslint / no - unused - vars\r\n// import dynamic from 'next/dynamic';\r\nimport DeleteConfirmDialog from '../components/DeleteConfirmDialog';\r\nimport TableManagePage from '../components/TableManage';\r\nimport { RootState } from '@/redux/store';\r\n// import TableManagePage from '@components/TableManagePage';\r\n// const TableManagePage = dynamic(() => import('../components/TableManagePage'), { ssr: false });\r\n\r\nconst PdfTableManager = () => {\r\n    const [tabValue, setTabValue] = useState('1');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [addons, setAddons] = useState([]);\r\n    const [tag, setTag] = useState<any>({ id: null, name: '', field_path: '' });\r\n    const [tables, setTables] = useState([]);\r\n    // const [pdfTable, setPdfTable] = useState({});\r\n    const [selectedAddon, setSelectedAddon] = useState<any[]>([]);\r\n    const [name, setName] = useState('');\r\n    // const [tableTag, setTableTag] = useState('');\r\n    const [error, setError] = useState('');\r\n    // const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n    const [currentTable, setCurrentTable] = useState<any>({\r\n        custom_html: initialTableData.customHtml, table_rows: initialTableData.initialRows,\r\n        cell_styles: initialTableData.initialStyles, num_columns: initialTableData.initialColumns\r\n    });\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const pageSize = 10; // Adjust the page size as needed\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    // Fetch tables with pagination\r\n    const fetchTables = useCallback(async (orgId: number, page: number, token: string) => {\r\n        if (!orgId) return;\r\n        setIsLoading(true);\r\n        try {\r\n            // Replace with your API call to fetch tables for the page\r\n            const response = await readAllPdfTablePage(orgId, token, {\r\n                sortOrder: 'desc',\r\n                startFrom: (page - 1) * pageSize,\r\n                to: pageSize,\r\n                search: '',\r\n                sortBy: 'name'\r\n            });\r\n            const data = response.data?.data;\r\n            setTables(data?.data); // Assuming response contains paginated table data\r\n            setTotalPages(Math.ceil(data?.total / pageSize)); // Calculate total pages for pagination\r\n        } catch (error) {\r\n            console.error('Error fetching tables:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [currentPage, currentOrg?.id]);\r\n\r\n    const fetchTable = useCallback(async (id: number) => {\r\n        setIsLoading(true);\r\n        try {\r\n            // Replace with your API call to fetch tables for the page\r\n            const response = await getPdfTable(id, token);\r\n            if (response.status == 200) {\r\n                setCurrentTable(() => response.data);\r\n                let tg = response.data?.tag;\r\n                if (tg) tg = { ...tg, field_path: tg.field_path.replace('._table_', '') }\r\n                setTag(() => tg || { id: null, name: '', field_path: '' });\r\n                setSelectedAddon(response.data?.addon_ids || []);\r\n                setName(response.data?.name)\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching tables:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [token]);\r\n\r\n    const fetchAddons = useCallback(async (orgId: number, token: string) => {\r\n        // alert(token)\r\n        if (orgId) {\r\n            try {\r\n                const response = await findAllAddons(orgId, token);\r\n                // console.log(response.data)\r\n                if (response.status == 200) {\r\n                    setAddons(() => response.data);\r\n                    setSelectedAddon([]);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching addons:\", error);\r\n            }\r\n        }\r\n    }, [currentOrg?.id]);\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        const tout = setTimeout(() => {\r\n            if (currentOrg?.id) {\r\n                fetchAddons(currentOrg.id, token);\r\n                fetchTables(currentOrg.id, currentPage, token);\r\n            } else {\r\n                setIsLoading(false);\r\n            }\r\n        }, 1000);\r\n        return () => {\r\n            clearTimeout(tout)\r\n        }\r\n    }, [currentOrg?.id]);\r\n\r\n    // Handle tab change\r\n    const handleTabChange = (event: SyntheticEvent, newValue: string) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    // Handle edit\r\n    const handleEdit = (table: any) => {\r\n        fetchTable(table.id);\r\n        setTabValue(\"2\");\r\n        // setCurrentTable(table);\r\n        // setSelectedAddon(table.addonId);\r\n        // setTableKey(table.key);\r\n        // setIsEditDialogOpen(true);\r\n    };\r\n\r\n    // Handle new\r\n    const handleNew = () => {\r\n        console.log('e')\r\n        setCurrentTable(() => {\r\n            return {\r\n                custom_html: initialTableData.customHtml, table_rows: initialTableData.initialRows,\r\n                cell_styles: initialTableData.initialStyles, num_columns: initialTableData.initialColumns\r\n            }\r\n        });\r\n        setTag(() => { return { id: null, name: '', field_path: '' } });\r\n        setSelectedAddon([]);\r\n        setName('')\r\n        setTabValue(\"2\");\r\n        // setCurrentTable(table);\r\n        // setSelectedAddon(table.addonId);\r\n        // setTableKey(table.key);\r\n        // setIsEditDialogOpen(true);\r\n    };\r\n\r\n    // Handle delete\r\n    const handleDelete = async (id: string) => {\r\n        try {\r\n            await deletePdfTable(id, token);\r\n            fetchTables(currentOrg.id, currentPage, token); // Refresh the table list after deletion\r\n            enqueueSnackbar('Table deleted successfully.', { variant: 'success' });\r\n            // setSnackbarOpen(true);\r\n        } catch (error) {\r\n            console.error('Error deleting table:', error);\r\n            enqueueSnackbar('Error deleting table', { variant: 'error' });\r\n        }\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = useCallback(async (tableData: any) => {\r\n        console.log(name)\r\n        if (!selectedAddon || !name || !tag.field_path) {\r\n            setError('All fields are required.');\r\n            enqueueSnackbar('All fields are required.', { variant: 'error' })\r\n            return;\r\n        }\r\n        try {\r\n            const payload = {\r\n                ...tableData, name: name, organization_id: currentOrg?.id, addon_ids: selectedAddon,\r\n                tag_id: tag.id, tag: tag\r\n            };\r\n            if (currentTable.id) {\r\n                // Update table\r\n                const res = await updatePdfTable(currentTable.id, payload, token);\r\n                if (res.status == 200) {\r\n                    setCurrentTable(res.data);\r\n                    setTag(res.data?.tag || { id: null, name: '', field_path: '' })\r\n                }\r\n            } else {\r\n                // Create table\r\n                const res = await createPdfTable(payload, token);\r\n                if (res.status == 201) {\r\n                    setCurrentTable(res.data);\r\n                    setTag(res.data?.tag || { id: null, name: '', field_path: '' })\r\n                }\r\n            }\r\n\r\n            // setIsEditDialogOpen(false);\r\n            fetchTables(currentOrg.id, currentPage, token);\r\n            enqueueSnackbar(currentTable ? 'Table updated successfully.' : 'Table created successfully.', { variant: 'success' });\r\n        } catch (error: any) {\r\n            setError('Error saving table: ' + error?.response?.data?.error || error);\r\n            enqueueSnackbar('Error saving table: ' + error?.response?.data?.error || error, { variant: 'error' });\r\n            console.error('Error saving table:', error?.response?.data?.error || error);\r\n        } finally {\r\n        }\r\n    }, [name, selectedAddon, tag.field_path, tag.id, currentTable.id]);\r\n\r\n    // Handle page change\r\n    const handlePageChange = (event: any, newPage: number) => {\r\n        setCurrentPage(newPage);\r\n    };\r\n\r\n    // Cleanup when the component unmounts\r\n    useEffect(() => {\r\n        return () => {\r\n            setTables([]); // Reset tables on component unmount\r\n            setAddons([]);\r\n            setTag({ id: null, name: '', field_path: '' });\r\n            setSelectedAddon([]);\r\n            // setTableKey('');\r\n            setError('');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <TabContext value={tabValue}>\r\n                {tabValue =='1'  && <Button sx={{ mx: 3, mt: 1, float: 'right' }} size='small' variant=\"outlined\" onClick={handleNew}>\r\n                    New &nbsp;<AddBoxIcon fontSize=\"inherit\" />\r\n                </Button>}\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <Tabs value={tabValue} onChange={handleTabChange}>\r\n                        <Tab label=\"List PDF Tables\" value=\"1\" />\r\n                        <Tab label=\"New / Edit Table\" value=\"2\" />\r\n                    </Tabs>\r\n                </Box>\r\n                <TabPanel value=\"1\">\r\n                    {isLoading ? (\r\n                        <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\r\n                    ) : (\r\n                        <Paper>\r\n                            {tables.map((table: any) => (\r\n                                <Box key={table.id} sx={{ display: 'flex', justifyContent: 'space-between', p: 2 }}>\r\n                                    <Typography>{table.name}</Typography>\r\n                                    <Box>\r\n                                        <Tooltip title=\"Copy Key\">\r\n                                            <IconButton onClick={() => navigator.clipboard.writeText('{{' + table.field_path + '}}')}>\r\n                                                <ContentCopyIcon />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Edit\">\r\n                                            <IconButton onClick={() => handleEdit(table)}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Delete\">\r\n                                            <DeleteConfirmDialog\r\n                                                id={table.id}\r\n                                                onDelete={(id: any) => handleDelete(id)}\r\n                                                variant=\"icon\"\r\n                                                buttonProps={{ size: \"small\", color: \"error\" }}\r\n                                                iconType=\"delete\"\r\n                                            />\r\n                                            {/* <IconButton onClick={() => handleDelete(table.id)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton> */}\r\n                                        </Tooltip>\r\n                                    </Box>\r\n                                </Box>\r\n                            ))}\r\n                        </Paper>\r\n                    )}\r\n                    <Pagination\r\n                        count={totalPages}\r\n                        page={currentPage}\r\n                        onChange={handlePageChange}\r\n                        sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}\r\n                    />\r\n                </TabPanel>\r\n                <TabPanel value=\"2\">\r\n                    {/* <Button sx={{ my: 5, float: 'right' }} size='small' variant=\"contained\" onClick={()=> handleSubmit()}>\r\n                        {currentTable ? 'Update Table' : 'Create Table'}\r\n                    </Button> */}\r\n                    <TextField\r\n                        label=\"Name\"\r\n                        value={name}\r\n                        onChange={(e) => { setName(() => e.target.value); setError(''); }}\r\n                        fullWidth\r\n                        sx={{ mb: 2 }}\r\n                        size=\"small\"\r\n                    />\r\n                    <FormControl fullWidth sx={{ my: 2 }} size='small'>\r\n                        <InputLabel id=\"select-label-addon\">Addon</InputLabel>\r\n                        <Select\r\n                            value={selectedAddon}\r\n                            multiple\r\n                            onChange={(e: any) => { setSelectedAddon(() => e.target.value); setError(''); }}\r\n                            // displayEmpty\r\n                            label=\"Addon\"\r\n                            labelId=\"select-label-addon\"\r\n                            id=\"demo-simple-select\"\r\n                            size=\"small\"\r\n                        >\r\n                            {addons.map((addon: any) => (\r\n                                <MenuItem key={addon.id} value={addon.id}>\r\n                                    {addon.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                    {/* <FormControl fullWidth sx={{ mb: 2 }}>\r\n                        <InputLabel>Type/Status</InputLabel>\r\n                        <Select\r\n                            value={typeStatus}\r\n                            onChange={(e) => setTypeStatus(e.target.value)}\r\n                            // displayEmpty\r\n                            disabled={!selectedAddon}\r\n                            label=\"Type/Status\"\r\n                        >\r\n                            {types.map((type: any) => (\r\n                                <MenuItem key={type.id} value={type.id}>\r\n                                    {type.key_value}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl> */}\r\n\r\n                    <TextField\r\n                        label=\"Key | json path\"\r\n                        value={tag.field_path?.split('._table_')[0] || ''}\r\n                        onChange={(e) => setTag((prev: any) => { setError(''); return { ...prev, field_path: e.target.value } })}\r\n                        fullWidth\r\n                        sx={{ mb: 2 }}\r\n                        size=\"small\"\r\n                    />\r\n                    {error && <Alert severity=\"error\">{error}</Alert>}\r\n                    <TableManagePage id={currentTable?.id} fetchTable={fetchTable}\r\n                        handleSubmit={handleSubmit} currentTable={currentTable} />\r\n\r\n                </TabPanel>\r\n            </TabContext>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default PdfTableManager;\r\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","export const TAG_TYPES = ['CONTENT', 'TABLE', 'IMAGE'];\r\n\r\n\r\n// Animation variants\r\nexport const fadeIn = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nexport const isValidS3Url = (url: string): boolean => {\r\n    const s3UrlPattern = /^https:\\/\\/pdf-crafter2\\.s3\\.us-east-1\\.amazonaws\\.com\\/.+$/;\r\n    return s3UrlPattern.test(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\nexport const hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n\r\nexport const ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n\r\nexport const bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`;\r\n\r\n\r\nexport const initialTableData = {\r\n  initialColumns: 3,\r\n  initialRows: [\r\n    { col1: \"Data 1\", col2: \"Data 2\", col3: \"Data 3\" }, // Default row data\r\n  ],\r\n  initialStyles: Array.from({ length: 3 }, () => ({\r\n    backgroundColor: \"#f4f4f4\", // Default background color\r\n    fontSize: \"14\", // Default font size\r\n    padding: \"8px\", // Default padding\r\n    color: \"#000\", // Default text color\r\n  })),\r\n  customHtml: `<table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #007bff; color: #ffffff;\">\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 1</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 2</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 3</th>\r\n                            </tr>\r\n                        </thead><tbody></tbody></table>`\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}