{"version":3,"file":"static/chunks/app/(pages)/setup/editor/page-b3edf98ace2a48da.js","mappings":"AAAA","sources":["webpack://_N_E/?3787","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/pdfService.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\setup\\\\editor\\\\page.tsx\");\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const createPdfTemplate = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/resource', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const generatePdfBufferById = async (id: number, organization_id: number, token: string, subcategoriesFilter: string[] = []) => {\r\n    return API.get('/pdf-templates/preview/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: { organization_id: organization_id, subcategoriesFilter: subcategoriesFilter }\r\n    });\r\n}\r\n\r\nexport const generatePdfBuffer = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/convert', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readPdfTemplate = async (id: number, token: string) => {\r\n    return API.get(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readAllPdfTemplatePage = async (\r\n    orgId: string,\r\n    token: string,\r\n    {\r\n        sortOrder = 'asc',   // Default value for sortOrder\r\n        startFrom = 0,      // Default value for startFrom (pagination)\r\n        to = 10,            // Default value for to (pagination)\r\n        sortBy = 'name',    // Default value for sortBy\r\n        addonsFilter = '',  // Default value for addonsFilter\r\n        search = '',        // Default value for search filter\r\n    } = {} // Default empty object if no parameters are passed\r\n) => {\r\n    return API.get(`/pdf-templates/template/page`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        params: {\r\n            sortOrder,   // sorting order, default is 'asc'\r\n            startFrom,   // starting index, default is 0\r\n            to,          // number of items to return, default is 10\r\n            sortBy,      // field to sort by, default is 'name'\r\n            addonsFilter, // any additional filter, default is empty string\r\n            search,      // search filter, default is empty string\r\n            organization_id: orgId\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const updatePdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateDummyDataPdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/dummy-data/${id}`, { json: data }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deletePdfTemplate = async (id: number, token: string) => {\r\n    return API.delete(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}