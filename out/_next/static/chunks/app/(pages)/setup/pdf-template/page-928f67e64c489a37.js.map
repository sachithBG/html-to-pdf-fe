{"version":3,"file":"static/chunks/app/(pages)/setup/pdf-template/page-928f67e64c489a37.js","mappings":"AAAA","sources":["webpack://_N_E/?b255","webpack://_N_E/./src/app/(pages)/setup/components/DeleteConfirmDialog.tsx","webpack://_N_E/./src/app/(pages)/setup/pdf-template/page.tsx","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/pdfService.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\setup\\\\pdf-template\\\\page.tsx\");\n","import React, { FC, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    IconButton,\r\n    ButtonProps,\r\n    IconButtonProps,\r\n} from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox';\r\n\r\ninterface DeleteConfirmDialogProps {\r\n    id: string | number; // The ID of the item to delete\r\n    onDelete: (id: string | number) => void; // Callback with the ID of the item\r\n    title?: string; // Optional title for the dialog\r\n    description?: string; // Optional description for the dialog\r\n    variant?: \"icon\" | \"normal\"; // Button type: icon or normal\r\n    buttonProps?: ButtonProps | IconButtonProps; // Props for the button\r\n    iconType?: 'delete' | 'remove' \r\n}\r\n\r\n/* usege --------------------------------------------\r\n<DeleteConfirmDialog\r\n    id={template.id}\r\n    onDelete={(id:any) => handleDelete(id)}\r\n    variant=\"icon\"\r\n    buttonProps={{ size: \"small\", color: \"error\" }} // IconButton props\r\n/>\r\n<DeleteConfirmDialog\r\n  id={102}\r\n  onDelete={(id) => console.log(\"Deleted:\", id)}\r\n  variant=\"normal\"\r\n  buttonProps={{ size: \"medium\", variant: \"outlined\", color: \"primary\" }} // Button props\r\n/>\r\n\r\n*/\r\n\r\nconst DeleteConfirmDialog: FC<DeleteConfirmDialogProps> = ({\r\n    id,\r\n    onDelete,\r\n    title = \"Confirm Deletion\",\r\n    description = \"Are you sure you want to delete this item? This action cannot be undone.\",\r\n    variant = \"normal\",\r\n    buttonProps,\r\n    iconType = 'delete'\r\n}) => {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleConfirmDelete = () => {\r\n        onDelete(id); // Pass the ID to the delete action\r\n        handleClose(); // Close the dialog\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Trigger Button */}\r\n            {variant === \"icon\" ? (\r\n                <IconButton onClick={handleOpen} {...(buttonProps as IconButtonProps)}>\r\n                    {iconType == 'delete' ? <DeleteIcon /> : <IndeterminateCheckBoxIcon />}\r\n                </IconButton>\r\n            ) : (\r\n                <Button onClick={handleOpen} {...(buttonProps as ButtonProps)}>\r\n                    Delete\r\n                </Button>\r\n            )}\r\n\r\n            {/* Confirmation Dialog */}\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"delete-dialog-title\"\r\n                aria-describedby=\"delete-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"delete-dialog-title\">{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"delete-dialog-description\">\r\n                        {description}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleConfirmDelete} color=\"error\" autoFocus>\r\n                        Confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DeleteConfirmDialog;\r\n","'use client'\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Container, Typography, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, IconButton, Paper, Pagination, Box, FormControl, InputLabel, Select, MenuItem, Skeleton, Grid2 } from '@mui/material';\r\nimport { AddBox as AddBoxIcon, Edit as EditIcon, FastRewind as FastRewindIcon } from '@mui/icons-material';\r\nimport { useSelector } from 'react-redux';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\n// import HtmlToPdfEditor from '../editor/page';\r\nimport { deletePdfTemplate, readAllPdfTemplatePage } from '@/app/services/pdfService';\r\nimport { findAllAddons } from '@/app/services/addonService';\r\nimport dynamic from 'next/dynamic';\r\nimport DeleteConfirmDialog from '../components/DeleteConfirmDialog';\r\nimport { RootState } from '@/redux/store';\r\nconst PdfPreviewButton = dynamic(() => import('@/app/components/PdfPreviewButton'), { ssr: false });\r\nconst HtmlToPdfEditor = dynamic(() => import('../editor/page'), { ssr: false });\r\n\r\nconst PdfTemplatePage: React.FC = () => {\r\n    const [templates, setTemplates] = useState<any[]>([]);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [selectedTemplate, setSelectedTemplate] = useState<any>(null);\r\n    const [currentPage, setCurrentPage] = useState(1); // Track the current page\r\n    const [totalPages, setTotalPages] = useState(1); // Track the total number of pages\r\n    const [pageSize, setPageSize] = useState(5); // Define the number of items per page\r\n    const [total, setTotal] = useState<number>(1);\r\n    const [loading, setLoading] = useState(false);\r\n    const [pageToggle, setPageToggle] = useState(false);\r\n    const [addons_, setAddons_] = useState<any[]>();\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    const fetchTemplates = async (page: number) => {\r\n        try {\r\n            setLoading(true);\r\n            setTemplates(() => []);\r\n\r\n            const response = await readAllPdfTemplatePage(currentOrg?.id, token, {\r\n                sortOrder: 'desc',\r\n                startFrom: (page - 1) * pageSize,\r\n                to: pageSize,\r\n                search: '',\r\n                sortBy: 'name'\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                if (response.data?.data) {\r\n                    const d = response.data?.data;\r\n                    setTemplates(d.data); // Assuming response.data contains the templates for the current page\r\n                    setTotalPages(() => Math.ceil(d.total / pageSize)); // Calculate total pages\r\n                    setTotal(() => d.total);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching templates:\", error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleEdit = (template: any) => {\r\n        setSelectedTemplate(template);\r\n        setEditMode(true);\r\n    };\r\n\r\n    const handleDelete = async (id: number) => {\r\n        try {\r\n            const res = await deletePdfTemplate(id, token);\r\n            if (res.status == 200) {\r\n                setTemplates(templates.filter((template) => template.id !== id));\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n    };\r\n\r\n    const handleBack = useCallback((isTrigger: boolean) => {\r\n        // if (isTrigger) {\r\n        setEditMode(false);\r\n        setSelectedTemplate(null);\r\n        // }\r\n\r\n        if (currentPage !== undefined && isTrigger && token) {\r\n            fetchTemplates(currentPage);\r\n        } else {\r\n            console.warn('currentPage is undefined');\r\n        }\r\n    }, [currentPage]);\r\n\r\n    // const handleBack2 = useCallback(() => {\r\n    //     setEditMode(false);\r\n    //     setSelectedTemplate(null);\r\n    //     if (currentPage !== undefined) {\r\n    //         fetchTemplates(currentPage);\r\n    //     } else {\r\n    //         console.warn('currentPage is undefined');\r\n    //     }\r\n    // }, [currentPage]);\r\n\r\n    // const handleBack_ = useCallback(() => {\r\n    //     setEditMode(false);\r\n    //     setSelectedTemplate(null);\r\n    // }, [currentPage]);\r\n\r\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n\r\n        setCurrentPage(value);\r\n        fetchTemplates(value); // Fetch new data based on selected page\r\n    };\r\n\r\n    const handlePageSizeChange = (event: any) => {\r\n        setPageSize(() => event.target.value);\r\n        setCurrentPage(() => 1); // Reset to page 1 when page size changes\r\n        setPageToggle(!pageToggle);\r\n    };\r\n\r\n    const fetchAddons = async () => {\r\n        try {\r\n            const response = await findAllAddons(currentOrg?.id, token);\r\n            // console.log(response.data)\r\n            if (response.status == 200) {\r\n                setAddons_(response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching addons:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token && currentOrg?.id) {\r\n            fetchTemplates(currentPage);\r\n            fetchAddons()\r\n        }\r\n    }, [pageToggle]);\r\n\r\n    useEffect(() => {\r\n        if (token && currentOrg?.id) {\r\n            fetchTemplates(currentPage);\r\n        }\r\n    }, [token, currentOrg?.id]);\r\n\r\n    return (\r\n        <Container>\r\n            {/* <Typography variant=\"h4\" gutterBottom>\r\n                PDF Templates\r\n            </Typography> */}\r\n            {!editMode && (\r\n                <>\r\n                    <Button variant=\"outlined\" size=\"small\" sx={{ float: 'right', mb: 2 }} color=\"primary\" onClick={() => setEditMode(true)}>\r\n                        New &nbsp;<AddBoxIcon fontSize=\"inherit\" />\r\n                    </Button>\r\n                    <TableContainer component={Paper} style={{ marginTop: '20px', minHeight: 500 }}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>Addons</TableCell>\r\n                                    <TableCell sx={{ textAlign: 'center' }}>Actions</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {loading ? (\r\n                                    Array.from({ length: 5 }).map((_, index) => (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell colSpan={3}>\r\n                                                <Skeleton variant=\"rectangular\" height={30} />\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))\r\n                                ) : templates.length === 0 ? (\r\n                                    <TableRow>\r\n                                        <TableCell colSpan={3} align=\"center\">\r\n                                            No templates available.\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ) : templates?.map((template) => (\r\n                                    <TableRow hover key={`${template.id}-${template.name}-${template.addons}`}>\r\n                                        <TableCell >\r\n\r\n                                            <Grid2 sx={{ display: 'flex' }}>\r\n                                                <Typography mr={2}>{template.name}</Typography>\r\n\r\n                                                <PdfPreviewButton htmlContent={\r\n                                                    `<div className=\"ck ck-editor__main\">\r\n                                                        <div class=\"ck ck-content\">\r\n                                                        <div>${template.headerContent}</div>\r\n                                                        ${template.bodyContent}\r\n                                                        ${template.sections ? template.sections.map((se: any) => se.htmlContent) : ''}\r\n                                                        <footer>${template.footerContent}</footer>\r\n                                                        </div>\r\n                                                        </div>\r\n                                                `} isIconButton={true} id={template.id}\r\n                                                    organization_id={currentOrg?.id} subcategories={[]}/>\r\n                                            </Grid2>\r\n                                        </TableCell>\r\n                                        <TableCell>{template?.addons?.join(', ')}</TableCell>\r\n                                        <TableCell sx={{ textAlign: 'center' }}>\r\n                                            <IconButton color=\"primary\" onClick={() => handleEdit(template)}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                            <DeleteConfirmDialog\r\n                                                id={template.id}\r\n                                                onDelete={(id:any) => handleDelete(id)}\r\n                                                variant=\"icon\"\r\n                                                buttonProps={{ size: \"small\", color: \"error\" }} // IconButton props\r\n                                            />\r\n                                            {/* <IconButton color=\"inherit\" onClick={() => handleDelete(template.id)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton> */}\r\n                                            \r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <Box sx={{ mt: 2, display: 'flex', justifyContent: 'end', alignItems: 'center' }}>\r\n                        {/* Page Size Selection */}\r\n                        <FormControl sx={{ minWidth: 120 }}>\r\n                            <InputLabel>Page Size</InputLabel>\r\n                            <Select\r\n                                value={pageSize}\r\n                                label=\"Page Size\"\r\n                                onChange={handlePageSizeChange}\r\n                                size='small'\r\n                            >\r\n                                <MenuItem value={5}>5</MenuItem>\r\n                                <MenuItem value={10}>10</MenuItem>\r\n                                <MenuItem value={25}>25</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <Pagination\r\n                            count={totalPages}\r\n                            page={currentPage}\r\n                            onChange={handlePageChange}\r\n                            sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}\r\n\r\n                        />\r\n                        {/* Display total records */}\r\n                        <Typography variant=\"body1\" sx={{ mt: 2 }}>\r\n                            &nbsp;  Total: {total}\r\n                        </Typography>\r\n                    </Box>\r\n                </>\r\n            )}\r\n            {editMode && (\r\n                <>\r\n                    <Button variant=\"outlined\" size=\"small\" color=\"primary\" onClick={() => handleBack(true)}>\r\n                        <FastRewindIcon fontSize=\"inherit\" />&nbsp;Back\r\n                    </Button>\r\n                    <HtmlToPdfEditor addons_={addons_} handleBack={handleBack} id={selectedTemplate ? selectedTemplate?.id : undefined} />\r\n                </>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default PdfTemplatePage;\r\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const createPdfTemplate = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/resource', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const generatePdfBufferById = async (id: number, organization_id: number, token: string, subcategoriesFilter: string[] = []) => {\r\n    return API.get('/pdf-templates/preview/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: { organization_id: organization_id, subcategoriesFilter: subcategoriesFilter }\r\n    });\r\n}\r\n\r\nexport const generatePdfBuffer = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/convert', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readPdfTemplate = async (id: number, token: string) => {\r\n    return API.get(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readAllPdfTemplatePage = async (\r\n    orgId: string,\r\n    token: string,\r\n    {\r\n        sortOrder = 'asc',   // Default value for sortOrder\r\n        startFrom = 0,      // Default value for startFrom (pagination)\r\n        to = 10,            // Default value for to (pagination)\r\n        sortBy = 'name',    // Default value for sortBy\r\n        addonsFilter = '',  // Default value for addonsFilter\r\n        search = '',        // Default value for search filter\r\n    } = {} // Default empty object if no parameters are passed\r\n) => {\r\n    return API.get(`/pdf-templates/template/page`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        params: {\r\n            sortOrder,   // sorting order, default is 'asc'\r\n            startFrom,   // starting index, default is 0\r\n            to,          // number of items to return, default is 10\r\n            sortBy,      // field to sort by, default is 'name'\r\n            addonsFilter, // any additional filter, default is empty string\r\n            search,      // search filter, default is empty string\r\n            organization_id: orgId\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const updatePdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateDummyDataPdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/dummy-data/${id}`, { json: data }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deletePdfTemplate = async (id: number, token: string) => {\r\n    return API.delete(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}