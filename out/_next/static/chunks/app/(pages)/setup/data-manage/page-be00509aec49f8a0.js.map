{"version":3,"file":"static/chunks/app/(pages)/setup/data-manage/page-be00509aec49f8a0.js","mappings":"AAAA","sources":["webpack://_N_E/?390b","webpack://_N_E/./src/app/(pages)/setup/data-manage/page.tsx","webpack://_N_E/./src/app/services/addonService.ts","webpack://_N_E/./src/app/services/api.ts","webpack://_N_E/./src/app/services/tagService.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\(pages)\\\\setup\\\\data-manage\\\\page.tsx\");\n","\"use client\";\r\nimport { useState, useEffect } from 'react';\r\nimport { Button, TextField, Chip, IconButton, Popover, MenuItem, Select, InputLabel, FormControl, Paper, Box, Typography, Checkbox, ListItemText, Grid2, useTheme, Tooltip, Snackbar, Alert, Tabs, Tab, CircularProgress, Skeleton } from '@mui/material';\r\nimport { RootState } from '@/redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { findAllAddons } from '@/app/services/addonService';\r\nimport { createTag, deleteTag, findAllTags, updateTag } from '@/app/services/tagService';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\r\nimport dynamic from 'next/dynamic';\r\nconst ManageAddonsPage = dynamic(() => import('@/app/(pages)/setup/components/ManageAddons'), { ssr: false });\r\nconst ExternalKeyManager = dynamic(() => import('@/app/(pages)/setup/components/ExternalKeyManager'), { ssr: false });\r\nconst TemplateDataManager = dynamic(() => import('@/app/(pages)/setup/components/TemplateDataManager'), { ssr: false });\r\n\r\ninterface Addon {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface Tag {\r\n    id: number;\r\n    name: string;\r\n    addon_ids: number[];\r\n    field_path: string;\r\n    tag_type: string;\r\n}\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nfunction CustomTabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst TagManagementPage = () => {\r\n    const [addons, setAddons] = useState<Addon[]>([]);\r\n    const [selectedAddons, setSelectedAddons] = useState<number[]>([]);\r\n    const [selectedType, setSelectedType] = useState<string>(\"CONTENT\");\r\n    const [tagKey, setTagKey] = useState('');\r\n    const [tagName, setTagName] = useState('');\r\n    const [tags, setTags] = useState<Tag[]>([]);\r\n    const [editTag, setEditTag] = useState<Tag | any>(null);\r\n    // const [popoverAnchor, setPopoverAnchor] = useState<HTMLElement | null>(null);\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    // const [editTag, setEditTag] = useState<{ id: number; name: string } | null | any>(null);\r\n    const [deleteAnchorEl, setDeleteAnchorEl] = useState<null | HTMLElement>(null);\r\n    const [tagToDelete, setTagToDelete] = useState<number | null>(null);\r\n    const [errors, setErrors] = useState<{ name?: string, field_path?: string, tag_type?: string }>({});\r\n\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [copiedText, setCopiedText] = useState('');\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const theme = useTheme();\r\n\r\n    const openPopover = Boolean(anchorEl);\r\n    const id = openPopover ? 'simple-popover' : undefined;\r\n\r\n    const openDelete = Boolean(deleteAnchorEl);\r\n    const idDelete = openDelete ? 'delete-popover' : undefined;\r\n    const [tabValue, setTabValue] = useState(0);\r\n\r\n    const [chosenAddon, setChosenAddon] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Fetch the available addons from the API\r\n        // alert(tabValue)\r\n        const fetchAddons = async () => {\r\n            try {\r\n                setIsLoading(true);\r\n                const res = await findAllAddons(currentOrg?.id, token);\r\n                if (res.status == 200) {\r\n                    setAddons(() => res.data);\r\n                    try {\r\n                        const response = await findAllTags(res.data?.filter((a: any) => selectedAddons.includes(a.name)), token);\r\n                        // axios.get(process.env.NEXT_PUBLIC_BASE_URL + \"v1/tags\", {\r\n                        //     params: { addons: addons.filter(a => selectedAddons.includes(a.name)).map(a => a.id).join(',') },\r\n                        // });\r\n                        if (response.status == 200) {\r\n                            setTags(response.data);\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error fetching tags:\", error);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching addons:\", error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n        if (token) fetchAddons();\r\n        return () => {\r\n            setAddons([]);\r\n            setTags([]);\r\n        }\r\n    }, [currentOrg?.id, tabValue]);\r\n\r\n    const handleAddonChange = async (event: any) => {\r\n        setSelectedAddons(event.target.value);\r\n        // console.log(event.target.value)\r\n        try {\r\n            const response = await findAllTags(event.target.value, token);\r\n            if (response.status == 200) {\r\n                setTags(response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching tags:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSaveTag = async () => {\r\n        // Clear previous errors\r\n        setErrors({});\r\n\r\n        // Validation\r\n        const newErrors: { name?: string; field_path?: string; tag_type?: string } = {};\r\n        if (!tagName) newErrors.name = 'Tag name is required';\r\n        if (!tagKey) newErrors.field_path = 'Tag key is required';\r\n        if (!selectedAddons.length) newErrors.tag_type = 'At least one addon must be selected';\r\n\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors);\r\n            return; // Exit if there are validation errors\r\n        }\r\n        const newTag = {\r\n            name: tagName,\r\n            addon_ids: selectedAddons,\r\n            organization_id: currentOrg.id,\r\n            tag_type: selectedType || 'CONTENT',\r\n            field_path: tagKey\r\n        };\r\n        try {\r\n            const response = await createTag(newTag, token);\r\n            if (response.status == 201) {\r\n                setTags((prevTags) => [...prevTags, response.data]);\r\n                setTagKey('');\r\n                setTagName('');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching addons:\", error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteTag = async (tagId: number) => {\r\n        try {\r\n            const response = await deleteTag(tagId, token);\r\n            if (response.status == 204) {\r\n                setTags(tags.filter((tag) => tag.id !== tagId));\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching addons:\", error);\r\n        }\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n        if (tagToDelete !== null) {\r\n            handleDeleteTag(tagToDelete);\r\n            handleDeleteClose();\r\n        }\r\n    };\r\n\r\n    const handleEditClick = (event: React.MouseEvent<HTMLElement>, tag: Tag) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setEditTag(tag);\r\n    };\r\n\r\n    const handleEditClose = () => {\r\n        setAnchorEl(null);\r\n        setEditTag(null);\r\n    };\r\n\r\n    const handleDeleteClick = (event: React.MouseEvent<HTMLElement>, tagId: number) => {\r\n        setDeleteAnchorEl(event.currentTarget);\r\n        setTagToDelete(tagId);\r\n    };\r\n\r\n    const handleDeleteClose = () => {\r\n        setDeleteAnchorEl(null);\r\n        setTagToDelete(null);\r\n    };\r\n\r\n    const handleUpdateTag = async () => {\r\n        if (editTag) {\r\n            try {\r\n                const response = await updateTag(editTag, token);\r\n                if (response.status == 200) {\r\n                    setTags((prevTags) =>\r\n                        prevTags.map((tag) => (tag.id + '' === response.data.id ? response.data : tag))\r\n                    );\r\n                    handleEditClose();\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(\"Error fetching addons:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle Copy Tag\r\n    const handleCopyTag = (tagKey: string) => {\r\n        // console.log(tag)\r\n        navigator.clipboard.writeText(`{{${tagKey}}}`).then(() => {\r\n            setCopiedText(`{{${tagKey}}}`);\r\n            setSnackbarOpen(true); // Show snackbar when copied\r\n            setTimeout(() => setSnackbarOpen(false), 3000); // Hide snackbar after 3 seconds\r\n        }).catch(err => {\r\n            console.error('Failed to copy: ', err);\r\n        });\r\n    };\r\n\r\n    const handleChangeTab = (event: React.SyntheticEvent, newValue: number) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleAddonSelection = (event: any) => {\r\n        setChosenAddon(event.target.value);\r\n    };\r\n\r\n    // template data -----------------------------------------------\r\n    // const handleSaveTemplate = (updatedTemplate: any) => {\r\n    //     setTemplates((prevTemplates) =>\r\n    //         prevTemplates.map((template) =>\r\n    //             template.id === updatedTemplate.id ? updatedTemplate : template\r\n    //         )\r\n    //     );\r\n    // };\r\n\r\n    return (\r\n        <Box className=\"container mx-auto p-4\">\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <Tabs value={tabValue} onChange={handleChangeTab} aria-label=\"basic tabs example\">\r\n                    <Tab label=\"Tag\" {...a11yProps(0)} />\r\n                    <Tab label=\"Type/Status\" {...a11yProps(1)} />\r\n                    <Tab label=\"Template Test data\" {...a11yProps(2)} />\r\n                    <Tab label=\"Addons\" {...a11yProps(3)} />\r\n                </Tabs>\r\n            </Box>\r\n            <CustomTabPanel value={tabValue} index={0}>\r\n                {/* Addon Picker */}\r\n                <Box mb={3} mt={4}>\r\n                    <FormControl fullWidth size='small'>\r\n                        <InputLabel>Addons</InputLabel>\r\n                        <Select\r\n                            multiple\r\n                            value={selectedAddons}\r\n                            onChange={handleAddonChange}\r\n                            label=\"Addons\"\r\n                            required\r\n                            size='small'\r\n                            renderValue={(selected) => selected.map((id) => addons.find((addon) => addon.id === id)?.name).join(', ')}\r\n                        >\r\n                            {addons?.map((addon) => (\r\n                                <MenuItem key={addon.id} value={addon.id}>\r\n                                    <Checkbox checked={selectedAddons.includes(addon.id)} />\r\n                                    <ListItemText primary={addon.name} />\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n                <Box mb={2} mt={2}>\r\n                    <FormControl fullWidth size='small'>\r\n                        <InputLabel>Type</InputLabel>\r\n                        <Select\r\n                            value={selectedType}\r\n                            onChange={(event) => {\r\n                                setSelectedType(event.target.value);\r\n                            }}\r\n                            required\r\n                            label=\"Type\"\r\n                            size='small'\r\n                        >\r\n                            {[\"CONTENT\", \"TABLE\", \"IMAGE\"].map((t) => (\r\n                                <MenuItem key={t} value={t}>\r\n                                    {t}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Box>\r\n                {/* Tag Name Input */}\r\n                <TextField\r\n                    label=\"Tag Name\"\r\n                    fullWidth\r\n                    value={tagName}\r\n                    onChange={(event) => setTagName(event.target.value)}\r\n                    margin=\"normal\"\r\n                    error={Boolean(errors.name)}\r\n                    helperText={errors.name}\r\n                    disabled={selectedType == 'TABLE'}\r\n                    size='small'\r\n                />\r\n                {/* Tag Key Input */}\r\n                <TextField\r\n                    label=\"Tag Key\"\r\n                    fullWidth\r\n                    value={tagKey}\r\n                    onChange={(event) => setTagKey(event.target.value)}\r\n                    margin=\"normal\"\r\n                    error={Boolean(errors.field_path)}\r\n                    helperText={errors.field_path}\r\n                    disabled={selectedType == 'TABLE'}\r\n                    size='small'\r\n                />\r\n\r\n                {/* Save Button */}\r\n                <Button size='small' variant=\"outlined\" color=\"primary\" sx={{ float: 'right' }} onClick={handleSaveTag} disabled={selectedType == 'TABLE'}>\r\n                    Save Tag\r\n                </Button>\r\n\r\n                {/* Display Tags */}\r\n                <div style={{ marginTop: 20 }}>\r\n                    <Grid2 container spacing={2}>\r\n                        {tags?.filter(t => t.tag_type === selectedType).map((tag) => (\r\n                            <Grid2 key={tag.id}>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        p: 1,\r\n                                        borderRadius: '8px',\r\n                                        boxShadow: 3,\r\n                                        bgcolor: theme.palette.background.paper,\r\n                                        ':hover': { boxShadow: 6 },\r\n                                    }}\r\n                                >\r\n                                    <Chip\r\n                                        label={tag.name}\r\n                                        onDelete={(e) => handleEditClick(e, tag)}\r\n                                        deleteIcon={<EditIcon sx={{\r\n                                            color: theme.palette.mode === 'light' ? theme.palette.success.dark : theme.palette.secondary.light,\r\n                                        }} />}\r\n                                        sx={{\r\n                                            borderRadius: '12px',\r\n                                            borderColor: 'transparent',\r\n                                            ml: 1,\r\n                                            flexGrow: 1,\r\n                                            '&:hover': { borderColor: theme.palette.primary.main },\r\n                                        }}\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                    {/* Copy Icon Button */}\r\n                                    <Tooltip title={\"Copy Key \" + tag.field_path}>\r\n                                        <IconButton\r\n                                            onClick={() => handleCopyTag(tag.field_path)}\r\n                                            size=\"small\"\r\n                                            sx={{\r\n                                                padding: '6px',\r\n                                                '&:hover': {\r\n                                                    backgroundColor: theme.palette.info.main,\r\n                                                    color: theme.palette.common.white,\r\n                                                },\r\n                                            }}\r\n                                        >\r\n                                            <FileCopyIcon sx={{ fontSize: 16 }} />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                    {/* Delete Icon Button */}\r\n                                    <IconButton\r\n                                        onClick={(event) => handleDeleteClick(event, tag.id)}\r\n                                        size=\"small\"\r\n                                        sx={{\r\n                                            padding: '6px',\r\n                                            '&:hover': {\r\n                                                backgroundColor: theme.palette.error.main,\r\n                                                color: theme.palette.common.white,\r\n                                            },\r\n                                        }}\r\n                                    >\r\n                                        <DeleteIcon sx={{ fontSize: 16 }} />\r\n                                    </IconButton>\r\n                                </Paper>\r\n\r\n                            </Grid2>\r\n                        ))}\r\n                    </Grid2>\r\n                </div>\r\n\r\n                {/* Popover for Tag Delete Confirmation */}\r\n                <Popover\r\n                    id={id}\r\n                    open={openPopover}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleEditClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                >\r\n                    <Box sx={{ p: 2, display: 'flex', alignItems: 'center' }}>\r\n                        <TextField\r\n                            value={editTag?.name || ''}\r\n                            onChange={(e: any) => setEditTag({ ...editTag, name: e.target.value })}\r\n                            size=\"small\"\r\n                            placeholder='name'\r\n                        />\r\n                        <TextField\r\n                            value={editTag?.field_path?.split('._table_')[0] || ''}\r\n                            onChange={(e: any) => setEditTag({ ...editTag, field_path: e.target.value })}\r\n                            size=\"small\"\r\n                            placeholder='path'\r\n                            sx={{ ml: 1 }}\r\n                        />\r\n                        <IconButton onClick={handleUpdateTag}>\r\n                            <SaveIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Popover>\r\n\r\n                {/* Edit Tag */}\r\n                <Popover\r\n                    id={idDelete}\r\n                    open={openDelete}\r\n                    anchorEl={deleteAnchorEl}\r\n                    onClose={handleDeleteClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'center',\r\n                    }}\r\n                >\r\n                    <Box sx={{ p: 2, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                        <Typography>Are you sure you want to delete this addon?</Typography>\r\n                        <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between', width: '100%' }}>\r\n                            <Button variant='outlined' onClick={handleDeleteClose} color=\"primary\" size='small'>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button variant='outlined' onClick={handleConfirmDelete} color=\"secondary\" size='small'>\r\n                                Confirm\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Popover>\r\n                {/* Snackbar to show copied text */}\r\n                <Snackbar\r\n                    open={snackbarOpen}\r\n                    autoHideDuration={3000}\r\n                    onClose={() => setSnackbarOpen(false)}\r\n                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                    sx={{ marginTop: 8 }}\r\n                >\r\n                    <Alert onClose={() => setSnackbarOpen(false)} severity=\"success\" sx={{ width: '100%' }}>\r\n                        Tag key copied: {copiedText}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </CustomTabPanel>\r\n            <CustomTabPanel value={tabValue} index={1}>\r\n\r\n                {/* Addon selection */}\r\n                <FormControl fullWidth sx={{ mb: 3 }} size='small'>\r\n                    <InputLabel>Choose Addon</InputLabel>\r\n                    <Select\r\n                        value={chosenAddon}\r\n                        onChange={handleAddonSelection}\r\n                        label=\"Choose Addon\"\r\n                        sx={{ maxWidth: 250 }}\r\n                        size='small'\r\n                    >\r\n                        {addons?.map((addon) => (\r\n                            <MenuItem key={addon.id} value={addon.id}>\r\n                                {addon.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {isLoading ? (\r\n                    <Skeleton variant=\"text\" width=\"100%\" height={40} />\r\n                ) : (\r\n                    chosenAddon && (\r\n                        <ExternalKeyManager addonId={chosenAddon} />\r\n                    )\r\n                )}\r\n            </CustomTabPanel>\r\n            <CustomTabPanel value={tabValue} index={2}>\r\n                {isLoading ? (\r\n                    <CircularProgress />\r\n                ) : (\r\n                    <TemplateDataManager />\r\n                )}\r\n            </CustomTabPanel>\r\n            <CustomTabPanel value={tabValue} index={3}>\r\n                <ManageAddonsPage />\r\n            </CustomTabPanel>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default TagManagementPage;\r\n","import { API } from \"./api\";\r\n\r\n\r\nexport const createAddon = async (name: string, organization_id: number, token: string) => {\r\n    return API.post('/addons', { name, organization_id }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateAddon = async (data: any, token: string) => {\r\n    return API.put('/addons/' + data.id, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonById = async (id: any, token: string) => {\r\n    return API.get('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddonsByUser = async (token: string) => {\r\n    return API.get('/addons', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAllAddons = async (organization_id: number, token: string) => {\r\n    return API.get('/addons/' + organization_id + '/organization', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const findAddonPage = async (\r\n    page: number,\r\n    pageSize: number,\r\n    field: string,\r\n    sort: string,\r\n    quickFilterValues: string,\r\n    active: boolean,\r\n    token: string\r\n) => {\r\n    return API.get('/addons/page', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            page,\r\n            pageSize,\r\n            field,\r\n            sort,\r\n            quickFilterValues,\r\n            active\r\n        }\r\n    });\r\n}\r\n\r\nexport const deleteAddon = async (id: any, token: string) => {\r\n    return API.delete('/addons/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}","import axios from \"axios\";\r\n\r\nexport const baseURL = process.env.NEXT_PUBLIC_BASE_URL;\r\n\r\nexport const API = axios.create({\r\n    baseURL: `${baseURL || \"//localhost:4000/api_/\"}v1`,\r\n    timeout: 30000, // Optional: 10 seconds timeout\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Allow-Control-Allow-Origin\": \"*\",\r\n    }\r\n });\r\n ","import { API } from \"./api\";\r\n\r\nexport const createTag = async (data: any, token: string) => {\r\n  return API.post(`/tags`, data,\r\n    {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      }\r\n    });\r\n}\r\n\r\nexport const updateTag = async (editTag: any, token: string) => {\r\n  return API.put('/tags/' + editTag.id, editTag, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n\r\nexport const findTagById = async (id: any, token: string) => {\r\n  return API.get('/tags/' + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n\r\nexport const findAllTags = async (addon_ids: number[], token: string) => {\r\n  // const queryParams = new URLSearchParams({ addon_ids: JSON.stringify(addon_ids) }).toString();\r\n  return API.get(`/tags`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    },\r\n    params: {\r\n      addon_ids: addon_ids\r\n    }\r\n  });\r\n}\r\n\r\nexport const findTagPage = async (\r\n  page: number,\r\n  pageSize: number,\r\n  field: string,\r\n  sort: string,\r\n  quickFilterValues: string,\r\n  active: boolean\r\n) => {\r\n  const res = await fetch(`/api/public/tag/page`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      page,\r\n      pageSize,\r\n      field,\r\n      sort,\r\n      quickFilterValues,\r\n      active,\r\n    }),\r\n  });\r\n  return await res.json();\r\n};\r\n\r\nexport const deleteTag = async (id: any, token: string) => {\r\n  return API.delete('/tags/' + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};"],"names":[],"sourceRoot":""}