{"version":3,"file":"static/chunks/app/layout-94f43ab98a4354e2.js","mappings":"AAAA","sources":["webpack://_N_E/?d21c","webpack://_N_E/./node_modules/@mui/icons-material/esm/Close.js","webpack://_N_E/./node_modules/@mui/material/IconButton/iconButtonClasses.js","webpack://_N_E/./node_modules/@mui/material/IconButton/IconButton.js","webpack://_N_E/./node_modules/next/dist/api/navigation.js","webpack://_N_E/./src/app/components/ErrorBoundary.tsx","webpack://_N_E/./src/redux/store.ts","webpack://_N_E/./src/provider/ReduxProvider.tsx","webpack://_N_E/./src/app/(pages)/guard/authGuard.tsx","webpack://_N_E/./src/provider/ThemeProvidr.tsx","webpack://_N_E/./src/redux/slice/ToggleTheme.ts","webpack://_N_E/./src/redux/slice/organizationSlice.ts","webpack://_N_E/./src/redux/slice/sessionSlice.ts","webpack://_N_E/./node_modules/ckeditor5/dist/ckeditor5.css","webpack://_N_E/./src/app/globals.css","webpack://_N_E/./node_modules/next/font/local/target.css?e27f","webpack://_N_E/./node_modules/next/font/local/target.css"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\node_modules\\\\next\\\\font\\\\local\\\\target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"\\\",\\\"arguments\\\":[{\\\"src\\\":\\\"./fonts/GeistVF.woff\\\",\\\"variable\\\":\\\"--font-geist-sans\\\",\\\"weight\\\":\\\"100 900\\\"}],\\\"variableName\\\":\\\"geistSans\\\"}\");\n;\nimport(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\node_modules\\\\next\\\\font\\\\local\\\\target.css?{\\\"path\\\":\\\"src\\\\\\\\app\\\\\\\\layout.tsx\\\",\\\"import\\\":\\\"\\\",\\\"arguments\\\":[{\\\"src\\\":\\\"./fonts/GeistMonoVF.woff\\\",\\\"variable\\\":\\\"--font-geist-mono\\\",\\\"weight\\\":\\\"100 900\\\"}],\\\"variableName\\\":\\\"geistMono\\\"}\");\n;\nimport(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\node_modules\\\\ckeditor5\\\\dist\\\\ckeditor5.css\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\components\\\\ErrorBoundary.tsx\");\n;\nimport(/* webpackMode: \"eager\" */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\app\\\\globals.css\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\provider\\\\ReduxProvider.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"D:\\\\my project\\\\htmlToPdf\\\\html-to-pdf-fe\\\\src\\\\provider\\\\ThemeProvidr.tsx\");\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getIconButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiIconButton', slot);\n}\nconst iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'loading', 'loadingIndicator', 'loadingWrapper']);\nexport default iconButtonClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { alpha } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport CircularProgress from \"../CircularProgress/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport iconButtonClasses, { getIconButtonUtilityClass } from \"./iconButtonClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disabled,\n    color,\n    edge,\n    size,\n    loading\n  } = ownerState;\n  const slots = {\n    root: ['root', loading && 'loading', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],\n    loadingIndicator: ['loadingIndicator'],\n    loadingWrapper: ['loadingWrapper']\n  };\n  return composeClasses(slots, getIconButtonUtilityClass, classes);\n};\nconst IconButtonRoot = styled(ButtonBase, {\n  name: 'MuiIconButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.loading && styles.loading, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  textAlign: 'center',\n  flex: '0 0 auto',\n  fontSize: theme.typography.pxToRem(24),\n  padding: 8,\n  borderRadius: '50%',\n  color: (theme.vars || theme).palette.action.active,\n  transition: theme.transitions.create('background-color', {\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: props => !props.disableRipple,\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      '&:hover': {\n        backgroundColor: 'var(--IconButton-hoverBg)',\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }, {\n    props: {\n      edge: 'start'\n    },\n    style: {\n      marginLeft: -12\n    }\n  }, {\n    props: {\n      edge: 'start',\n      size: 'small'\n    },\n    style: {\n      marginLeft: -3\n    }\n  }, {\n    props: {\n      edge: 'end'\n    },\n    style: {\n      marginRight: -12\n    }\n  }, {\n    props: {\n      edge: 'end',\n      size: 'small'\n    },\n    style: {\n      marginRight: -3\n    }\n  }]\n})), memoTheme(({\n  theme\n}) => ({\n  variants: [{\n    props: {\n      color: 'inherit'\n    },\n    style: {\n      color: 'inherit'\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // check all the used fields in the style below\n  .map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      '--IconButton-hoverBg': theme.vars ? `rgba(${(theme.vars || theme).palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha((theme.vars || theme).palette[color].main, theme.palette.action.hoverOpacity)\n    }\n  })), {\n    props: {\n      size: 'small'\n    },\n    style: {\n      padding: 5,\n      fontSize: theme.typography.pxToRem(18)\n    }\n  }, {\n    props: {\n      size: 'large'\n    },\n    style: {\n      padding: 12,\n      fontSize: theme.typography.pxToRem(28)\n    }\n  }],\n  [`&.${iconButtonClasses.disabled}`]: {\n    backgroundColor: 'transparent',\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  [`&.${iconButtonClasses.loading}`]: {\n    color: 'transparent'\n  }\n})));\nconst IconButtonLoadingIndicator = styled('span', {\n  name: 'MuiIconButton',\n  slot: 'LoadingIndicator',\n  overridesResolver: (props, styles) => styles.loadingIndicator\n})(({\n  theme\n}) => ({\n  display: 'none',\n  position: 'absolute',\n  visibility: 'visible',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  color: (theme.vars || theme).palette.action.disabled,\n  variants: [{\n    props: {\n      loading: true\n    },\n    style: {\n      display: 'flex'\n    }\n  }]\n}));\n\n/**\n * Refer to the [Icons](/material-ui/icons/) section of the documentation\n * regarding the available icon options.\n */\nconst IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiIconButton'\n  });\n  const {\n    edge = false,\n    children,\n    className,\n    color = 'default',\n    disabled = false,\n    disableFocusRipple = false,\n    size = 'medium',\n    id: idProp,\n    loading = null,\n    loadingIndicator: loadingIndicatorProp,\n    ...other\n  } = props;\n  const id = useId(idProp);\n  const loadingIndicator = loadingIndicatorProp ?? /*#__PURE__*/_jsx(CircularProgress, {\n    \"aria-labelledby\": id,\n    color: \"inherit\",\n    size: 16\n  });\n  const ownerState = {\n    ...props,\n    edge,\n    color,\n    disabled,\n    disableFocusRipple,\n    loading,\n    loadingIndicator,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(IconButtonRoot, {\n    id: id,\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled || loading,\n    ref: ref,\n    ...other,\n    ownerState: ownerState,\n    children: [typeof loading === 'boolean' &&\n    /*#__PURE__*/\n    // use plain HTML span to minimize the runtime overhead\n    _jsx(\"span\", {\n      className: classes.loadingWrapper,\n      style: {\n        display: 'contents'\n      },\n      children: /*#__PURE__*/_jsx(IconButtonLoadingIndicator, {\n        className: classes.loadingIndicator,\n        ownerState: ownerState,\n        children: loading && loadingIndicator\n      })\n    }), children]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? IconButton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The icon to display.\n   */\n  children: chainPropTypes(PropTypes.node, props => {\n    const found = React.Children.toArray(props.children).some(child => /*#__PURE__*/React.isValidElement(child) && child.props.onClick);\n    if (found) {\n      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the loading indicator is visible and the button is disabled.\n   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).\n   * @default null\n   */\n  loading: PropTypes.bool,\n  /**\n   * Element placed before the children if the button is in loading state.\n   * The node should contain an element with `role=\"progressbar\"` with an accessible name.\n   * By default, it renders a `CircularProgress` that is labeled by the button itself.\n   * @default <CircularProgress color=\"inherit\" size={16} />\n   */\n  loadingIndicator: PropTypes.node,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default IconButton;","export * from '../client/components/navigation';\n\n//# sourceMappingURL=navigation.js.map","\"use client\";\r\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\r\n\r\ninterface ErrorBoundaryProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n    hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\r\n    constructor(props: ErrorBoundaryProps) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error): ErrorBoundaryState {\r\n        console.log(error)\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, info: ErrorInfo): void {\r\n        console.log(info)\r\n        console.error('Error caught by ErrorBoundary:', error);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { ToggleTheme } from './slice/ToggleTheme';\r\nimport organizationSlice from './slice/organizationSlice';\r\nimport sessionReducer from './slice/sessionSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    session: sessionReducer,\r\n    toggleTheme: ToggleTheme.reducer,\r\n    organization: organizationSlice,\r\n  },\r\n  // middleware: (getDefaultMiddleware) =>\r\n  //   getDefaultMiddleware({ serializableCheck: false }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n// export const useAppDispatch = () => useDispatch<AppDispatch>();\r\n// export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","'use client';\r\nimport { store } from '@/redux/store';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nexport default function ReduxProvider({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  return <Provider store={store}>{children}</Provider>;\r\n}\r\n","'use client';\r\nimport React from 'react'\r\nimport { ReactNode, useEffect } from 'react';\r\nimport { usePathname, useRouter } from 'next/navigation';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '@/redux/store';\r\n\r\ninterface AuthGuardProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {\r\n    const { token, status } = useSelector((state: RootState) => state.session);\r\n    \r\n    \r\n    const pathname = usePathname();\r\n    const router = useRouter();\r\n    // const dispatch: AppDispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        // console.log('AuthGuard', status, token);\r\n        //check token expiration\r\n        const storedToken = localStorage.getItem('token');\r\n        if (!storedToken && pathname != '/' && pathname != '/test') {\r\n            // signOut();\r\n            router.push('/dashboard');\r\n        }\r\n        if (!storedToken) {\r\n            console.log('/Sign out');\r\n            // dispatch(clearSession());\r\n        }\r\n\r\n    }, [token, status, pathname]);\r\n\r\n    // if (status === 'loading' || !token) return null; // Prevents flashing of protected content\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default AuthGuard;","'use client';\r\nimport React from 'react';\r\nimport {\r\n    IconButton,\r\n} from '@mui/material';\r\nimport { SnackbarProvider, closeSnackbar } from 'notistack';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport AuthGuard from '@/app/(pages)/guard/authGuard';\r\n\r\nexport const secondary_main = '#E4E8F8';\r\n\r\nexport default function ThemeProvidr({\r\n    children,\r\n}: {\r\n    children: React.ReactNode;\r\n}) {\r\n    // const theme = useSelector((state: any) => state.toggleTheme.theme);\r\n    // const getDesignTokens = (mode: PaletteMode) => ({\r\n    //     palette: {\r\n    //         mode,\r\n    //         ...(mode === 'light'\r\n    //             ? {\r\n    //                 // palette values for light mode\r\n    //                 secondary: {\r\n    //                     main: secondary_main,\r\n    //                     light: '#F3F4FB',\r\n    //                     dark: '#8185A1',\r\n    //                     contrastText: '#ff',\r\n    //                 },\r\n    //             }\r\n    //             : {\r\n    //                 // palette values for dark mode\r\n    //                 secondary: {\r\n    //                     main: 'rgb(34, 43, 69)',\r\n    //                     light: '#7982C3',\r\n    //                     dark: '#121D65',\r\n    //                     contrastText: '#rgba(0,0,0,0.87)',\r\n    //                 },\r\n    //                 background: {\r\n    //                     default: 'rgb(34, 43, 69)',\r\n    //                     paper: 'rgb(34, 43, 69)',\r\n    //                 },\r\n    //                 components: {\r\n    //                     MuiPaper: {\r\n    //                         styleOverrides: {\r\n    //                             root: {\r\n    //                                 backgroundColor: 'red',\r\n    //                             },\r\n    //                         },\r\n    //                     },\r\n    //                 },\r\n    //             }),\r\n    //     },\r\n    // });\r\n\r\n    // const themeAction = useMemo(() => createTheme(getDesignTokens(theme)), [theme]);\r\n\r\n    return (\r\n        // <ThemeProvider theme={themeAction}>\r\n                <AuthGuard>\r\n                    <SnackbarProvider\r\n                        maxSnack={3}\r\n                        autoHideDuration={3000}\r\n                        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                        preventDuplicate\r\n                        dense\r\n                        hideIconVariant\r\n                        action={(key) => (\r\n                            <IconButton\r\n                                key=\"close\"\r\n                                color=\"inherit\"\r\n                                onClick={() => closeSnackbar(key)}\r\n                                size=\"small\"\r\n                                aria-label=\"Alert\"\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        )}\r\n\r\n                        classes={{\r\n                            root: 'custom-snackbar', // Use your custom class\r\n                        }}\r\n                    // iconVariant={{\r\n                    //     success: null,\r\n                    //     error: null,\r\n                    //     warning: null,\r\n                    //     info: null,\r\n                    // }}\r\n                    >\r\n                        {children}\r\n                    </SnackbarProvider>\r\n                </AuthGuard>\r\n        // </ThemeProvider>\r\n    );\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nexport const ToggleTheme = createSlice({\r\n  name: 'ToggleTheme',\r\n  initialState: {\r\n    theme: 'light',\r\n    matches: {\r\n      matches_xs_up: false,\r\n      matches_sm_up: false,\r\n      matches_md_up: false,\r\n      matches_lg_up: false,\r\n      matches_sm_down: false,\r\n      matches_md_down: false,\r\n    },\r\n  },\r\n  reducers: {\r\n    toggleTheme(state, action) {\r\n      state.theme = action.payload === 'dark' ? 'light' : 'dark';\r\n    },\r\n    deviceMatches(state, action) {\r\n      state.matches = { ...state.matches, ...action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleTheme, deviceMatches } = ToggleTheme.actions;\r\nexport default ToggleTheme.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nexport interface Organization {\r\n    id: number;\r\n    user_id: number;\r\n    name: string;\r\n    refresh_token?: string;\r\n    is_default: boolean;\r\n    logo?: string;\r\n    created_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nexport interface OrganizationState {\r\n    organizations: Organization[];\r\n}\r\n\r\nconst initialState: OrganizationState = {\r\n    organizations: [],\r\n};\r\n\r\nconst organizationSlice = createSlice({\r\n    name: 'organization',\r\n    initialState,\r\n    reducers: {\r\n        addOrganizationAll(state, action: PayloadAction<Organization[]>) {\r\n            state.organizations = [...state.organizations, ...action.payload];\r\n        },\r\n        addOrganization(state, action: PayloadAction<Organization>) {\r\n            state.organizations.push(action.payload);\r\n        },\r\n        updateOrganization(state, action: PayloadAction<Organization>) {\r\n            const index = state.organizations.findIndex(org => org.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.organizations[index] = action.payload;\r\n            }\r\n        },\r\n        removeOrganization(state, action: PayloadAction<number>) {\r\n            state.organizations = state.organizations.filter(org => org.id !== action.payload);\r\n        },\r\n        clearOrganizationState(state) {\r\n            state.organizations = [];\r\n        }\r\n    },\r\n});\r\n\r\nexport const { addOrganization, updateOrganization, removeOrganization, addOrganizationAll, clearOrganizationState } = organizationSlice.actions;\r\n\r\nexport default organizationSlice.reducer;\r\n\r\n// Selector to get the default organization\r\nexport const getDefaultOrganization = (state: OrganizationState): Organization | null => {\r\n    return state.organizations.find(org => org.is_default) || null;\r\n};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\n\r\ninterface User {\r\n    id: number | any;\r\n    name: string;\r\n    email: string;\r\n    profile: {\r\n        id: number | any;\r\n        theme: 'dark' | 'light';\r\n        avatar: string | any;\r\n    };\r\n}\r\n\r\ninterface SessionState {\r\n    token: string | any;\r\n    user: User | null;\r\n    status?: 'unauthenticated' | 'authenticated' | 'loading';\r\n}\r\n\r\nconst initialState: SessionState = {\r\n    token: null,\r\n    user: null,\r\n    status: 'unauthenticated',\r\n};\r\n\r\nconst sessionSlice = createSlice({\r\n    name: 'session',\r\n    initialState,\r\n    reducers: {\r\n        setSession: (state, action: PayloadAction<SessionState>) => {\r\n            state.token = action.payload.token;\r\n            state.user = action.payload.user;\r\n            state.status = 'authenticated';\r\n        },\r\n        clearSession: (state) => {\r\n            state.token = null;\r\n            state.user = { id: null, name: '', email: '', profile: {id: null,theme: 'light', avatar: null} };\r\n            state.status = 'unauthenticated';\r\n        },\r\n        setLoading: (state) => {\r\n            state.status = 'loading';\r\n        },\r\n        validateSession: (state) => {\r\n            if (state.token) {\r\n                try {\r\n                    const decoded: { exp: number } = jwt.decode(state.token) as JwtPayload | any;;\r\n                    console.log('decoded', decoded);\r\n                    // Check if the token is expired\r\n                    if (decoded && decoded.exp * 1000 < Date.now()) {\r\n                        state.token = null;\r\n                        state.user = { id: null, name: '', email: '', profile: { id: null, theme: 'light', avatar: null } };\r\n                        state.status = 'unauthenticated';\r\n                    } else {\r\n                        state.status = 'authenticated';\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Invalid token:', error);\r\n                    state.token = null;\r\n                    state.user = { id: null, name: '', email: '', profile: { id: null, theme: 'light', avatar: null } };\r\n                    state.status = 'unauthenticated';\r\n                }\r\n            } else {\r\n                state.status = 'unauthenticated';\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setSession, clearSession, setLoading, validateSession } = sessionSlice.actions;\r\nexport default sessionSlice.reducer;\r\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'geistMono', 'geistMono Fallback'\"},\"className\":\"__className_c3aa02\",\"variable\":\"__variable_c3aa02\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'geistSans', 'geistSans Fallback'\"},\"className\":\"__className_1e4310\",\"variable\":\"__variable_1e4310\"};"],"names":[],"sourceRoot":""}