{"version":3,"file":"static/chunks/9396.dc3e5ec4e0d2e7fe.js","mappings":"AAIA","sources":["webpack://_N_E/./node_modules/@mui/icons-material/esm/Clear.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/HelpOutline.js","webpack://_N_E/./node_modules/@mui/material/Card/cardClasses.js","webpack://_N_E/./node_modules/@mui/material/Card/Card.js","webpack://_N_E/./node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","webpack://_N_E/./node_modules/@mui/material/InputAdornment/InputAdornment.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/CopyAll.js","webpack://_N_E/./src/app/(pages)/setup/components/ExternalKeyManager.tsx","webpack://_N_E/./src/app/services/externalKeyService.ts"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 18h2v-2h-2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8m0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4\"\n}), 'HelpOutline');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport { getCardUtilityClass } from \"./cardClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  overflow: 'hidden'\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n    className,\n    raised = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    raised\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, {\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","'use client';\n\nvar _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport Typography from \"../Typography/index.js\";\nimport FormControlContext from \"../FormControl/FormControlContext.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from \"./inputAdornmentClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'flex',\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active,\n  variants: [{\n    props: {\n      variant: 'filled'\n    },\n    style: {\n      [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n        marginTop: 16\n      }\n    }\n  }, {\n    props: {\n      position: 'start'\n    },\n    style: {\n      marginRight: 8\n    }\n  }, {\n    props: {\n      position: 'end'\n    },\n    style: {\n      marginLeft: 8\n    }\n  }, {\n    props: {\n      disablePointerEvents: true\n    },\n    style: {\n      pointerEvents: 'none'\n    }\n  }]\n})));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = {\n    ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"textSecondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? (/* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          \"aria-hidden\": true,\n          children: \"\\u200B\"\n        }))) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m0 14H9V4h9zM3 15v-2h2v2zm0-5.5h2v2H3zM10 20h2v2h-2zm-7-1.5v-2h2v2zM5 22c-1.1 0-2-.9-2-2h2zm3.5 0h-2v-2h2zm5 0v-2h2c0 1.1-.9 2-2 2M5 6v2H3c0-1.1.9-2 2-2\"\n}), 'CopyAll');","import { useState, useEffect } from 'react';\r\nimport { TextField, Button, Card, Typography, IconButton, Tooltip, CircularProgress, Box, Skeleton, InputAdornment } from '@mui/material';\r\nimport { CopyAll } from '@mui/icons-material';\r\nimport { addExternalKey, deleteExternalKey, findAllByAddonId, updateExternalKey } from '@/app/services/externalKeyService';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport { RootState } from '@/redux/store';\r\nimport { useSnackbar } from 'notistack';\r\nimport dynamic from 'next/dynamic';\r\nimport { useSelector } from 'react-redux';\r\nconst DeleteConfirmDialog = dynamic(() => import('@/app/(pages)/setup/components/DeleteConfirmDialog'), { ssr: false });\r\n\r\nconst ExternalKeyManager = ({ addonId }: any) => {\r\n    const [externalKey, setExternalKey] = useState<{ id: number | undefined, key: string }>({ id: undefined, key: '' });\r\n    const [externalKeys, setExternalKeys] = useState<any[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n    const [errors, setErrors] = useState('');\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleExternalKeyChange = (e: any) => {\r\n        setExternalKey((prev) => { return { ...prev, key: e.target.value } });\r\n        setErrors('');\r\n    };\r\n\r\n    const handleCreateExternalKey = async () => {\r\n        if (!externalKey.key || externalKey.key.trim() === '') {\r\n            setErrors('External Key is required.');\r\n            return;\r\n        }\r\n\r\n        setErrors('');\r\n        setIsSaving(true);\r\n\r\n        try {\r\n            const response = externalKey.id ? await updateExternalKey(externalKey.id, { addon_id: addonId, key_value: externalKey.key }, token) :\r\n                await addExternalKey(addonId, externalKey.key, token);\r\n            if (response.status == 201 || response.status == 200) {\r\n                enqueueSnackbar(`External Key copied: ${externalKey.key}`, { variant: 'success' });\r\n                setExternalKey({ id: undefined, key: '' });\r\n                setExternalKeys((prev: any) => [...prev, response.data]);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error creating external key:', error);\r\n            enqueueSnackbar(`Failed to create External Key`, { variant: 'error' });\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    const handleCopyKey = (key: string) => {\r\n        navigator.clipboard.writeText(key);\r\n        enqueueSnackbar(`External Key copied: ${key}`, { variant: 'success' });\r\n    };\r\n\r\n    const handleDeleteKey = async (id: number) => {\r\n        if (!id) return;\r\n\r\n        // const confirmDelete = window.confirm(\"Are you sure you want to delete this key?\");\r\n        // if (!confirmDelete) return;\r\n\r\n        try {\r\n            await deleteExternalKey(id, token);\r\n            enqueueSnackbar(\"Key deleted successfully.\", { variant: 'success' });\r\n            // Refresh the external keys list after deletion\r\n            fetchExternalKeys();\r\n        } catch (error) {\r\n            console.error(\"Error deleting key:\", error);\r\n            enqueueSnackbar(\"Failed to delete the key. Please try again.\", { variant: 'error' });\r\n        }\r\n    };\r\n\r\n    const fetchExternalKeys = async () => {\r\n        setIsLoading(true);\r\n        setExternalKeys([]);\r\n        try {\r\n            const response = await findAllByAddonId(addonId, token);\r\n            if (response.status == 200) setExternalKeys(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching external keys:', error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch existing external keys for the given addon\r\n\r\n        if (addonId) fetchExternalKeys();\r\n    }, [addonId]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <Box className=\"pt-4\">\r\n                <TextField\r\n                    label=\"Create External Key\"\r\n                    variant=\"outlined\"\r\n                    value={externalKey.key}\r\n                    onChange={handleExternalKeyChange}\r\n                    fullWidth\r\n                    size='small'\r\n                    error={Boolean(errors)}\r\n                    helperText={errors}\r\n                    disabled={isSaving}\r\n                    slotProps={{\r\n                        input: {\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    {externalKey?.key && <ClearIcon fontSize=\"small\" sx={{ cursor: 'pointer' }} onClick={() => setExternalKey({ id: undefined, key: '' })} />}\r\n                                    <Tooltip\r\n                                        title=\"Type/Status refers to the identifier used by external systems to categorize templates (e.g., invoice, report). This helps external systems recognize and interact with the template uniquely.\"\r\n                                        arrow\r\n                                    ><HelpOutlineIcon fontSize=\"small\" sx={{ cursor: 'pointer' }} />\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }\r\n                    }}\r\n                />\r\n                <div className=\"flex justify-end mt-3\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleCreateExternalKey}\r\n                        disabled={isSaving}\r\n                        size='small'\r\n                    >\r\n                        {isSaving ? <CircularProgress size={24} color=\"inherit\" /> : externalKey.id ? 'Update Key' : 'Create Key'}\r\n                    </Button>\r\n                </div>\r\n            </Box>\r\n\r\n            {isLoading ? (\r\n                <Skeleton variant=\"text\" width=\"100%\" height={40} />\r\n            ) : (\r\n                externalKeys?.length > 0 && (\r\n                    <Card className=\"p-4\">\r\n                        <Typography variant=\"h6\" className=\"mb-2\">Existing External Keys</Typography>\r\n                        <div>\r\n                            {externalKeys?.map((key, index) => (\r\n                                <div key={index} className=\"flex justify-between items-center py-2\">\r\n                                    <Typography sx={{ cursor: 'pointer' }} onClick={() => setExternalKey({ id: key.id, key: key.key_value })}>{key.key_value}</Typography>\r\n                                    <Box>\r\n                                        <Tooltip title=\"Copy Key\">\r\n                                            <IconButton onClick={() => handleCopyKey(key.key_value)}>\r\n                                                <CopyAll />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Delete Key\">\r\n                                            <DeleteConfirmDialog\r\n                                                id={key.id}\r\n                                                onDelete={(id: any) => handleDeleteKey(id)}\r\n                                                variant=\"icon\"\r\n                                                buttonProps={{ size: \"small\", color: \"error\" }} // IconButton props\r\n                                            />\r\n                                        </Tooltip>\r\n                                    </Box>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </Card>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExternalKeyManager;\r\n","import { API } from './api';\r\n\r\nexport const addExternalKey = async (addon_id: number, key: string, token: string) => {\r\n    return API.post(`/external-keys`, { addon_id: addon_id, key_value: key }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const getExternalKey = async (id: number, token: string) => {\r\n    return API.get(`/external-keys/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const updateExternalKey = async (id: number, data: any, token: string) => {\r\n    return API.put(`/external-keys/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const deleteExternalKey = async (id: number, token: string) => {\r\n    return API.delete(`/external-keys/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const findAllByAddonId = async (addon_id: number, token: string) => {\r\n    return API.get(`/external-keys/by-addon/${addon_id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}"],"names":[],"sourceRoot":""}