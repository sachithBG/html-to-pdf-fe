{"version":3,"file":"static/chunks/8109.8e08a929fc6a8883.js","mappings":"AAIA","sources":["webpack://_N_E/./src/app/utils/editor.utils.ts","webpack://_N_E/./src/app/(pages)/setup/components/CKTextField.tsx","webpack://_N_E/./src/app/services/mediaService.ts"],"sourcesContent":["import { Alignment, Autoformat, AutoImage, Autosave, BalloonToolbar, BlockQuote, BlockToolbar, Bold, Code, CodeBlock, Essentials, FindAndReplace, FontBackgroundColor, FontColor, FontFamily, FontSize, FullPage, GeneralHtmlSupport, Heading, HorizontalLine, HtmlComment, ImageBlock, ImageCaption, ImageInline, ImageInsert, ImageInsertViaUrl, ImageResize, ImageStyle, ImageTextAlternative, ImageToolbar, ImageUpload, Indent, IndentBlock, Italic, Link, LinkImage, List, ListProperties, Markdown, MediaEmbed, Mention, PageBreak, Paragraph, PasteFromMarkdownExperimental, PasteFromOffice, PictureEditing, RemoveFormat, ShowBlocks, SourceEditing, SpecialCharacters, SpecialCharactersArrows, SpecialCharactersCurrency, SpecialCharactersEssentials, SpecialCharactersLatin, SpecialCharactersMathematical, SpecialCharactersText, Strikethrough, Style, Subscript, Superscript, Table, TableCaption, TableCellProperties, TableColumnResize, TableProperties, TableToolbar, TextPartLanguage, TextTransformation, Title, TodoList, Underline, WordCount } from \"ckeditor5\";\r\nimport { config } from \"process\";\r\nimport { uploadMedia } from \"../services/mediaService\";\r\n// const CLOUD_SERVICES_TOKEN_URL = 'https://';\r\nexport const defaultConfig: any = {\r\n    // initialData: value,\r\n    // placeholder: placeholder,\r\n    toolbar: {\r\n        items: [\r\n            'sourceEditing',\r\n            'showBlocks',\r\n            'findAndReplace',\r\n            // 'textPartLanguage',\r\n            // '|',\r\n            // 'heading',\r\n            // 'style',\r\n            '|',\r\n            'fontSize',\r\n            'fontFamily',\r\n            'fontColor',\r\n            'fontBackgroundColor',\r\n            '|',\r\n            'bold',\r\n            'italic',\r\n            'underline',\r\n            // 'strikethrough',\r\n            'subscript',\r\n            'superscript',\r\n            'code',\r\n            'removeFormat',\r\n            '|',\r\n            'specialCharacters',\r\n            'horizontalLine',\r\n            'pageBreak',\r\n            'link',\r\n            // 'bookmark',\r\n            'insertImage',\r\n            'imageUpload',\r\n            // 'ckbox',\r\n            'mediaEmbed',\r\n            'insertTable',\r\n            // 'highlight',\r\n            'blockQuote',\r\n            'codeBlock',\r\n            '|',\r\n            'alignment',\r\n            '|',\r\n            'bulletedList',\r\n            'numberedList',\r\n            'todoList',\r\n            'outdent',\r\n            'indent'\r\n        ],\r\n        shouldNotGroupWhenFull: true,\r\n    },\r\n    plugins: [\r\n        Alignment,\r\n        Autoformat,\r\n        AutoImage,\r\n        Autosave,\r\n        BalloonToolbar,\r\n        BlockQuote,\r\n        BlockToolbar,\r\n        Bold,\r\n        // Bookmark,\r\n        //     //CKBox,\r\n        // CloudServices,\r\n        Code,\r\n        CodeBlock,\r\n        Essentials,\r\n        FindAndReplace,\r\n        FontBackgroundColor,\r\n        FontColor,\r\n        FontFamily,\r\n        FontSize,\r\n        FullPage,\r\n        GeneralHtmlSupport,\r\n        Heading,\r\n        // Highlight,\r\n        HorizontalLine,\r\n        HtmlComment,\r\n        ImageBlock,\r\n        ImageCaption,\r\n        ImageInline,\r\n        ImageInsert,\r\n        ImageInsertViaUrl,\r\n        ImageResize,\r\n        ImageStyle,\r\n        ImageTextAlternative,\r\n        ImageToolbar,\r\n        ImageUpload,\r\n        Indent,\r\n        IndentBlock,\r\n        Italic,\r\n        Link,\r\n        LinkImage,\r\n        List,\r\n        ListProperties,\r\n        Markdown,\r\n        MediaEmbed,\r\n        Mention,\r\n        PageBreak,\r\n        Paragraph,\r\n        PasteFromMarkdownExperimental,\r\n        PasteFromOffice,\r\n        PictureEditing,\r\n        RemoveFormat,\r\n        ShowBlocks,\r\n        SourceEditing,\r\n        SpecialCharacters,\r\n        SpecialCharactersArrows,\r\n        SpecialCharactersCurrency,\r\n        SpecialCharactersEssentials,\r\n        SpecialCharactersLatin,\r\n        SpecialCharactersMathematical,\r\n        SpecialCharactersText,\r\n        Strikethrough,\r\n        Style,\r\n        Subscript,\r\n        Superscript,\r\n        Table,\r\n        TableCaption,\r\n        TableCellProperties,\r\n        TableColumnResize,\r\n        TableProperties,\r\n        TableToolbar,\r\n        TextPartLanguage,\r\n        TextTransformation,\r\n        Title,\r\n        TodoList,\r\n        Underline,\r\n        WordCount\r\n    ],\r\n    balloonToolbar: ['bold', 'italic', '|', 'link', 'insertImage', '|', 'bulletedList', 'numberedList'],\r\n    blockToolbar: [\r\n        'fontSize',\r\n        'fontColor',\r\n        'fontBackgroundColor',\r\n        '|',\r\n        'bold',\r\n        'italic',\r\n        '|',\r\n        'link',\r\n        'insertImage',\r\n        'insertTable',\r\n        '|',\r\n        'bulletedList',\r\n        'numberedList',\r\n        'outdent',\r\n        'indent'\r\n    ],\r\n    fontFamily: {\r\n        supportAllValues: true\r\n    },\r\n    fontSize: {\r\n        options: [10, 12, 14, 'default', 18, 20, 22],\r\n        supportAllValues: true\r\n    },\r\n    heading: {\r\n        options: [\r\n            {\r\n                model: 'paragraph',\r\n                title: 'Paragraph',\r\n                class: 'ck-heading_paragraph'\r\n            },\r\n            {\r\n                model: 'heading1',\r\n                view: 'h1',\r\n                title: 'Heading 1',\r\n                class: 'ck-heading_heading1'\r\n            },\r\n            {\r\n                model: 'heading2',\r\n                view: 'h2',\r\n                title: 'Heading 2',\r\n                class: 'ck-heading_heading2'\r\n            },\r\n            {\r\n                model: 'heading3',\r\n                view: 'h3',\r\n                title: 'Heading 3',\r\n                class: 'ck-heading_heading3'\r\n            },\r\n            {\r\n                model: 'heading4',\r\n                view: 'h4',\r\n                title: 'Heading 4',\r\n                class: 'ck-heading_heading4'\r\n            },\r\n            {\r\n                model: 'heading5',\r\n                view: 'h5',\r\n                title: 'Heading 5',\r\n                class: 'ck-heading_heading5'\r\n            },\r\n            {\r\n                model: 'heading6',\r\n                view: 'h6',\r\n                title: 'Heading 6',\r\n                class: 'ck-heading_heading6'\r\n            }\r\n        ]\r\n    },\r\n    htmlSupport: {\r\n        allow: [\r\n            {\r\n                name: /^.*$/,\r\n                styles: true,\r\n                attributes: true,\r\n                classes: true\r\n            }\r\n        ]\r\n    },\r\n    image: {\r\n        toolbar: [\r\n            'toggleImageCaption',\r\n            'imageTextAlternative',\r\n            '|',\r\n            'imageStyle:inline',\r\n            'imageStyle:wrapText',\r\n            'imageStyle:breakText',\r\n            '|',\r\n            'resizeImage'\r\n        ]\r\n    },\r\n    link: {\r\n        addTargetToExternalLinks: true,\r\n        defaultProtocol: 'https://',\r\n        decorators: {\r\n            toggleDownloadable: {\r\n                mode: 'manual',\r\n                label: 'Downloadable',\r\n                attributes: {\r\n                    download: 'file'\r\n                }\r\n            }\r\n        }\r\n    },\r\n    list: {\r\n        properties: {\r\n            styles: true,\r\n            startIndex: true,\r\n            reversed: true\r\n        }\r\n    },\r\n    mention: {\r\n        feeds: [\r\n            {\r\n                marker: '@',\r\n                feed: [\r\n                    /* See: https://ckeditor.com/docs/ckeditor5/latest/features/mentions.html */\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    // placeholder: 'Type or paste your content here!',\r\n    style: {\r\n        definitions: [\r\n            {\r\n                name: 'Article category',\r\n                element: 'h3',\r\n                classes: ['category']\r\n            },\r\n            {\r\n                name: 'Title',\r\n                element: 'h2',\r\n                classes: ['document-title']\r\n            },\r\n            {\r\n                name: 'Subtitle',\r\n                element: 'h3',\r\n                classes: ['document-subtitle']\r\n            },\r\n            {\r\n                name: 'Info box',\r\n                element: 'p',\r\n                classes: ['info-box']\r\n            },\r\n            {\r\n                name: 'Side quote',\r\n                element: 'blockquote',\r\n                classes: ['side-quote']\r\n            },\r\n            {\r\n                name: 'Marker',\r\n                element: 'span',\r\n                classes: ['marker']\r\n            },\r\n            {\r\n                name: 'Spoiler',\r\n                element: 'span',\r\n                classes: ['spoiler']\r\n            },\r\n            {\r\n                name: 'Code (dark)',\r\n                element: 'pre',\r\n                classes: ['fancy-code', 'fancy-code-dark']\r\n            },\r\n            {\r\n                name: 'Code (bright)',\r\n                element: 'pre',\r\n                classes: ['fancy-code', 'fancy-code-bright']\r\n            }\r\n        ]\r\n    },\r\n    table: {\r\n        contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties']\r\n    },\r\n    // cloudServices: {\r\n    //     tokenUrl: CLOUD_SERVICES_TOKEN_URL\r\n    // },\r\n    \r\n    // licenseKey: 'GPL',\r\n    ...config, // Merging default config with any provided overrides\r\n};\r\n\r\n\r\nexport class MyUploadAdapter {\r\n    private loader: any;\r\n    private token: string;\r\n    private orgId: number;\r\n\r\n    constructor(loader: any, token: string, orgId: number) {\r\n        this.loader = loader;\r\n        this.token = token;\r\n        this.orgId = orgId;\r\n    }\r\n\r\n    // This method will be called to start the upload\r\n    upload(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            // const data:any = new FormData();\r\n            // data.append('file', this.loader.file);\r\n\r\n            // Use your server API to handle the file upload\r\n            // fetch('/upload-endpoint', {\r\n            //     method: 'POST',\r\n            //     body: data,\r\n            // })\r\n            uploadMedia(this.orgId, this.loader.file, [],this.token)//todo set addons\r\n                // .then((response) => response.json())\r\n                .then((result) => {\r\n                    // On success, return the image URL\r\n                    resolve({\r\n                        default: result.data.url,  // The uploaded image URL\r\n                    });\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    // Optional: Implement abort method if you need to support aborting the upload\r\n    abort() {\r\n        // Handle the abortion of the upload here if needed\r\n    }\r\n}\r\n\r\n// Register the custom upload adapter\r\n// export function uploadAdapterPlugin(editor: any, token: string, orgId: number) {\r\n//     editor.plugins.get('FileRepository').createUploadAdapter = (loader: any) => {\r\n//         return new MyUploadAdapter(loader, token, orgId);\r\n//     };\r\n// }\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport { Box, Skeleton, useTheme } from '@mui/material';\r\nimport { defaultConfig, MyUploadAdapter } from '@/app/utils/editor.utils';\r\nimport { ClassicEditor } from 'ckeditor5';\r\nimport 'ckeditor5/ckeditor5.css';\r\n\r\ninterface CKTextFieldProps {\r\n    value: string;\r\n    onChange: (data: string) => void;\r\n    placeholder?: string;\r\n    isLoading?: boolean;\r\n    config?: Record<string, any>; // Optional additional configuration\r\n    token?: string,\r\n    orgId?: number\r\n}\r\n\r\nconst CKTextField: React.FC<CKTextFieldProps> = ({\r\n    value,\r\n    onChange,\r\n    placeholder = 'Type your content here...',\r\n    isLoading = false,\r\n    config = {},\r\n    token,\r\n    orgId\r\n}) => {\r\n    const [editorInstance, setEditorInstance] = useState<any>(null);\r\n    const [isEditorReady, setIsEditorReady] = useState(false);\r\n    const theme = useTheme();\r\n    const handleEditorUnmount = () => {\r\n        // Cleanup when the editor is unmounted\r\n        if (editorInstance) {\r\n            editorInstance.destroy().catch((error: any) => {\r\n                console.error('Error while destroying the editor:', error);\r\n            });\r\n        }\r\n    };\r\n    // eslint-disable-next-line\r\n    const uploadAdapterPlugin = (editor: any, token: string, orgId: number) => {\r\n        // Custom plugin logic for handling uploads, using the token and orgId\r\n        // This will likely use the token and orgId to make authenticated requests for uploading images/files\r\n        // Example plugin implementation:\r\n        editor.plugins.get('FileRepository').createUploadAdapter = (loader: any) => {\r\n            return new MyUploadAdapter(loader, token, orgId);\r\n        };\r\n    };\r\n    useEffect(() => {\r\n        return () => {\r\n            handleEditorUnmount();  // Ensure cleanup when the component unmounts\r\n            console.log(token)\r\n            console.log(orgId)\r\n        };\r\n    }, [editorInstance]);\r\n    return (\r\n        <Box>\r\n            {isLoading || !isEditorReady ? (\r\n                <Skeleton\r\n                    variant=\"rectangular\"\r\n                    width=\"100%\"\r\n                    height={200}\r\n                    sx={{ borderRadius: 2, marginBottom: 2 }}\r\n                />\r\n            ) : null}\r\n            <Box sx={{\r\n                ml: !isLoading ? 0 : -5000, position: !isLoading ? 'relative' : 'absolute',\r\n                '& .ck-content, .ck-source-editing-area textarea': {\r\n                    color: 'black !important',// theme.palette.mode === 'dark' ? '#ffffff !important' : 'black !important',\r\n                    backgroundColor: 'white !important',// theme.palette.mode === 'dark' ? '#28292a !important' : 'inherit',\r\n                    fontSize: '16px',\r\n                    lineHeight: '1.5',\r\n                    padding: '16px',\r\n                    minHeight: '150px'\r\n                },\r\n                '& .ck-toolbar':{\r\n                    // color: theme.palette.mode === 'dark' ? '#ffffff !important' : 'inherit',\r\n                    backgroundColor: theme.palette.mode === 'dark' ? '#dde1ea !important' : 'inherit',\r\n                }\r\n            }}>\r\n                <CKEditor\r\n                    editor={ClassicEditor}\r\n                    config={{\r\n                        ...defaultConfig, initialData: value, placeholder: placeholder\r\n                        , ...config,\r\n                        // extraPlugins: [(editor: any) => uploadAdapterPlugin(editor, token, orgId)],\r\n                    }}\r\n                    data={value}\r\n                    onReady={(editor) => {\r\n                        setIsEditorReady(true);\r\n                        setEditorInstance(editor);\r\n                    }}\r\n                    onChange={(event: any, editor: any) => {\r\n                        const data = editor.getData();\r\n                        onChange(data);\r\n                    }}\r\n                    />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\n\r\nexport default CKTextField;\r\n","import { API } from \"./api\";\r\n\r\nexport const uploadAvator = async (userId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('avatar', image);\r\n\r\n    try {\r\n        const response = await API.put(`/profiles/${userId}/avatar`, formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadOrgLogo = async (currentOrgId: number, image: File, token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('logo', image);\r\n\r\n    try {\r\n        const response = await API.post('/s3/upload/org/logo', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const uploadMedia = async (currentOrgId: number, image: File, addon_ids:number[]=[], token: string) => {\r\n    const formData = new FormData();\r\n    formData.append('media', image);\r\n\r\n    return await API.post('/s3/media/upload', formData, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            params: {\r\n                organization_id: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n};\r\n\r\nexport const findAllImages = async (currentOrgId: number, token: string, addon_ids: number[] = []) => {\r\n    try {\r\n        const response = await API.get('/media/organization/' + currentOrgId, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            params: {\r\n                organizationId: currentOrgId,\r\n                addon_ids: addon_ids\r\n            }\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Error uploading image:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deleteImg = async (key: any, token: string) => {\r\n    return API.delete('/s3/delete/img', {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: {\r\n            fileKey: key\r\n        }\r\n    });\r\n}"],"names":[],"sourceRoot":""}