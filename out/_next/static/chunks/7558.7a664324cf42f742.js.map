{"version":3,"file":"static/chunks/7558.7a664324cf42f742.js","mappings":"AAwLA","sources":["webpack://_N_E/./src/app/(pages)/setup/components/DataUploadButton.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    TextField,\r\n    Button,\r\n    CircularProgress,\r\n    IconButton,\r\n    Box,\r\n    Skeleton,\r\n} from '@mui/material';\r\nimport { CloudUpload, Save, FormatAlignLeft } from '@mui/icons-material';\r\nimport Ajv from 'ajv';\r\nimport { readPdfTemplate, updateDummyDataPdfTemplate } from '@/app/services/pdfService';\r\nimport { RootState } from '@/redux/store';\r\nimport { useSelector } from 'react-redux';\r\n\r\ninterface DataUploadButtonProps {\r\n    onSave: (data: string) => void;\r\n    id: number;\r\n}\r\n\r\nconst DataUploadButton: React.FC<DataUploadButtonProps> = ({ onSave, id }) => {\r\n    const [isDialogOpen, setDialogOpen] = useState(false);\r\n    const [jsonText, setJsonText] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [isSaving, setSaving] = useState(false);\r\n    const [isLoding, setIsLoding] = useState(false);\r\n\r\n    // const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n    //     getDefaultOrganization(state.organization)\r\n    // );\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    useEffect(() => {\r\n        if (id && isDialogOpen) {\r\n            setIsLoding(true);\r\n            const fetchData = async () => {\r\n                try {\r\n                    const response = await readPdfTemplate(id, token);\r\n                    if (response.status == 200) {\r\n                        const { data } = response.data;\r\n                        // console.log(response.data.json)\r\n                        if (data?.json) {\r\n                            const json = JSON.parse(data.json);\r\n                            // json = JSON.parse(json);\r\n                            // console.log(json)\r\n                            setJsonText(JSON.stringify(json, null, 2)); // Format with 2-space indentation\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching data for edit mode:\", error);\r\n                } finally {\r\n                    setIsLoding(false);\r\n                }\r\n            };\r\n            fetchData();\r\n        }\r\n    }, [id, isDialogOpen]);\r\n\r\n    const handleOpenDialog = () => setDialogOpen(true);\r\n    const handleCloseDialog = () => {\r\n        setDialogOpen(false);\r\n        setJsonText('');\r\n        setError(null);\r\n    };\r\n\r\n    const handleJsonChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setJsonText(e.target.value);\r\n        setError(null);\r\n    };\r\n\r\n    const handleValidateJson = () => {\r\n        try {\r\n            const ajv = new Ajv();\r\n            const parsed = JSON.parse(jsonText);\r\n            const validate = ajv.compile({}); // Minimal validation schema\r\n            if (!validate(parsed) || jsonText?.trim() == '') {\r\n                throw new Error('Invalid JSON structure.');\r\n            }\r\n            setError(null);\r\n            return true;\r\n        } catch (err: any) {\r\n            setError(err.message);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleFormatJson = () => {\r\n        try {\r\n            const formatted = JSON.stringify(JSON.parse(jsonText), null, 2);\r\n            setJsonText(formatted);\r\n            setError(null);\r\n        } catch {\r\n            setError('Invalid JSON. Please fix errors before formatting.');\r\n        }\r\n    };\r\n\r\n    const handleSave = async () => {\r\n        if (error || !handleValidateJson()) return;\r\n        try {\r\n            setSaving(true);\r\n            await updateDummyDataPdfTemplate(id, jsonText, token);\r\n            setTimeout(() => {\r\n                onSave(jsonText);\r\n                setSaving(false);\r\n                handleCloseDialog();\r\n            }, 1000); // Simulate async save\r\n        } catch (e: any) {\r\n            setError(e?.message);\r\n        } finally {\r\n            setSaving(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IconButton color=\"primary\" onClick={handleOpenDialog} aria-label=\"upload\">\r\n                <CloudUpload />\r\n            </IconButton>\r\n\r\n            <Dialog open={isDialogOpen} onClose={handleCloseDialog} maxWidth=\"lg\" fullWidth>\r\n                <DialogTitle>Upload JSON Data</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    {!isLoding ? <>\r\n                        <Box sx={{ display: 'flex', float: 'right', justifyContent: 'space-between', mt: 2 }}>\r\n                            <Button\r\n                                startIcon={<FormatAlignLeft />}\r\n                                onClick={handleFormatJson}\r\n                                color=\"secondary\"\r\n                                variant=\"outlined\"\r\n                                size='small'\r\n                            >\r\n                                Format JSON\r\n                            </Button>\r\n                        </Box>\r\n                        <TextField\r\n                            label=\"JSON Data\"\r\n                            multiline\r\n                            rows={20}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={jsonText}\r\n                            onChange={handleJsonChange}\r\n                            error={!!error}\r\n                            helperText={error || ''}\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                    </> :\r\n                        <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', mt: 2 }}>\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                            <Skeleton variant=\"text\" width=\"90%\" height={30} />\r\n                        </Box>\r\n                    }\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={handleCloseDialog} color=\"inherit\" size='small'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleSave}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        disabled={isSaving || !!error}\r\n                        startIcon={isSaving ? <CircularProgress size={20} /> : <Save />}\r\n                        size='small'\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DataUploadButton;"],"names":[],"sourceRoot":""}