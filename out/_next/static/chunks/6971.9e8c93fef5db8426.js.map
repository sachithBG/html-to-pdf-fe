{"version":3,"file":"static/chunks/6971.9e8c93fef5db8426.js","mappings":"ACEA","sources":["webpack://_N_E/./node_modules/@mui/material/styles/cssUtils.js","webpack://_N_E/./node_modules/@mui/material/Skeleton/skeletonClasses.js","webpack://_N_E/./node_modules/@mui/material/Skeleton/Skeleton.js","webpack://_N_E/./src/app/components/PdfPreviewButton.tsx"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSkeletonUtilityClass(slot) {\n  return generateUtilityClass('MuiSkeleton', slot);\n}\nconst skeletonClasses = generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'rounded', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);\nexport default skeletonClasses;","'use client';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha, unstable_getUnit as getUnit, unstable_toUnitless as toUnitless } from \"../styles/index.js\";\nimport { keyframes, css, styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSkeletonUtilityClass } from \"./skeletonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    animation,\n    hasChildren,\n    width,\n    height\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']\n  };\n  return composeClasses(slots, getSkeletonUtilityClass, classes);\n};\nconst pulseKeyframe = keyframes`\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.4;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\nconst waveKeyframe = keyframes`\n  0% {\n    transform: translateX(-100%);\n  }\n\n  50% {\n    /* +0.5s of delay between each loop */\n    transform: translateX(100%);\n  }\n\n  100% {\n    transform: translateX(100%);\n  }\n`;\n\n// This implementation is for supporting both Styled-components v4+ and Pigment CSS.\n// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).\n// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).\nconst pulseAnimation = typeof pulseKeyframe !== 'string' ? css`\n        animation: ${pulseKeyframe} 2s ease-in-out 0.5s infinite;\n      ` : null;\nconst waveAnimation = typeof waveKeyframe !== 'string' ? css`\n        &::after {\n          animation: ${waveKeyframe} 2s linear 0.5s infinite;\n        }\n      ` : null;\nconst SkeletonRoot = styled('span', {\n  name: 'MuiSkeleton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];\n  }\n})(memoTheme(({\n  theme\n}) => {\n  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';\n  const radiusValue = toUnitless(theme.shape.borderRadius);\n  return {\n    display: 'block',\n    // Create a \"on paper\" color with sufficient contrast retaining the color\n    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),\n    height: '1.2em',\n    variants: [{\n      props: {\n        variant: 'text'\n      },\n      style: {\n        marginTop: 0,\n        marginBottom: 0,\n        height: 'auto',\n        transformOrigin: '0 55%',\n        transform: 'scale(1, 0.60)',\n        borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,\n        '&:empty:before': {\n          content: '\"\\\\00a0\"'\n        }\n      }\n    }, {\n      props: {\n        variant: 'circular'\n      },\n      style: {\n        borderRadius: '50%'\n      }\n    }, {\n      props: {\n        variant: 'rounded'\n      },\n      style: {\n        borderRadius: (theme.vars || theme).shape.borderRadius\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren,\n      style: {\n        '& > *': {\n          visibility: 'hidden'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren && !ownerState.width,\n      style: {\n        maxWidth: 'fit-content'\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren && !ownerState.height,\n      style: {\n        height: 'auto'\n      }\n    }, {\n      props: {\n        animation: 'pulse'\n      },\n      style: pulseAnimation || {\n        animation: `${pulseKeyframe} 2s ease-in-out 0.5s infinite`\n      }\n    }, {\n      props: {\n        animation: 'wave'\n      },\n      style: {\n        position: 'relative',\n        overflow: 'hidden',\n        /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */\n        WebkitMaskImage: '-webkit-radial-gradient(white, black)',\n        '&::after': {\n          background: `linear-gradient(\n                90deg,\n                transparent,\n                ${(theme.vars || theme).palette.action.hover},\n                transparent\n              )`,\n          content: '\"\"',\n          position: 'absolute',\n          transform: 'translateX(-100%)' /* Avoid flash during server-side hydration */,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          top: 0\n        }\n      }\n    }, {\n      props: {\n        animation: 'wave'\n      },\n      style: waveAnimation || {\n        '&::after': {\n          animation: `${waveKeyframe} 2s linear 0.5s infinite`\n        }\n      }\n    }]\n  };\n}));\nconst Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSkeleton'\n  });\n  const {\n    animation = 'pulse',\n    className,\n    component = 'span',\n    height,\n    style,\n    variant = 'text',\n    width,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    animation,\n    component,\n    variant,\n    hasChildren: Boolean(other.children)\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(SkeletonRoot, {\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ...other,\n    style: {\n      width,\n      height,\n      ...style\n    }\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   * @default 'pulse'\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n  /**\n   * Optional children to infer width and height from.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The type of content that will be rendered.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rectangular', 'rounded', 'text']), PropTypes.string]),\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Skeleton;","\"use client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Modal,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Skeleton,\r\n  FormControl,\r\n  Select,\r\n  ListItemText,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { generatePdfBufferById, readPdfTemplate } from \"../services/pdfService\";\r\nimport LaunchIcon from \"@mui/icons-material/Launch\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"@/redux/store\";\r\n\r\nconst PdfPreviewButton = ({\r\n  htmlContent,\r\n  isIconButton,\r\n  id,\r\n  organization_id,\r\n  subcategories,\r\n}: {\r\n  htmlContent: string | null;\r\n  isIconButton: boolean;\r\n  id: number | null;\r\n  organization_id: number;\r\n  subcategories: string[];\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n  const iframeRef = useRef<HTMLIFrameElement>(null);\r\n  const [htmlCntnt, setHtmlCntnt] = useState(htmlContent);\r\n  const [pdfUrl, setPdfUrl] = useState(\"\");\r\n  const [previewMode, setPreviewMode] = useState(\"withoutData\");\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataError, setDataError] = useState(\"\");\r\n  const [pdfSubcategories, setPdfSubcategories] = useState(subcategories || []);\r\n  const [subcategoriesFilter, setSubcategoriesFilter] = useState([]);\r\n\r\n  const { token } = useSelector((state: RootState) => state.session);\r\n  // Open and close modal handlers\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTimeout(() => URL.revokeObjectURL(pdfUrl), 0);\r\n    setDataLoaded(false);\r\n    setPreviewMode(\"withoutData\");\r\n    setDataError(\"\");\r\n    setLoading(false);\r\n    setSubcategoriesFilter([]);\r\n  };\r\n\r\n  const handleToggle = (event: any, newMode: any) => {\r\n    setPreviewMode((prev) => (newMode !== prev ? newMode : prev));\r\n    if (!id) setHtmlCntnt(htmlContent);\r\n    // console.log(htmlContent)\r\n  };\r\n\r\n  const handleOpenById = async () => {\r\n    if (id && token) {\r\n      setLoading(true);\r\n      try {\r\n        const response = await generatePdfBufferById(\r\n          id,\r\n          organization_id,\r\n          token,\r\n          subcategoriesFilter\r\n        );\r\n        if (response.status == 200) {\r\n          const { pdf } = response.data;\r\n          const blobUrl = await openPdfInDialog(pdf);\r\n          if (blobUrl) {\r\n            setPdfUrl(blobUrl);\r\n            if (!open) setOpen(true);\r\n          }\r\n        }\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.log(e);\r\n        setDataError(\"PDF generation failed. Please try again later.\");\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const openPdfInDialog = (pdfData: any) => {\r\n    try {\r\n      const binaryPdf = atob(pdfData);\r\n      // Convert the binary string into an ArrayBuffer\r\n      const len = binaryPdf.length;\r\n      const buffer = new Uint8Array(len);\r\n      for (let i = 0; i < len; i++) {\r\n        buffer[i] = binaryPdf.charCodeAt(i);\r\n      }\r\n      const blob = new Blob([buffer], { type: \"application/pdf\" });\r\n      const blobUrl = URL.createObjectURL(blob);\r\n      return blobUrl; // Return blob URL to render in Dialog\r\n    } catch (error) {\r\n      console.error(\"Error preparing PDF for preview:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleOpenWithData = () => {\r\n    if (id && token) {\r\n      setLoading(true);\r\n      const fetchData = async () => {\r\n        try {\r\n          let response = await readPdfTemplate(id, token);\r\n          if (response.status == 200) {\r\n              response = response.data;\r\n            //   console.log(response.data)\r\n            setHtmlCntnt(`<div className=\"ck ck-editor__main\">\r\n                                    <div class=\"ck ck-content\">\r\n                                    <div>${response.data.headerContent}</div>\r\n                                    ${response.data.bodyContent}\r\n                                    ${response.data.sections ? response.data.sections.map((se: any) => se.htmlContent) : ''}\r\n                                    <footer>${response.data.footerContent}</footer>\r\n                                    </div>\r\n                                    </div>\r\n                            `);\r\n              setPdfSubcategories(response.data.subcategories?.map((sc:any)=> sc.name) || []);\r\n            setOpen(true);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching data for edit mode:\", error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n//   useEffect(() => {\r\n//     if (iframeRef.current && htmlCntnt) {\r\n//       // const sanitizedHtmlContent = DOMPurify.sanitize(htmlCntnt, {\r\n//       //     ALLOWED_TAGS: ['img', 'div', 'p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'br'],\r\n//       //     ALLOWED_ATTR: ['src', 'alt', 'title', 'class', 'style'],\r\n//       // });\r\n//       const doc = iframeRef.current.contentDocument;\r\n//       if (doc) {\r\n//         doc.open();\r\n//         doc.write(`\r\n//             <!DOCTYPE html>\r\n//             <html lang=\"en\">\r\n//             <head>\r\n//                 <style>\r\n//                     /* Include CKEditor styles here or link to the external stylesheet */\r\n//                     @import url('https://cdn.ckeditor.com/ckeditor5/35.0.1/classic/theme.css');\r\n//                     body {\r\n//                         margin: 0;\r\n//                         padding: 0;\r\n//                     }\r\n//                     .image {\r\n//                                 text-align: center;\r\n//                             }\r\n//                             .image img {\r\n//                                 max-width: 100%;\r\n//                                 height: auto;\r\n//                                 display: block;\r\n//                                 margin: 0 auto;\r\n//                             }\r\n//                             .image_resized {\r\n//                                 display: block;\r\n//                                 margin: 0 auto;\r\n//                             }\r\n//                 </style>\r\n//             </head>\r\n//             <body>\r\n//             <div  className=\"ck ck-editor__main\">\r\n//                 <div class=\"ck ck-content\">${htmlCntnt}</div>\r\n//                 </div>\r\n//             </body>\r\n//             </html>\r\n//         `); // Write HTML content to iframe\r\n//         doc.close();\r\n//       }\r\n//     }\r\n//   }, [htmlCntnt]); // Re-render iframe when htmlContent changes\r\n\r\n  // Handle loading state based on iframe content\r\n//   useEffect(() => {\r\n//     if (iframeRef.current && htmlCntnt) {\r\n//       // setLoading(true);\r\n//       const iframe = iframeRef.current;\r\n//       iframe.onload = () => setLoading(false); // Set loading to false once iframe content is loaded\r\n//     }\r\n//   }, [htmlCntnt, previewMode]);\r\n\r\n  useEffect(() => {\r\n    if (previewMode != \"withoutData\" && !dataLoaded) {\r\n      handleOpenById();\r\n      setDataLoaded(true);\r\n    }\r\n  }, [previewMode, subcategoriesFilter]);\r\n  useEffect(() => {\r\n    setHtmlCntnt(htmlContent);\r\n  //     return () => {\r\n  //         setDataLoaded(false);\r\n  //         setPreviewMode('withoutData');\r\n  //         setDataError('')\r\n  //     }\r\n  }, [open]);\r\n  return (\r\n    <Box>\r\n      {/* Button to open the modal */}\r\n      {isIconButton ? (\r\n        <LaunchIcon onClick={handleOpenWithData} sx={{ cursor: \"pointer\" }} />\r\n      ) : (\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={handleOpen}\r\n          disabled={!htmlCntnt} // Disable button if no HTML content\r\n          size=\"small\"\r\n        >\r\n          Preview HTML\r\n        </Button>\r\n      )}\r\n\r\n      {/* Modal for preview */}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"pdf-preview-title\"\r\n        aria-describedby=\"pdf-preview-description\"\r\n      >\r\n        <Box\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"80%\",\r\n            height: \"80%\",\r\n            bgcolor: \"background.paper\",\r\n            // border: '2px solid #000',\r\n            // boxShadow: 24,\r\n            p: 4,\r\n            pb: 15,\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          <Box sx={{ display: \"flex\", mb: 2 }}>\r\n            <Typography\r\n              id=\"pdf-preview-title\"\r\n              variant=\"h5\"\r\n              component=\"h2\"\r\n              gutterBottom\r\n            >\r\n              HTML Preview\r\n            </Typography>\r\n            {id && (\r\n              <ToggleButtonGroup\r\n                value={previewMode}\r\n                exclusive\r\n                onChange={handleToggle}\r\n                aria-label=\"preview mode\"\r\n                sx={{\r\n                  ml: 2,\r\n                  mt: 0.6,\r\n                  \"& .MuiToggleButton-root\": {\r\n                    // borderRadius: \"2px\",\r\n                    width: 125,\r\n                    height: 25,\r\n                  },\r\n                }}\r\n              >\r\n                <ToggleButton\r\n                  size=\"small\"\r\n                  id=\"withoutData\"\r\n                  value=\"withoutData\"\r\n                  aria-label=\"Preview without Data\"\r\n                >\r\n                  Without Data\r\n                </ToggleButton>\r\n                <ToggleButton\r\n                  size=\"small\"\r\n                  id=\"withData\"\r\n                  value=\"withData\"\r\n                  aria-label=\"Preview with Data\"\r\n                >\r\n                  With Data\r\n                </ToggleButton>\r\n              </ToggleButtonGroup>\r\n            )}\r\n            {previewMode != \"withoutData\" && (\r\n              <FormControl\r\n                variant=\"standard\"\r\n                sx={{ ml: 1, width: 200 }}\r\n                size=\"small\"\r\n              >\r\n                {/* <InputLabel id=\"demo-multiple-checkbox-label\">Section Filter</InputLabel> */}\r\n                <Select\r\n                  labelId=\"demo-multiple-checkbox-label\"\r\n                  id=\"demo-multiple-checkbox\"\r\n                  multiple\r\n                  value={subcategoriesFilter}\r\n                  onChange={(event: SelectChangeEvent<any>) => {\r\n                    const {\r\n                      target: { value },\r\n                    } = event;\r\n                    setSubcategoriesFilter(() =>\r\n                      // On autofill we get a stringified value.\r\n                      typeof value === \"string\" ? value.split(\",\") : value\r\n                    );\r\n                    setDataLoaded(false);\r\n                  }}\r\n                  // input={<OutlinedInput label=\"Section Filter\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  // MenuProps={MenuProps}\r\n                  size=\"small\"\r\n                >\r\n                  {pdfSubcategories?.map((name) => (\r\n                    <MenuItem key={name} value={name}>\r\n                      <ListItemText primary={name} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n          </Box>\r\n          {/* Show loading state while iframe is loading */}\r\n          {loading && (\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              height=\"100%\"\r\n              // position=\"absolute\"\r\n              top={0}\r\n              left={0}\r\n              width=\"100%\"\r\n              zIndex={1}\r\n              // bgcolor=\"white\"\r\n            >\r\n              <Skeleton variant=\"rectangular\" width=\"90%\" height=\"90%\" />\r\n            </Box>\r\n          )}\r\n          {previewMode != \"withoutData\" && !loading && pdfUrl && (\r\n            <iframe\r\n              src={pdfUrl}\r\n              title=\"PDF Preview\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              style={{ border: \"none\" }}\r\n              // frameBorder=\"0\"\r\n            />\r\n          )}\r\n          {previewMode != \"withoutData\" && dataError && !loading && (\r\n            <Typography\r\n              id=\"pdf-preview-description\"\r\n              color=\"error\"\r\n              align=\"center\"\r\n              variant=\"h6\"\r\n            >\r\n              {dataError}\r\n            </Typography>\r\n          )}\r\n          {/* {htmlContent} */}\r\n          {/* PDF iframe */}\r\n          {htmlCntnt ? (\r\n            <Box\r\n              sx={{\r\n                opacity: previewMode == \"withoutData\" ? 1 : 0,\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                position:\r\n                  previewMode == \"withoutData\" ? \"relative\" : \"absolute\",\r\n                mt: previewMode == \"withoutData\" ? 0 : 1500,\r\n              }}\r\n            >\r\n              <iframe\r\n                ref={iframeRef}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                title=\"HTML Preview\"\r\n                style={{ border: \"none\" }}\r\n                srcDoc={`\r\n                                    <!DOCTYPE html>\r\n                                    <html lang=\"en\">\r\n                                    <head>\r\n                                    <link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.css\">\r\n                                        <style>\r\n                                            body {\r\n                                                margin: 0;\r\n                                                padding: 0;\r\n                                            },\r\n                                            .ck-content {\r\n                                                 margin: 0 auto;\r\n                                            }\r\n                                        </style>\r\n                                    </head>\r\n                                    <body>\r\n                                    ${htmlCntnt}\r\n                                    </body>\r\n                                    </html>\r\n                                `}\r\n                // src=''\r\n              />\r\n            </Box>\r\n          ) : (\r\n            <Typography\r\n              id=\"pdf-preview-description\"\r\n              color=\"error\"\r\n              align=\"center\"\r\n              variant=\"h6\"\r\n            >\r\n              {previewMode == \"withoutData\" && !loading\r\n                ? \"No HTML content available.\"\r\n                : \"\"}\r\n            </Typography>\r\n          )}\r\n\r\n          {/* Close button */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"info\"\r\n            onClick={handleClose}\r\n            sx={{ mt: 2, float: \"right\" }}\r\n            size=\"small\"\r\n          >\r\n            Close\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PdfPreviewButton;\r\n"],"names":[],"sourceRoot":""}