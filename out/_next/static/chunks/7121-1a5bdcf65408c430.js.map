{"version":3,"file":"static/chunks/7121-1a5bdcf65408c430.js","mappings":"AA8CA","sources":["webpack://_N_E/./src/app/(pages)/setup/editor/page.tsx","webpack://_N_E/./src/app/services/externalKeyService.ts","webpack://_N_E/./src/app/services/tagService.ts","webpack://_N_E/./src/app/utils/constant.ts"],"sourcesContent":["\"use client\";\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    Collapse,\r\n    TextField,\r\n    Grid2 as Grid,\r\n    useMediaQuery,\r\n    FormControl,\r\n    Select,\r\n    InputLabel,\r\n    MenuItem,\r\n    Checkbox,\r\n    ListItemText,\r\n    CircularProgress,\r\n    Autocomplete,\r\n    IconButton,\r\n    Tooltip,\r\n    InputAdornment,\r\n    Chip,\r\n    useTheme,\r\n    Paper,\r\n    Grid2,\r\n    Divider,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n} from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Save as SaveIcon } from \"@mui/icons-material\";\r\nimport FileCopyIcon from '@mui/icons-material/FileCopy';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\r\n\r\nimport dynamic from \"next/dynamic\";\r\nimport { findAllAddons } from \"@/app/services/addonService\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { findAllTags } from \"@/app/services/tagService\";\r\nimport { bdy, ftr, hdr, TAG_TYPES } from \"@/app/utils/constant\";\r\nimport { getDefaultOrganization, Organization, OrganizationState } from \"@/redux/slice/organizationSlice\";\r\nimport { createPdfTemplate, generatePdfBuffer, generatePdfBufferById, readPdfTemplate, updatePdfTemplate } from \"@/app/services/pdfService\";\r\nimport { findAllByAddonId } from \"@/app/services/externalKeyService\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { RootState } from \"@/redux/store\";\r\n// import DeleteConfirmDialog from \"../components/DeleteConfirmDialog\";\r\n// import CKTextField from \"../components/CKTextField\";\r\nconst CKTextField = dynamic(() => import('@/app/(pages)/setup/components/CKTextField'), { ssr: false });\r\nconst PdfPreviewButton = dynamic(() => import('@/app/components/PdfPreviewButton'), { ssr: false });\r\n// const DownloadButton = dynamic(() => import('@/app/components/DownloadButton'), { ssr: false });\r\nconst SectionEditor = dynamic(() => import('@/app/(pages)/setup/components/SectionEditor'), { ssr: false });\r\nconst SubcategoryEditor = dynamic(() => import('@/app/(pages)/setup/components/SubcategoryEditor'), { ssr: false });\r\nconst DeleteConfirmDialog = dynamic(() => import('@/app/(pages)/setup/components/DeleteConfirmDialog'), { ssr: false });\r\n\r\n\r\nconst HtmlToPdfEditor = ({ id, handleBack, addons_ = [] }: any) => {\r\n    const [headerContent, setHeaderContent] = useState<string>(\"\");\r\n    const [bodyContent, setBodyContent] = useState<string>(\"\");\r\n    const [footerContent, setFooterContent] = useState<string>(\"\");\r\n    const [collapsed, setCollapsed] = useState<{\r\n        setting: boolean;\r\n        header: boolean;\r\n        body: boolean;\r\n        footer: boolean;\r\n    }>({\r\n        setting: true,\r\n        header: true,\r\n        body: true,\r\n        footer: true,\r\n    });\r\n    const [pdfData, setPdfData] = useState<Buffer | null | any>(null);\r\n    const [isClient, setIsClient] = useState(false);\r\n    const isMobile = useMediaQuery((theme) => theme.breakpoints.down('sm'));\r\n\r\n    const [addons, setAddons] = useState<any[]>(addons_ || []);\r\n    const [selectedAddons, setSelectedAddons] = useState<number[]>([]);\r\n    const [tags, setTags] = useState<any[]>([]);\r\n    const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n    const [tagFlter, setTagFlter] = useState<string>('');\r\n\r\n    const [isLoding, setIsLoding] = useState(false);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    // eslint-disable-next-line\r\n    const [isGenerating, setIsGenerating] = useState(false);\r\n    const [isEditMode, setIsEditMode] = useState(id ? true : false);\r\n\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    const [pdfName, setPdfName] = useState<string>('');\r\n    const [pdfKey, setPdfKey] = useState<string>('');\r\n    const [errors, setErrors] = useState<{ pdfName?: string, pdfKey?: string, addons?: string, externalKey?: string }>({});\r\n\r\n    const [margin, setMargin] = useState({ l: 20, t: 200, r: 20, b: 150 });\r\n    const [displayHeaderFooter, setDisplayHeaderFooter] = useState(true);\r\n    const [defVal, setDefVal] = useState('-');\r\n    const [selectedType, setSelectedType] = useState<number | null>(null);\r\n    const [externalKeys, setExternalKeys] = useState<any[]>([]);\r\n    const [pdfPrevButton, setPdfPrevButton] = useState(true);\r\n    const [sections, setSections] = useState<any[]>([]);\r\n    const [pdfSubcategories, setPdfSubcategories] = useState<any[]>([]);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    // const [editorValue, setEditorValue] = useState<string>('<p>Start typing here...</p>');\r\n    const [isEditorLoading, setIsEditorLoading] = useState<boolean>(true);\r\n\r\n    const handleMarginChange = (side: 'l' | 't' | 'r' | 'b', value: string) => {\r\n        setMargin((prev) => ({ ...prev, [side]: value }));\r\n    };\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const theme = useTheme();\r\n\r\n    const fetchTags = async () => {\r\n        try {\r\n            const response = await findAllTags(addons.filter(a => selectedAddons.includes(a.id)).map(a => a.id), token);\r\n            if (response.status == 200) {\r\n                setTags(() => response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching tags:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchExternalKeys = async () => {\r\n        try {\r\n            const response = await findAllByAddonId(addons.filter(a => selectedAddons.includes(a.id))[0]?.id, token);\r\n            if (response.status == 200) {\r\n                setExternalKeys(() => response.data);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching tags:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchAddons = async () => {\r\n        try {\r\n            const response = await findAllAddons(currentOrg?.id, token);\r\n            console.log(response.data)\r\n            if (response.status == 200) {\r\n                setAddons(response.data);\r\n                setSelectedAddons([]);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching addons:\", error);\r\n        }\r\n    };\r\n\r\n    // Fetch Addons\r\n    useEffect(() => {\r\n        if (token) fetchAddons();\r\n    }, [currentOrg?.id]);\r\n\r\n    // Fetch Tags based on selected Addons\r\n    useEffect(() => {\r\n        // console.log(session)\r\n        if (selectedAddons.length > 0) {\r\n            fetchTags();\r\n            fetchExternalKeys();\r\n        } else {\r\n            setTags([]);\r\n            setSelectedTags([]);\r\n        }\r\n    }, [selectedAddons]);\r\n\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => setIsEditorLoading(false), 2000); // Simulate loading\r\n        return () => clearTimeout(timeout);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setIsClient(true); // Ensures PDF rendering runs on the client side\r\n        if (!id) {\r\n            setPdfPrevButton(false);\r\n            const tt = setTimeout(() => {\r\n                setHeaderContent(hdr);\r\n                setBodyContent(bdy);\r\n                setFooterContent(ftr);\r\n                setPdfPrevButton(true);\r\n                clearTimeout(tt);\r\n            }, 100);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setPdfPrevButton(false);\r\n        const tt = setTimeout(() => {\r\n            setPdfPrevButton(true);\r\n            clearTimeout(tt);\r\n        }, 2000);\r\n    }, [headerContent, bodyContent, footerContent]);\r\n    // Fetch Initial Data for Edit Mode\r\n    useEffect(() => {\r\n        if (id) {\r\n            setIsEditMode(() => true);\r\n            setIsLoding(true);\r\n            const fetchData = async () => {\r\n                try {\r\n                    let response = await readPdfTemplate(id, token);\r\n                    if (response.status == 200) {\r\n                        response = response.data;\r\n                        setPdfName(() => response.data.name);\r\n                        setHeaderContent(() => response.data.headerContent);\r\n                        setBodyContent(() => response.data.bodyContent);\r\n                        setFooterContent(() => response.data.footerContent);\r\n                        setSelectedAddons(() => response.data.addons?.map((a: any) => a.id));\r\n                        setDefVal(() => response.data.defVal);\r\n                        setPdfKey(() => response.data.key);\r\n                        setDisplayHeaderFooter(() => response.data.displayHeaderFooter);\r\n                        setMargin(() => response.data.margin);\r\n                        setSelectedType(() => response.data.external_key);\r\n                        setSections(() => response.data.sections || []);\r\n                        setPdfSubcategories(() => response.data.subcategories || []);\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.error(\"Error fetching data for edit mode:\", error);\r\n                } finally {\r\n                    setIsLoding(false);\r\n                }\r\n            };\r\n            fetchData();\r\n        }\r\n    }, [id]);\r\n\r\n\r\n    if (!isClient) {\r\n        return null; // Or render a loading state\r\n    }\r\n\r\n    // Handle Addon Change\r\n    const handleAddonChange = (event: any) => {\r\n        setErrors((prev) => ({ ...prev, addons: undefined }));\r\n        setSelectedAddons([event.target.value]);\r\n    };\r\n\r\n    // Handle Copy Tag\r\n    const handleCopyTag = (tag: string) => {\r\n        // console.log(tag)\r\n        if (!tag) return;\r\n        navigator.clipboard.writeText(`{{${tag}}}`).then(() => {\r\n            enqueueSnackbar(`Tag key copied: {{${tag}}}`, { variant: 'success' });\r\n        }).catch(err => {\r\n            console.error('Failed to copy: ', err);\r\n        });\r\n    };\r\n\r\n\r\n    const handleCollapse = (section: \"setting\" | \"header\" | \"body\" | \"footer\") => {\r\n        setCollapsed((prevState) => ({\r\n            ...prevState,\r\n            [section]: !prevState[section],\r\n        }));\r\n    };\r\n    // eslint-disable-next-line\r\n    const handleGeneratePdf = async () => {\r\n        pdfTmplSave(true);\r\n    }\r\n\r\n    const savePdfTmpl = async () => {\r\n        pdfTmplSave(false);\r\n    };\r\n\r\n    const pdfTmplSave = async (isGenerate: boolean) => {\r\n        // Clear previous errors\r\n        setErrors({});\r\n\r\n        // Validation\r\n        const newErrors: { pdfName?: string; field_path?: string; tag_type?: string, addons?: string, externalKey?: string } = {};\r\n        if (!pdfName) newErrors.pdfName = 'Name is required';\r\n        // if (!tagKey) newErrors.field_path = 'Tag key is required';\r\n        if (!selectedAddons.length) newErrors.addons = 'Addon must be selected';\r\n        if (!selectedType) newErrors.externalKey = 'Type/Status must be selected';\r\n\r\n        if (Object.keys(newErrors).length > 0) {\r\n            setErrors(newErrors);\r\n            return; // Exit if there are validation errors\r\n        }\r\n\r\n        if (isGenerate) setIsGenerating(true);\r\n        else setIsUploading(true)\r\n\r\n        try {\r\n            const payload = {\r\n                headerContent,\r\n                bodyContent,\r\n                footerContent,\r\n                addon_ids: addons.filter(a => selectedAddons.includes(a.id)).map(a => a.id),\r\n                name: pdfName,\r\n                key: pdfKey,\r\n                margin: margin,\r\n                displayHeaderFooter: displayHeaderFooter,\r\n                defVal: defVal,\r\n                organization_id: currentOrg.id,\r\n                external_key: selectedType,\r\n                sections: sections,\r\n                subcategories: pdfSubcategories\r\n            };\r\n            if (isGenerate) {\r\n                const response = !isEditMode ? await generatePdfBuffer(payload, token) :\r\n                    await generatePdfBufferById(id, currentOrg?.id, token);\r\n                const { pdf } = response.data;\r\n                setPdfData(() => pdf); // Base64 PDF data\r\n            } else {\r\n                const response = !isEditMode ? await createPdfTemplate(payload, token) :\r\n                    await updatePdfTemplate(id, { ...payload, id: id }, token);\r\n                if (response.status == 201) {\r\n                    handleBack(true);\r\n                    setPdfPrevButton(false)\r\n                }\r\n                enqueueSnackbar(`Template Saved successfully.`, { variant: 'success' });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error generating PDF:\", error);\r\n            enqueueSnackbar(`Fail generating PDF.`, { variant: 'error' });\r\n        } finally {\r\n            if (isGenerate) setIsGenerating(false);\r\n            else setIsUploading(false)\r\n        }\r\n    }\r\n    // eslint-disable-next-line\r\n    const openPdfInNewTab = () => {\r\n        try {\r\n            const binaryPdf = atob(pdfData);\r\n            // Convert the binary string into an ArrayBuffer\r\n            const len = binaryPdf.length;\r\n            const buffer = new Uint8Array(len);\r\n            for (let i = 0; i < len; i++) {\r\n                buffer[i] = binaryPdf.charCodeAt(i);\r\n            }\r\n            const blob = new Blob([buffer], { type: \"application/pdf\" });\r\n            const blobUrl = URL.createObjectURL(blob);\r\n            window.open(blobUrl, \"_blank\");\r\n            setTimeout(() => URL.revokeObjectURL(blobUrl), 60000);\r\n        } catch (error) {\r\n            console.error(\"Error generating PDF:\", error);\r\n        }\r\n    }\r\n\r\n    // Function to convert string to camelCase\r\n    const toCamelCase = (str: string) => {\r\n        return str\r\n            .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) =>\r\n                index === 0 ? match.toLowerCase() : match.toUpperCase()\r\n            )\r\n            .replace(/\\s+/g, ''); // Remove spaces after converting to camelCase\r\n    };\r\n\r\n    // Validation function for pdfName\r\n    const validatePdfName = (value: string) => {\r\n        const regex = /^[a-zA-Z][a-zA-Z0-9\\s]*$/; // Must start with a letter and allow letters, numbers, and spaces\r\n        if (!regex.test(value)) {\r\n            return 'Name must start with a letter and contain only letters, numbers, and spaces';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const handlePdfNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        setPdfName(value);\r\n\r\n        // Validate the name\r\n        const errorMessage = validatePdfName(value);\r\n        if (errorMessage) {\r\n            setErrors((prev) => ({ ...prev, pdfName: errorMessage }));\r\n        } else {\r\n            setErrors((prev) => ({ ...prev, pdfName: undefined }));\r\n        }\r\n\r\n        // Convert to camelCase and update the key\r\n        if (!errorMessage) {\r\n            const camelCaseKey = toCamelCase(value);\r\n            setPdfKey(camelCaseKey);\r\n        }\r\n    };\r\n\r\n    const handleTypeStatusChange = (event: any) => {\r\n        const value = event.target.value;\r\n        setSelectedType(value);\r\n        setErrors((prev) => ({ ...prev, externalKey: undefined }));\r\n    };\r\n\r\n    const handleAddSection = () => {\r\n        setSections([\r\n            ...sections,\r\n            { id: Date.now(), name: \"\", subcategories: [], htmlContent: \"\" },\r\n        ]);\r\n    };\r\n\r\n    const handleSectionChange = (id: number, updatedSection: any) => {\r\n        setSections((prevSections) =>\r\n            prevSections.map((section) =>\r\n                section.id === id ? { ...section, ...updatedSection } : section\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleRemoveSection = (id: number) => {\r\n        setSections((prev) => prev.filter(s => s.id != id));\r\n    };\r\n\r\n    return (\r\n        <Box className=\"container mx-auto p-4\">\r\n            {/* <div>\r\n                <h1>CKEditor</h1>\r\n                <CKTextField\r\n                    value={headerContent}\r\n                    onChange={setHeaderContent}\r\n                    isLoading={isEditorLoading}\r\n                    placeholder=\"Start typing your content...\"\r\n                    config={{}}\r\n                />\r\n                <div style={{ marginTop: '20px' }} className=\"ck ck-editor__main\">\r\n                    <h3>Preview:</h3>\r\n                    <div dangerouslySetInnerHTML={{\r\n                        __html: '<div class=\" ck ck-content \">' +\r\n                            headerContent +\r\n                            '</div>' }} />\r\n                </div>\r\n            </div> \r\n            <div>\r\n                <h1>CKEditor 2</h1>\r\n                <CKTextField\r\n                    value={bodyContent}\r\n                    onChange={setBodyContent}\r\n                    isLoading={isEditorLoading}\r\n                    placeholder=\"Start typing your content...\"\r\n                    config={{}}\r\n                />\r\n                <div style={{ marginTop: '20px' }} className=\"ck ck-editor__main\">\r\n                    <h3>Preview:</h3>\r\n                    <div dangerouslySetInnerHTML={{\r\n                        __html: '<div class=\" ck ck-content \">' +\r\n                            bodyContent +\r\n                            '</div>' }} />\r\n                </div>\r\n            </div> */}\r\n            <Box mb={4}>\r\n                <Grid\r\n                    container\r\n                    spacing={2} // Spacing between the buttons\r\n                    direction={isMobile ? 'column' : 'row'} // Stack vertically on mobile, horizontally on larger screens\r\n                    alignItems=\"right\" // Align items to the center\r\n                    justifyContent=\"right\" // Center the items horizontally\r\n                    sx={{ mt: -5 }}\r\n                >\r\n                    \r\n\r\n\r\n                    {/* {pdfData && <> <Grid >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            // startIcon={<SaveIcon />}\r\n                            onClick={openPdfInNewTab}\r\n                            size=\"small\"\r\n                        >\r\n                            Open In New Tab\r\n                        </Button>\r\n                    </Grid>\r\n                        <Grid >\r\n                            <DownloadButton pdfData={pdfData} />\r\n                        </Grid></>\r\n                    } */}\r\n                    {/* <Grid >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            disabled={isGenerating}\r\n                            onClick={handleGeneratePdf}\r\n                            size=\"small\"\r\n                        >\r\n                            Generate PDF\r\n                            {isGenerating && <CircularProgress size={24} />}\r\n                        </Button>\r\n                    </Grid> */}\r\n\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    spacing={2} // Spacing between the buttons\r\n                    direction={isMobile ? 'column' : 'row'} // Stack vertically on mobile, horizontally on larger screens\r\n                    alignItems=\"right\" // Align items to the center\r\n                    justifyContent=\"right\" // Center the items horizontally\r\n                >\r\n                    {/* Save Button 1 */}\r\n                    <Grid mt={2} mb={-3}>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            onClick={savePdfTmpl}\r\n                            endIcon={<SaveIcon />}\r\n                            disabled={selectedAddons.length === 0 || isUploading}\r\n                            sx={{ float: 'right' }}\r\n                            size=\"small\"\r\n                        >\r\n                            {isEditMode ? \"Update\" : \"Save\"}\r\n                            {isUploading && <CircularProgress size={24} />}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            onClick={savePdfTmpl}\r\n                            endIcon={<SaveIcon />}\r\n                            disabled={true}\r\n                            sx={{ float: 'right', mx: 2 }}\r\n                            size=\"small\"\r\n                        >\r\n                            Clone\r\n                            {isUploading && <CircularProgress size={24} />}\r\n                        </Button>\r\n                        <Grid sx={{mr: 30}}>\r\n                            {!isLoding && pdfPrevButton && <PdfPreviewButton htmlContent={\r\n                                `<div className=\"ck ck-editor__main\">\r\n                                    <div class=\"ck ck-content\">\r\n                                    <div>${headerContent}</div>\r\n                                    ${bodyContent}\r\n                                    ${sections ? sections.map((se: any) => se.htmlContent) : ''}\r\n                                    <footer>${footerContent}</footer>\r\n                                    </div>\r\n                                    </div>\r\n                            `} isIconButton={false} id={isEditMode ? id : null} organization_id={currentOrg?.id} subcategories={pdfSubcategories?.map(sc => sc.name) || []} />}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n\r\n            <Box key={'setting'} mb={4}>\r\n                <Button size=\"small\" onClick={() => handleCollapse('setting')}>\r\n                    {'setting'.charAt(0).toUpperCase() + 'setting'.slice(1)} Editor{\" \"}\r\n                    {collapsed['setting'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['setting']} aria-expanded>\r\n                    <Grid2 container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\r\n                        <Grid2 size={{ xs: 2, sm: 4, md: 4 }}>\r\n                            <TextField\r\n                                label=\"Pdf Name\"\r\n                                fullWidth\r\n                                value={pdfName}\r\n                                onChange={handlePdfNameChange}\r\n                                margin=\"normal\"\r\n                                error={Boolean(errors.pdfName)}\r\n                                helperText={errors.pdfName}\r\n                                required\r\n                                size=\"small\"\r\n                            />\r\n                            <Box sx={{ display: 'none' }}>{/* flex */}\r\n                                Key: &nbsp;\r\n                                {/* Wrap pdfKey in a Paper component */}\r\n                                {pdfKey && <Paper sx={{ padding: '8px' }}>\r\n                                    <Box sx={{ maxWidth: 300, wordWrap: 'break-word', overflowWrap: 'break-word' }}>\r\n                                        <Typography>{pdfKey}</Typography>\r\n                                    </Box>\r\n                                </Paper>}\r\n                            </Box>\r\n\r\n\r\n                        </Grid2>\r\n                        <Grid2 sx={{ display: 'none' }}>\r\n                            <TextField\r\n                                label=\"Pdf key\"\r\n                                fullWidth\r\n                                value={pdfKey}\r\n                                onChange={(event) => {\r\n                                    setPdfKey(event.target.value);\r\n                                    setErrors((prev) => { return { ...prev, pdfKey: undefined } });\r\n                                }}\r\n                                margin=\"normal\"\r\n                                error={Boolean(errors.pdfKey)}\r\n                                helperText={errors.pdfKey}\r\n                                disabled\r\n                                size=\"small\"\r\n                            />\r\n                        </Grid2>\r\n                        {/* Addon Selector */}\r\n                        <Grid2 size={4}>\r\n                            <FormControl fullWidth sx={{ mt: 2 }} error={errors.addons ? true : false} size=\"small\">\r\n                                <InputLabel>Addons</InputLabel>\r\n                                {/* {addons?.filter(a => a.id == selectedAddons[0])[0]?.name} */}\r\n                                {!isLoding && <Select\r\n                                    // multiple\r\n                                    value={selectedAddons[0]  ? Number(selectedAddons[0]) : ''}\r\n                                    onChange={handleAddonChange}\r\n                                    label=\"Addons\"\r\n                                    required\r\n                                    renderValue={(selected) => addons?.filter(a => a.id == selected)[0]?.name}//selected.join(\", \")\r\n                                    error={Boolean(errors.addons)}\r\n                                    size=\"small\"\r\n                                >\r\n                                    {addons?.map((addon) => (\r\n                                        <MenuItem key={addon.id} value={addon.id + ''}>\r\n                                            <Checkbox checked={selectedAddons.indexOf(addon.id) > -1} />\r\n                                            <ListItemText primary={addon.name} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>}\r\n                                {errors.addons && <FormHelperText>{errors.addons}</FormHelperText>}\r\n                            </FormControl>\r\n                        </Grid2>\r\n                        {/* Type Selector */}\r\n                        <Grid2 size={4} display=\"flex\" alignItems=\"center\">\r\n                            {/* Type/Status Dropdown */}\r\n                            <FormControl fullWidth sx={{ mt: 1 }} error={Boolean(errors.externalKey)}>\r\n                                <InputLabel>Type/Status</InputLabel>\r\n                                <Select\r\n                                    // multiple\r\n                                    value={selectedType ? Number(selectedType)  : ''}\r\n                                    onChange={handleTypeStatusChange}\r\n                                    label=\"Type/Status\"\r\n                                    renderValue={(selected) => externalKeys.filter(k => k.id == selected)[0]?.key_value} // Display selected addons or \"None\"\r\n                                    required\r\n                                    size=\"small\"\r\n                                >\r\n                                    {externalKeys?.map((keys) => (\r\n                                        <MenuItem key={keys.id} value={keys.id +''}>\r\n                                            <Checkbox checked={selectedType == keys.id} />\r\n                                            <ListItemText primary={keys.key_value} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                                {errors.externalKey && <FormHelperText>{errors.externalKey}</FormHelperText>}\r\n                            </FormControl>\r\n\r\n                            {/* Tooltip Icon */}\r\n                            <Tooltip\r\n                                title=\"Type/Status refers to the identifier used by external systems to categorize templates (e.g., invoice, report). This helps external systems recognize and interact with the template uniquely.\"\r\n                                arrow\r\n                            >\r\n                                <HelpOutlineIcon fontSize=\"small\" sx={{ m: 1, cursor: 'pointer' }} />\r\n                            </Tooltip>\r\n                        </Grid2>\r\n                        {/* <Grid2 size={{ xs: 2, sm: 4, md: 4 }}>\r\n                            <FormControl fullWidth>\r\n                                <InputLabel>Type</InputLabel>\r\n                                <Select\r\n                                    value={tagFlter}\r\n                                    onChange={(event) => {\r\n                                        setTagFlter(event.target.value);\r\n                                    }}\r\n                                    required\r\n                                    label=\"Type\"\r\n                                >\r\n                                    {[\"CONTENT\", \"TABLE\", \"IMAGE\"].map((t) => (\r\n                                        <MenuItem key={t} value={t}>\r\n                                            {t}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid2> */}\r\n\r\n                        {/* Margin Inputs */}\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <TextField\r\n                                label=\"Left Margin\"\r\n                                variant=\"outlined\"\r\n                                value={margin.l ? Number(margin.l) : 0}\r\n                                onChange={(e) => handleMarginChange('l', e.target.value)}\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                slotProps={{\r\n                                    input: {\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">{\"px\"}</InputAdornment>\r\n                                        ),\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </Grid2>\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <TextField\r\n                                label=\"Top Margin\"\r\n                                variant=\"outlined\"\r\n                                value={margin.t ? Number(margin.t) : 0}\r\n                                onChange={(e) => handleMarginChange('t', e.target.value)}\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                slotProps={{\r\n                                    input: {\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">{\"px\"}</InputAdornment>\r\n                                        ),\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </Grid2>\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <TextField\r\n                                label=\"Right Margin\"\r\n                                variant=\"outlined\"\r\n                                value={margin.r ? Number(margin.r) : 0}\r\n                                onChange={(e) => handleMarginChange('r', e.target.value)}\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                slotProps={{\r\n                                    input: {\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">{\"px\"}</InputAdornment>\r\n                                        ),\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </Grid2>\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <TextField\r\n                                label=\"Bottom Margin\"\r\n                                variant=\"outlined\"\r\n                                value={margin.b ? Number(margin.b) : 0}\r\n                                onChange={(e) => handleMarginChange('b', e.target.value)}\r\n                                fullWidth\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                slotProps={{\r\n                                    input: {\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">{\"px\"}</InputAdornment>\r\n                                        ),\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </Grid2>\r\n\r\n                        {/* Default Value Input */}\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <TextField\r\n                                label=\"Default Value\"\r\n                                variant=\"outlined\"\r\n                                value={defVal}\r\n                                onChange={(e) => setDefVal(e.target.value)}\r\n                                fullWidth\r\n                                size=\"small\"\r\n                            // InputProps={{\r\n                            //     startAdornment: <InputAdornment position=\"start\">{\"'\"}</InputAdornment>,\r\n                            //     endAdornment: <InputAdornment position=\"end\">{\"'\"}</InputAdornment>,\r\n                            // }}\r\n                            />\r\n                        </Grid2>\r\n\r\n                        {/* Display Header/Footer Checkbox */}\r\n                        <Grid2 size={{ xs: 2, sm: 2, md: 2 }}>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={displayHeaderFooter}\r\n                                        onChange={(e) => setDisplayHeaderFooter(e.target.checked)}\r\n                                    />\r\n                                }\r\n                                label=\"Display Header/Footer\"\r\n                            />\r\n                        </Grid2>\r\n\r\n                        <Grid2 size={12}><Divider /></Grid2>\r\n                        <Grid2 size={12}>\r\n                            {/* Tag Selector */}\r\n\r\n                            <Box mb={4}>\r\n                                <FormControl fullWidth>\r\n\r\n                                    {/* <InputLabel>Tags</InputLabel> */}\r\n                                    <Autocomplete\r\n                                        disabled={selectedAddons.length < 1}\r\n                                        multiple\r\n                                        disableCloseOnSelect\r\n                                        autoHighlight\r\n                                        size=\"small\"\r\n                                        options={tags.filter((tag) => TAG_TYPES.includes(tag.tag_type + ''))\r\n                                            .filter((tag) => tagFlter && tagFlter != '' ? tagFlter == tag.tag_type : true)\r\n                                            .sort((a, b) => -b.tag_type.localeCompare(a.tag_type))\r\n                                        }\r\n                                        getOptionLabel={(option) => option.name} // How to display tag names\r\n                                        groupBy={(option) => option.tag_type}\r\n                                        value={selectedTags || []}\r\n                                        onChange={(_, newValue) => setSelectedTags(newValue)} // Update the selected tags\r\n                                        renderTags={(tagValue, getTagProps) =>\r\n                                            tagValue.map((option, index) => {\r\n                                                const { key, ...tagProps } = getTagProps({ index });\r\n                                                return (\r\n                                                    <Paper\r\n                                                        elevation={3}\r\n                                                        sx={{\r\n                                                            display: 'flex',\r\n                                                            alignItems: 'center',\r\n                                                            // p: 1,\r\n                                                            mr: .5,\r\n                                                            borderRadius: '8px',\r\n                                                            boxShadow: 3,\r\n                                                            bgcolor: theme.palette.background.paper,\r\n                                                            ':hover': { boxShadow: 6 },\r\n                                                        }} key={key} style={{ display: 'flex', alignItems: 'center' }}>\r\n                                                        <Tooltip title={option?.field_path}>\r\n                                                            <Chip\r\n                                                                label={option.name} // Display the tag name here\r\n                                                                {...tagProps}\r\n                                                                sx={{ mr: 1, mb: 1 }}\r\n                                                            />\r\n                                                        </Tooltip>\r\n                                                        {/* Copy Icon */}\r\n                                                        <Tooltip title=\"Copy tag key\">\r\n                                                            <IconButton\r\n                                                                onClick={() => {\r\n                                                                    const tag_ = tags.find((t) => t.name === option.name);\r\n                                                                    handleCopyTag(tag_?.field_path); // Copy the tag key on click\r\n                                                                }}\r\n                                                                size=\"small\"\r\n                                                                sx={{\r\n                                                                    padding: '6px',\r\n                                                                    '&:hover': {\r\n                                                                        backgroundColor: 'rgba(0, 0, 0, 0.08)', // Hover effect\r\n                                                                    },\r\n                                                                }}\r\n                                                            >\r\n                                                                <FileCopyIcon sx={{ fontSize: 20 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    </Paper>\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                        renderInput={(params: any) => <TextField\r\n                                            {...params}\r\n                                            label=\"Tags\"\r\n                                            size=\"small\"\r\n                                            slotProps={{\r\n                                                input: {\r\n                                                    ...params.InputProps,\r\n                                                    style: { cursor: 'pointer' },\r\n                                                    onClick: (e: any) => {\r\n                                                        const tagName = e.target.innerText;\r\n                                                        const tag_ = tags.find((t) => t.name === tagName);\r\n                                                        handleCopyTag(tag_?.field_path); // Handle copy action when clicking the tag\r\n                                                    },\r\n                                                    endAdornment: (\r\n                                                        <>\r\n                                                            <InputAdornment position=\"end\" sx={{ display: 'flex', alignItems: 'center', mr: -4 }}>\r\n                                                                <FormControl size=\"small\" variant=\"standard\" sx={{ minWidth: 100 }} >\r\n                                                                    {/* <InputLabel>Type</InputLabel> */}\r\n                                                                    <Select\r\n                                                                        value={tagFlter || ''}\r\n                                                                        onChange={(event: any) => {\r\n                                                                            setTagFlter(event.target.value);\r\n                                                                        }}\r\n                                                                        required\r\n                                                                        // label=\"Filter\"\r\n                                                                        size=\"small\"\r\n                                                                        variant=\"standard\"\r\n                                                                        disabled={selectedAddons.length < 1}\r\n                                                                        endAdornment={<InputAdornment position=\"end\" ><FilterListIcon /></InputAdornment>}\r\n\r\n                                                                    >\r\n                                                                        <MenuItem value=\"\">\r\n                                                                            <em>None</em>\r\n                                                                        </MenuItem>\r\n                                                                        {[\"CONTENT\", \"TABLE\", \"IMAGE\"].map((t) => (\r\n                                                                            <MenuItem key={t} value={t}>\r\n                                                                                {t}\r\n                                                                            </MenuItem>\r\n                                                                        ))}\r\n                                                                    </Select>\r\n                                                                </FormControl>\r\n                                                            </InputAdornment>\r\n                                                            <Box ml={5}>{params.InputProps.endAdornment}</Box>\r\n\r\n                                                        </>\r\n                                                    ),\r\n                                                },\r\n                                            }}\r\n                                        />}\r\n\r\n\r\n                                        renderOption={(props, option, { selected }) => (\r\n                                            <li {...props} key={option.id}>\r\n                                                <Checkbox checked={selected} key={option.id + 'c'} />\r\n                                                <ListItemText primary={option.name} key={option.id + 'l'} />\r\n                                                {/* Copy Icon and Tooltip */}\r\n                                                <Tooltip title={`Copy ${option.field_path}`} key={option.id + 't'}>\r\n                                                    <IconButton\r\n                                                        onClick={() => handleCopyTag(option.field_path)} // Copy the tag field_path\r\n                                                        size=\"small\"\r\n                                                        sx={{\r\n                                                            marginLeft: 1,\r\n                                                            padding: 1,\r\n                                                            '&:hover': {\r\n                                                                backgroundColor: 'rgba(0, 0, 0, 0.08)', // MUI hover effect for better UI\r\n                                                            },\r\n                                                        }}\r\n                                                    >\r\n                                                        <FileCopyIcon sx={{ fontSize: 20 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </li>\r\n                                        )}\r\n                                    />\r\n                                </FormControl>\r\n                            </Box>\r\n\r\n                        </Grid2>\r\n                        <Grid2 size={12}>\r\n                            <SubcategoryEditor\r\n                                subcategories={pdfSubcategories}\r\n                                onAddSubcategory={(name) => {\r\n                                    setPdfSubcategories((prev) => [...prev, { id: Date.now(), name }]\r\n                                        .sort((a, b) => a.name.localeCompare(b.name)));\r\n                                }}\r\n                                onDeleteSubcategory={(id) => {\r\n                                    setPdfSubcategories((prev) => prev.filter((s) => s.id !== id)\r\n                                        .sort((a, b) => a.name.localeCompare(b.name)));\r\n                                }}\r\n                                onEditSubcategory={(id, name) => {\r\n                                    setPdfSubcategories((prev) => prev.map((s) => s.id === id ? { ...s, name } : s)\r\n                                        .sort((a, b) => a.name.localeCompare(b.name)));\r\n                                }}\r\n                                loading={isLoding}\r\n                            />\r\n\r\n                        </Grid2>\r\n\r\n                    </Grid2>\r\n\r\n\r\n                </Collapse>\r\n            </Box>\r\n            <Grid2 size={12}><Divider /></Grid2>\r\n            <Grid2 size={12} mb={2}><Divider /></Grid2>\r\n            <Box key={'header'} mb={4}>\r\n                <Button onClick={() => handleCollapse('header')}>\r\n                    {'header'.charAt(0).toUpperCase() + 'header'.slice(1)} Editor{\" \"}\r\n                    {collapsed['header'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['header']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                        <Box flex={1}>\r\n                            <CKTextField\r\n                                value={headerContent}\r\n                                onChange={setHeaderContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                                config={{}}\r\n                                token={token}\r\n                                orgId={currentOrg?.id}\r\n                            />\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                label={`${'header'.charAt(0).toUpperCase() + 'header'.slice(1)} Content`}\r\n                                defaultValue={headerContent}\r\n                                onChange={(e) => setHeaderContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <Box\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `${headerContent}`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n                </Collapse>\r\n            </Box>\r\n\r\n            <Box key={'body'} mb={4}>\r\n                <Button onClick={() => handleCollapse('body')}>\r\n                    {'body'.charAt(0).toUpperCase() + 'body'.slice(1)} Editor{\" \"}\r\n                    {collapsed['body'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['body']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                        <Box flex={1}>\r\n                            <CKTextField\r\n                                value={bodyContent}\r\n                                onChange={setBodyContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                                config={{}}\r\n                                token={token}\r\n                                orgId={currentOrg?.id}\r\n                            />\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                label={`${'body'.charAt(0).toUpperCase() + 'body'.slice(1)} Content`}\r\n                                defaultValue={bodyContent}\r\n                                onChange={(e) => setBodyContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <Box\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `${bodyContent}`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n\r\n                    <Box display=\"flex\" flexDirection={'column'} gap={4} mt={3}>\r\n                        {sections.map((section: any) => (\r\n                            <>\r\n                                <Box key={section.id + 'btn'} sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mb: -8, mr: 0 }}>\r\n                                    <DeleteConfirmDialog\r\n                                        id={section.id}\r\n                                        onDelete={(id: any) => handleRemoveSection(id)}\r\n                                        variant=\"icon\"\r\n                                        buttonProps={{ size: \"small\", color: \"error\" }}\r\n                                        iconType=\"remove\"\r\n                                    />\r\n                                </Box>\r\n                                <SectionEditor\r\n                                    key={section.id}\r\n                                    section={section}\r\n                                    onChange={(updatedSection: any) =>\r\n                                        handleSectionChange(section.id, updatedSection)\r\n                                    }\r\n                                    subcategories={pdfSubcategories?.map(c => c.name)}\r\n                                />\r\n                                <Divider sx={{ width: '100%' }} />\r\n                            </>\r\n                        ))}\r\n                    </Box>\r\n                    <Box>\r\n                        <Divider sx={{ my: 2 }} />\r\n                        <Divider sx={{ my: 2 }} />\r\n                        <Typography variant=\"h6\" align=\"center\">\r\n                            Dynamic Sections\r\n                        </Typography>\r\n                        <Box display=\"flex\" justifyContent=\"center\" sx={{ mb: 2 }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                onClick={handleAddSection}\r\n                            >\r\n                                Add New Section\r\n                            </Button>\r\n                        </Box>\r\n                        <Divider sx={{ my: 2 }} />\r\n                    </Box>\r\n                    <Divider sx={{ width: '100%' }} />\r\n                    {/* <Box display=\"flex\" gap={4} justifyContent={'center'}>\r\n                        <Button variant=\"outlined\" size=\"small\" onClick={handleAddSection} sx={{ my: 2, float: 'right' }}>\r\n                            Add New Section\r\n                        </Button>\r\n                    </Box> */}\r\n                </Collapse>\r\n            </Box>\r\n\r\n            <Box key={'footer'} mb={4}>\r\n                <Button onClick={() => handleCollapse('footer')}>\r\n                    {'footer'.charAt(0).toUpperCase() + 'footer'.slice(1)} Editor{\" \"}\r\n                    {collapsed['footer'] ? \"▲\" : \"▼\"}\r\n                </Button>\r\n                <Collapse in={collapsed['footer']} aria-expanded>\r\n                    <Box display=\"flex\" gap={4}>\r\n                        {/* Editor Section */}\r\n                        <Box flex={1}>\r\n                            <CKTextField\r\n                                value={footerContent}\r\n                                onChange={setFooterContent}\r\n                                isLoading={isEditorLoading}\r\n                                placeholder=\"Start typing your content...\"\r\n                                config={{}}\r\n                                token={token}\r\n                                orgId={currentOrg?.id}\r\n                            />\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                label={`${'footer'.charAt(0).toUpperCase() + 'footer'.slice(1)} Content`}\r\n                                defaultValue={footerContent}\r\n                                onChange={(e) => setFooterContent(e.target.value)}\r\n                                multiline\r\n                                focused={true}\r\n                                size=\"small\"\r\n                                sx={{\r\n                                    height: \"100%\", // Full height of the container\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        flex: 1, // Make the input stretch within its container\r\n                                        \"& textarea\": {\r\n                                            resize: \"none\", // Disable resizing\r\n                                            height: \"100%\", // Full height of the parent\r\n                                        },\r\n                                    },\r\n                                }}\r\n                            /> */}\r\n                        </Box>\r\n\r\n                        {/* Preview Section */}\r\n                        {/* <Box flex={1} p={2} border=\"1px solid var(--foreground)\">\r\n                            <Typography variant=\"h6\">Preview</Typography>\r\n                            <Box\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: `${footerContent}`\r\n                                }}\r\n                            />\r\n                        </Box> */}\r\n                    </Box>\r\n                </Collapse>\r\n            </Box>\r\n\r\n            {/* Save Button */}\r\n            <Box mb={4} mt={5}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={savePdfTmpl}\r\n                    endIcon={<SaveIcon />}\r\n                    disabled={selectedAddons.length === 0 || isUploading}\r\n                    sx={{ float: 'right' }}\r\n                    size=\"small\"\r\n                >\r\n                    {isEditMode ? \"Update\" : \"Save\"}\r\n                    {isUploading && <CircularProgress size={24} />}\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default HtmlToPdfEditor;\r\n\r\n","import { API } from './api';\r\n\r\nexport const addExternalKey = async (addon_id: number, key: string, token: string) => {\r\n    return API.post(`/external-keys`, { addon_id: addon_id, key_value: key }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const getExternalKey = async (id: number, token: string) => {\r\n    return API.get(`/external-keys/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const updateExternalKey = async (id: number, data: any, token: string) => {\r\n    return API.put(`/external-keys/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const deleteExternalKey = async (id: number, token: string) => {\r\n    return API.delete(`/external-keys/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}\r\n\r\nexport const findAllByAddonId = async (addon_id: number, token: string) => {\r\n    return API.get(`/external-keys/by-addon/${addon_id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n}","import { API } from \"./api\";\r\n\r\nexport const createTag = async (data: any, token: string) => {\r\n  return API.post(`/tags`, data,\r\n    {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${token}`,\r\n      }\r\n    });\r\n}\r\n\r\nexport const updateTag = async (editTag: any, token: string) => {\r\n  return API.put('/tags/' + editTag.id, editTag, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n\r\nexport const findTagById = async (id: any, token: string) => {\r\n  return API.get('/tags/' + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n\r\nexport const findAllTags = async (addon_ids: number[], token: string) => {\r\n  // const queryParams = new URLSearchParams({ addon_ids: JSON.stringify(addon_ids) }).toString();\r\n  return API.get(`/tags`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    },\r\n    params: {\r\n      addon_ids: addon_ids\r\n    }\r\n  });\r\n}\r\n\r\nexport const findTagPage = async (\r\n  page: number,\r\n  pageSize: number,\r\n  field: string,\r\n  sort: string,\r\n  quickFilterValues: string,\r\n  active: boolean\r\n) => {\r\n  const res = await fetch(`/api/public/tag/page`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      page,\r\n      pageSize,\r\n      field,\r\n      sort,\r\n      quickFilterValues,\r\n      active,\r\n    }),\r\n  });\r\n  return await res.json();\r\n};\r\n\r\nexport const deleteTag = async (id: any, token: string) => {\r\n  return API.delete('/tags/' + id, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n}\r\n","export const TAG_TYPES = ['CONTENT', 'TABLE', 'IMAGE'];\r\n\r\n\r\n// Animation variants\r\nexport const fadeIn = {\r\n  hidden: { opacity: 0, y: 20 },\r\n  visible: { opacity: 1, y: 0 },\r\n};\r\n\r\nexport const isValidS3Url = (url: string): boolean => {\r\n    const s3UrlPattern = /^https:\\/\\/pdf-crafter2\\.s3\\.us-east-1\\.amazonaws\\.com\\/.+$/;\r\n    return s3UrlPattern.test(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const imageUrl = 'https://media.istockphoto.com/id/1967543722/photo/the-city-of-london-skyline-at-night-united-kingdom.jpg?s=2048x2048&w=is&k=20&c=ZMquw-lP_vrSVoUlSWjuWIZHdVma7z4ju9pD1EkRPvs='\r\n\r\nexport const hdr = ` <div style=\"font-family: Arial, sans-serif; line-height: 1.5; margin: 0; padding: 0; text-align: center;text-align: center; width: 100%; border-top: 1px solid #ccc;\">\r\n<div style=\"background-color: #f4f4f4; padding: 20px; \">\r\n      <img\r\n        src=\"${imageUrl}\"\r\n        alt=\"Logo\"\r\n        style=\"display: block; margin: 0 auto; max-width: 100px;\"\r\n      />\r\n      <h1 style=\"margin: 10px 0;font-size: 20px; color: #555;\">Company Name</h1>\r\n      <p style=\"margin: 0; font-size: 14px; color: #555;\">Your tagline or slogan here</p>\r\n    </div> </div>`\r\n\r\nexport const ftr = `<div style=\"font-size: 10px; text-align: center; width: 100%;\">\r\n<div\r\n      style=\"background-color: #f4f4f4; padding: 20px; text-align: center; font-size: 12px; color: #555;\"\r\n    >\r\n      <p style=\"margin: 0;\">123 Business Street, Business City, BC 12345</p>\r\n      <p style=\"margin: 0;\">\r\n        Contact us: <a href=\"mailto:info@company.com\" style=\"color: #007BFF;\">info@company.com</a>\r\n      </p>\r\n      <p style=\"margin: 0;\">&copy; 2024 Company Name. All rights reserved.</p>\r\n    </div></div>`;\r\n\r\nexport const bdy = `<div style=\"padding: 20px;\">\r\n      <h2 style=\"color: #333;\">Welcome to Our Report</h2>\r\n      <p style=\"margin: 0 0 10px; color: #555;\">\r\n        Below is a summary of our performance and goals. Feel free to review the details and let us know your thoughts.\r\n      </p>\r\n\r\n      <!-- Image Example -->\r\n      <div style=\"text-align: center; margin: 20px 0;\">\r\n        <img\r\n          src=\"${imageUrl}\"\r\n          alt=\"Sample Chart\"\r\n          style=\"max-width: 100%; height: auto;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Example -->\r\n      <h3 style=\"color: #333;\">Performance Overview</h3>\r\n      <table\r\n        style=\"width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 14px;\"\r\n      >\r\n        <thead>\r\n          <tr style=\"background-color: #f4f4f4;\">\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Metric</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Target</th>\r\n            <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Achieved</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Revenue</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$1,000,000</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">$950,000</td>\r\n          </tr>\r\n          <tr style=\"background-color: #f9f9f9;\">\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Customer Growth</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">20%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">18%</td>\r\n          </tr>\r\n          <tr>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">Satisfaction Score</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">90%</td>\r\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">88%</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n`;\r\n\r\n\r\nexport const initialTableData = {\r\n  initialColumns: 3,\r\n  initialRows: [\r\n    { col1: \"Data 1\", col2: \"Data 2\", col3: \"Data 3\" }, // Default row data\r\n  ],\r\n  initialStyles: Array.from({ length: 3 }, () => ({\r\n    backgroundColor: \"#f4f4f4\", // Default background color\r\n    fontSize: \"14\", // Default font size\r\n    padding: \"8px\", // Default padding\r\n    color: \"#000\", // Default text color\r\n  })),\r\n  customHtml: `<table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\r\n                        <thead>\r\n                            <tr style=\"background-color: #007bff; color: #ffffff;\">\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 1</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 2</th>\r\n                                <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">Header 3</th>\r\n                            </tr>\r\n                        </thead><tbody></tbody></table>`\r\n}"],"names":[],"sourceRoot":""}