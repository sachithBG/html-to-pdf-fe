{"version":3,"file":"static/chunks/1981.7c46b139c149bfa3.js","mappings":"AAiQA","sources":["webpack://_N_E/./src/app/(pages)/setup/components/ManageAddons.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    TextField,\r\n    IconButton,\r\n    Tooltip,\r\n    CircularProgress,\r\n    Skeleton,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Snackbar,\r\n    Alert,\r\n    Grid2,\r\n} from '@mui/material';\r\nimport { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';\r\nimport { createAddon, deleteAddon, findAllAddons, updateAddon } from '@/app/services/addonService';\r\nimport { RootState } from '@/redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\n// import CustomTabPanel from './CustomTabPanel'; // Assume this is a reusable tab panel component\r\n\r\nconst ManageAddonsPage: React.FC = () => {\r\n    const [addons, setAddons] = useState<any[]>([]);\r\n    const [newAddon, setNewAddon] = useState<{ id: any, name: string }>({ id: null, name: '' });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [errors, setErrors] = useState<{ addonName?: string }>({});\r\n    const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n    const [addonToDelete, setAddonToDelete] = useState<any | null>(null);\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n\r\n    const fetchAddons = useCallback(async () => {\r\n        setLoading(true);\r\n        try {\r\n            // Replace with your API call\r\n            const response = await findAllAddons(currentOrg.id, token);\r\n            if (response.status == 200) {\r\n                setAddons(() => response.data)\r\n            }\r\n        } catch (fetchError) {\r\n            console.error(fetchError);\r\n            setError('Error fetching addons.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [currentOrg?.id]);\r\n\r\n    useEffect(() => {\r\n        if (currentOrg?.id)\r\n            fetchAddons();\r\n    }, [fetchAddons, currentOrg?.id]);\r\n\r\n    const handleCreateAddon = async () => {\r\n        if (!newAddon.name) {\r\n            setErrors({ addonName: 'Addon name is required.' });\r\n            return;\r\n        }\r\n        if (!newAddon.name.match(/^[A-Z_]+$/)) {\r\n            setErrors({ addonName: 'Addon name must be in capital letters and underscores only' });\r\n            return;\r\n        }\r\n        setIsSubmitting(true);\r\n        try {\r\n            if (newAddon.id) {\r\n                const res = await updateAddon(newAddon, token);\r\n                if (res.status == 200) {\r\n                    setAddons((prev) => prev.map((addon) => (addon.id === newAddon.id ? { ...addon, name: newAddon.name } : addon)));\r\n                    setSuccessMessage('Addon updated successfully.');\r\n                }\r\n            } else {\r\n                const res = await createAddon(newAddon.name, currentOrg?.id || 0, token);\r\n                // console.log(res.data)\r\n                if (res.status == 200 || res.status == 201) {\r\n                    setAddons((prev) => [...prev, { id: newAddon.id, name: newAddon.name, organization_id: currentOrg.id }]);\r\n                    setSuccessMessage('Addon created successfully.');\r\n                }\r\n            }\r\n\r\n            // fetchAddons();\r\n            setNewAddon({ id: null, name: '' });\r\n        } catch (createError) {\r\n            console.error(createError)\r\n            setError('Error creating addon.');\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const handleDeleteAddon = async () => {\r\n        if (!addonToDelete) return;\r\n\r\n        setIsSubmitting(true);\r\n        try {\r\n            // Replace with your API call\r\n            const res = await deleteAddon(addonToDelete.id, token);\r\n            if (res.status == 204) {\r\n                setAddons(addons.filter((addon) => addon.id !== addonToDelete.id));\r\n            }\r\n            setSuccessMessage('Addon deleted successfully.');\r\n            // fetchAddons();\r\n            setIsDeleteDialogOpen(false);\r\n        } catch (deleteError) {\r\n            setError('Error deleting addon.');\r\n            console.log(deleteError);\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const handleEditAddon = async (addon: any) => {\r\n        setNewAddon(addon);\r\n        setErrors({ addonName: undefined });\r\n        setSuccessMessage(null);\r\n    };\r\n\r\n    return (\r\n        <Grid2 container>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n                Manage Addons\r\n            </Typography>\r\n\r\n            {/* Addon Form */}\r\n            <Grid2 size={{ xs: 12 }} sx={{ marginBottom: 3 }}>\r\n                <TextField\r\n                    margin=\"dense\"\r\n                    label=\"Addon Name\"\r\n                    fullWidth\r\n                    value={newAddon.name}\r\n                    size='small'\r\n                    onChange={(e) => {\r\n                        const value = e.target.value.toUpperCase().replace(/[^A-Z_]/g, '_');\r\n                        setNewAddon((prev) => { return { ...prev, name: value } });\r\n                        setErrors({ addonName: undefined });\r\n                        setSuccessMessage(null);\r\n                    }}\r\n                    error={!!errors.addonName}\r\n                    helperText={errors.addonName}\r\n                />\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    onClick={handleCreateAddon}\r\n                    disabled={isSubmitting}\r\n                    startIcon={isSubmitting && <CircularProgress size={20} />}\r\n                    sx={{ marginTop: 2, float: 'right' }}\r\n                    size='small'\r\n                >\r\n                    {isSubmitting ? 'Creating...' : newAddon.id ? 'Update' : 'Create Addon'}\r\n                </Button>\r\n            </Grid2>\r\n\r\n            {/* Error Message */}\r\n            {/* {error && <Alert severity=\"error\" sx={{ marginBottom: 2 }}>{error}</Alert>} */}\r\n\r\n            {/* Success Message */}\r\n            {/* {successMessage && <Alert severity=\"success\" sx={{ marginBottom: 2 }}>{successMessage}</Alert>} */}\r\n\r\n            {/* Addon Table */}\r\n            {/* <CustomTabPanel value=\"1\" index={3}> */}\r\n            <Grid2 size={{ xs: 12 }} sx={{ marginBottom: 3 }}>\r\n                {loading ? (\r\n                    <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\r\n                ) : addons.length === 0 ? (\r\n                    <Typography>No addons available.</Typography>\r\n                ) : (\r\n                    addons?.map((addon) => (\r\n                        <Box\r\n                            key={addon.id}\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'space-between',\r\n                                alignItems: 'center',\r\n                                padding: 1,\r\n                                borderBottom: '1px solid #ccc',\r\n                            }}\r\n                        >\r\n                            <Typography>{addon.name}</Typography>\r\n                            <Box>\r\n                                <Tooltip title=\"Edit\">\r\n                                    <IconButton onClick={() => handleEditAddon(addon)} size='small'>\r\n                                        <EditIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title=\"Delete\">\r\n                                    <IconButton\r\n                                        onClick={() => {\r\n                                            setAddonToDelete(addon);\r\n                                            setIsDeleteDialogOpen(true);\r\n                                        }}\r\n                                    >\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </Box>\r\n                        </Box>\r\n                    ))\r\n                )}\r\n            </Grid2>\r\n            {/* </CustomTabPanel> */}\r\n\r\n            {/* Delete Confirmation Dialog */}\r\n            <Dialog open={isDeleteDialogOpen} onClose={() => setIsDeleteDialogOpen(false)}>\r\n                <DialogTitle>Delete Addon</DialogTitle>\r\n                <DialogContent>\r\n                    <Typography>Are you sure you want to delete this addon?</Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant='outlined' onClick={() => setIsDeleteDialogOpen(false)} disabled={isSubmitting} size='small'>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleDeleteAddon}\r\n                        color=\"error\"\r\n                        variant='outlined'\r\n                        disabled={isSubmitting}\r\n                        startIcon={isSubmitting && <CircularProgress size={20} />}\r\n                        size='small'\r\n                    >\r\n                        {isSubmitting ? 'Deleting...' : 'Delete'}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Snackbar */}\r\n            <Snackbar\r\n                open={!!successMessage || !!error}\r\n                autoHideDuration={3000}\r\n                onClose={() => {\r\n                    setError(null);\r\n                    setSuccessMessage(null);\r\n                }}\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                sx={{ marginTop: 8 }}\r\n            >\r\n                {(successMessage || error) ? <Alert\r\n                    onClose={() => {\r\n                        setError(null);\r\n                        setSuccessMessage(null);\r\n                    }}\r\n                    severity={successMessage ? 'success' : 'error'}\r\n                >\r\n                    {successMessage || error}\r\n                </Alert> : <Box />}\r\n            </Snackbar>\r\n        </Grid2>\r\n    );\r\n};\r\n\r\nexport default ManageAddonsPage;\r\n"],"names":[],"sourceRoot":""}