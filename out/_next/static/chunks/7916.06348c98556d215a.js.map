{"version":3,"file":"static/chunks/7916.06348c98556d215a.js","mappings":"AAcA","sources":["webpack://_N_E/./src/app/(pages)/setup/components/TemplateDataManager.tsx","webpack://_N_E/./src/app/services/pdfService.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Skeleton,\r\n    Pagination,\r\n} from '@mui/material';\r\nimport { readAllPdfTemplatePage } from '@/app/services/pdfService';\r\nimport { getDefaultOrganization, Organization, OrganizationState } from '@/redux/slice/organizationSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '@/redux/store';\r\nimport dynamic from 'next/dynamic';\r\nconst DataUploadButton = dynamic(() => import('@/app/(pages)/setup/components/DataUploadButton'), { ssr: false });\r\n\r\ninterface Template {\r\n    id: string;\r\n    name: string;\r\n    json: string;\r\n}\r\n\r\nconst TemplateDataManager: React.FC = (id) => {\r\n    const [templates, setTemplates] = useState<Template[]>([]);\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n\r\n    const currentOrg: Organization | any = useSelector((state: { organization: OrganizationState }) =>\r\n        getDefaultOrganization(state.organization)\r\n    );\r\n    const { token } = useSelector((state: RootState) => state.session);\r\n\r\n    const pageSize = 10;\r\n\r\n    const fetchTemplates = async (page: number) => {\r\n        try {\r\n            setLoading(true);\r\n            setTemplates([]);\r\n\r\n            const response = await readAllPdfTemplatePage(currentOrg?.id, token, {\r\n                sortOrder: 'desc',\r\n                startFrom: (page - 1) * pageSize,\r\n                to: pageSize,\r\n                search: '',\r\n                sortBy: 'name'\r\n            });\r\n            if (response.status === 200) {\r\n                if (response.data?.data) {\r\n                    const d = response.data?.data;\r\n                    setTemplates(d.data);\r\n                    setTotalPages(Math.ceil(d.total / pageSize));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching templates:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTemplates(page);\r\n    }, [page]);\r\n\r\n    const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setPage(value);\r\n    };\r\n\r\n    const handleSaveData = (data: string) => {\r\n        console.log('Uploaded JSON Data:', data);\r\n        console.log('Uploaded JSON Data:', id);\r\n        // Add logic to handle saved data\r\n        // updateDummyDataPdfTemplate\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            {isLoading ? (\r\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\r\n            ) : (\r\n                <>\r\n                    <List>\r\n                        {templates.map((template) => (\r\n                            <ListItem key={template.id} sx={{ borderBottom: '1px solid #e0e0e0' }}>\r\n                                <ListItemText primary={template.name} />\r\n                                <DataUploadButton onSave={handleSaveData} id={Number(template.id)} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    <Pagination\r\n                        count={totalPages}\r\n                        page={page}\r\n                        onChange={handlePageChange}\r\n                        sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}\r\n                    />\r\n                </>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default TemplateDataManager;","import { API } from \"./api\";\r\n\r\nexport const createPdfTemplate = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/resource', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const generatePdfBufferById = async (id: number, organization_id: number, token: string, subcategoriesFilter: string[] = []) => {\r\n    return API.get('/pdf-templates/preview/' + id, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        params: { organization_id: organization_id, subcategoriesFilter: subcategoriesFilter }\r\n    });\r\n}\r\n\r\nexport const generatePdfBuffer = async (data: any, token: string) => {\r\n    return API.post('/pdf-templates/convert', data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readPdfTemplate = async (id: number, token: string) => {\r\n    return API.get(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const readAllPdfTemplatePage = async (\r\n    orgId: string,\r\n    token: string,\r\n    {\r\n        sortOrder = 'asc',   // Default value for sortOrder\r\n        startFrom = 0,      // Default value for startFrom (pagination)\r\n        to = 10,            // Default value for to (pagination)\r\n        sortBy = 'name',    // Default value for sortBy\r\n        addonsFilter = '',  // Default value for addonsFilter\r\n        search = '',        // Default value for search filter\r\n    } = {} // Default empty object if no parameters are passed\r\n) => {\r\n    return API.get(`/pdf-templates/template/page`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n        params: {\r\n            sortOrder,   // sorting order, default is 'asc'\r\n            startFrom,   // starting index, default is 0\r\n            to,          // number of items to return, default is 10\r\n            sortBy,      // field to sort by, default is 'name'\r\n            addonsFilter, // any additional filter, default is empty string\r\n            search,      // search filter, default is empty string\r\n            organization_id: orgId\r\n        },\r\n    });\r\n};\r\n\r\n\r\nexport const updatePdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/${id}`, data, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n}\r\n\r\nexport const updateDummyDataPdfTemplate = async (id: number, data: any, token: string) => {\r\n    return API.put(`/pdf-templates/resource/dummy-data/${id}`, { json: data }, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}\r\n\r\nexport const deletePdfTemplate = async (id: number, token: string) => {\r\n    return API.delete(`/pdf-templates/resource/${id}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    });\r\n}"],"names":[],"sourceRoot":""}