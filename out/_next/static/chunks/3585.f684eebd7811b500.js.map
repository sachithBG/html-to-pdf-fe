{"version":3,"file":"static/chunks/3585.f684eebd7811b500.js","mappings":"ACEA;AwC+oCA","sources":["webpack://_N_E/./node_modules/@mui/material/styles/cssUtils.js","webpack://_N_E/./node_modules/@mui/material/Skeleton/skeletonClasses.js","webpack://_N_E/./node_modules/@mui/material/Skeleton/Skeleton.js","webpack://_N_E/./node_modules/color-convert/conversions.js","webpack://_N_E/./node_modules/color-convert/index.js","webpack://_N_E/./node_modules/color-convert/route.js","webpack://_N_E/./node_modules/color-name/index.js","webpack://_N_E/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://_N_E/./node_modules/prop-types/index.js","webpack://_N_E/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://_N_E/./node_modules/ckeditor5/dist/ckeditor5.css","webpack://_N_E/./node_modules/lodash-es/mapValues.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-clipboard/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-core/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-enter/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-integrations-common/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-react/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-typing/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-undo/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-upload/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-watchdog/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-widget/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-adapter-ckfinder/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-alignment/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-autoformat/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-autosave/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-basic-styles/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-block-quote/dist/index.js","webpack://_N_E/./node_modules/blurhash/dist/esm/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-ckbox/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-ckfinder/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-cloud-services/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-code-block/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-easy-image/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-editor-balloon/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-editor-classic/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-editor-decoupled/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-editor-inline/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-editor-multi-root/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-select-all/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-essentials/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-find-and-replace/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-font/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-paragraph/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-heading/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-highlight/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-horizontal-line/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-html-embed/dist/index.js","webpack://_N_E/./node_modules/lodash-es/_arrayReduce.js","webpack://_N_E/./node_modules/lodash-es/_deburrLetter.js","webpack://_N_E/./node_modules/lodash-es/deburr.js","webpack://_N_E/./node_modules/lodash-es/_asciiWords.js","webpack://_N_E/./node_modules/lodash-es/_hasUnicodeWord.js","webpack://_N_E/./node_modules/lodash-es/_unicodeWords.js","webpack://_N_E/./node_modules/lodash-es/words.js","webpack://_N_E/./node_modules/lodash-es/_createCompounder.js","webpack://_N_E/./node_modules/lodash-es/_castSlice.js","webpack://_N_E/./node_modules/lodash-es/_hasUnicode.js","webpack://_N_E/./node_modules/lodash-es/_asciiToArray.js","webpack://_N_E/./node_modules/lodash-es/_unicodeToArray.js","webpack://_N_E/./node_modules/lodash-es/_stringToArray.js","webpack://_N_E/./node_modules/lodash-es/_createCaseFirst.js","webpack://_N_E/./node_modules/lodash-es/upperFirst.js","webpack://_N_E/./node_modules/lodash-es/startCase.js","webpack://_N_E/./node_modules/lodash-es/mergeWith.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-html-support/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-indent/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-language/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-link/dist/index.js","webpack://_N_E/./node_modules/marked/lib/marked.esm.js","webpack://_N_E/./node_modules/turndown/lib/turndown.browser.es.js","webpack://_N_E/./node_modules/turndown-plugin-gfm/lib/turndown-plugin-gfm.es.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-markdown-gfm/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-media-embed/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-mention/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-minimap/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-page-break/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-paste-from-office/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-remove-format/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-restricted-editing/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-show-blocks/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-source-editing/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-special-characters/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-style/dist/index.js","webpack://_N_E/./node_modules/@ckeditor/ckeditor5-word-count/dist/index.js","webpack://_N_E/./node_modules/ckeditor5/dist/ckeditor5.js","webpack://_N_E/./node_modules/color-parse/index.mjs","webpack://_N_E/./node_modules/lodash-es/_listCacheClear.js","webpack://_N_E/./node_modules/lodash-es/_assocIndexOf.js","webpack://_N_E/./node_modules/lodash-es/_listCacheDelete.js","webpack://_N_E/./node_modules/lodash-es/_listCacheGet.js","webpack://_N_E/./node_modules/lodash-es/_listCacheHas.js","webpack://_N_E/./node_modules/lodash-es/_listCacheSet.js","webpack://_N_E/./node_modules/lodash-es/_ListCache.js","webpack://_N_E/./node_modules/lodash-es/_Map.js","webpack://_N_E/./node_modules/lodash-es/_nativeCreate.js","webpack://_N_E/./node_modules/lodash-es/_hashClear.js","webpack://_N_E/./node_modules/lodash-es/_hashDelete.js","webpack://_N_E/./node_modules/lodash-es/_hashGet.js","webpack://_N_E/./node_modules/lodash-es/_hashHas.js","webpack://_N_E/./node_modules/lodash-es/_hashSet.js","webpack://_N_E/./node_modules/lodash-es/_Hash.js","webpack://_N_E/./node_modules/lodash-es/_mapCacheClear.js","webpack://_N_E/./node_modules/lodash-es/_isKeyable.js","webpack://_N_E/./node_modules/lodash-es/_getMapData.js","webpack://_N_E/./node_modules/lodash-es/_mapCacheDelete.js","webpack://_N_E/./node_modules/lodash-es/_mapCacheGet.js","webpack://_N_E/./node_modules/lodash-es/_mapCacheHas.js","webpack://_N_E/./node_modules/lodash-es/_mapCacheSet.js","webpack://_N_E/./node_modules/lodash-es/_MapCache.js","webpack://_N_E/./node_modules/lodash-es/_stackClear.js","webpack://_N_E/./node_modules/lodash-es/_stackDelete.js","webpack://_N_E/./node_modules/lodash-es/_stackGet.js","webpack://_N_E/./node_modules/lodash-es/_stackHas.js","webpack://_N_E/./node_modules/lodash-es/_stackSet.js","webpack://_N_E/./node_modules/lodash-es/_Stack.js","webpack://_N_E/./node_modules/lodash-es/_Symbol.js","webpack://_N_E/./node_modules/lodash-es/_Uint8Array.js","webpack://_N_E/./node_modules/lodash-es/_baseTimes.js","webpack://_N_E/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://_N_E/./node_modules/lodash-es/_arrayMap.js","webpack://_N_E/./node_modules/lodash-es/_arrayPush.js","webpack://_N_E/./node_modules/lodash-es/_assignValue.js","webpack://_N_E/./node_modules/lodash-es/_baseAssignValue.js","webpack://_N_E/./node_modules/lodash-es/_arrayEach.js","webpack://_N_E/./node_modules/lodash-es/_baseAssign.js","webpack://_N_E/./node_modules/lodash-es/_baseAssignIn.js","webpack://_N_E/./node_modules/lodash-es/_copySymbols.js","webpack://_N_E/./node_modules/lodash-es/_getSymbolsIn.js","webpack://_N_E/./node_modules/lodash-es/_copySymbolsIn.js","webpack://_N_E/./node_modules/lodash-es/_getAllKeysIn.js","webpack://_N_E/./node_modules/lodash-es/_initCloneArray.js","webpack://_N_E/./node_modules/lodash-es/_cloneDataView.js","webpack://_N_E/./node_modules/lodash-es/_cloneRegExp.js","webpack://_N_E/./node_modules/lodash-es/_cloneSymbol.js","webpack://_N_E/./node_modules/lodash-es/_initCloneByTag.js","webpack://_N_E/./node_modules/lodash-es/_baseIsMap.js","webpack://_N_E/./node_modules/lodash-es/isMap.js","webpack://_N_E/./node_modules/lodash-es/_baseIsSet.js","webpack://_N_E/./node_modules/lodash-es/isSet.js","webpack://_N_E/./node_modules/lodash-es/_baseClone.js","webpack://_N_E/./node_modules/lodash-es/_createBaseFor.js","webpack://_N_E/./node_modules/lodash-es/_baseFor.js","webpack://_N_E/./node_modules/lodash-es/_baseForOwn.js","webpack://_N_E/./node_modules/lodash-es/_baseGet.js","webpack://_N_E/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://_N_E/./node_modules/lodash-es/_getRawTag.js","webpack://_N_E/./node_modules/lodash-es/_objectToString.js","webpack://_N_E/./node_modules/lodash-es/_baseGetTag.js","webpack://_N_E/./node_modules/lodash-es/_setCacheAdd.js","webpack://_N_E/./node_modules/lodash-es/_setCacheHas.js","webpack://_N_E/./node_modules/lodash-es/_SetCache.js","webpack://_N_E/./node_modules/lodash-es/_arraySome.js","webpack://_N_E/./node_modules/lodash-es/_cacheHas.js","webpack://_N_E/./node_modules/lodash-es/_equalArrays.js","webpack://_N_E/./node_modules/lodash-es/_mapToArray.js","webpack://_N_E/./node_modules/lodash-es/_setToArray.js","webpack://_N_E/./node_modules/lodash-es/_equalByTag.js","webpack://_N_E/./node_modules/lodash-es/_equalObjects.js","webpack://_N_E/./node_modules/lodash-es/_baseIsEqualDeep.js","webpack://_N_E/./node_modules/lodash-es/_baseIsEqual.js","webpack://_N_E/./node_modules/lodash-es/_baseIsMatch.js","webpack://_N_E/./node_modules/lodash-es/_isStrictComparable.js","webpack://_N_E/./node_modules/lodash-es/_getMatchData.js","webpack://_N_E/./node_modules/lodash-es/_matchesStrictComparable.js","webpack://_N_E/./node_modules/lodash-es/_baseMatches.js","webpack://_N_E/./node_modules/lodash-es/_baseHasIn.js","webpack://_N_E/./node_modules/lodash-es/_hasPath.js","webpack://_N_E/./node_modules/lodash-es/hasIn.js","webpack://_N_E/./node_modules/lodash-es/_baseMatchesProperty.js","webpack://_N_E/./node_modules/lodash-es/_baseProperty.js","webpack://_N_E/./node_modules/lodash-es/_basePropertyDeep.js","webpack://_N_E/./node_modules/lodash-es/property.js","webpack://_N_E/./node_modules/lodash-es/_baseIteratee.js","webpack://_N_E/./node_modules/lodash-es/_assignMergeValue.js","webpack://_N_E/./node_modules/lodash-es/isArrayLikeObject.js","webpack://_N_E/./node_modules/lodash-es/_safeGet.js","webpack://_N_E/./node_modules/lodash-es/toPlainObject.js","webpack://_N_E/./node_modules/lodash-es/_baseMergeDeep.js","webpack://_N_E/./node_modules/lodash-es/_baseMerge.js","webpack://_N_E/./node_modules/lodash-es/_basePropertyOf.js","webpack://_N_E/./node_modules/lodash-es/_baseSlice.js","webpack://_N_E/./node_modules/lodash-es/_baseUnary.js","webpack://_N_E/./node_modules/lodash-es/memoize.js","webpack://_N_E/./node_modules/lodash-es/_memoizeCapped.js","webpack://_N_E/./node_modules/lodash-es/_stringToPath.js","webpack://_N_E/./node_modules/lodash-es/_castPath.js","webpack://_N_E/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://_N_E/./node_modules/lodash-es/_cloneBuffer.js","webpack://_N_E/./node_modules/lodash-es/_cloneTypedArray.js","webpack://_N_E/./node_modules/lodash-es/_copyArray.js","webpack://_N_E/./node_modules/lodash-es/_copyObject.js","webpack://_N_E/./node_modules/lodash-es/_apply.js","webpack://_N_E/./node_modules/lodash-es/_overRest.js","webpack://_N_E/./node_modules/lodash-es/constant.js","webpack://_N_E/./node_modules/lodash-es/_baseSetToString.js","webpack://_N_E/./node_modules/lodash-es/_shortOut.js","webpack://_N_E/./node_modules/lodash-es/_setToString.js","webpack://_N_E/./node_modules/lodash-es/_baseRest.js","webpack://_N_E/./node_modules/lodash-es/_isIterateeCall.js","webpack://_N_E/./node_modules/lodash-es/_createAssigner.js","webpack://_N_E/./node_modules/lodash-es/_defineProperty.js","webpack://_N_E/./node_modules/lodash-es/_freeGlobal.js","webpack://_N_E/./node_modules/lodash-es/_getAllKeys.js","webpack://_N_E/./node_modules/lodash-es/_coreJsData.js","webpack://_N_E/./node_modules/lodash-es/_isMasked.js","webpack://_N_E/./node_modules/lodash-es/_baseIsNative.js","webpack://_N_E/./node_modules/lodash-es/_getValue.js","webpack://_N_E/./node_modules/lodash-es/_getNative.js","webpack://_N_E/./node_modules/lodash-es/_getPrototype.js","webpack://_N_E/./node_modules/lodash-es/_arrayFilter.js","webpack://_N_E/./node_modules/lodash-es/_getSymbols.js","webpack://_N_E/./node_modules/lodash-es/_DataView.js","webpack://_N_E/./node_modules/lodash-es/_Promise.js","webpack://_N_E/./node_modules/lodash-es/_Set.js","webpack://_N_E/./node_modules/lodash-es/_WeakMap.js","webpack://_N_E/./node_modules/lodash-es/_getTag.js","webpack://_N_E/./node_modules/lodash-es/_baseCreate.js","webpack://_N_E/./node_modules/lodash-es/_initCloneObject.js","webpack://_N_E/./node_modules/lodash-es/_isIndex.js","webpack://_N_E/./node_modules/lodash-es/_isKey.js","webpack://_N_E/./node_modules/lodash-es/_isPrototype.js","webpack://_N_E/./node_modules/lodash-es/_nodeUtil.js","webpack://_N_E/./node_modules/lodash-es/_overArg.js","webpack://_N_E/./node_modules/lodash-es/_root.js","webpack://_N_E/./node_modules/lodash-es/_toKey.js","webpack://_N_E/./node_modules/lodash-es/_toSource.js","webpack://_N_E/./node_modules/lodash-es/assignIn.js","webpack://_N_E/./node_modules/lodash-es/clone.js","webpack://_N_E/./node_modules/lodash-es/cloneDeep.js","webpack://_N_E/./node_modules/lodash-es/cloneDeepWith.js","webpack://_N_E/./node_modules/lodash-es/now.js","webpack://_N_E/./node_modules/lodash-es/_trimmedEndIndex.js","webpack://_N_E/./node_modules/lodash-es/_baseTrim.js","webpack://_N_E/./node_modules/lodash-es/toNumber.js","webpack://_N_E/./node_modules/lodash-es/debounce.js","webpack://_N_E/./node_modules/lodash-es/eq.js","webpack://_N_E/./node_modules/lodash-es/_escapeHtmlChar.js","webpack://_N_E/./node_modules/lodash-es/escape.js","webpack://_N_E/./node_modules/lodash-es/escapeRegExp.js","webpack://_N_E/./node_modules/lodash-es/get.js","webpack://_N_E/./node_modules/lodash-es/identity.js","webpack://_N_E/./node_modules/lodash-es/_baseIsArguments.js","webpack://_N_E/./node_modules/lodash-es/isArguments.js","webpack://_N_E/./node_modules/lodash-es/isArray.js","webpack://_N_E/./node_modules/lodash-es/isArrayLike.js","webpack://_N_E/./node_modules/lodash-es/stubFalse.js","webpack://_N_E/./node_modules/lodash-es/isBuffer.js","webpack://_N_E/./node_modules/lodash-es/isElement.js","webpack://_N_E/./node_modules/lodash-es/isEqual.js","webpack://_N_E/./node_modules/lodash-es/isEqualWith.js","webpack://_N_E/./node_modules/lodash-es/isFunction.js","webpack://_N_E/./node_modules/lodash-es/isLength.js","webpack://_N_E/./node_modules/lodash-es/isObject.js","webpack://_N_E/./node_modules/lodash-es/isObjectLike.js","webpack://_N_E/./node_modules/lodash-es/isPlainObject.js","webpack://_N_E/./node_modules/lodash-es/isString.js","webpack://_N_E/./node_modules/lodash-es/isSymbol.js","webpack://_N_E/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://_N_E/./node_modules/lodash-es/isTypedArray.js","webpack://_N_E/./node_modules/lodash-es/_nativeKeys.js","webpack://_N_E/./node_modules/lodash-es/_baseKeys.js","webpack://_N_E/./node_modules/lodash-es/keys.js","webpack://_N_E/./node_modules/lodash-es/_nativeKeysIn.js","webpack://_N_E/./node_modules/lodash-es/_baseKeysIn.js","webpack://_N_E/./node_modules/lodash-es/keysIn.js","webpack://_N_E/./node_modules/lodash-es/_createBaseEach.js","webpack://_N_E/./node_modules/lodash-es/_baseEach.js","webpack://_N_E/./node_modules/lodash-es/_baseMap.js","webpack://_N_E/./node_modules/lodash-es/map.js","webpack://_N_E/./node_modules/lodash-es/merge.js","webpack://_N_E/./node_modules/lodash-es/_baseSet.js","webpack://_N_E/./node_modules/lodash-es/set.js","webpack://_N_E/./node_modules/lodash-es/stubArray.js","webpack://_N_E/./node_modules/lodash-es/throttle.js","webpack://_N_E/./node_modules/lodash-es/_baseToString.js","webpack://_N_E/./node_modules/lodash-es/toString.js","webpack://_N_E/./node_modules/lodash-es/last.js","webpack://_N_E/./node_modules/lodash-es/_parent.js","webpack://_N_E/./node_modules/lodash-es/_baseUnset.js","webpack://_N_E/./node_modules/lodash-es/unset.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/utils/math.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/utils/convert.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/utils/compare.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/utils/dom.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/components/slider.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/components/hue.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/components/saturation.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/styles/color-picker.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/styles/hue.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/styles/saturation.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/components/color-picker.js","webpack://_N_E/./node_modules/vanilla-colorful/lib/entrypoints/hex.js"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSkeletonUtilityClass(slot) {\n  return generateUtilityClass('MuiSkeleton', slot);\n}\nconst skeletonClasses = generateUtilityClasses('MuiSkeleton', ['root', 'text', 'rectangular', 'rounded', 'circular', 'pulse', 'wave', 'withChildren', 'fitContent', 'heightAuto']);\nexport default skeletonClasses;","'use client';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha, unstable_getUnit as getUnit, unstable_toUnitless as toUnitless } from \"../styles/index.js\";\nimport { keyframes, css, styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getSkeletonUtilityClass } from \"./skeletonClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    animation,\n    hasChildren,\n    width,\n    height\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, animation, hasChildren && 'withChildren', hasChildren && !width && 'fitContent', hasChildren && !height && 'heightAuto']\n  };\n  return composeClasses(slots, getSkeletonUtilityClass, classes);\n};\nconst pulseKeyframe = keyframes`\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.4;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\nconst waveKeyframe = keyframes`\n  0% {\n    transform: translateX(-100%);\n  }\n\n  50% {\n    /* +0.5s of delay between each loop */\n    transform: translateX(100%);\n  }\n\n  100% {\n    transform: translateX(100%);\n  }\n`;\n\n// This implementation is for supporting both Styled-components v4+ and Pigment CSS.\n// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).\n// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).\nconst pulseAnimation = typeof pulseKeyframe !== 'string' ? css`\n        animation: ${pulseKeyframe} 2s ease-in-out 0.5s infinite;\n      ` : null;\nconst waveAnimation = typeof waveKeyframe !== 'string' ? css`\n        &::after {\n          animation: ${waveKeyframe} 2s linear 0.5s infinite;\n        }\n      ` : null;\nconst SkeletonRoot = styled('span', {\n  name: 'MuiSkeleton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], ownerState.animation !== false && styles[ownerState.animation], ownerState.hasChildren && styles.withChildren, ownerState.hasChildren && !ownerState.width && styles.fitContent, ownerState.hasChildren && !ownerState.height && styles.heightAuto];\n  }\n})(memoTheme(({\n  theme\n}) => {\n  const radiusUnit = getUnit(theme.shape.borderRadius) || 'px';\n  const radiusValue = toUnitless(theme.shape.borderRadius);\n  return {\n    display: 'block',\n    // Create a \"on paper\" color with sufficient contrast retaining the color\n    backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === 'light' ? 0.11 : 0.13),\n    height: '1.2em',\n    variants: [{\n      props: {\n        variant: 'text'\n      },\n      style: {\n        marginTop: 0,\n        marginBottom: 0,\n        height: 'auto',\n        transformOrigin: '0 55%',\n        transform: 'scale(1, 0.60)',\n        borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,\n        '&:empty:before': {\n          content: '\"\\\\00a0\"'\n        }\n      }\n    }, {\n      props: {\n        variant: 'circular'\n      },\n      style: {\n        borderRadius: '50%'\n      }\n    }, {\n      props: {\n        variant: 'rounded'\n      },\n      style: {\n        borderRadius: (theme.vars || theme).shape.borderRadius\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren,\n      style: {\n        '& > *': {\n          visibility: 'hidden'\n        }\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren && !ownerState.width,\n      style: {\n        maxWidth: 'fit-content'\n      }\n    }, {\n      props: ({\n        ownerState\n      }) => ownerState.hasChildren && !ownerState.height,\n      style: {\n        height: 'auto'\n      }\n    }, {\n      props: {\n        animation: 'pulse'\n      },\n      style: pulseAnimation || {\n        animation: `${pulseKeyframe} 2s ease-in-out 0.5s infinite`\n      }\n    }, {\n      props: {\n        animation: 'wave'\n      },\n      style: {\n        position: 'relative',\n        overflow: 'hidden',\n        /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */\n        WebkitMaskImage: '-webkit-radial-gradient(white, black)',\n        '&::after': {\n          background: `linear-gradient(\n                90deg,\n                transparent,\n                ${(theme.vars || theme).palette.action.hover},\n                transparent\n              )`,\n          content: '\"\"',\n          position: 'absolute',\n          transform: 'translateX(-100%)' /* Avoid flash during server-side hydration */,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          top: 0\n        }\n      }\n    }, {\n      props: {\n        animation: 'wave'\n      },\n      style: waveAnimation || {\n        '&::after': {\n          animation: `${waveKeyframe} 2s linear 0.5s infinite`\n        }\n      }\n    }]\n  };\n}));\nconst Skeleton = /*#__PURE__*/React.forwardRef(function Skeleton(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSkeleton'\n  });\n  const {\n    animation = 'pulse',\n    className,\n    component = 'span',\n    height,\n    style,\n    variant = 'text',\n    width,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    animation,\n    component,\n    variant,\n    hasChildren: Boolean(other.children)\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(SkeletonRoot, {\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ...other,\n    style: {\n      width,\n      height,\n      ...style\n    }\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   * @default 'pulse'\n   */\n  animation: PropTypes.oneOf(['pulse', 'wave', false]),\n  /**\n   * Optional children to infer width and height from.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The type of content that will be rendered.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['circular', 'rectangular', 'rounded', 'text']), PropTypes.string]),\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default Skeleton;","/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","// extracted by mini-css-extract-plugin","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { EventInfo, getRangeFromMouseEvent, uid, toUnit, delay, DomEmitterMixin, global, Rect, ResizeObserver, env, createElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { DomEventObserver, DataTransfer, Range, MouseObserver, LiveRange } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { mapValues, throttle } from 'lodash-es';\nimport { Widget, isWidget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { View } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput},\n * * {@link module:engine/view/document~Document#event:paste},\n * * {@link module:engine/view/document~Document#event:copy},\n * * {@link module:engine/view/document~Document#event:cut},\n * * {@link module:engine/view/document~Document#event:drop},\n * * {@link module:engine/view/document~Document#event:dragover},\n * * {@link module:engine/view/document~Document#event:dragging},\n * * {@link module:engine/view/document~Document#event:dragstart},\n * * {@link module:engine/view/document~Document#event:dragend},\n * * {@link module:engine/view/document~Document#event:dragenter},\n * * {@link module:engine/view/document~Document#event:dragleave}.\n *\n * **Note**: This observer is not available by default (ckeditor5-engine does not add it on its own).\n * To make it available, it needs to be added to {@link module:engine/view/document~Document} by using\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. Alternatively, you can load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n */ class ClipboardObserver extends DomEventObserver {\n    domEventType = [\n        'paste',\n        'copy',\n        'cut',\n        'drop',\n        'dragover',\n        'dragstart',\n        'dragend',\n        'dragenter',\n        'dragleave'\n    ];\n    constructor(view){\n        super(view);\n        const viewDocument = this.document;\n        this.listenTo(viewDocument, 'paste', handleInput('clipboardInput'), {\n            priority: 'low'\n        });\n        this.listenTo(viewDocument, 'drop', handleInput('clipboardInput'), {\n            priority: 'low'\n        });\n        this.listenTo(viewDocument, 'dragover', handleInput('dragging'), {\n            priority: 'low'\n        });\n        function handleInput(type) {\n            return (evt, data)=>{\n                data.preventDefault();\n                const targetRanges = data.dropRange ? [\n                    data.dropRange\n                ] : null;\n                const eventInfo = new EventInfo(viewDocument, type);\n                viewDocument.fire(eventInfo, {\n                    dataTransfer: data.dataTransfer,\n                    method: evt.name,\n                    targetRanges,\n                    target: data.target,\n                    domEvent: data.domEvent\n                });\n                // If CKEditor handled the input, do not bubble the original event any further.\n                // This helps external integrations recognize that fact and act accordingly.\n                // https://github.com/ckeditor/ckeditor5-upload/issues/92\n                if (eventInfo.stop.called) {\n                    data.stopPropagation();\n                }\n            };\n        }\n    }\n    onDomEvent(domEvent) {\n        const nativeDataTransfer = 'clipboardData' in domEvent ? domEvent.clipboardData : domEvent.dataTransfer;\n        const cacheFiles = domEvent.type == 'drop' || domEvent.type == 'paste';\n        const evtData = {\n            dataTransfer: new DataTransfer(nativeDataTransfer, {\n                cacheFiles\n            })\n        };\n        if (domEvent.type == 'drop' || domEvent.type == 'dragover') {\n            const domRange = getRangeFromMouseEvent(domEvent);\n            evtData.dropRange = domRange && this.view.domConverter.domRangeToView(domRange);\n        }\n        this.fire(domEvent.type, domEvent, evtData);\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module clipboard/utils/plaintexttohtml\n */ /**\n * Converts plain text to its HTML-ized version.\n *\n * @param text The plain text to convert.\n * @returns HTML generated from the plain text.\n */ function plainTextToHtml(text) {\n    text = text// Encode &.\n    .replace(/&/g, '&amp;')// Encode <>.\n    .replace(/</g, '&lt;').replace(/>/g, '&gt;')// Creates a paragraph for each double line break.\n    .replace(/\\r?\\n\\r?\\n/g, '</p><p>')// Creates a line break for each single line break.\n    .replace(/\\r?\\n/g, '<br>')// Replace tabs with four spaces.\n    .replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;')// Preserve trailing spaces (only the first and last one – the rest is handled below).\n    .replace(/^\\s/, '&nbsp;').replace(/\\s$/, '&nbsp;')// Preserve other subsequent spaces now.\n    .replace(/\\s\\s/g, ' &nbsp;');\n    if (text.includes('</p><p>') || text.includes('<br>')) {\n        // If we created paragraphs above, add the trailing ones.\n        text = `<p>${text}</p>`;\n    }\n    // TODO:\n    // * What about '\\nfoo' vs ' foo'?\n    return text;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module clipboard/utils/normalizeclipboarddata\n */ /**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n * Removes all HTML comments. These are considered an internal thing and it makes little sense if they leak into the editor data.\n *\n * @param data The HTML data to normalize.\n * @returns Normalized HTML.\n */ function normalizeClipboardData(data) {\n    return data.replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces)=>{\n        // Handle the most popular and problematic case when even a single space becomes an nbsp;.\n        // Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n        if (spaces.length == 1) {\n            return ' ';\n        }\n        return spaces;\n    })// Remove all HTML comments.\n    .replace(/<!--[\\s\\S]*?-->/g, '');\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module clipboard/utils/viewtoplaintext\n */ // Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = [\n    'figcaption',\n    'li'\n];\nconst listElements = [\n    'ol',\n    'ul'\n];\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param viewItem View item to convert.\n * @returns Plain text representation of `viewItem`.\n */ function viewToPlainText(viewItem) {\n    if (viewItem.is('$text') || viewItem.is('$textProxy')) {\n        return viewItem.data;\n    }\n    if (viewItem.is('element', 'img') && viewItem.hasAttribute('alt')) {\n        return viewItem.getAttribute('alt');\n    }\n    if (viewItem.is('element', 'br')) {\n        return '\\n'; // Convert soft breaks to single line break (#8045).\n    }\n    /**\n\t * Item is a document fragment, attribute element or container element. It doesn't\n\t * have it's own text value, so we need to convert its children elements.\n\t */ let text = '';\n    let prev = null;\n    for (const child of viewItem.getChildren()){\n        text += newLinePadding(child, prev) + viewToPlainText(child);\n        prev = child;\n    }\n    return text;\n}\n/**\n * Returns new line padding to prefix the given elements with.\n */ function newLinePadding(element, previous) {\n    if (!previous) {\n        // Don't add padding to first elements in a level.\n        return '';\n    }\n    if (element.is('element', 'li') && !element.isEmpty && element.getChild(0).is('containerElement')) {\n        // Separate document list items with empty lines.\n        return '\\n\\n';\n    }\n    if (listElements.includes(element.name) && listElements.includes(previous.name)) {\n        /**\n\t\t * Because `<ul>` and `<ol>` are AttributeElements, two consecutive lists will not have any padding between\n\t\t * them (see the `if` statement below). To fix this, we need to make an exception for this case.\n\t\t */ return '\\n\\n';\n    }\n    if (!element.is('containerElement') && !previous.is('containerElement')) {\n        // Don't add padding between non-container elements.\n        return '';\n    }\n    if (smallPaddingElements.includes(element.name) || smallPaddingElements.includes(previous.name)) {\n        // Add small padding between selected container elements.\n        return '\\n';\n    }\n    // Do not add padding around the elements that won't be rendered.\n    if (element.is('element') && element.getCustomProperty('dataPipeline:transparentRendering') || previous.is('element') && previous.getCustomProperty('dataPipeline:transparentRendering')) {\n        return '';\n    }\n    // Add empty lines between container elements.\n    return '\\n\\n';\n}\n\n/**\n * Part of the clipboard logic. Responsible for collecting markers from selected fragments\n * and restoring them with proper positions in pasted elements.\n *\n * @internal\n */ class ClipboardMarkersUtils extends Plugin {\n    /**\n\t * Map of marker names that can be copied.\n\t *\n\t * @internal\n\t */ _markersToCopy = new Map();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ClipboardMarkersUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Registers marker name as copyable in clipboard pipeline.\n\t *\n\t * @param markerName Name of marker that can be copied.\n\t * @param config Configuration that describes what can be performed on specified marker.\n\t * @internal\n\t */ _registerMarkerToCopy(markerName, config) {\n        this._markersToCopy.set(markerName, config);\n    }\n    /**\n\t * Performs copy markers on provided selection and paste it to fragment returned from `getCopiedFragment`.\n\t *\n\t * \t1. Picks all markers in provided selection.\n\t * \t2. Inserts fake markers to document.\n\t * \t3. Gets copied selection fragment from document.\n\t * \t4. Removes fake elements from fragment and document.\n\t * \t5. Inserts markers in the place of removed fake markers.\n\t *\n\t * Due to selection modification, when inserting items, `getCopiedFragment` must *always* operate on `writer.model.document.selection'.\n\t * Do not use any other custom selection object within callback, as this will lead to out-of-bounds exceptions in rare scenarios.\n\t *\n\t * @param action Type of clipboard action.\n\t * @param writer An instance of the model writer.\n\t * @param selection Selection to be checked.\n\t * @param getCopiedFragment\tCallback that performs copy of selection and returns it as fragment.\n\t * @internal\n\t */ _copySelectedFragmentWithMarkers(action, selection, getCopiedFragment = (writer)=>writer.model.getSelectedContent(writer.model.document.selection)) {\n        return this.editor.model.change((writer)=>{\n            const oldSelection = writer.model.document.selection;\n            // In some scenarios, such like in drag & drop, passed `selection` parameter is not actually\n            // the same `selection` as the `writer.model.document.selection` which means that `_insertFakeMarkersToSelection`\n            // is not affecting passed `selection` `start` and `end` positions but rather modifies `writer.model.document.selection`.\n            //\n            // It is critical due to fact that when we have selection that starts [ 0, 0 ] and ends at [ 1, 0 ]\n            // and after inserting fake marker it will point to such marker instead of new widget position at start: [ 1, 0 ] end: [2, 0 ].\n            // `writer.insert` modifies only original `writer.model.document.selection`.\n            writer.setSelection(selection);\n            const sourceSelectionInsertedMarkers = this._insertFakeMarkersIntoSelection(writer, writer.model.document.selection, action);\n            const fragment = getCopiedFragment(writer);\n            const fakeMarkersRangesInsideRange = this._removeFakeMarkersInsideElement(writer, fragment);\n            // <fake-marker> [Foo] Bar</fake-marker>\n            //      ^                    ^\n            // In `_insertFakeMarkersIntoSelection` call we inserted fake marker just before first element.\n            // The problem is that the first element can be start position of selection so insertion fake-marker\n            // before such element shifts selection (so selection that was at [0, 0] now is at [0, 1]).\n            // It means that inserted fake-marker is no longer present inside such selection and is orphaned.\n            // This function checks special case of such problem. Markers that are orphaned at the start position\n            // and end position in the same time. Basically it means that they overlaps whole element.\n            for (const [markerName, elements] of Object.entries(sourceSelectionInsertedMarkers)){\n                fakeMarkersRangesInsideRange[markerName] ||= writer.createRangeIn(fragment);\n                for (const element of elements){\n                    writer.remove(element);\n                }\n            }\n            fragment.markers.clear();\n            for (const [markerName, range] of Object.entries(fakeMarkersRangesInsideRange)){\n                fragment.markers.set(markerName, range);\n            }\n            // Revert back selection to previous one.\n            writer.setSelection(oldSelection);\n            return fragment;\n        });\n    }\n    /**\n\t * Performs paste of markers on already pasted element.\n\t *\n\t * \t1. Inserts fake markers that are present in fragment element (such fragment will be processed in `getPastedDocumentElement`).\n\t * \t2. Calls `getPastedDocumentElement` and gets element that is inserted into root model.\n\t * \t3. Removes all fake markers present in transformed element.\n\t * \t4. Inserts new markers with removed fake markers ranges into pasted fragment.\n\t *\n\t * There are multiple edge cases that have to be considered before calling this function:\n\t *\n\t * \t* `markers` are inserted into the same element that must be later transformed inside `getPastedDocumentElement`.\n\t * \t* Fake marker elements inside `getPastedDocumentElement` can be cloned, but their ranges cannot overlap.\n\t * \t* If `duplicateOnPaste` is `true` in marker config then associated marker ID is regenerated before pasting.\n\t *\n\t * @param action Type of clipboard action.\n\t * @param markers Object that maps marker name to corresponding range.\n\t * @param getPastedDocumentElement Getter used to get target markers element.\n\t * @internal\n\t */ _pasteMarkersIntoTransformedElement(markers, getPastedDocumentElement) {\n        const pasteMarkers = this._getPasteMarkersFromRangeMap(markers);\n        return this.editor.model.change((writer)=>{\n            // Inserts fake markers into source fragment / element that is later transformed inside `getPastedDocumentElement`.\n            const sourceFragmentFakeMarkers = this._insertFakeMarkersElements(writer, pasteMarkers);\n            // Modifies document fragment (for example, cloning table cells) and then inserts it into the document.\n            const transformedElement = getPastedDocumentElement(writer);\n            // Removes markers in pasted and transformed fragment in root document.\n            const removedFakeMarkers = this._removeFakeMarkersInsideElement(writer, transformedElement);\n            // Cleans up fake markers inserted into source fragment (that one before transformation which is not pasted).\n            for (const element of Object.values(sourceFragmentFakeMarkers).flat()){\n                writer.remove(element);\n            }\n            // Inserts to root document fake markers.\n            for (const [markerName, range] of Object.entries(removedFakeMarkers)){\n                if (!writer.model.markers.has(markerName)) {\n                    writer.addMarker(markerName, {\n                        usingOperation: true,\n                        affectsData: true,\n                        range\n                    });\n                }\n            }\n            return transformedElement;\n        });\n    }\n    /**\n\t * Pastes document fragment with markers to document.\n\t * If `duplicateOnPaste` is `true` in marker config then associated markers IDs\n\t * are regenerated before pasting to avoid markers duplications in content.\n\t *\n\t * @param fragment Document fragment that should contain already processed by pipeline markers.\n\t * @internal\n\t */ _pasteFragmentWithMarkers(fragment) {\n        const pasteMarkers = this._getPasteMarkersFromRangeMap(fragment.markers);\n        fragment.markers.clear();\n        for (const copyableMarker of pasteMarkers){\n            fragment.markers.set(copyableMarker.name, copyableMarker.range);\n        }\n        return this.editor.model.insertContent(fragment);\n    }\n    /**\n\t * In some situations we have to perform copy on selected fragment with certain markers. This function allows to temporarily bypass\n\t * restrictions on markers that we want to copy.\n\t *\n\t * This function executes `executor()` callback. For the duration of the callback, if the clipboard pipeline is used to copy\n\t * content, markers with the specified name will be copied to the clipboard as well.\n\t *\n\t * @param markerName Which markers should be copied.\n\t * @param executor Callback executed.\n\t * @param config Optional configuration flags used to copy (such like partial copy flag).\n\t * @internal\n\t */ _forceMarkersCopy(markerName, executor, config = {\n        allowedActions: 'all',\n        copyPartiallySelected: true,\n        duplicateOnPaste: true\n    }) {\n        const before = this._markersToCopy.get(markerName);\n        this._markersToCopy.set(markerName, config);\n        executor();\n        if (before) {\n            this._markersToCopy.set(markerName, before);\n        } else {\n            this._markersToCopy.delete(markerName);\n        }\n    }\n    /**\n\t * Checks if marker can be copied.\n\t *\n\t * @param markerName Name of checked marker.\n\t * @param action Type of clipboard action. If null then checks only if marker is registered as copyable.\n\t * @internal\n\t */ _isMarkerCopyable(markerName, action) {\n        const config = this._getMarkerClipboardConfig(markerName);\n        if (!config) {\n            return false;\n        }\n        // If there is no action provided then only presence of marker is checked.\n        if (!action) {\n            return true;\n        }\n        const { allowedActions } = config;\n        return allowedActions === 'all' || allowedActions.includes(action);\n    }\n    /**\n\t * Checks if marker has any clipboard copy behavior configuration.\n\t *\n\t * @param markerName Name of checked marker.\n\t */ _hasMarkerConfiguration(markerName) {\n        return !!this._getMarkerClipboardConfig(markerName);\n    }\n    /**\n\t * Returns marker's configuration flags passed during registration.\n\t *\n\t * @param markerName Name of marker that should be returned.\n\t * @internal\n\t */ _getMarkerClipboardConfig(markerName) {\n        const [markerNamePrefix] = markerName.split(':');\n        return this._markersToCopy.get(markerNamePrefix) || null;\n    }\n    /**\n\t * First step of copying markers. It looks for markers intersecting with given selection and inserts `$marker` elements\n\t * at positions where document markers start or end. This way `$marker` elements can be easily copied together with\n\t * the rest of the content of the selection.\n\t *\n\t * @param writer An instance of the model writer.\n\t * @param selection Selection to be checked.\n\t * @param action Type of clipboard action.\n\t */ _insertFakeMarkersIntoSelection(writer, selection, action) {\n        const copyableMarkers = this._getCopyableMarkersFromSelection(writer, selection, action);\n        return this._insertFakeMarkersElements(writer, copyableMarkers);\n    }\n    /**\n\t * Returns array of markers that can be copied in specified selection.\n\t *\n\t * If marker cannot be copied partially (according to `copyPartiallySelected` configuration flag) and\n\t * is not present entirely in any selection range then it will be skipped.\n\t *\n\t * @param writer An instance of the model writer.\n\t * @param selection  Selection which will be checked.\n\t * @param action Type of clipboard action. If null then checks only if marker is registered as copyable.\n\t */ _getCopyableMarkersFromSelection(writer, selection, action) {\n        const selectionRanges = Array.from(selection.getRanges());\n        // Picks all markers in provided ranges. Ensures that there are no duplications if\n        // there are multiple ranges that intersects with the same marker.\n        const markersInRanges = new Set(selectionRanges.flatMap((selectionRange)=>Array.from(writer.model.markers.getMarkersIntersectingRange(selectionRange))));\n        const isSelectionMarkerCopyable = (marker)=>{\n            // Check if marker exists in configuration and provided action can be performed on it.\n            const isCopyable = this._isMarkerCopyable(marker.name, action);\n            if (!isCopyable) {\n                return false;\n            }\n            // Checks if configuration disallows to copy marker only if part of its content is selected.\n            //\n            // Example:\n            // \t<marker-a> Hello [ World ] </marker-a>\n            //\t\t\t\t\t\t^ selection\n            //\n            // In this scenario `marker-a` won't be copied because selection doesn't overlap its content entirely.\n            const { copyPartiallySelected } = this._getMarkerClipboardConfig(marker.name);\n            if (!copyPartiallySelected) {\n                const markerRange = marker.getRange();\n                return selectionRanges.some((selectionRange)=>selectionRange.containsRange(markerRange, true));\n            }\n            return true;\n        };\n        return Array.from(markersInRanges).filter(isSelectionMarkerCopyable).map((copyableMarker)=>{\n            // During `dragstart` event original marker is still present in tree.\n            // It is removed after the clipboard drop event, so none of the copied markers are inserted at the end.\n            // It happens because there already markers with specified `marker.name` when clipboard is trying to insert data\n            // and it aborts inserting.\n            const name = action === 'dragstart' ? this._getUniqueMarkerName(copyableMarker.name) : copyableMarker.name;\n            return {\n                name,\n                range: copyableMarker.getRange()\n            };\n        });\n    }\n    /**\n\t * Picks all markers from markers map that can be pasted.\n\t * If `duplicateOnPaste` is `true`, it regenerates their IDs to ensure uniqueness.\n\t * If marker is not registered, it will be kept in the array anyway.\n\t *\n\t * @param markers Object that maps marker name to corresponding range.\n\t * @param action Type of clipboard action. If null then checks only if marker is registered as copyable.\n\t */ _getPasteMarkersFromRangeMap(markers, action = null) {\n        const { model } = this.editor;\n        const entries = markers instanceof Map ? Array.from(markers.entries()) : Object.entries(markers);\n        return entries.flatMap(([markerName, range])=>{\n            if (!this._hasMarkerConfiguration(markerName)) {\n                return [\n                    {\n                        name: markerName,\n                        range\n                    }\n                ];\n            }\n            if (this._isMarkerCopyable(markerName, action)) {\n                const copyMarkerConfig = this._getMarkerClipboardConfig(markerName);\n                const isInGraveyard = model.markers.has(markerName) && model.markers.get(markerName).getRange().root.rootName === '$graveyard';\n                if (copyMarkerConfig.duplicateOnPaste || isInGraveyard) {\n                    markerName = this._getUniqueMarkerName(markerName);\n                }\n                return [\n                    {\n                        name: markerName,\n                        range\n                    }\n                ];\n            }\n            return [];\n        });\n    }\n    /**\n\t * Inserts specified array of fake markers elements to document and assigns them `type` and `name` attributes.\n\t * Fake markers elements are used to calculate position of markers on pasted fragment that were transformed during\n\t * steps between copy and paste.\n\t *\n\t * @param writer An instance of the model writer.\n\t * @param markers Array of markers that will be inserted.\n\t */ _insertFakeMarkersElements(writer, markers) {\n        const mappedMarkers = {};\n        const sortedMarkers = markers.flatMap((marker)=>{\n            const { start, end } = marker.range;\n            return [\n                {\n                    position: start,\n                    marker,\n                    type: 'start'\n                },\n                {\n                    position: end,\n                    marker,\n                    type: 'end'\n                }\n            ];\n        })// Markers position is sorted backwards to ensure that the insertion of fake markers will not change\n        // the position of the next markers.\n        .sort(({ position: posA }, { position: posB })=>posA.isBefore(posB) ? 1 : -1);\n        for (const { position, marker, type } of sortedMarkers){\n            const fakeMarker = writer.createElement('$marker', {\n                'data-name': marker.name,\n                'data-type': type\n            });\n            if (!mappedMarkers[marker.name]) {\n                mappedMarkers[marker.name] = [];\n            }\n            mappedMarkers[marker.name].push(fakeMarker);\n            writer.insert(fakeMarker, position);\n        }\n        return mappedMarkers;\n    }\n    /**\n\t * Removes all `$marker` elements from the given document fragment.\n\t *\n\t * Returns an object where keys are marker names, and values are ranges corresponding to positions\n\t * where `$marker` elements were inserted.\n\t *\n\t * If the document fragment had only one `$marker` element for given marker (start or end) the other boundary is set automatically\n\t * (to the end or start of the document fragment, respectively).\n\t *\n\t * @param writer An instance of the model writer.\n\t * @param rootElement The element to be checked.\n\t */ _removeFakeMarkersInsideElement(writer, rootElement) {\n        const fakeMarkersElements = this._getAllFakeMarkersFromElement(writer, rootElement);\n        const fakeMarkersRanges = fakeMarkersElements.reduce((acc, fakeMarker)=>{\n            const position = fakeMarker.markerElement && writer.createPositionBefore(fakeMarker.markerElement);\n            let prevFakeMarker = acc[fakeMarker.name];\n            // Handle scenario when tables clone cells with the same fake node. Example:\n            //\n            // <cell><fake-marker-a></cell> <cell><fake-marker-a></cell> <cell><fake-marker-a></cell>\n            //                                          ^ cloned                    ^ cloned\n            //\n            // The easiest way to bypass this issue is to rename already existing in map nodes and\n            // set them new unique name.\n            let skipAssign = false;\n            if (prevFakeMarker && prevFakeMarker.start && prevFakeMarker.end) {\n                const config = this._getMarkerClipboardConfig(fakeMarker.name);\n                if (config.duplicateOnPaste) {\n                    acc[this._getUniqueMarkerName(fakeMarker.name)] = acc[fakeMarker.name];\n                } else {\n                    skipAssign = true;\n                }\n                prevFakeMarker = null;\n            }\n            if (!skipAssign) {\n                acc[fakeMarker.name] = {\n                    ...prevFakeMarker,\n                    [fakeMarker.type]: position\n                };\n            }\n            if (fakeMarker.markerElement) {\n                writer.remove(fakeMarker.markerElement);\n            }\n            return acc;\n        }, {});\n        // We cannot construct ranges directly in previous reduce because element ranges can overlap.\n        // In other words lets assume we have such scenario:\n        // <fake-marker-start /> <paragraph /> <fake-marker-2-start /> <fake-marker-end /> <fake-marker-2-end />\n        //\n        // We have to remove `fake-marker-start` firstly and then remove `fake-marker-2-start`.\n        // Removal of `fake-marker-2-start` affects `fake-marker-end` position so we cannot create\n        // connection between `fake-marker-start` and `fake-marker-end` without iterating whole set firstly.\n        return mapValues(fakeMarkersRanges, (range)=>new Range(range.start || writer.createPositionFromPath(rootElement, [\n                0\n            ]), range.end || writer.createPositionAt(rootElement, 'end')));\n    }\n    /**\n\t * Returns array that contains list of fake markers with corresponding `$marker` elements.\n\t *\n\t * For each marker, there can be two `$marker` elements or only one (if the document fragment contained\n\t * only the beginning or only the end of a marker).\n\t *\n\t * @param writer An instance of the model writer.\n\t * @param rootElement The element to be checked.\n\t */ _getAllFakeMarkersFromElement(writer, rootElement) {\n        const foundFakeMarkers = Array.from(writer.createRangeIn(rootElement)).flatMap(({ item })=>{\n            if (!item.is('element', '$marker')) {\n                return [];\n            }\n            const name = item.getAttribute('data-name');\n            const type = item.getAttribute('data-type');\n            return [\n                {\n                    markerElement: item,\n                    name,\n                    type\n                }\n            ];\n        });\n        const prependFakeMarkers = [];\n        const appendFakeMarkers = [];\n        for (const fakeMarker of foundFakeMarkers){\n            if (fakeMarker.type === 'end') {\n                // <fake-marker> [ phrase</fake-marker> phrase ]\n                //   ^\n                // Handle case when marker is just before start of selection.\n                // Only end marker is inside selection.\n                const hasMatchingStartMarker = foundFakeMarkers.some((otherFakeMarker)=>otherFakeMarker.name === fakeMarker.name && otherFakeMarker.type === 'start');\n                if (!hasMatchingStartMarker) {\n                    prependFakeMarkers.push({\n                        markerElement: null,\n                        name: fakeMarker.name,\n                        type: 'start'\n                    });\n                }\n            }\n            if (fakeMarker.type === 'start') {\n                // [<fake-marker>phrase]</fake-marker>\n                //                           ^\n                // Handle case when fake marker is after selection.\n                // Only start marker is inside selection.\n                const hasMatchingEndMarker = foundFakeMarkers.some((otherFakeMarker)=>otherFakeMarker.name === fakeMarker.name && otherFakeMarker.type === 'end');\n                if (!hasMatchingEndMarker) {\n                    appendFakeMarkers.unshift({\n                        markerElement: null,\n                        name: fakeMarker.name,\n                        type: 'end'\n                    });\n                }\n            }\n        }\n        return [\n            ...prependFakeMarkers,\n            ...foundFakeMarkers,\n            ...appendFakeMarkers\n        ];\n    }\n    /**\n\t * When copy of markers occurs we have to make sure that pasted markers have different names\n\t * than source markers. This functions helps with assigning unique part to marker name to\n\t * prevent duplicated markers error.\n\t *\n\t * @param name Name of marker\n\t */ _getUniqueMarkerName(name) {\n        const parts = name.split(':');\n        const newId = uid().substring(1, 6);\n        // It looks like the marker already is UID marker so in this scenario just swap\n        // last part of marker name and assign new UID.\n        //\n        // example: comment:{ threadId }:{ id } => comment:{ threadId }:{ newId }\n        if (parts.length === 3) {\n            return `${parts.slice(0, 2).join(':')}:${newId}`;\n        }\n        // Assign new segment to marker name with id.\n        //\n        // example: comment => comment:{ newId }\n        return `${parts.join(':')}:${newId}`;\n    }\n}\n\n// Input pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │\n//              │         paste        │          │         drop         │\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Retrieves text/html or text/plain from data.dataTransfer\n//                                 │  clipboardInput  │   and processes it to view.DocumentFragment.\n//                                 └─────────┬────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Converts view.DocumentFragment to model.DocumentFragment.\n//                               │  inputTransformation  │\n//                               └───────────┬───────────┘\n//                                           │\n//                                ┌──────────V──────────┐\n//                                │  ClipboardPipeline  │   Calls model.insertContent().\n//                                │   contentInsertion  │\n//                                └─────────────────────┘\n//\n//\n// Output pipeline events overview:\n//\n//              ┌──────────────────────┐          ┌──────────────────────┐\n//              │     view.Document    │          │     view.Document    │   Retrieves the selected model.DocumentFragment\n//              │         copy         │          │          cut         │   and fires the `outputTransformation` event.\n//              └───────────┬──────────┘          └───────────┬──────────┘\n//                          │                                 │\n//                          └────────────────┌────────────────┘\n//                                           │\n//                               ┌───────────V───────────┐\n//                               │   ClipboardPipeline   │   Processes model.DocumentFragment and converts it to\n//                               │  outputTransformation │   view.DocumentFragment.\n//                               └───────────┬───────────┘\n//                                           │\n//                                 ┌─────────V────────┐\n//                                 │   view.Document  │   Processes view.DocumentFragment to text/html and text/plain\n//                                 │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                                 └──────────────────┘\n//\n/**\n * The clipboard pipeline feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through a series of events in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with the serialized editor's data.\n *\n * # Input pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `paste` or `drop`\n *\n * 1. Translates the event data.\n * 2. Fires the {@link module:engine/view/document~Document#event:clipboardInput `view.Document#clipboardInput`} event.\n *\n * ## Event: `view.Document#clipboardInput`\n *\n * 1. If the `data.content` event field is already set (by some listener on a higher priority), it takes this content and fires the event\n *    from the last point.\n * 2. Otherwise, it retrieves `text/html` or `text/plain` from `data.dataTransfer`.\n * 3. Normalizes the raw data by applying simple filters on string data.\n * 4. Processes the raw data to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 5. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:inputTransformation\n *   `ClipboardPipeline#inputTransformation`} event with the view document fragment in the `data.content` event field.\n *\n * ## Event: `ClipboardPipeline#inputTransformation`\n *\n * 1. Converts {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`} from the `data.content` field to\n *    {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`}.\n * 2. Fires the {@link module:clipboard/clipboardpipeline~ClipboardPipeline#event:contentInsertion `ClipboardPipeline#contentInsertion`}\n *    event with the model document fragment in the `data.content` event field.\n *    **Note**: The `ClipboardPipeline#contentInsertion` event is fired within a model change block to allow other handlers\n *    to run in the same block without post-fixers called in between (i.e., the selection post-fixer).\n *\n * ## Event: `ClipboardPipeline#contentInsertion`\n *\n * 1. Calls {@link module:engine/model/model~Model#insertContent `model.insertContent()`} to insert `data.content`\n *    at the current selection position.\n *\n * # Output pipeline\n *\n * The behavior of the default handlers (all at a `low` priority):\n *\n * ## Event: `copy`, `cut` or `dragstart`\n *\n * 1. Retrieves the selected {@link module:engine/model/documentfragment~DocumentFragment `model.DocumentFragment`} by calling\n *    {@link module:engine/model/model~Model#getSelectedContent `model#getSelectedContent()`}.\n * 2. Converts the model document fragment to {@link module:engine/view/documentfragment~DocumentFragment `view.DocumentFragment`}.\n * 3. Fires the {@link module:engine/view/document~Document#event:clipboardOutput `view.Document#clipboardOutput`} event\n *    with the view document fragment in the `data.content` event field.\n *\n * ## Event: `view.Document#clipboardOutput`\n *\n * 1. Processes `data.content` to HTML and plain text with the\n *    {@link module:engine/controller/datacontroller~DataController#htmlProcessor `DataController#htmlProcessor`}.\n * 2. Updates the `data.dataTransfer` data for `text/html` and `text/plain` with the processed data.\n * 3. For the `cut` method, calls {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n *    on the current selection.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n */ class ClipboardPipeline extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ClipboardPipeline';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardMarkersUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        view.addObserver(ClipboardObserver);\n        this._setupPasteDrop();\n        this._setupCopyCut();\n    }\n    /**\n\t * Fires Clipboard `'outputTransformation'` event for given parameters.\n\t *\n\t * @internal\n\t */ _fireOutputTransformationEvent(dataTransfer, selection, method) {\n        const clipboardMarkersUtils = this.editor.plugins.get('ClipboardMarkersUtils');\n        this.editor.model.enqueueChange({\n            isUndoable: method === 'cut'\n        }, ()=>{\n            const documentFragment = clipboardMarkersUtils._copySelectedFragmentWithMarkers(method, selection);\n            this.fire('outputTransformation', {\n                dataTransfer,\n                content: documentFragment,\n                method\n            });\n        });\n    }\n    /**\n\t * The clipboard paste pipeline.\n\t */ _setupPasteDrop() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const clipboardMarkersUtils = this.editor.plugins.get('ClipboardMarkersUtils');\n        // Pasting is disabled when selection is in non-editable place.\n        // Dropping is disabled in drag and drop handler.\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data)=>{\n            if (data.method == 'paste' && !editor.model.canEditAt(editor.model.document.selection)) {\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data)=>{\n            const dataTransfer = data.dataTransfer;\n            let content;\n            // Some feature could already inject content in the higher priority event handler (i.e., codeBlock).\n            if (data.content) {\n                content = data.content;\n            } else {\n                let contentData = '';\n                if (dataTransfer.getData('text/html')) {\n                    contentData = normalizeClipboardData(dataTransfer.getData('text/html'));\n                } else if (dataTransfer.getData('text/plain')) {\n                    contentData = plainTextToHtml(dataTransfer.getData('text/plain'));\n                }\n                content = this.editor.data.htmlProcessor.toView(contentData);\n            }\n            const eventInfo = new EventInfo(this, 'inputTransformation');\n            this.fire(eventInfo, {\n                content,\n                dataTransfer,\n                targetRanges: data.targetRanges,\n                method: data.method\n            });\n            // If CKEditor handled the input, do not bubble the original event any further.\n            // This helps external integrations recognize this fact and act accordingly.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/92\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n            view.scrollToTheSelection();\n        }, {\n            priority: 'low'\n        });\n        this.listenTo(this, 'inputTransformation', (evt, data)=>{\n            if (data.content.isEmpty) {\n                return;\n            }\n            const dataController = this.editor.data;\n            // Convert the pasted content into a model document fragment.\n            // The conversion is contextual, but in this case an \"all allowed\" context is needed\n            // and for that we use the $clipboardHolder item.\n            const modelFragment = dataController.toModel(data.content, '$clipboardHolder');\n            if (modelFragment.childCount == 0) {\n                return;\n            }\n            evt.stop();\n            // Fire content insertion event in a single change block to allow other handlers to run in the same block\n            // without post-fixers called in between (i.e., the selection post-fixer).\n            model.change(()=>{\n                this.fire('contentInsertion', {\n                    content: modelFragment,\n                    method: data.method,\n                    dataTransfer: data.dataTransfer,\n                    targetRanges: data.targetRanges\n                });\n            });\n        }, {\n            priority: 'low'\n        });\n        this.listenTo(this, 'contentInsertion', (evt, data)=>{\n            data.resultRange = clipboardMarkersUtils._pasteFragmentWithMarkers(data.content);\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * The clipboard copy/cut pipeline.\n\t */ _setupCopyCut() {\n        const editor = this.editor;\n        const modelDocument = editor.model.document;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const onCopyCut = (evt, data)=>{\n            const dataTransfer = data.dataTransfer;\n            data.preventDefault();\n            this._fireOutputTransformationEvent(dataTransfer, modelDocument.selection, evt.name);\n        };\n        this.listenTo(viewDocument, 'copy', onCopyCut, {\n            priority: 'low'\n        });\n        this.listenTo(viewDocument, 'cut', (evt, data)=>{\n            // Cutting is disabled when selection is in non-editable place.\n            // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n            if (!editor.model.canEditAt(editor.model.document.selection)) {\n                data.preventDefault();\n            } else {\n                onCopyCut(evt, data);\n            }\n        }, {\n            priority: 'low'\n        });\n        this.listenTo(this, 'outputTransformation', (evt, data)=>{\n            const content = editor.data.toView(data.content);\n            viewDocument.fire('clipboardOutput', {\n                dataTransfer: data.dataTransfer,\n                content,\n                method: data.method\n            });\n        }, {\n            priority: 'low'\n        });\n        this.listenTo(viewDocument, 'clipboardOutput', (evt, data)=>{\n            if (!data.content.isEmpty) {\n                data.dataTransfer.setData('text/html', this.editor.data.htmlProcessor.toData(data.content));\n                data.dataTransfer.setData('text/plain', viewToPlainText(data.content));\n            }\n            if (data.method == 'cut') {\n                editor.model.deleteContent(modelDocument.selection);\n            }\n        }, {\n            priority: 'low'\n        });\n    }\n}\n\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The horizontal drop target line view.\n */ class LineView extends View {\n    /**\n\t * @inheritDoc\n\t */ constructor(){\n        super();\n        const bind = this.bindTemplate;\n        this.set({\n            isVisible: false,\n            left: null,\n            top: null,\n            width: null\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-clipboard-drop-target-line',\n                    bind.if('isVisible', 'ck-hidden', (value)=>!value)\n                ],\n                style: {\n                    left: bind.to('left', (left)=>toPx(left)),\n                    top: bind.to('top', (top)=>toPx(top)),\n                    width: bind.to('width', (width)=>toPx(width))\n                }\n            }\n        });\n    }\n}\n\n/**\n * Part of the Drag and Drop handling. Responsible for finding and displaying the drop target.\n *\n * @internal\n */ class DragDropTarget extends Plugin {\n    /**\n\t * A delayed callback removing the drop marker.\n\t *\n\t * @internal\n\t */ removeDropMarkerDelayed = delay(()=>this.removeDropMarker(), 40);\n    /**\n\t * A throttled callback updating the drop marker.\n\t */ _updateDropMarkerThrottled = throttle((targetRange)=>this._updateDropMarker(targetRange), 40);\n    /**\n\t * A throttled callback reconverting the drop parker.\n\t */ _reconvertMarkerThrottled = throttle(()=>{\n        if (this.editor.model.markers.has('drop-target')) {\n            this.editor.editing.reconvertMarker('drop-target');\n        }\n    }, 0);\n    /**\n\t * The horizontal drop target line view.\n\t */ _dropTargetLineView = new LineView();\n    /**\n\t * DOM Emitter.\n\t */ _domEmitter = new (DomEmitterMixin())();\n    /**\n\t * Map of document scrollable elements.\n\t */ _scrollables = new Map();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DragDropTarget';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._setupDropMarker();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._domEmitter.stopListening();\n        for (const { resizeObserver } of this._scrollables.values()){\n            resizeObserver.destroy();\n        }\n        this._updateDropMarkerThrottled.cancel();\n        this.removeDropMarkerDelayed.cancel();\n        this._reconvertMarkerThrottled.cancel();\n        return super.destroy();\n    }\n    /**\n\t * Finds the drop target range and updates the drop marker.\n\t *\n\t * @internal\n\t */ updateDropMarker(targetViewElement, targetViewRanges, clientX, clientY, blockMode, draggedRange) {\n        this.removeDropMarkerDelayed.cancel();\n        const targetRange = findDropTargetRange(this.editor, targetViewElement, targetViewRanges, clientX, clientY, blockMode, draggedRange);\n        /* istanbul ignore next -- @preserve */ if (!targetRange) {\n            return;\n        }\n        if (draggedRange && draggedRange.containsRange(targetRange)) {\n            // Target range is inside the dragged range.\n            return this.removeDropMarker();\n        }\n        this._updateDropMarkerThrottled(targetRange);\n    }\n    /**\n\t * Finds the final drop target range.\n\t *\n\t * @internal\n\t */ getFinalDropRange(targetViewElement, targetViewRanges, clientX, clientY, blockMode, draggedRange) {\n        const targetRange = findDropTargetRange(this.editor, targetViewElement, targetViewRanges, clientX, clientY, blockMode, draggedRange);\n        // The dragging markers must be removed after searching for the target range because sometimes\n        // the target lands on the marker itself.\n        this.removeDropMarker();\n        return targetRange;\n    }\n    /**\n\t * Removes the drop target marker.\n\t *\n\t * @internal\n\t */ removeDropMarker() {\n        const model = this.editor.model;\n        this.removeDropMarkerDelayed.cancel();\n        this._updateDropMarkerThrottled.cancel();\n        this._dropTargetLineView.isVisible = false;\n        if (model.markers.has('drop-target')) {\n            model.change((writer)=>{\n                writer.removeMarker('drop-target');\n            });\n        }\n    }\n    /**\n\t * Creates downcast conversion for the drop target marker.\n\t */ _setupDropMarker() {\n        const editor = this.editor;\n        editor.ui.view.body.add(this._dropTargetLineView);\n        // Drop marker conversion for hovering over widgets.\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: 'drop-target',\n            view: {\n                classes: [\n                    'ck-clipboard-drop-target-range'\n                ]\n            }\n        });\n        // Drop marker conversion for in text and block drop target.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: 'drop-target',\n            view: (data, { writer })=>{\n                // Inline drop.\n                if (editor.model.schema.checkChild(data.markerRange.start, '$text')) {\n                    this._dropTargetLineView.isVisible = false;\n                    return this._createDropTargetPosition(writer);\n                } else {\n                    if (data.markerRange.isCollapsed) {\n                        this._updateDropTargetLine(data.markerRange);\n                    } else {\n                        this._dropTargetLineView.isVisible = false;\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Updates the drop target marker to the provided range.\n\t *\n\t * @param targetRange The range to set the marker to.\n\t */ _updateDropMarker(targetRange) {\n        const editor = this.editor;\n        const markers = editor.model.markers;\n        editor.model.change((writer)=>{\n            if (markers.has('drop-target')) {\n                if (!markers.get('drop-target').getRange().isEqual(targetRange)) {\n                    writer.updateMarker('drop-target', {\n                        range: targetRange\n                    });\n                }\n            } else {\n                writer.addMarker('drop-target', {\n                    range: targetRange,\n                    usingOperation: false,\n                    affectsData: false\n                });\n            }\n        });\n    }\n    /**\n\t * Creates the UI element for vertical (in-line) drop target.\n\t */ _createDropTargetPosition(writer) {\n        return writer.createUIElement('span', {\n            class: 'ck ck-clipboard-drop-target-position'\n        }, function(domDocument) {\n            const domElement = this.toDomElement(domDocument);\n            // Using word joiner to make this marker as high as text and also making text not break on marker.\n            domElement.append('\\u2060', domDocument.createElement('span'), '\\u2060');\n            return domElement;\n        });\n    }\n    /**\n\t * Updates the horizontal drop target line.\n\t */ _updateDropTargetLine(range) {\n        const editing = this.editor.editing;\n        const nodeBefore = range.start.nodeBefore;\n        const nodeAfter = range.start.nodeAfter;\n        const nodeParent = range.start.parent;\n        const viewElementBefore = nodeBefore ? editing.mapper.toViewElement(nodeBefore) : null;\n        const domElementBefore = viewElementBefore ? editing.view.domConverter.mapViewToDom(viewElementBefore) : null;\n        const viewElementAfter = nodeAfter ? editing.mapper.toViewElement(nodeAfter) : null;\n        const domElementAfter = viewElementAfter ? editing.view.domConverter.mapViewToDom(viewElementAfter) : null;\n        const viewElementParent = editing.mapper.toViewElement(nodeParent);\n        if (!viewElementParent) {\n            return;\n        }\n        const domElementParent = editing.view.domConverter.mapViewToDom(viewElementParent);\n        const domScrollableRect = this._getScrollableRect(viewElementParent);\n        const { scrollX, scrollY } = global.window;\n        const rectBefore = domElementBefore ? new Rect(domElementBefore) : null;\n        const rectAfter = domElementAfter ? new Rect(domElementAfter) : null;\n        const rectParent = new Rect(domElementParent).excludeScrollbarsAndBorders();\n        const above = rectBefore ? rectBefore.bottom : rectParent.top;\n        const below = rectAfter ? rectAfter.top : rectParent.bottom;\n        const parentStyle = global.window.getComputedStyle(domElementParent);\n        const top = above <= below ? (above + below) / 2 : below;\n        if (domScrollableRect.top < top && top < domScrollableRect.bottom) {\n            const left = rectParent.left + parseFloat(parentStyle.paddingLeft);\n            const right = rectParent.right - parseFloat(parentStyle.paddingRight);\n            const leftClamped = Math.max(left + scrollX, domScrollableRect.left);\n            const rightClamped = Math.min(right + scrollX, domScrollableRect.right);\n            this._dropTargetLineView.set({\n                isVisible: true,\n                left: leftClamped,\n                top: top + scrollY,\n                width: rightClamped - leftClamped\n            });\n        } else {\n            this._dropTargetLineView.isVisible = false;\n        }\n    }\n    /**\n\t * Finds the closest scrollable element rect for the given view element.\n\t */ _getScrollableRect(viewElement) {\n        const rootName = viewElement.root.rootName;\n        let domScrollable;\n        if (this._scrollables.has(rootName)) {\n            domScrollable = this._scrollables.get(rootName).domElement;\n        } else {\n            const domElement = this.editor.editing.view.domConverter.mapViewToDom(viewElement);\n            domScrollable = findScrollableElement(domElement);\n            this._domEmitter.listenTo(domScrollable, 'scroll', this._reconvertMarkerThrottled, {\n                usePassive: true\n            });\n            const resizeObserver = new ResizeObserver(domScrollable, this._reconvertMarkerThrottled);\n            this._scrollables.set(rootName, {\n                domElement: domScrollable,\n                resizeObserver\n            });\n        }\n        return new Rect(domScrollable).excludeScrollbarsAndBorders();\n    }\n}\n/**\n * Returns fixed selection range for given position and target element.\n */ function findDropTargetRange(editor, targetViewElement, targetViewRanges, clientX, clientY, blockMode, draggedRange) {\n    const model = editor.model;\n    const mapper = editor.editing.mapper;\n    const targetModelElement = getClosestMappedModelElement(editor, targetViewElement);\n    let modelElement = targetModelElement;\n    while(modelElement){\n        if (!blockMode) {\n            if (model.schema.checkChild(modelElement, '$text')) {\n                if (targetViewRanges) {\n                    const targetViewPosition = targetViewRanges[0].start;\n                    const targetModelPosition = mapper.toModelPosition(targetViewPosition);\n                    const canDropOnPosition = !draggedRange || Array.from(draggedRange.getItems()).every((item)=>model.schema.checkChild(targetModelPosition, item));\n                    if (canDropOnPosition) {\n                        if (model.schema.checkChild(targetModelPosition, '$text')) {\n                            return model.createRange(targetModelPosition);\n                        } else if (targetViewPosition) {\n                            // This is the case of dropping inside a span wrapper of an inline image.\n                            return findDropTargetRangeForElement(editor, getClosestMappedModelElement(editor, targetViewPosition.parent), clientX, clientY);\n                        }\n                    }\n                }\n            } else if (model.schema.isInline(modelElement)) {\n                return findDropTargetRangeForElement(editor, modelElement, clientX, clientY);\n            }\n        }\n        if (model.schema.isBlock(modelElement)) {\n            return findDropTargetRangeForElement(editor, modelElement, clientX, clientY);\n        } else if (model.schema.checkChild(modelElement, '$block')) {\n            const childNodes = Array.from(modelElement.getChildren()).filter((node)=>node.is('element') && !shouldIgnoreElement(editor, node));\n            let startIndex = 0;\n            let endIndex = childNodes.length;\n            if (endIndex == 0) {\n                return model.createRange(model.createPositionAt(modelElement, 'end'));\n            }\n            while(startIndex < endIndex - 1){\n                const middleIndex = Math.floor((startIndex + endIndex) / 2);\n                const side = findElementSide(editor, childNodes[middleIndex], clientX, clientY);\n                if (side == 'before') {\n                    endIndex = middleIndex;\n                } else {\n                    startIndex = middleIndex;\n                }\n            }\n            return findDropTargetRangeForElement(editor, childNodes[startIndex], clientX, clientY);\n        }\n        modelElement = modelElement.parent;\n    }\n    return null;\n}\n/**\n * Returns true for elements which should be ignored.\n */ function shouldIgnoreElement(editor, modelElement) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const viewElement = mapper.toViewElement(modelElement);\n    if (!viewElement) {\n        return true;\n    }\n    const domElement = domConverter.mapViewToDom(viewElement);\n    return global.window.getComputedStyle(domElement).float != 'none';\n}\n/**\n * Returns target range relative to the given element.\n */ function findDropTargetRangeForElement(editor, modelElement, clientX, clientY) {\n    const model = editor.model;\n    return model.createRange(model.createPositionAt(modelElement, findElementSide(editor, modelElement, clientX, clientY)));\n}\n/**\n * Resolves whether drop marker should be before or after the given element.\n */ function findElementSide(editor, modelElement, clientX, clientY) {\n    const mapper = editor.editing.mapper;\n    const domConverter = editor.editing.view.domConverter;\n    const viewElement = mapper.toViewElement(modelElement);\n    const domElement = domConverter.mapViewToDom(viewElement);\n    const rect = new Rect(domElement);\n    if (editor.model.schema.isInline(modelElement)) {\n        return clientX < (rect.left + rect.right) / 2 ? 'before' : 'after';\n    } else {\n        return clientY < (rect.top + rect.bottom) / 2 ? 'before' : 'after';\n    }\n}\n/**\n * Returns the closest model element for the specified view element.\n */ function getClosestMappedModelElement(editor, element) {\n    const mapper = editor.editing.mapper;\n    const view = editor.editing.view;\n    const targetModelElement = mapper.toModelElement(element);\n    if (targetModelElement) {\n        return targetModelElement;\n    }\n    // Find mapped ancestor if the target is inside not mapped element (for example inline code element).\n    const viewPosition = view.createPositionBefore(element);\n    const viewElement = mapper.findMappedViewAncestor(viewPosition);\n    return mapper.toModelElement(viewElement);\n}\n/**\n * Returns the closest scrollable ancestor DOM element.\n *\n * It is assumed that `domNode` is attached to the document.\n */ function findScrollableElement(domNode) {\n    let domElement = domNode;\n    do {\n        domElement = domElement.parentElement;\n        const overflow = global.window.getComputedStyle(domElement).overflowY;\n        if (overflow == 'auto' || overflow == 'scroll') {\n            break;\n        }\n    }while (domElement.tagName != 'BODY')\n    return domElement;\n}\n\n/**\n * Integration of a block Drag and Drop support with the block toolbar.\n *\n * @internal\n */ class DragDropBlockToolbar extends Plugin {\n    /**\n\t * Whether current dragging is started by block toolbar button dragging.\n\t */ _isBlockDragging = false;\n    /**\n\t * DOM Emitter.\n\t */ _domEmitter = new (DomEmitterMixin())();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DragDropBlockToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly)=>{\n            if (isReadOnly) {\n                this.forceDisabled('readOnlyMode');\n                this._isBlockDragging = false;\n            } else {\n                this.clearForceDisabled('readOnlyMode');\n            }\n        });\n        if (env.isAndroid) {\n            this.forceDisabled('noAndroidSupport');\n        }\n        if (editor.plugins.has('BlockToolbar')) {\n            const blockToolbar = editor.plugins.get('BlockToolbar');\n            const element = blockToolbar.buttonView.element;\n            this._domEmitter.listenTo(element, 'dragstart', (evt, data)=>this._handleBlockDragStart(data));\n            this._domEmitter.listenTo(global.document, 'dragover', (evt, data)=>this._handleBlockDragging(data));\n            this._domEmitter.listenTo(global.document, 'drop', (evt, data)=>this._handleBlockDragging(data));\n            this._domEmitter.listenTo(global.document, 'dragend', ()=>this._handleBlockDragEnd(), {\n                useCapture: true\n            });\n            if (this.isEnabled) {\n                element.setAttribute('draggable', 'true');\n            }\n            this.on('change:isEnabled', (evt, name, isEnabled)=>{\n                element.setAttribute('draggable', isEnabled ? 'true' : 'false');\n            });\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._domEmitter.stopListening();\n        return super.destroy();\n    }\n    /**\n\t * The `dragstart` event handler.\n\t */ _handleBlockDragStart(domEvent) {\n        if (!this.isEnabled) {\n            return;\n        }\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const view = this.editor.editing.view;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const draggedRange = model.createRange(model.createPositionBefore(blocks[0]), model.createPositionAfter(blocks[blocks.length - 1]));\n        model.change((writer)=>writer.setSelection(draggedRange));\n        this._isBlockDragging = true;\n        view.focus();\n        view.getObserver(ClipboardObserver).onDomEvent(domEvent);\n    }\n    /**\n\t * The `dragover` and `drop` event handler.\n\t */ _handleBlockDragging(domEvent) {\n        if (!this.isEnabled || !this._isBlockDragging) {\n            return;\n        }\n        const clientX = domEvent.clientX + (this.editor.locale.contentLanguageDirection == 'ltr' ? 100 : -100);\n        const clientY = domEvent.clientY;\n        const target = document.elementFromPoint(clientX, clientY);\n        const view = this.editor.editing.view;\n        if (!target || !target.closest('.ck-editor__editable')) {\n            return;\n        }\n        view.getObserver(ClipboardObserver).onDomEvent({\n            ...domEvent,\n            type: domEvent.type,\n            dataTransfer: domEvent.dataTransfer,\n            target,\n            clientX,\n            clientY,\n            preventDefault: ()=>domEvent.preventDefault(),\n            stopPropagation: ()=>domEvent.stopPropagation()\n        });\n    }\n    /**\n\t * The `dragend` event handler.\n\t */ _handleBlockDragEnd() {\n        this._isBlockDragging = false;\n    }\n}\n\n// Drag and drop events overview:\n//\n//                ┌──────────────────┐\n//                │     mousedown    │   Sets the draggable attribute.\n//                └─────────┬────────┘\n//                          │\n//                          └─────────────────────┐\n//                          │                     │\n//                          │           ┌─────────V────────┐\n//                          │           │      mouseup     │   Dragging did not start, removes the draggable attribute.\n//                          │           └──────────────────┘\n//                          │\n//                ┌─────────V────────┐   Retrieves the selected model.DocumentFragment\n//                │     dragstart    │   and converts it to view.DocumentFragment.\n//                └─────────┬────────┘\n//                          │\n//                ┌─────────V────────┐   Processes view.DocumentFragment to text/html and text/plain\n//                │  clipboardOutput │   and stores the results in data.dataTransfer.\n//                └─────────┬────────┘\n//                          │\n//                          │   DOM dragover\n//                          ┌────────────┐\n//                          │            │\n//                ┌─────────V────────┐   │\n//                │     dragging     │   │   Updates the drop target marker.\n//                └─────────┬────────┘   │\n//                          │            │\n//            ┌─────────────└────────────┘\n//            │             │            │\n//            │   ┌─────────V────────┐   │\n//            │   │     dragleave    │   │   Removes the drop target marker.\n//            │   └─────────┬────────┘   │\n//            │             │            │\n//        ┌───│─────────────┘            │\n//        │   │             │            │\n//        │   │   ┌─────────V────────┐   │\n//        │   │   │     dragenter    │   │   Focuses the editor view.\n//        │   │   └─────────┬────────┘   │\n//        │   │             │            │\n//        │   │             └────────────┘\n//        │   │\n//        │   └─────────────┐\n//        │   │             │\n//        │   │   ┌─────────V────────┐\n//        └───┐   │       drop       │   (The default handler of the clipboard pipeline).\n//            │   └─────────┬────────┘\n//            │             │\n//            │   ┌─────────V────────┐   Resolves the final data.targetRanges.\n//            │   │  clipboardInput  │   Aborts if dropping on dragged content.\n//            │   └─────────┬────────┘\n//            │             │\n//            │   ┌─────────V────────┐\n//            │   │  clipboardInput  │   (The default handler of the clipboard pipeline).\n//            │   └─────────┬────────┘\n//            │             │\n//            │ ┌───────────V───────────┐\n//            │ │  inputTransformation  │   (The default handler of the clipboard pipeline).\n//            │ └───────────┬───────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   Updates the document selection to drop range.\n//            │  └──────────┬──────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   (The default handler of the clipboard pipeline).\n//            │  └──────────┬──────────┘\n//            │             │\n//            │  ┌──────────V──────────┐\n//            │  │   contentInsertion  │   Removes the content from the original range if the insertion was successful.\n//            │  └──────────┬──────────┘\n//            │             │\n//            └─────────────┐\n//                          │\n//                ┌─────────V────────┐\n//                │      dragend     │   Removes the drop marker and cleans the state.\n//                └──────────────────┘\n//\n/**\n * The drag and drop feature. It works on top of the {@link module:clipboard/clipboardpipeline~ClipboardPipeline}.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n *\n * @internal\n */ class DragDrop extends Plugin {\n    /**\n\t * The live range over the original content that is being dragged.\n\t */ _draggedRange;\n    /**\n\t * The UID of current dragging that is used to verify if the drop started in the same editor as the drag start.\n\t *\n\t * **Note**: This is a workaround for broken 'dragend' events (they are not fired if the source text node got removed).\n\t */ _draggingUid;\n    /**\n\t * The reference to the model element that currently has a `draggable` attribute set (it is set while dragging).\n\t */ _draggableElement;\n    /**\n\t * A delayed callback removing draggable attributes.\n\t */ _clearDraggableAttributesDelayed = delay(()=>this._clearDraggableAttributes(), 40);\n    /**\n\t * Whether the dragged content can be dropped only in block context.\n\t */ // TODO handle drag from other editor instance\n    // TODO configure to use block, inline or both\n    _blockMode = false;\n    /**\n\t * DOM Emitter.\n\t */ _domEmitter = new (DomEmitterMixin())();\n    /**\n\t * The DOM element used to generate dragged preview image.\n\t */ _previewContainer;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DragDrop';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardPipeline,\n            Widget,\n            DragDropTarget,\n            DragDropBlockToolbar\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        this._draggedRange = null;\n        this._draggingUid = '';\n        this._draggableElement = null;\n        view.addObserver(ClipboardObserver);\n        view.addObserver(MouseObserver);\n        this._setupDragging();\n        this._setupContentInsertionIntegration();\n        this._setupClipboardInputIntegration();\n        this._setupDraggableAttributeHandling();\n        this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly)=>{\n            if (isReadOnly) {\n                this.forceDisabled('readOnlyMode');\n            } else {\n                this.clearForceDisabled('readOnlyMode');\n            }\n        });\n        this.on('change:isEnabled', (evt, name, isEnabled)=>{\n            if (!isEnabled) {\n                this._finalizeDragging(false);\n            }\n        });\n        if (env.isAndroid) {\n            this.forceDisabled('noAndroidSupport');\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        if (this._draggedRange) {\n            this._draggedRange.detach();\n            this._draggedRange = null;\n        }\n        if (this._previewContainer) {\n            this._previewContainer.remove();\n        }\n        this._domEmitter.stopListening();\n        this._clearDraggableAttributesDelayed.cancel();\n        return super.destroy();\n    }\n    /**\n\t * Drag and drop events handling.\n\t */ _setupDragging() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const dragDropTarget = editor.plugins.get(DragDropTarget);\n        // The handler for the drag start; it is responsible for setting data transfer object.\n        this.listenTo(viewDocument, 'dragstart', (evt, data)=>{\n            // Don't drag the editable element itself.\n            if (data.target && data.target.is('editableElement')) {\n                data.preventDefault();\n                return;\n            }\n            this._prepareDraggedRange(data.target);\n            if (!this._draggedRange) {\n                data.preventDefault();\n                return;\n            }\n            this._draggingUid = uid();\n            data.dataTransfer.effectAllowed = this.isEnabled ? 'copyMove' : 'copy';\n            data.dataTransfer.setData('application/ckeditor5-dragging-uid', this._draggingUid);\n            const draggedSelection = model.createSelection(this._draggedRange.toRange());\n            const clipboardPipeline = this.editor.plugins.get('ClipboardPipeline');\n            clipboardPipeline._fireOutputTransformationEvent(data.dataTransfer, draggedSelection, 'dragstart');\n            const { dataTransfer, domTarget, domEvent } = data;\n            const { clientX } = domEvent;\n            this._updatePreview({\n                dataTransfer,\n                domTarget,\n                clientX\n            });\n            data.stopPropagation();\n            if (!this.isEnabled) {\n                this._draggedRange.detach();\n                this._draggedRange = null;\n                this._draggingUid = '';\n            }\n        }, {\n            priority: 'low'\n        });\n        // The handler for finalizing drag and drop. It should always be triggered after dragging completes\n        // even if it was completed in a different application.\n        // Note: This is not fired if source text node got removed while downcasting a marker.\n        this.listenTo(viewDocument, 'dragend', (evt, data)=>{\n            this._finalizeDragging(!data.dataTransfer.isCanceled && data.dataTransfer.dropEffect == 'move');\n        }, {\n            priority: 'low'\n        });\n        // Reset block dragging mode even if dropped outside the editable.\n        this._domEmitter.listenTo(global.document, 'dragend', ()=>{\n            this._blockMode = false;\n        }, {\n            useCapture: true\n        });\n        // Dragging over the editable.\n        this.listenTo(viewDocument, 'dragenter', ()=>{\n            if (!this.isEnabled) {\n                return;\n            }\n            view.focus();\n        });\n        // Dragging out of the editable.\n        this.listenTo(viewDocument, 'dragleave', ()=>{\n            // We do not know if the mouse left the editor or just some element in it, so let us wait a few milliseconds\n            // to check if 'dragover' is not fired.\n            dragDropTarget.removeDropMarkerDelayed();\n        });\n        // Handler for moving dragged content over the target area.\n        this.listenTo(viewDocument, 'dragging', (evt, data)=>{\n            if (!this.isEnabled) {\n                data.dataTransfer.dropEffect = 'none';\n                return;\n            }\n            const { clientX, clientY } = data.domEvent;\n            dragDropTarget.updateDropMarker(data.target, data.targetRanges, clientX, clientY, this._blockMode, this._draggedRange);\n            // If this is content being dragged from another editor, moving out of current editor instance\n            // is not possible until 'dragend' event case will be fixed.\n            if (!this._draggedRange) {\n                data.dataTransfer.dropEffect = 'copy';\n            }\n            // In Firefox it is already set and effect allowed remains the same as originally set.\n            if (!env.isGecko) {\n                if (data.dataTransfer.effectAllowed == 'copy') {\n                    data.dataTransfer.dropEffect = 'copy';\n                } else if ([\n                    'all',\n                    'copyMove'\n                ].includes(data.dataTransfer.effectAllowed)) {\n                    data.dataTransfer.dropEffect = 'move';\n                }\n            }\n            evt.stop();\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * Integration with the `clipboardInput` event.\n\t */ _setupClipboardInputIntegration() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const dragDropTarget = editor.plugins.get(DragDropTarget);\n        // Update the event target ranges and abort dropping if dropping over itself.\n        this.listenTo(viewDocument, 'clipboardInput', (evt, data)=>{\n            if (data.method != 'drop') {\n                return;\n            }\n            const { clientX, clientY } = data.domEvent;\n            const targetRange = dragDropTarget.getFinalDropRange(data.target, data.targetRanges, clientX, clientY, this._blockMode, this._draggedRange);\n            if (!targetRange) {\n                this._finalizeDragging(false);\n                evt.stop();\n                return;\n            }\n            // Since we cannot rely on the drag end event, we must check if the local drag range is from the current drag and drop\n            // or it is from some previous not cleared one.\n            if (this._draggedRange && this._draggingUid != data.dataTransfer.getData('application/ckeditor5-dragging-uid')) {\n                this._draggedRange.detach();\n                this._draggedRange = null;\n                this._draggingUid = '';\n            }\n            // Do not do anything if some content was dragged within the same document to the same position.\n            const isMove = getFinalDropEffect(data.dataTransfer) == 'move';\n            if (isMove && this._draggedRange && this._draggedRange.containsRange(targetRange, true)) {\n                this._finalizeDragging(false);\n                evt.stop();\n                return;\n            }\n            // Override the target ranges with the one adjusted to the best one for a drop.\n            data.targetRanges = [\n                editor.editing.mapper.toViewRange(targetRange)\n            ];\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Integration with the `contentInsertion` event of the clipboard pipeline.\n\t */ _setupContentInsertionIntegration() {\n        const clipboardPipeline = this.editor.plugins.get(ClipboardPipeline);\n        clipboardPipeline.on('contentInsertion', (evt, data)=>{\n            if (!this.isEnabled || data.method !== 'drop') {\n                return;\n            }\n            // Update the selection to the target range in the same change block to avoid selection post-fixing\n            // and to be able to clone text attributes for plain text dropping.\n            const ranges = data.targetRanges.map((viewRange)=>this.editor.editing.mapper.toModelRange(viewRange));\n            this.editor.model.change((writer)=>writer.setSelection(ranges));\n        }, {\n            priority: 'high'\n        });\n        clipboardPipeline.on('contentInsertion', (evt, data)=>{\n            if (!this.isEnabled || data.method !== 'drop') {\n                return;\n            }\n            // Remove dragged range content, remove markers, clean after dragging.\n            const isMove = getFinalDropEffect(data.dataTransfer) == 'move';\n            // Whether any content was inserted (insertion might fail if the schema is disallowing some elements\n            // (for example an image caption allows only the content of a block but not blocks themselves.\n            // Some integrations might not return valid range (i.e., table pasting).\n            const isSuccess = !data.resultRange || !data.resultRange.isCollapsed;\n            this._finalizeDragging(isSuccess && isMove);\n        }, {\n            priority: 'lowest'\n        });\n    }\n    /**\n\t * Adds listeners that add the `draggable` attribute to the elements while the mouse button is down so the dragging could start.\n\t */ _setupDraggableAttributeHandling() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        // Add the 'draggable' attribute to the widget while pressing the selection handle.\n        // This is required for widgets to be draggable. In Chrome it will enable dragging text nodes.\n        this.listenTo(viewDocument, 'mousedown', (evt, data)=>{\n            // The lack of data can be caused by editor tests firing fake mouse events. This should not occur\n            // in real-life scenarios but this greatly simplifies editor tests that would otherwise fail a lot.\n            if (env.isAndroid || !data) {\n                return;\n            }\n            this._clearDraggableAttributesDelayed.cancel();\n            // Check if this is a mousedown over the widget (but not a nested editable).\n            let draggableElement = findDraggableWidget(data.target);\n            // Note: There is a limitation that if more than a widget is selected (a widget and some text)\n            // and dragging starts on the widget, then only the widget is dragged.\n            // If this was not a widget then we should check if we need to drag some text content.\n            // In Chrome set a 'draggable' attribute on closest editable to allow immediate dragging of the selected text range.\n            // In Firefox this is not needed. In Safari it makes the whole editable draggable (not just textual content).\n            // Disabled in read-only mode because draggable=\"true\" + contenteditable=\"false\" results\n            // in not firing selectionchange event ever, which makes the selection stuck in read-only mode.\n            if (env.isBlink && !editor.isReadOnly && !draggableElement && !viewDocument.selection.isCollapsed) {\n                const selectedElement = viewDocument.selection.getSelectedElement();\n                if (!selectedElement || !isWidget(selectedElement)) {\n                    draggableElement = viewDocument.selection.editableElement;\n                }\n            }\n            if (draggableElement) {\n                view.change((writer)=>{\n                    writer.setAttribute('draggable', 'true', draggableElement);\n                });\n                // Keep the reference to the model element in case the view element gets removed while dragging.\n                this._draggableElement = editor.editing.mapper.toModelElement(draggableElement);\n            }\n        });\n        // Remove the draggable attribute in case no dragging started (only mousedown + mouseup).\n        this.listenTo(viewDocument, 'mouseup', ()=>{\n            if (!env.isAndroid) {\n                this._clearDraggableAttributesDelayed();\n            }\n        });\n    }\n    /**\n\t * Removes the `draggable` attribute from the element that was used for dragging.\n\t */ _clearDraggableAttributes() {\n        const editing = this.editor.editing;\n        editing.view.change((writer)=>{\n            // Remove 'draggable' attribute.\n            if (this._draggableElement && this._draggableElement.root.rootName != '$graveyard') {\n                writer.removeAttribute('draggable', editing.mapper.toViewElement(this._draggableElement));\n            }\n            this._draggableElement = null;\n        });\n    }\n    /**\n\t * Deletes the dragged content from its original range and clears the dragging state.\n\t *\n\t * @param moved Whether the move succeeded.\n\t */ _finalizeDragging(moved) {\n        const editor = this.editor;\n        const model = editor.model;\n        const dragDropTarget = editor.plugins.get(DragDropTarget);\n        dragDropTarget.removeDropMarker();\n        this._clearDraggableAttributes();\n        if (editor.plugins.has('WidgetToolbarRepository')) {\n            const widgetToolbarRepository = editor.plugins.get('WidgetToolbarRepository');\n            widgetToolbarRepository.clearForceDisabled('dragDrop');\n        }\n        this._draggingUid = '';\n        if (this._previewContainer) {\n            this._previewContainer.remove();\n            this._previewContainer = undefined;\n        }\n        if (!this._draggedRange) {\n            return;\n        }\n        // Delete moved content.\n        if (moved && this.isEnabled) {\n            model.change((writer)=>{\n                const selection = model.createSelection(this._draggedRange);\n                model.deleteContent(selection, {\n                    doNotAutoparagraph: true\n                });\n                // Check result selection if it does not require auto-paragraphing of empty container.\n                const selectionParent = selection.getFirstPosition().parent;\n                if (selectionParent.isEmpty && !model.schema.checkChild(selectionParent, '$text') && model.schema.checkChild(selectionParent, 'paragraph')) {\n                    writer.insertElement('paragraph', selectionParent, 0);\n                }\n            });\n        }\n        this._draggedRange.detach();\n        this._draggedRange = null;\n    }\n    /**\n\t * Sets the dragged source range based on event target and document selection.\n\t */ _prepareDraggedRange(target) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Check if this is dragstart over the widget (but not a nested editable).\n        const draggableWidget = target ? findDraggableWidget(target) : null;\n        if (draggableWidget) {\n            const modelElement = editor.editing.mapper.toModelElement(draggableWidget);\n            this._draggedRange = LiveRange.fromRange(model.createRangeOn(modelElement));\n            this._blockMode = model.schema.isBlock(modelElement);\n            // Disable toolbars so they won't obscure the drop area.\n            if (editor.plugins.has('WidgetToolbarRepository')) {\n                const widgetToolbarRepository = editor.plugins.get('WidgetToolbarRepository');\n                widgetToolbarRepository.forceDisabled('dragDrop');\n            }\n            return;\n        }\n        // If this was not a widget we should check if we need to drag some text content.\n        if (selection.isCollapsed && !selection.getFirstPosition().parent.isEmpty) {\n            return;\n        }\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const draggedRange = selection.getFirstRange();\n        if (blocks.length == 0) {\n            this._draggedRange = LiveRange.fromRange(draggedRange);\n            return;\n        }\n        const blockRange = getRangeIncludingFullySelectedParents(model, blocks);\n        if (blocks.length > 1) {\n            this._draggedRange = LiveRange.fromRange(blockRange);\n            this._blockMode = true;\n        // TODO block mode for dragging from outside editor? or inline? or both?\n        } else if (blocks.length == 1) {\n            const touchesBlockEdges = draggedRange.start.isTouching(blockRange.start) && draggedRange.end.isTouching(blockRange.end);\n            this._draggedRange = LiveRange.fromRange(touchesBlockEdges ? blockRange : draggedRange);\n            this._blockMode = touchesBlockEdges;\n        }\n        model.change((writer)=>writer.setSelection(this._draggedRange.toRange()));\n    }\n    /**\n\t * Updates the dragged preview image.\n\t */ _updatePreview({ dataTransfer, domTarget, clientX }) {\n        const view = this.editor.editing.view;\n        const editable = view.document.selection.editableElement;\n        const domEditable = view.domConverter.mapViewToDom(editable);\n        const computedStyle = global.window.getComputedStyle(domEditable);\n        if (!this._previewContainer) {\n            this._previewContainer = createElement(global.document, 'div', {\n                style: 'position: fixed; left: -999999px;'\n            });\n            global.document.body.appendChild(this._previewContainer);\n        } else if (this._previewContainer.firstElementChild) {\n            this._previewContainer.removeChild(this._previewContainer.firstElementChild);\n        }\n        const domRect = new Rect(domEditable);\n        // If domTarget is inside the editable root, browsers will display the preview correctly by themselves.\n        if (domEditable.contains(domTarget)) {\n            return;\n        }\n        const domEditablePaddingLeft = parseFloat(computedStyle.paddingLeft);\n        const preview = createElement(global.document, 'div');\n        preview.className = 'ck ck-content';\n        preview.style.width = computedStyle.width;\n        preview.style.paddingLeft = `${domRect.left - clientX + domEditablePaddingLeft}px`;\n        /**\n\t\t * Set white background in drag and drop preview if iOS.\n\t\t * Check: https://github.com/ckeditor/ckeditor5/issues/15085\n\t\t */ if (env.isiOS) {\n            preview.style.backgroundColor = 'white';\n        }\n        view.domConverter.setContentOf(preview, dataTransfer.getData('text/html'));\n        dataTransfer.setDragImage(preview, 0, 0);\n        this._previewContainer.appendChild(preview);\n    }\n}\n/**\n * Returns the drop effect that should be a result of dragging the content.\n * This function is handling a quirk when checking the effect in the 'drop' DOM event.\n */ function getFinalDropEffect(dataTransfer) {\n    if (env.isGecko) {\n        return dataTransfer.dropEffect;\n    }\n    return [\n        'all',\n        'copyMove'\n    ].includes(dataTransfer.effectAllowed) ? 'move' : 'copy';\n}\n/**\n * Returns a widget element that should be dragged.\n */ function findDraggableWidget(target) {\n    // This is directly an editable so not a widget for sure.\n    if (target.is('editableElement')) {\n        return null;\n    }\n    // TODO: Let's have a isWidgetSelectionHandleDomElement() helper in ckeditor5-widget utils.\n    if (target.hasClass('ck-widget__selection-handle')) {\n        return target.findAncestor(isWidget);\n    }\n    // Direct hit on a widget.\n    if (isWidget(target)) {\n        return target;\n    }\n    // Find closest ancestor that is either a widget or an editable element...\n    const ancestor = target.findAncestor((node)=>isWidget(node) || node.is('editableElement'));\n    // ...and if closer was the widget then enable dragging it.\n    if (isWidget(ancestor)) {\n        return ancestor;\n    }\n    return null;\n}\n/**\n * Recursively checks if common parent of provided elements doesn't have any other children. If that's the case,\n * it returns range including this parent. Otherwise, it returns only the range from first to last element.\n *\n * Example:\n *\n * <blockQuote>\n *   <paragraph>[Test 1</paragraph>\n *   <paragraph>Test 2</paragraph>\n *   <paragraph>Test 3]</paragraph>\n * <blockQuote>\n *\n * Because all elements inside the `blockQuote` are selected, the range is extended to include the `blockQuote` too.\n * If only first and second paragraphs would be selected, the range would not include it.\n */ function getRangeIncludingFullySelectedParents(model, elements) {\n    const firstElement = elements[0];\n    const lastElement = elements[elements.length - 1];\n    const parent = firstElement.getCommonAncestor(lastElement);\n    const startPosition = model.createPositionBefore(firstElement);\n    const endPosition = model.createPositionAfter(lastElement);\n    if (parent && parent.is('element') && !model.schema.isLimit(parent)) {\n        const parentRange = model.createRangeOn(parent);\n        const touchesStart = startPosition.isTouching(parentRange.start);\n        const touchesEnd = endPosition.isTouching(parentRange.end);\n        if (touchesStart && touchesEnd) {\n            // Selection includes all elements in the parent.\n            return getRangeIncludingFullySelectedParents(model, [\n                parent\n            ]);\n        }\n    }\n    return model.createRange(startPosition, endPosition);\n}\n\n/**\n * The plugin detects the user's intention to paste plain text.\n *\n * For example, it detects the <kbd>Ctrl/Cmd</kbd> + <kbd>Shift</kbd> + <kbd>V</kbd> keystroke.\n */ class PastePlainText extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PastePlainText';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const selection = model.document.selection;\n        view.addObserver(ClipboardObserver);\n        editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data)=>{\n            if (!isUnformattedInlineContent(data.content, model)) {\n                return;\n            }\n            model.change((writer)=>{\n                // Formatting attributes should be preserved.\n                const textAttributes = Array.from(selection.getAttributes()).filter(([key])=>model.schema.getAttributeProperties(key).isFormatting);\n                if (!selection.isCollapsed) {\n                    model.deleteContent(selection, {\n                        doNotAutoparagraph: true\n                    });\n                }\n                // Also preserve other attributes if they survived the content deletion (because they were not fully selected).\n                // For example linkHref is not a formatting attribute but it should be preserved if pasted text was in the middle\n                // of a link.\n                textAttributes.push(...selection.getAttributes());\n                const range = writer.createRangeIn(data.content);\n                for (const item of range.getItems()){\n                    for (const attribute of textAttributes){\n                        if (model.schema.checkAttribute(item, attribute[0])) {\n                            writer.setAttribute(attribute[0], attribute[1], item);\n                        }\n                    }\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if specified `documentFragment` represents the unformatted inline content.\n */ function isUnformattedInlineContent(documentFragment, model) {\n    let range = model.createRangeIn(documentFragment);\n    // We consider three scenarios here. The document fragment may include:\n    //\n    // 1. Only text and inline objects. Then it could be unformatted inline content.\n    // 2. Exactly one block element on top-level, eg. <p>Foobar</p> or <h2>Title</h2>.\n    //    In this case, check this element content, it could be treated as unformatted inline content.\n    // 3. More block elements or block objects, then it is not unformatted inline content.\n    //\n    // We will check for scenario 2. specifically, and if it happens, we will unwrap it and follow with the regular algorithm.\n    //\n    if (documentFragment.childCount == 1) {\n        const child = documentFragment.getChild(0);\n        if (child.is('element') && model.schema.isBlock(child) && !model.schema.isObject(child) && !model.schema.isLimit(child)) {\n            // Scenario 2. as described above.\n            range = model.createRangeIn(child);\n        }\n    }\n    for (const child of range.getItems()){\n        if (!model.schema.isInline(child)) {\n            return false;\n        }\n        const attributeKeys = Array.from(child.getAttributeKeys());\n        if (attributeKeys.find((key)=>model.schema.getAttributeProperties(key).isFormatting)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * The clipboard feature.\n *\n * Read more about the clipboard integration in the {@glink framework/deep-dive/clipboard clipboard deep-dive} guide.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n * * {@link module:clipboard/clipboardpipeline~ClipboardPipeline}\n * * {@link module:clipboard/dragdrop~DragDrop}\n * * {@link module:clipboard/pasteplaintext~PastePlainText}\n */ class Clipboard extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Clipboard';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardMarkersUtils,\n            ClipboardPipeline,\n            DragDrop,\n            PastePlainText\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Copy selected content'),\n                    keystroke: 'CTRL+C'\n                },\n                {\n                    label: t('Paste content'),\n                    keystroke: 'CTRL+V'\n                },\n                {\n                    label: t('Paste content as plain text'),\n                    keystroke: 'CTRL+SHIFT+V'\n                }\n            ]\n        });\n    }\n}\n\nexport { Clipboard, ClipboardMarkersUtils, ClipboardPipeline, DragDrop, DragDropBlockToolbar, DragDropTarget, PastePlainText, plainTextToHtml };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ObservableMixin, insertToPriorityArray, EmitterMixin, CKEditorError, Config, Locale, Collection, KeystrokeHandler, setDataInElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { Model, StylesProcessor, DataController, EditingController, Conversion } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { EditorWatchdog, ContextWatchdog } from '@ckeditor/ckeditor5-watchdog/dist/index.js';\nimport { isFunction } from 'lodash-es';\n\n/**\n * The base class for CKEditor plugin classes.\n */ class Plugin extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The editor instance.\n\t *\n\t * Note that most editors implement the {@link module:core/editor/editor~Editor#ui} property.\n\t * However, editors with an external UI (i.e. Bootstrap-based) or a headless editor may not have this property or\n\t * throw an error when accessing it.\n\t *\n\t * Because of above, to make plugins more universal, it is recommended to split features into:\n\t *  - The \"editing\" part that uses the {@link module:core/editor/editor~Editor} class without `ui` property.\n\t *  - The \"UI\" part that uses the {@link module:core/editor/editor~Editor} class and accesses `ui` property.\n\t */ editor;\n    /**\n\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t */ _disableStack = new Set();\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super();\n        this.editor = editor;\n        this.set('isEnabled', true);\n    }\n    /**\n\t * Disables the plugin.\n\t *\n\t * Plugin may be disabled by multiple features or algorithms (at once). When disabling a plugin, unique id should be passed\n\t * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the plugin.\n\t * The plugin becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a plugin:\n\t *\n\t * ```ts\n\t * plugin.isEnabled; // -> true\n\t * plugin.forceDisabled( 'MyFeature' );\n\t * plugin.isEnabled; // -> false\n\t * plugin.clearForceDisabled( 'MyFeature' );\n\t * plugin.isEnabled; // -> true\n\t * ```\n\t *\n\t * Plugin disabled by multiple features:\n\t *\n\t * ```ts\n\t * plugin.forceDisabled( 'MyFeature' );\n\t * plugin.forceDisabled( 'OtherFeature' );\n\t * plugin.clearForceDisabled( 'MyFeature' );\n\t * plugin.isEnabled; // -> false\n\t * plugin.clearForceDisabled( 'OtherFeature' );\n\t * plugin.isEnabled; // -> true\n\t * ```\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t * ```ts\n\t * plugin.forceDisabled( 'MyFeature' );\n\t * plugin.forceDisabled( 'MyFeature' );\n\t * plugin.clearForceDisabled( 'MyFeature' );\n\t * plugin.isEnabled; // -> true\n\t * ```\n\t *\n\t * **Note:** some plugins or algorithms may have more complex logic when it comes to enabling or disabling certain plugins,\n\t * so the plugin might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the plugin.\n\t */ forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable$1, {\n                priority: 'highest'\n            });\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n\t *\n\t * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */ clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable$1);\n            this.isEnabled = true;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this.stopListening();\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isContextPlugin() {\n        return false;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return false;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isPremiumPlugin() {\n        return false;\n    }\n}\n/**\n * Helper function that forces plugin to be disabled.\n */ function forceDisable$1(evt) {\n    evt.return = false;\n    evt.stop();\n}\n\n/**\n * Base class for the CKEditor commands.\n *\n * Commands are the main way to manipulate the editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of the code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default, commands are disabled when the editor is in the {@link module:core/editor/editor~Editor#isReadOnly read-only} mode\n * but commands with the {@link module:core/command~Command#affectsData `affectsData`} flag set to `false` will not be disabled.\n */ class Command extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The editor on which this command will be used.\n\t */ editor;\n    /**\n\t * A flag indicating whether a command's `isEnabled` state should be changed depending on where the document\n\t * selection is placed.\n\t *\n\t * By default, it is set to `true`. If the document selection is placed in a\n\t * {@link module:engine/model/model~Model#canEditAt non-editable} place (such as non-editable root), the command becomes disabled.\n\t *\n\t * The flag should be changed to `false` in a concrete command's constructor if the command should not change its `isEnabled`\n\t * accordingly to the document selection.\n\t */ _isEnabledBasedOnSelection;\n    /**\n\t * A flag indicating whether a command execution changes the editor data or not.\n\t *\n\t * @see #affectsData\n\t */ _affectsData;\n    /**\n\t * Holds identifiers for {@link #forceDisabled} mechanism.\n\t */ _disableStack;\n    /**\n\t * Creates a new `Command` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t */ constructor(editor){\n        super();\n        this.editor = editor;\n        this.set('value', undefined);\n        this.set('isEnabled', false);\n        this._affectsData = true;\n        this._isEnabledBasedOnSelection = true;\n        this._disableStack = new Set();\n        this.decorate('execute');\n        // By default, every command is refreshed when changes are applied to the model.\n        this.listenTo(this.editor.model.document, 'change', ()=>{\n            this.refresh();\n        });\n        this.listenTo(editor, 'change:isReadOnly', ()=>{\n            this.refresh();\n        });\n        // By default, commands are disabled if the selection is in non-editable place or editor is in read-only mode.\n        this.on('set:isEnabled', (evt)=>{\n            if (!this.affectsData) {\n                return;\n            }\n            const selection = editor.model.document.selection;\n            const selectionInGraveyard = selection.getFirstPosition().root.rootName == '$graveyard';\n            const canEditAtSelection = !selectionInGraveyard && editor.model.canEditAt(selection);\n            // Disable if editor is read only, or when selection is in a place which cannot be edited.\n            //\n            // Checking `editor.isReadOnly` is needed for all commands that have `_isEnabledBasedOnSelection == false`.\n            // E.g. undo does not base on selection, but affects data and should be disabled when the editor is in read-only mode.\n            if (editor.isReadOnly || this._isEnabledBasedOnSelection && !canEditAtSelection) {\n                evt.return = false;\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n        this.on('execute', (evt)=>{\n            if (!this.isEnabled) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * A flag indicating whether a command execution changes the editor data or not.\n\t *\n\t * Commands with `affectsData` set to `false` will not be automatically disabled in\n\t * the {@link module:core/editor/editor~Editor#isReadOnly read-only mode} and\n\t * {@glink features/read-only#related-features other editor modes} with restricted user write permissions.\n\t *\n\t * **Note:** You do not have to set it for your every command. It is `true` by default.\n\t *\n\t * @default true\n\t */ get affectsData() {\n        return this._affectsData;\n    }\n    set affectsData(affectsData) {\n        this._affectsData = affectsData;\n    }\n    /**\n\t * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n\t * in this method.\n\t *\n\t * This method is automatically called when\n\t * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n\t */ refresh() {\n        this.isEnabled = true;\n    }\n    /**\n\t * Disables the command.\n\t *\n\t * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n\t * (e.g. the feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n\t * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n\t *\n\t * Disabling and enabling a command:\n\t *\n\t * ```ts\n\t * command.isEnabled; // -> true\n\t * command.forceDisabled( 'MyFeature' );\n\t * command.isEnabled; // -> false\n\t * command.clearForceDisabled( 'MyFeature' );\n\t * command.isEnabled; // -> true\n\t * ```\n\t *\n\t * Command disabled by multiple features:\n\t *\n\t * ```ts\n\t * command.forceDisabled( 'MyFeature' );\n\t * command.forceDisabled( 'OtherFeature' );\n\t * command.clearForceDisabled( 'MyFeature' );\n\t * command.isEnabled; // -> false\n\t * command.clearForceDisabled( 'OtherFeature' );\n\t * command.isEnabled; // -> true\n\t * ```\n\t *\n\t * Multiple disabling with the same identifier is redundant:\n\t *\n\t * ```ts\n\t * command.forceDisabled( 'MyFeature' );\n\t * command.forceDisabled( 'MyFeature' );\n\t * command.clearForceDisabled( 'MyFeature' );\n\t * command.isEnabled; // -> true\n\t * ```\n\t *\n\t * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n\t * so the command might be still disabled after {@link #clearForceDisabled} was used.\n\t *\n\t * @param id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n\t */ forceDisabled(id) {\n        this._disableStack.add(id);\n        if (this._disableStack.size == 1) {\n            this.on('set:isEnabled', forceDisable, {\n                priority: 'highest'\n            });\n            this.isEnabled = false;\n        }\n    }\n    /**\n\t * Clears forced disable previously set through {@link #forceDisabled}. See {@link #forceDisabled}.\n\t *\n\t * @param id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n\t */ clearForceDisabled(id) {\n        this._disableStack.delete(id);\n        if (this._disableStack.size == 0) {\n            this.off('set:isEnabled', forceDisable);\n            this.refresh();\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n\t * to the command.\n\t *\n\t * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n\t * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n\t *\n\t * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n\t *\n\t * This method may return a value, which would be forwarded all the way down to the\n\t * {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n\t *\n\t * @fires execute\n\t */ execute(...args) {\n        return undefined;\n    }\n    /**\n\t * Destroys the command.\n\t */ destroy() {\n        this.stopListening();\n    }\n}\n/**\n * Helper function that forces command to be disabled.\n */ function forceDisable(evt) {\n    evt.return = false;\n    evt.stop();\n}\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command, the first enabled command with highest priority will be executed.\n *\n * ```ts\n * const multiCommand = new MultiCommand( editor );\n *\n * const commandFoo = new Command( editor );\n * const commandBar = new Command( editor );\n *\n * // Register a child command.\n * multiCommand.registerChildCommand( commandFoo );\n * // Register a child command with a low priority.\n * multiCommand.registerChildCommand( commandBar, { priority: 'low' } );\n *\n * // Enable one of the commands.\n * commandBar.isEnabled = true;\n *\n * multiCommand.execute(); // Will execute commandBar.\n * ```\n */ class MultiCommand extends Command {\n    /**\n\t * Registered child commands definitions.\n\t */ _childCommandsDefinitions = [];\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n    // Override base command refresh(): the command's state is changed when one of child commands changes states.\n    }\n    /**\n\t * Executes the first enabled command which has the highest priority of all registered child commands.\n\t *\n\t * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n\t */ execute(...args) {\n        const command = this._getFirstEnabledCommand();\n        return !!command && command.execute(args);\n    }\n    /**\n\t * Registers a child command.\n\t *\n\t * @param options An object with configuration options.\n\t * @param options.priority Priority of a command to register.\n\t */ registerChildCommand(command, options = {}) {\n        insertToPriorityArray(this._childCommandsDefinitions, {\n            command,\n            priority: options.priority || 'normal'\n        });\n        // Change multi-command enabled state when one of registered commands changes state.\n        command.on('change:isEnabled', ()=>this._checkEnabled());\n        this._checkEnabled();\n    }\n    /**\n\t * Checks if any of child commands is enabled.\n\t */ _checkEnabled() {\n        this.isEnabled = !!this._getFirstEnabledCommand();\n    }\n    /**\n\t * Returns a first enabled command with the highest priority or `undefined` if none of them is enabled.\n\t */ _getFirstEnabledCommand() {\n        const commandDefinition = this._childCommandsDefinitions.find(({ command })=>command.isEnabled);\n        return commandDefinition && commandDefinition.command;\n    }\n}\n\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n */ class PluginCollection extends /* #__PURE__ */ EmitterMixin() {\n    _context;\n    _plugins = new Map();\n    /**\n\t * A map of plugin constructors that can be retrieved by their names.\n\t */ _availablePlugins;\n    /**\n\t * Map of {@link module:core/contextplugin~ContextPlugin context plugins} which can be retrieved by their constructors or instances.\n\t */ _contextPlugins;\n    /**\n\t * Creates an instance of the plugin collection class.\n\t * Allows loading and initializing plugins and their dependencies.\n\t * Allows providing a list of already loaded plugins. These plugins will not be destroyed along with this collection.\n\t *\n\t * @param availablePlugins Plugins (constructors) which the collection will be able to use\n\t * when {@link module:core/plugincollection~PluginCollection#init} is used with the plugin names (strings, instead of constructors).\n\t * Usually, the editor will pass its built-in plugins to the collection so they can later be\n\t * used in `config.plugins` or `config.removePlugins` by names.\n\t * @param contextPlugins A list of already initialized plugins represented by a `[ PluginConstructor, pluginInstance ]` pair.\n\t */ constructor(context, availablePlugins = [], contextPlugins = []){\n        super();\n        this._context = context;\n        this._availablePlugins = new Map();\n        for (const PluginConstructor of availablePlugins){\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n        this._contextPlugins = new Map();\n        for (const [PluginConstructor, pluginInstance] of contextPlugins){\n            this._contextPlugins.set(PluginConstructor, pluginInstance);\n            this._contextPlugins.set(pluginInstance, PluginConstructor);\n            // To make it possible to require a plugin by its name.\n            if (PluginConstructor.pluginName) {\n                this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n            }\n        }\n    }\n    /**\n\t * Iterable interface.\n\t *\n\t * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n\t */ *[Symbol.iterator]() {\n        for (const entry of this._plugins){\n            if (typeof entry[0] == 'function') {\n                yield entry;\n            }\n        }\n    }\n    /**\n\t * Gets the plugin instance by its constructor or name.\n\t *\n\t * ```ts\n\t * // Check if 'Clipboard' plugin was loaded.\n\t * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t * \t// Get clipboard plugin instance\n\t * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n\t *\n\t * \tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n\t * \t\t// Do something on clipboard input.\n\t * \t} );\n\t * }\n\t * ```\n\t *\n\t * **Note**: This method will throw an error if a plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n\t * to check if a plugin is available.\n\t *\n\t * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n\t */ get(key) {\n        const plugin = this._plugins.get(key);\n        if (!plugin) {\n            let pluginName = key;\n            if (typeof key == 'function') {\n                pluginName = key.pluginName || key.name;\n            }\n            /**\n\t\t\t * The plugin is not loaded and could not be obtained.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n\t\t\t * the plugin collection.\n\t\t\t *\n\t\t\t * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n\t\t\t * to check if a plugin was loaded.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-loaded\n\t\t\t * @param plugin The name of the plugin which is not loaded.\n\t\t\t */ throw new CKEditorError('plugincollection-plugin-not-loaded', this._context, {\n                plugin: pluginName\n            });\n        }\n        return plugin;\n    }\n    /**\n\t * Checks if a plugin is loaded.\n\t *\n\t * ```ts\n\t * // Check if the 'Clipboard' plugin was loaded.\n\t * if ( editor.plugins.has( 'ClipboardPipeline' ) ) {\n\t * \t// Now use the clipboard plugin instance:\n\t * \tconst clipboard = editor.plugins.get( 'ClipboardPipeline' );\n\t *\n\t * \t// ...\n\t * }\n\t * ```\n\t *\n\t * @param key The plugin constructor or {@link module:core/plugin~PluginStaticMembers#pluginName name}.\n\t */ has(key) {\n        return this._plugins.has(key);\n    }\n    /**\n\t * Initializes a set of plugins and adds them to the collection.\n\t *\n\t * @param plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * or {@link module:core/plugin~PluginStaticMembers#pluginName plugin names}.\n\t * @param pluginsToRemove Names of the plugins or plugin constructors\n\t * that should not be loaded (despite being specified in the `plugins` array).\n\t * @param pluginsSubstitutions An array of {@link module:core/plugin~PluginInterface plugin constructors}\n\t * that will be used to replace plugins of the same names that were passed in `plugins` or that are in their dependency tree.\n\t * A useful option for replacing built-in plugins while creating tests (for mocking their APIs). Plugins that will be replaced\n\t * must follow these rules:\n\t *   * The new plugin must be a class.\n\t *   * The new plugin must be named.\n\t *   * Both plugins must not depend on other plugins.\n\t * @returns A promise which gets resolved once all plugins are loaded and available in the collection.\n\t */ init(plugins, pluginsToRemove = [], pluginsSubstitutions = []) {\n        // Plugin initialization procedure consists of 2 main steps:\n        // 1) collecting all available plugin constructors,\n        // 2) verification whether all required plugins can be instantiated.\n        //\n        // In the first step, all plugin constructors, available in the provided `plugins` array and inside\n        // plugin's dependencies (from the `Plugin.requires` array), are recursively collected and added to the existing\n        // `this._availablePlugins` map, but without any verification at the given moment. Performing the verification\n        // at this point (during the plugin constructor searching) would cause false errors to occur, that some plugin\n        // is missing but in fact it may be defined further in the array as the dependency of other plugin. After\n        // traversing the entire dependency tree, it will be checked if all required \"top level\" plugins are available.\n        //\n        // In the second step, the list of plugins that have not been explicitly removed is traversed to get all the\n        // plugin constructors to be instantiated in the correct order and to validate against some rules. Finally, if\n        // no plugin is missing and no other error has been found, they all will be instantiated.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const context = this._context;\n        findAvailablePluginConstructors(plugins);\n        validatePlugins(plugins);\n        const pluginsToLoad = plugins.filter((plugin)=>!isPluginRemoved(plugin, pluginsToRemove));\n        const pluginConstructors = [\n            ...getPluginConstructors(pluginsToLoad)\n        ];\n        substitutePlugins(pluginConstructors, pluginsSubstitutions);\n        const pluginInstances = loadPlugins(pluginConstructors);\n        return initPlugins(pluginInstances, 'init').then(()=>initPlugins(pluginInstances, 'afterInit')).then(()=>pluginInstances);\n        function isPluginConstructor(plugin) {\n            return typeof plugin === 'function';\n        }\n        function isContextPlugin(plugin) {\n            return isPluginConstructor(plugin) && !!plugin.isContextPlugin;\n        }\n        function isPluginRemoved(plugin, pluginsToRemove) {\n            return pluginsToRemove.some((removedPlugin)=>{\n                if (removedPlugin === plugin) {\n                    return true;\n                }\n                if (getPluginName(plugin) === removedPlugin) {\n                    return true;\n                }\n                if (getPluginName(removedPlugin) === plugin) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        function getPluginName(plugin) {\n            return isPluginConstructor(plugin) ? plugin.pluginName || plugin.name : plugin;\n        }\n        function findAvailablePluginConstructors(plugins, processed = new Set()) {\n            plugins.forEach((plugin)=>{\n                if (!isPluginConstructor(plugin)) {\n                    return;\n                }\n                if (processed.has(plugin)) {\n                    return;\n                }\n                processed.add(plugin);\n                if (plugin.pluginName && !that._availablePlugins.has(plugin.pluginName)) {\n                    that._availablePlugins.set(plugin.pluginName, plugin);\n                }\n                if (plugin.requires) {\n                    findAvailablePluginConstructors(plugin.requires, processed);\n                }\n            });\n        }\n        function getPluginConstructors(plugins, processed = new Set()) {\n            return plugins.map((plugin)=>{\n                return isPluginConstructor(plugin) ? plugin : that._availablePlugins.get(plugin);\n            }).reduce((result, plugin)=>{\n                if (processed.has(plugin)) {\n                    return result;\n                }\n                processed.add(plugin);\n                if (plugin.requires) {\n                    validatePlugins(plugin.requires, plugin);\n                    getPluginConstructors(plugin.requires, processed).forEach((plugin)=>result.add(plugin));\n                }\n                return result.add(plugin);\n            }, new Set());\n        }\n        function validatePlugins(plugins, parentPluginConstructor = null) {\n            plugins.map((plugin)=>{\n                return isPluginConstructor(plugin) ? plugin : that._availablePlugins.get(plugin) || plugin;\n            }).forEach((plugin)=>{\n                checkMissingPlugin(plugin, parentPluginConstructor);\n                checkContextPlugin(plugin, parentPluginConstructor);\n                checkRemovedPlugin(plugin, parentPluginConstructor);\n            });\n        }\n        function checkMissingPlugin(plugin, parentPluginConstructor) {\n            if (isPluginConstructor(plugin)) {\n                return;\n            }\n            if (parentPluginConstructor) {\n                /**\n\t\t\t\t * A required \"soft\" dependency was not found on the plugin list.\n\t\t\t\t *\n\t\t\t\t * When configuring the editor, either prior to building (via\n\t\t\t\t * {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}) or when\n\t\t\t\t * creating a new instance of the editor (e.g. via\n\t\t\t\t * {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`}), you need to provide\n\t\t\t\t * some of the dependencies for other plugins that you used.\n\t\t\t\t *\n\t\t\t\t * This error is thrown when one of these dependencies was not provided. The name of the missing plugin\n\t\t\t\t * can be found in `missingPlugin` and the plugin that required it in `requiredBy`.\n\t\t\t\t *\n\t\t\t\t * In order to resolve it, you need to import the missing plugin and add it to the\n\t\t\t\t * current list of plugins (`Editor.builtinPlugins` or `config.plugins`/`config.extraPlugins`).\n\t\t\t\t *\n\t\t\t\t * Soft requirements were introduced in version 26.0.0. If you happen to stumble upon this error\n\t\t\t\t * when upgrading to version 26.0.0, read also the\n\t\t\t\t * {@glink updating/guides/update-to-26 Migration to 26.0.0} guide.\n\t\t\t\t *\n\t\t\t\t * @error plugincollection-soft-required\n\t\t\t\t * @param missingPlugin The name of the required plugin.\n\t\t\t\t * @param requiredBy The name of the plugin that requires the other plugin.\n\t\t\t\t */ throw new CKEditorError('plugincollection-soft-required', context, {\n                    missingPlugin: plugin,\n                    requiredBy: getPluginName(parentPluginConstructor)\n                });\n            }\n            /**\n\t\t\t * A plugin is not available and could not be loaded.\n\t\t\t *\n\t\t\t * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n\t\t\t * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n\t\t\t * property.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the CKEditor 5 Builds},\n\t\t\t * it means that you try to enable a plugin which was not included in that build. This may be due to a typo\n\t\t\t * in the plugin name or simply because that plugin is not a part of this build.\n\t\t\t *\n\t\t\t * Predefined builds are a deprecated solution and we strongly advise\n\t\t\t * {@glink updating/nim-migration/migration-to-new-installation-methods migrating to new installation methods}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n\t\t\t * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n\t\t\t * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n\t\t\t * provide each plugin through a reference (as a constructor function). Check out the examples in the\n\t\t\t * {@glink getting-started/installation/quick-start Quick start} guide.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-not-found\n\t\t\t * @param plugin The name of the plugin which could not be loaded.\n\t\t\t */ throw new CKEditorError('plugincollection-plugin-not-found', context, {\n                plugin\n            });\n        }\n        function checkContextPlugin(plugin, parentPluginConstructor) {\n            if (!isContextPlugin(parentPluginConstructor)) {\n                return;\n            }\n            if (isContextPlugin(plugin)) {\n                return;\n            }\n            /**\n\t\t\t * If a plugin is a context plugin, all plugins it requires should also be context plugins\n\t\t\t * instead of plugins. In other words, if one plugin can be used in the context,\n\t\t\t * all its requirements should also be ready to be used in the context. Note that the context\n\t\t\t * provides only a part of the API provided by the editor. If one plugin needs a full\n\t\t\t * editor API, all plugins which require it are considered as plugins that need a full\n\t\t\t * editor API.\n\t\t\t *\n\t\t\t * @error plugincollection-context-required\n\t\t\t * @param plugin The name of the required plugin.\n\t\t\t * @param requiredBy The name of the parent plugin.\n\t\t\t */ throw new CKEditorError('plugincollection-context-required', context, {\n                plugin: getPluginName(plugin),\n                requiredBy: getPluginName(parentPluginConstructor)\n            });\n        }\n        function checkRemovedPlugin(plugin, parentPluginConstructor) {\n            if (!parentPluginConstructor) {\n                return;\n            }\n            if (!isPluginRemoved(plugin, pluginsToRemove)) {\n                return;\n            }\n            /**\n\t\t\t * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n\t\t\t *\n\t\t\t * @error plugincollection-required\n\t\t\t * @param plugin The name of the required plugin.\n\t\t\t * @param requiredBy The name of the parent plugin.\n\t\t\t */ throw new CKEditorError('plugincollection-required', context, {\n                plugin: getPluginName(plugin),\n                requiredBy: getPluginName(parentPluginConstructor)\n            });\n        }\n        function loadPlugins(pluginConstructors) {\n            return pluginConstructors.map((PluginConstructor)=>{\n                let pluginInstance = that._contextPlugins.get(PluginConstructor);\n                pluginInstance = pluginInstance || new PluginConstructor(context);\n                that._add(PluginConstructor, pluginInstance);\n                return pluginInstance;\n            });\n        }\n        function initPlugins(pluginInstances, method) {\n            return pluginInstances.reduce((promise, plugin)=>{\n                if (!plugin[method]) {\n                    return promise;\n                }\n                if (that._contextPlugins.has(plugin)) {\n                    return promise;\n                }\n                return promise.then(plugin[method].bind(plugin));\n            }, Promise.resolve());\n        }\n        /**\n\t\t * Replaces plugin constructors with the specified set of plugins.\n\t\t */ function substitutePlugins(pluginConstructors, pluginsSubstitutions) {\n            for (const pluginItem of pluginsSubstitutions){\n                if (typeof pluginItem != 'function') {\n                    /**\n\t\t\t\t\t * The plugin replacing an existing plugin must be a function.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replace-plugin-invalid-type\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-replace-plugin-invalid-type', null, {\n                        pluginItem\n                    });\n                }\n                const pluginName = pluginItem.pluginName;\n                if (!pluginName) {\n                    /**\n\t\t\t\t\t * The plugin replacing an existing plugin must have a name.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replace-plugin-missing-name\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-replace-plugin-missing-name', null, {\n                        pluginItem\n                    });\n                }\n                if (pluginItem.requires && pluginItem.requires.length) {\n                    /**\n\t\t\t\t\t * The plugin replacing an existing plugin cannot depend on other plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-cannot-have-dependencies\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-plugin-for-replacing-cannot-have-dependencies', null, {\n                        pluginName\n                    });\n                }\n                const pluginToReplace = that._availablePlugins.get(pluginName);\n                if (!pluginToReplace) {\n                    /**\n\t\t\t\t\t * The replaced plugin does not exist in the\n\t\t\t\t\t * {@link module:core/plugincollection~PluginCollection available plugins} collection.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-not-exist\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-plugin-for-replacing-not-exist', null, {\n                        pluginName\n                    });\n                }\n                const indexInPluginConstructors = pluginConstructors.indexOf(pluginToReplace);\n                if (indexInPluginConstructors === -1) {\n                    // The Context feature can substitute plugins as well.\n                    // It may happen that the editor will be created with the given context, where the plugin for substitute\n                    // was already replaced. In such a case, we don't want to do it again.\n                    if (that._contextPlugins.has(pluginToReplace)) {\n                        return;\n                    }\n                    /**\n\t\t\t\t\t * The replaced plugin will not be loaded so it cannot be replaced.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-plugin-for-replacing-not-loaded\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-plugin-for-replacing-not-loaded', null, {\n                        pluginName\n                    });\n                }\n                if (pluginToReplace.requires && pluginToReplace.requires.length) {\n                    /**\n\t\t\t\t\t * The replaced plugin cannot depend on other plugins.\n\t\t\t\t\t *\n\t\t\t\t\t * @error plugincollection-replaced-plugin-cannot-have-dependencies\n\t\t\t\t\t */ throw new CKEditorError('plugincollection-replaced-plugin-cannot-have-dependencies', null, {\n                        pluginName\n                    });\n                }\n                pluginConstructors.splice(indexInPluginConstructors, 1, pluginItem);\n                that._availablePlugins.set(pluginName, pluginItem);\n            }\n        }\n    }\n    /**\n\t * Destroys all loaded plugins.\n\t */ destroy() {\n        const promises = [];\n        for (const [, pluginInstance] of this){\n            if (typeof pluginInstance.destroy == 'function' && !this._contextPlugins.has(pluginInstance)) {\n                promises.push(pluginInstance.destroy());\n            }\n        }\n        return Promise.all(promises);\n    }\n    /**\n\t * Adds the plugin to the collection. Exposed mainly for testing purposes.\n\t *\n\t * @param PluginConstructor The plugin constructor.\n\t * @param plugin The instance of the plugin.\n\t */ _add(PluginConstructor, plugin) {\n        this._plugins.set(PluginConstructor, plugin);\n        const pluginName = PluginConstructor.pluginName;\n        if (!pluginName) {\n            return;\n        }\n        if (this._plugins.has(pluginName)) {\n            /**\n\t\t\t * Two plugins with the same {@link module:core/plugin~PluginStaticMembers#pluginName} were loaded.\n\t\t\t * This will lead to runtime conflicts between these plugins.\n\t\t\t *\n\t\t\t * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n\t\t\t * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n\t\t\t * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n\t\t\t *\n\t\t\t * Check your import paths and the list of plugins passed to\n\t\t\t * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n\t\t\t * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t\t\t *\n\t\t\t * Predefined builds are a deprecated solution and we strongly advise\n\t\t\t * {@glink updating/nim-migration/migration-to-new-installation-methods migrating to new installation methods}.\n\t\t\t *\n\t\t\t * The second option is that your `node_modules/` directory contains duplicated versions of the same\n\t\t\t * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n\t\t\t * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n\t\t\t * of some packages, their dependencies may need to be installed in more than one version which may lead to this\n\t\t\t * warning.\n\t\t\t *\n\t\t\t * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n\t\t\t * the dependencies of this plugin are being duplicated.\n\t\t\t * They are already built into that editor build and now get added for the second time as dependencies\n\t\t\t * of the plugin you are installing.\n\t\t\t *\n\t\t\t * @error plugincollection-plugin-name-conflict\n\t\t\t * @param pluginName The duplicated plugin name.\n\t\t\t * @param plugin1 The first plugin constructor.\n\t\t\t * @param plugin2 The second plugin constructor.\n\t\t\t */ throw new CKEditorError('plugincollection-plugin-name-conflict', null, {\n                pluginName,\n                plugin1: this._plugins.get(pluginName).constructor,\n                plugin2: PluginConstructor\n            });\n        }\n        this._plugins.set(pluginName, plugin);\n    }\n}\n\n/**\n * Provides a common, higher-level environment for solutions that use multiple {@link module:core/editor/editor~Editor editors}\n * or plugins that work outside the editor. Use it instead of {@link module:core/editor/editor~Editor.create `Editor.create()`}\n * in advanced application integrations.\n *\n * All configuration options passed to a context will be used as default options for the editor instances initialized in that context.\n *\n * {@link module:core/contextplugin~ContextPlugin Context plugins} passed to a context instance will be shared among all\n * editor instances initialized in this context. These will be the same plugin instances for all the editors.\n *\n * **Note:** The context can only be initialized with {@link module:core/contextplugin~ContextPlugin context plugins}\n * (e.g. [comments](https://ckeditor.com/collaboration/comments/)). Regular {@link module:core/plugin~Plugin plugins} require an\n * editor instance to work and cannot be added to a context.\n *\n * **Note:** You can add a context plugin to an editor instance, though.\n *\n * If you are using multiple editor instances on one page and use any context plugins, create a context to share the configuration and\n * plugins among these editors. Some plugins will use the information about all existing editors to better integrate between them.\n *\n * If you are using plugins that do not require an editor to work (e.g. [comments](https://ckeditor.com/collaboration/comments/)),\n * enable and configure them using the context.\n *\n * If you are using only a single editor on each page, use {@link module:core/editor/editor~Editor.create `Editor.create()`} instead.\n * In such a case, a context instance will be created by the editor instance in a transparent way.\n *\n * See {@link ~Context.create `Context.create()`} for usage examples.\n */ class Context {\n    /**\n\t * Stores all the configurations specific to this context instance.\n\t */ config;\n    /**\n\t * The plugins loaded and in use by this context instance.\n\t */ plugins;\n    locale;\n    /**\n\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t */ t;\n    /**\n\t * A list of editors that this context instance is injected to.\n\t */ editors;\n    /**\n\t * The default configuration which is built into the `Context` class.\n\t *\n\t * It is used in CKEditor 5 builds featuring `Context` to provide the default configuration options which are later used during the\n\t * context initialization.\n\t *\n\t * ```ts\n\t * Context.defaultConfig = {\n\t * \tfoo: 1,\n\t * \tbar: 2\n\t * };\n\t *\n\t * Context\n\t * \t.create()\n\t * \t.then( context => {\n\t * \t\tcontext.config.get( 'foo' ); // -> 1\n\t * \t\tcontext.config.get( 'bar' ); // -> 2\n\t * \t} );\n\t *\n\t * // The default options can be overridden by the configuration passed to create().\n\t * Context\n\t * \t.create( { bar: 3 } )\n\t * \t.then( context => {\n\t * \t\tcontext.config.get( 'foo' ); // -> 1\n\t * \t\tcontext.config.get( 'bar' ); // -> 3\n\t * \t} );\n\t * ```\n\t *\n\t * See also {@link module:core/context~Context.builtinPlugins `Context.builtinPlugins`}\n\t * and {@link module:core/editor/editor~Editor.defaultConfig `Editor.defaultConfig`}.\n\t */ static defaultConfig;\n    /**\n\t * An array of plugins built into the `Context` class.\n\t *\n\t * It is used in CKEditor 5 builds featuring `Context` to provide a list of context plugins which are later automatically initialized\n\t * during the context initialization.\n\t *\n\t * They will be automatically initialized by `Context` unless `config.plugins` is passed.\n\t *\n\t * ```ts\n\t * // Build some context plugins into the Context class first.\n\t * Context.builtinPlugins = [ FooPlugin, BarPlugin ];\n\t *\n\t * // Normally, you need to define config.plugins, but since Context.builtinPlugins was\n\t * // defined, now you can call create() without any configuration.\n\t * Context\n\t * \t.create()\n\t * \t.then( context => {\n\t * \t\tcontext.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n\t * \t\tcontext.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n\t * \t} );\n\t * ```\n\t *\n\t * See also {@link module:core/context~Context.defaultConfig `Context.defaultConfig`}\n\t * and {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n\t */ static builtinPlugins;\n    /**\n\t * Reference to the editor which created the context.\n\t * Null when the context was created outside of the editor.\n\t *\n\t * It is used to destroy the context when removing the editor that has created the context.\n\t */ _contextOwner = null;\n    /**\n\t * Creates a context instance with a given configuration.\n\t *\n\t * Usually not to be used directly. See the static {@link module:core/context~Context.create `create()`} method.\n\t *\n\t * @param config The context configuration.\n\t */ constructor(config){\n        // We don't pass translations to the config, because its behavior of splitting keys\n        // with dots (e.g. `resize.width` => `resize: { width }`) breaks the translations.\n        const { translations, ...rest } = config || {};\n        this.config = new Config(rest, this.constructor.defaultConfig);\n        const availablePlugins = this.constructor.builtinPlugins;\n        this.config.define('plugins', availablePlugins);\n        this.plugins = new PluginCollection(this, availablePlugins);\n        const languageConfig = this.config.get('language') || {};\n        this.locale = new Locale({\n            uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n            contentLanguage: this.config.get('language.content'),\n            translations\n        });\n        this.t = this.locale.t;\n        this.editors = new Collection();\n    }\n    /**\n\t * Loads and initializes plugins specified in the configuration.\n\t *\n\t * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n\t */ initPlugins() {\n        const plugins = this.config.get('plugins') || [];\n        const substitutePlugins = this.config.get('substitutePlugins') || [];\n        // Plugins for substitution should be checked as well.\n        for (const Plugin of plugins.concat(substitutePlugins)){\n            if (typeof Plugin != 'function') {\n                /**\n\t\t\t\t * Only a constructor function is allowed as a {@link module:core/contextplugin~ContextPlugin context plugin}.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-constructor-only\n\t\t\t\t */ throw new CKEditorError('context-initplugins-constructor-only', null, {\n                    Plugin\n                });\n            }\n            if (Plugin.isContextPlugin !== true) {\n                /**\n\t\t\t\t * Only a plugin marked as a {@link module:core/contextplugin~ContextPlugin.isContextPlugin context plugin}\n\t\t\t\t * is allowed to be used with a context.\n\t\t\t\t *\n\t\t\t\t * @error context-initplugins-invalid-plugin\n\t\t\t\t */ throw new CKEditorError('context-initplugins-invalid-plugin', null, {\n                    Plugin\n                });\n            }\n        }\n        return this.plugins.init(plugins, [], substitutePlugins);\n    }\n    /**\n\t * Destroys the context instance and all editors used with the context,\n\t * releasing all resources used by the context.\n\t *\n\t * @returns A promise that resolves once the context instance is fully destroyed.\n\t */ destroy() {\n        return Promise.all(Array.from(this.editors, (editor)=>editor.destroy())).then(()=>this.plugins.destroy());\n    }\n    /**\n\t * Adds a reference to the editor which is used with this context.\n\t *\n\t * When the given editor has created the context, the reference to this editor will be stored\n\t * as a {@link ~Context#_contextOwner}.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @internal\n\t * @param isContextOwner Stores the given editor as a context owner.\n\t */ _addEditor(editor, isContextOwner) {\n        if (this._contextOwner) {\n            /**\n\t\t\t * Cannot add multiple editors to the context which is created by the editor.\n\t\t\t *\n\t\t\t * @error context-addeditor-private-context\n\t\t\t */ throw new CKEditorError('context-addeditor-private-context');\n        }\n        this.editors.add(editor);\n        if (isContextOwner) {\n            this._contextOwner = editor;\n        }\n    }\n    /**\n\t * Removes a reference to the editor which was used with this context.\n\t * When the context was created by the given editor, the context will be destroyed.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @internal\n\t * @return A promise that resolves once the editor is removed from the context or when the context was destroyed.\n\t */ _removeEditor(editor) {\n        if (this.editors.has(editor)) {\n            this.editors.remove(editor);\n        }\n        if (this._contextOwner === editor) {\n            return this.destroy();\n        }\n        return Promise.resolve();\n    }\n    /**\n\t * Returns the context configuration which will be copied to the editors created using this context.\n\t *\n\t * The configuration returned by this method has the plugins configuration removed &ndash; plugins are shared with all editors\n\t * through another mechanism.\n\t *\n\t * This method should only be used by the editor.\n\t *\n\t * @internal\n\t * @returns Configuration as a plain object.\n\t */ _getEditorConfig() {\n        const result = {};\n        for (const name of this.config.names()){\n            if (![\n                'plugins',\n                'removePlugins',\n                'extraPlugins'\n            ].includes(name)) {\n                result[name] = this.config.get(name);\n            }\n        }\n        return result;\n    }\n    /**\n\t * Creates and initializes a new context instance.\n\t *\n\t * ```ts\n\t * const commonConfig = { ... }; // Configuration for all the plugins and editors.\n\t * const editorPlugins = [ ... ]; // Regular plugins here.\n\t *\n\t * Context\n\t * \t.create( {\n\t * \t\t// Only context plugins here.\n\t * \t\tplugins: [ ... ],\n\t *\n\t * \t\t// Configure the language for all the editors (it cannot be overwritten).\n\t * \t\tlanguage: { ... },\n\t *\n\t * \t\t// Configuration for context plugins.\n\t * \t\tcomments: { ... },\n\t * \t\t...\n\t *\n\t * \t\t// Default configuration for editor plugins.\n\t * \t\ttoolbar: { ... },\n\t * \t\timage: { ... },\n\t * \t\t...\n\t * \t} )\n\t * \t.then( context => {\n\t * \t\tconst promises = [];\n\t *\n\t * \t\tpromises.push( ClassicEditor.create(\n\t * \t\t\tdocument.getElementById( 'editor1' ),\n\t * \t\t\t{\n\t * \t\t\t\teditorPlugins,\n\t * \t\t\t\tcontext\n\t * \t\t\t}\n\t * \t\t) );\n\t *\n\t * \t\tpromises.push( ClassicEditor.create(\n\t * \t\t\tdocument.getElementById( 'editor2' ),\n\t * \t\t\t{\n\t * \t\t\t\teditorPlugins,\n\t * \t\t\t\tcontext,\n\t * \t\t\t\ttoolbar: { ... } // You can overwrite the configuration of the context.\n\t * \t\t\t}\n\t * \t\t) );\n\t *\n\t * \t\treturn Promise.all( promises );\n\t * \t} );\n\t * ```\n\t *\n\t * @param config The context configuration.\n\t * @returns A promise resolved once the context is ready. The promise resolves with the created context instance.\n\t */ static create(config) {\n        return new Promise((resolve)=>{\n            const context = new this(config);\n            resolve(context.initPlugins().then(()=>context));\n        });\n    }\n}\n\n/**\n * The base class for {@link module:core/context~Context} plugin classes.\n *\n * A context plugin can either be initialized for an {@link module:core/editor/editor~Editor editor} or for\n * a {@link module:core/context~Context context}. In other words, it can either\n * work within one editor instance or with one or more editor instances that use a single context.\n * It is the context plugin's role to implement handling for both modes.\n *\n * There are a few rules for interaction between the editor plugins and context plugins:\n *\n * * A context plugin can require another context plugin.\n * * An {@link module:core/plugin~Plugin editor plugin} can require a context plugin.\n * * A context plugin MUST NOT require an {@link module:core/plugin~Plugin editor plugin}.\n */ class ContextPlugin extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The context or editor instance.\n\t */ context;\n    /**\n\t * Creates a new plugin instance.\n\t */ constructor(context){\n        super();\n        this.context = context;\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this.stopListening();\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isContextPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return false;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isPremiumPlugin() {\n        return false;\n    }\n}\n\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */ class CommandCollection {\n    /**\n\t * Command map.\n\t */ _commands;\n    /**\n\t * Creates collection instance.\n\t */ constructor(){\n        this._commands = new Map();\n    }\n    /**\n\t * Registers a new command.\n\t *\n\t * @param commandName The name of the command.\n\t */ add(commandName, command) {\n        this._commands.set(commandName, command);\n    }\n    /**\n\t * Retrieves a command from the collection.\n\t *\n\t * @param commandName The name of the command.\n\t */ get(commandName) {\n        return this._commands.get(commandName);\n    }\n    /**\n\t * Executes a command.\n\t *\n\t * @param commandName The name of the command.\n\t * @param commandParams Command parameters.\n\t * @returns The value returned by the {@link module:core/command~Command#execute `command.execute()`}.\n\t */ execute(commandName, ...commandParams) {\n        const command = this.get(commandName);\n        if (!command) {\n            /**\n\t\t\t * Command does not exist.\n\t\t\t *\n\t\t\t * @error commandcollection-command-not-found\n\t\t\t * @param commandName Name of the command.\n\t\t\t */ throw new CKEditorError('commandcollection-command-not-found', this, {\n                commandName\n            });\n        }\n        return command.execute(...commandParams);\n    }\n    /**\n\t * Returns iterator of command names.\n\t */ *names() {\n        yield* this._commands.keys();\n    }\n    /**\n\t * Returns iterator of command instances.\n\t */ *commands() {\n        yield* this._commands.values();\n    }\n    /**\n\t * Iterable interface.\n\t *\n\t * Returns `[ commandName, commandInstance ]` pairs.\n\t */ [Symbol.iterator]() {\n        return this._commands[Symbol.iterator]();\n    }\n    /**\n\t * Destroys all collection commands.\n\t */ destroy() {\n        for (const command of this.commands()){\n            command.destroy();\n        }\n    }\n}\n\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n * ```ts\n * editor.keystrokes.set( 'Ctrl+Z', 'undo' );\n * editor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n * editor.keystrokes.set( 'Ctrl+Y', 'redo' );\n * ```\n */ class EditingKeystrokeHandler extends KeystrokeHandler {\n    /**\n\t * The editor instance.\n\t */ editor;\n    /**\n\t * Creates an instance of the keystroke handler.\n\t */ constructor(editor){\n        super();\n        this.editor = editor;\n    }\n    /**\n\t * Registers a handler for the specified keystroke.\n\t *\n\t * The handler can be specified as a command name or a callback.\n\t *\n\t * @param keystroke Keystroke defined in a format accepted by\n\t * the {@link module:utils/keyboard~parseKeystroke} function.\n\t * @param callback If a string is passed, then the keystroke will\n\t * {@link module:core/editor/editor~Editor#execute execute a command}.\n\t * If a function, then it will be called with the\n\t * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n\t * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n\t * @param options Additional options.\n\t * @param options.priority The priority of the keystroke callback. The higher the priority value\n\t * the sooner the callback will be executed. Keystrokes having the same priority\n\t * are called in the order they were added.\n\t */ set(keystroke, callback, options = {}) {\n        if (typeof callback == 'string') {\n            const commandName = callback;\n            callback = (evtData, cancel)=>{\n                this.editor.execute(commandName);\n                cancel();\n            };\n        }\n        super.set(keystroke, callback, options);\n    }\n}\n\nconst DEFAULT_CATEGORY_ID = 'contentEditing';\nconst DEFAULT_GROUP_ID = 'common';\n/**\n * A common namespace for various accessibility features of the editor.\n *\n * **Information about editor keystrokes**\n *\n * * The information about keystrokes available in the editor is stored in the {@link #keystrokeInfos} property.\n * * New info entries can be added using the {@link #addKeystrokeInfoCategory}, {@link #addKeystrokeInfoGroup},\n * and {@link #addKeystrokeInfos} methods.\n */ class Accessibility {\n    /**\n\t * Stores information about keystrokes brought by editor features for the users to interact with the editor, mainly\n\t * keystroke combinations and their accessible labels.\n\t *\n\t * This information is particularly useful for screen reader and other assistive technology users. It gets displayed\n\t * by the {@link module:ui/editorui/accessibilityhelp/accessibilityhelp~AccessibilityHelp Accessibility help} dialog.\n\t *\n\t * Keystrokes are organized in categories and groups. They can be added using ({@link #addKeystrokeInfoCategory},\n\t * {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfos}) methods.\n\t *\n\t * Please note that:\n\t * * two categories are always available:\n\t *   * `'contentEditing'` for keystrokes related to content creation,\n\t *   * `'navigation'` for keystrokes related to navigation in the UI and the content.\n\t * * unless specified otherwise, new keystrokes are added into the `'contentEditing'` category and the `'common'`\n\t * keystroke group within that category while using the {@link #addKeystrokeInfos} method.\n\t */ keystrokeInfos = new Map();\n    /**\n\t * The editor instance.\n\t */ _editor;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        this._editor = editor;\n        const isMenuBarVisible = editor.config.get('menuBar.isVisible');\n        const t = editor.locale.t;\n        this.addKeystrokeInfoCategory({\n            id: DEFAULT_CATEGORY_ID,\n            label: t('Content editing keystrokes'),\n            description: t('These keyboard shortcuts allow for quick access to content editing features.')\n        });\n        const navigationKeystrokes = [\n            {\n                label: t('Close contextual balloons, dropdowns, and dialogs'),\n                keystroke: 'Esc'\n            },\n            {\n                label: t('Open the accessibility help dialog'),\n                keystroke: 'Alt+0'\n            },\n            {\n                label: t('Move focus between form fields (inputs, buttons, etc.)'),\n                keystroke: [\n                    [\n                        'Tab'\n                    ],\n                    [\n                        'Shift+Tab'\n                    ]\n                ]\n            },\n            {\n                label: t('Move focus to the toolbar, navigate between toolbars'),\n                keystroke: 'Alt+F10',\n                mayRequireFn: true\n            },\n            {\n                label: t('Navigate through the toolbar or menu bar'),\n                keystroke: [\n                    [\n                        'arrowup'\n                    ],\n                    [\n                        'arrowright'\n                    ],\n                    [\n                        'arrowdown'\n                    ],\n                    [\n                        'arrowleft'\n                    ]\n                ]\n            },\n            {\n                // eslint-disable-next-line max-len\n                label: t('Execute the currently focused button. Executing buttons that interact with the editor content moves the focus back to the content.'),\n                keystroke: [\n                    [\n                        'Enter'\n                    ],\n                    [\n                        'Space'\n                    ]\n                ]\n            }\n        ];\n        if (isMenuBarVisible) {\n            navigationKeystrokes.push({\n                label: t('Move focus to the menu bar, navigate between menu bars'),\n                keystroke: 'Alt+F9',\n                mayRequireFn: true\n            });\n        }\n        this.addKeystrokeInfoCategory({\n            id: 'navigation',\n            label: t('User interface and content navigation keystrokes'),\n            description: t('Use the following keystrokes for more efficient navigation in the CKEditor 5 user interface.'),\n            groups: [\n                {\n                    id: 'common',\n                    keystrokes: navigationKeystrokes\n                }\n            ]\n        });\n    }\n    /**\n\t * Adds a top-level category in the {@link #keystrokeInfos keystroke information database} with a label and optional description.\n\t *\n\t * Categories organize keystrokes and help users to find the right keystroke. Each category can have multiple groups\n\t * of keystrokes that narrow down the context in which the keystrokes are available. Every keystroke category comes\n\t * with a `'common'` group by default.\n\t *\n\t * By default, two categories are available:\n\t * * `'contentEditing'` for keystrokes related to content creation,\n\t * * `'navigation'` for keystrokes related to navigation in the UI and the content.\n\t *\n\t * To create a new keystroke category with new groups, use the following code:\n\t *\n\t * ```js\n\t * class MyPlugin extends Plugin {\n\t * \t// ...\n\t * \tinit() {\n\t * \t\tconst editor = this.editor;\n\t * \t\tconst t = editor.t;\n\t *\n\t * \t\t// ...\n\t *\n\t * \t\teditor.accessibility.addKeystrokeInfoCategory( {\n\t * \t\t\tid: 'myCategory',\n\t * \t\t\tlabel: t( 'My category' ),\n\t * \t\t\tdescription: t( 'My category description.' ),\n\t * \t\t\tgroups: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\tid: 'myGroup',\n\t * \t\t\t\t\tlabel: t( 'My keystroke group' ),\n\t * \t\t\t\t\tkeystrokes: [\n\t * \t\t\t\t\t\t{\n\t * \t\t\t\t\t\t\tlabel: t( 'Keystroke label 1' ),\n\t * \t\t\t\t\t\t\tkeystroke: 'Ctrl+Shift+N'\n\t * \t\t\t\t\t\t},\n\t * \t\t\t\t\t\t{\n\t * \t\t\t\t\t\t\tlabel: t( 'Keystroke label 2' ),\n\t * \t\t\t\t\t\t\tkeystroke: 'Ctrl+Shift+M'\n\t * \t\t\t\t\t\t}\n\t * \t\t\t\t\t]\n\t * \t\t\t\t}\n\t * \t\t\t]\n\t * \t\t};\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfos}.\n\t */ addKeystrokeInfoCategory({ id, label, description, groups }) {\n        this.keystrokeInfos.set(id, {\n            id,\n            label,\n            description,\n            groups: new Map()\n        });\n        this.addKeystrokeInfoGroup({\n            categoryId: id,\n            id: DEFAULT_GROUP_ID\n        });\n        if (groups) {\n            groups.forEach((group)=>{\n                this.addKeystrokeInfoGroup({\n                    categoryId: id,\n                    ...group\n                });\n            });\n        }\n    }\n    /**\n\t * Adds a group of keystrokes in a specific category to the {@link #keystrokeInfos keystroke information database}.\n\t *\n\t * Groups narrow down the context in which the keystrokes are available. When `categoryId` is not specified,\n\t * the group goes to the `'contentEditing'` category (default).\n\t *\n\t * To create a new group within an existing category, use the following code:\n\t *\n\t * ```js\n\t * class MyPlugin extends Plugin {\n\t * \t// ...\n\t * \tinit() {\n\t * \t\tconst editor = this.editor;\n\t * \t\tconst t = editor.t;\n\t *\n\t * \t\t// ...\n\t *\n\t * \t\teditor.accessibility.addKeystrokeInfoGroup( {\n\t * \t\t\tid: 'myGroup',\n\t * \t\t\tcategoryId: 'navigation',\n\t * \t\t\tlabel: t( 'My keystroke group' ),\n\t * \t\t\tkeystrokes: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\tlabel: t( 'Keystroke label 1' ),\n\t * \t\t\t\t\tkeystroke: 'Ctrl+Shift+N'\n\t * \t\t\t\t},\n\t * \t\t\t\t{\n\t * \t\t\t\t\tlabel: t( 'Keystroke label 2' ),\n\t * \t\t\t\t\tkeystroke: 'Ctrl+Shift+M'\n\t * \t\t\t\t}\n\t * \t\t\t]\n\t * \t\t} );\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoCategory}, and {@link #addKeystrokeInfos}.\n\t */ addKeystrokeInfoGroup({ categoryId = DEFAULT_CATEGORY_ID, id, label, keystrokes }) {\n        const category = this.keystrokeInfos.get(categoryId);\n        if (!category) {\n            throw new CKEditorError('accessibility-unknown-keystroke-info-category', this._editor, {\n                groupId: id,\n                categoryId\n            });\n        }\n        category.groups.set(id, {\n            id,\n            label,\n            keystrokes: keystrokes || []\n        });\n    }\n    /**\n\t * Adds information about keystrokes to the {@link #keystrokeInfos keystroke information database}.\n\t *\n\t * Keystrokes without specified `groupId` or `categoryId` go to the `'common'` group in the `'contentEditing'` category (default).\n\t *\n\t * To add a keystroke brought by your plugin (using default group and category), use the following code:\n\t *\n\t * ```js\n\t * class MyPlugin extends Plugin {\n\t * \t// ...\n\t * \tinit() {\n\t * \t\tconst editor = this.editor;\n\t * \t\tconst t = editor.t;\n\t *\n\t * \t\t// ...\n\t *\n\t * \t\teditor.accessibility.addKeystrokeInfos( {\n\t * \t\t\tkeystrokes: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\tlabel: t( 'Keystroke label' ),\n\t * \t\t\t\t\tkeystroke: 'CTRL+B'\n\t * \t\t\t\t}\n\t * \t\t\t]\n\t * \t\t} );\n\t * \t}\n\t * }\n\t * ```\n\t * To add a keystroke in a specific existing `'widget'` group in the default `'contentEditing'` category:\n\t *\n\t * ```js\n\t * class MyPlugin extends Plugin {\n\t * \t// ...\n\t * \tinit() {\n\t * \t\tconst editor = this.editor;\n\t * \t\tconst t = editor.t;\n\t *\n\t * \t\t// ...\n\t *\n\t * \t\teditor.accessibility.addKeystrokeInfos( {\n\t * \t\t\t// Add a keystroke to the existing \"widget\" group.\n\t * \t\t\tgroupId: 'widget',\n\t * \t\t\tkeystrokes: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\tlabel: t( 'A an action on a selected widget' ),\n\t * \t\t\t\t\tkeystroke: 'Ctrl+D',\n\t * \t\t\t\t}\n\t * \t\t\t]\n\t * \t\t} );\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * To add a keystroke to another existing category (using default group):\n\t *\n\t * ```js\n\t * class MyPlugin extends Plugin {\n\t * \t// ...\n\t * \tinit() {\n\t * \t\tconst editor = this.editor;\n\t * \t\tconst t = editor.t;\n\t *\n\t * \t\t// ...\n\t *\n\t * \t\teditor.accessibility.addKeystrokeInfos( {\n\t * \t\t\t// Add keystrokes to the \"navigation\" category (one of defaults).\n\t * \t\t\tcategoryId: 'navigation',\n\t * \t\t\tkeystrokes: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\tlabel: t( 'Keystroke label' ),\n\t * \t\t\t\t\tkeystroke: 'CTRL+B'\n\t * \t\t\t\t}\n\t * \t\t\t]\n\t * \t\t} );\n\t * \t}\n\t * }\n\t * ```\n\t *\n\t * See {@link #keystrokeInfos}, {@link #addKeystrokeInfoGroup}, and {@link #addKeystrokeInfoCategory}.\n\t */ addKeystrokeInfos({ categoryId = DEFAULT_CATEGORY_ID, groupId = DEFAULT_GROUP_ID, keystrokes }) {\n        if (!this.keystrokeInfos.has(categoryId)) {\n            /**\n\t\t\t * Cannot add keystrokes in an unknown category. Use\n\t\t\t * {@link module:core/accessibility~Accessibility#addKeystrokeInfoCategory}\n\t\t\t * to add a new category or make sure the specified category exists.\n\t\t\t *\n\t\t\t * @error accessibility-unknown-keystroke-info-category\n\t\t\t * @param categoryId The id of the unknown keystroke category.\n\t\t\t * @param keystrokes Keystroke definitions about to be added.\n\t\t\t */ throw new CKEditorError('accessibility-unknown-keystroke-info-category', this._editor, {\n                categoryId,\n                keystrokes\n            });\n        }\n        const category = this.keystrokeInfos.get(categoryId);\n        if (!category.groups.has(groupId)) {\n            /**\n\t\t\t * Cannot add keystrokes to an unknown group.\n\t\t\t *\n\t\t\t * Use {@link module:core/accessibility~Accessibility#addKeystrokeInfoGroup}\n\t\t\t * to add a new group or make sure the specified group exists.\n\t\t\t *\n\t\t\t * @error accessibility-unknown-keystroke-info-group\n\t\t\t * @param groupId The id of the unknown keystroke group.\n\t\t\t * @param categoryId The id of category the unknown group should belong to.\n\t\t\t * @param keystrokes Keystroke definitions about to be added.\n\t\t\t */ throw new CKEditorError('accessibility-unknown-keystroke-info-group', this._editor, {\n                groupId,\n                categoryId,\n                keystrokes\n            });\n        }\n        category.groups.get(groupId).keystrokes.push(...keystrokes);\n    }\n}\n\n/**\n * The class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if\n * the specific editor implements also the {@link ~Editor#ui} property\n * (as most editor implementations do).\n */ class Editor extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * A namespace for the accessibility features of the editor.\n\t */ accessibility;\n    /**\n\t * Commands registered to the editor.\n\t *\n\t * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n\t *\n\t * ```ts\n\t * // Execute the bold command:\n\t * editor.execute( 'bold' );\n\t *\n\t * // Check the state of the bold command:\n\t * editor.commands.get( 'bold' ).value;\n\t * ```\n\t */ commands;\n    /**\n\t * Stores all configurations specific to this editor instance.\n\t *\n\t * ```ts\n\t * editor.config.get( 'image.toolbar' );\n\t * // -> [ 'imageStyle:block', 'imageStyle:side', '|', 'toggleImageCaption', 'imageTextAlternative' ]\n\t * ```\n\t */ config;\n    /**\n\t * Conversion manager through which you can register model-to-view and view-to-model converters.\n\t *\n\t * See the {@link module:engine/conversion/conversion~Conversion} documentation to learn how to add converters.\n\t */ conversion;\n    /**\n\t * The {@link module:engine/controller/datacontroller~DataController data controller}.\n\t * Used e.g. for setting and retrieving the editor data.\n\t */ data;\n    /**\n\t * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n\t * Controls user input and rendering the content for editing.\n\t */ editing;\n    /**\n\t * The locale instance.\n\t */ locale;\n    /**\n\t * The editor's model.\n\t *\n\t * The central point of the editor's abstract data model.\n\t */ model;\n    /**\n\t * The plugins loaded and in use by this editor instance.\n\t *\n\t * ```ts\n\t * editor.plugins.get( 'ClipboardPipeline' ); // -> An instance of the clipboard pipeline plugin.\n\t * ```\n\t */ plugins;\n    /**\n\t * An instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n\t *\n\t * It allows setting simple keystrokes:\n\t *\n\t * ```ts\n\t * // Execute the bold command on Ctrl+E:\n\t * editor.keystrokes.set( 'Ctrl+E', 'bold' );\n\t *\n\t * // Execute your own callback:\n\t * editor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n\t * \tconsole.log( data.keyCode );\n\t *\n\t * \t// Prevent the default (native) action and stop the underlying keydown event\n\t * \t// so no other editor feature will interfere.\n\t * \tcancel();\n\t * } );\n\t * ```\n\t *\n\t * Note: Certain typing-oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n\t * by a low-level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n\t * To handle these specific keystrokes, see the events fired by the\n\t * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n\t */ keystrokes;\n    /**\n\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t *\n\t * @see module:utils/locale~Locale#t\n\t */ t;\n    /**\n\t * The default configuration which is built into the editor class.\n\t *\n\t * It is used in CKEditor 5 builds to provide the default configuration options which are later used during the editor initialization.\n\t *\n\t * ```ts\n\t * ClassicEditor.defaultConfig = {\n\t * \tfoo: 1,\n\t * \tbar: 2\n\t * };\n\t *\n\t * ClassicEditor\n\t * \t.create( sourceElement )\n\t * \t.then( editor => {\n\t * \t\teditor.config.get( 'foo' ); // -> 1\n\t * \t\teditor.config.get( 'bar' ); // -> 2\n\t * \t} );\n\t *\n\t * // The default options can be overridden by the configuration passed to create().\n\t * ClassicEditor\n\t * \t.create( sourceElement, { bar: 3 } )\n\t * \t.then( editor => {\n\t * \t\teditor.config.get( 'foo' ); // -> 1\n\t * \t\teditor.config.get( 'bar' ); // -> 3\n\t * \t} );\n\t * ```\n\t *\n\t * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n\t */ static defaultConfig;\n    /**\n\t * An array of plugins built into this editor class.\n\t *\n\t * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n\t * during the editor initialization.\n\t *\n\t * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n\t * unless `config.plugins` is passed.\n\t *\n\t * ```ts\n\t * // Build some plugins into the editor class first.\n\t * ClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n\t *\n\t * // Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n\t * // defined, now you can call create() without any configuration.\n\t * ClassicEditor\n\t * \t.create( sourceElement )\n\t * \t.then( editor => {\n\t * \t\teditor.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n\t * \t\teditor.plugins.get( BarPlugin ); // -> An instance of the Bar plugin.\n\t * \t} );\n\t *\n\t * ClassicEditor\n\t * \t.create( sourceElement, {\n\t * \t\t// Do not initialize these plugins (note: it is defined by a string):\n\t * \t\tremovePlugins: [ 'Foo' ]\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\teditor.plugins.get( FooPlugin ); // -> Undefined.\n\t * \t\teditor.config.get( BarPlugin ); // -> An instance of the Bar plugin.\n\t * \t} );\n\t *\n\t * ClassicEditor\n\t * \t.create( sourceElement, {\n\t * \t\t// Load only this plugin. It can also be defined by a string if\n\t * \t\t// this plugin was built into the editor class.\n\t * \t\tplugins: [ FooPlugin ]\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\teditor.plugins.get( FooPlugin ); // -> An instance of the Foo plugin.\n\t * \t\teditor.config.get( BarPlugin ); // -> Undefined.\n\t * \t} );\n\t * ```\n\t *\n\t * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n\t */ static builtinPlugins;\n    /**\n\t * The editor context.\n\t * When it is not provided through the configuration, the editor creates it.\n\t */ _context;\n    /**\n\t * A set of lock IDs for the {@link #isReadOnly} getter.\n\t */ _readOnlyLocks;\n    /**\n\t * Creates a new instance of the editor class.\n\t *\n\t * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n\t *\n\t * @param config The editor configuration.\n\t */ constructor(config = {}){\n        super();\n        if ('sanitizeHtml' in config) {\n            /**\n\t\t\t * Configuration property `config.sanitizeHtml` was removed in CKEditor version 43.1.0 and is no longer supported.\n\t\t\t *\n\t\t\t * Please use `config.htmlEmbed.sanitizeHtml` and/or `config.mergeFields.sanitizeHtml` instead.\n\t\t\t *\n\t\t\t * @error editor-config-sanitizehtml-not-supported\n\t\t\t */ throw new CKEditorError('editor-config-sanitizehtml-not-supported');\n        }\n        const constructor = this.constructor;\n        // We don't pass translations to the config, because its behavior of splitting keys\n        // with dots (e.g. `resize.width` => `resize: { width }`) breaks the translations.\n        const { translations: defaultTranslations, ...defaultConfig } = constructor.defaultConfig || {};\n        const { translations = defaultTranslations, ...rest } = config;\n        // Prefer the language passed as the argument to the constructor instead of the constructor's `defaultConfig`, if both are set.\n        const language = config.language || defaultConfig.language;\n        this._context = config.context || new Context({\n            language,\n            translations\n        });\n        this._context._addEditor(this, !config.context);\n        // Clone the plugins to make sure that the plugin array will not be shared\n        // between editors and make the watchdog feature work correctly.\n        const availablePlugins = Array.from(constructor.builtinPlugins || []);\n        this.config = new Config(rest, defaultConfig);\n        this.config.define('plugins', availablePlugins);\n        this.config.define(this._context._getEditorConfig());\n        this.plugins = new PluginCollection(this, availablePlugins, this._context.plugins);\n        this.locale = this._context.locale;\n        this.t = this.locale.t;\n        this._readOnlyLocks = new Set();\n        this.commands = new CommandCollection();\n        this.set('state', 'initializing');\n        this.once('ready', ()=>this.state = 'ready', {\n            priority: 'high'\n        });\n        this.once('destroy', ()=>this.state = 'destroyed', {\n            priority: 'high'\n        });\n        this.model = new Model();\n        this.on('change:isReadOnly', ()=>{\n            this.model.document.isReadOnly = this.isReadOnly;\n        });\n        const stylesProcessor = new StylesProcessor();\n        this.data = new DataController(this.model, stylesProcessor);\n        this.editing = new EditingController(this.model, stylesProcessor);\n        this.editing.view.document.bind('isReadOnly').to(this);\n        this.conversion = new Conversion([\n            this.editing.downcastDispatcher,\n            this.data.downcastDispatcher\n        ], this.data.upcastDispatcher);\n        this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher);\n        this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher);\n        this.keystrokes = new EditingKeystrokeHandler(this);\n        this.keystrokes.listenTo(this.editing.view.document);\n        this.accessibility = new Accessibility(this);\n    }\n    /**\n\t * Defines whether the editor is in the read-only mode.\n\t *\n\t * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n\t * to modify the document by using them. Also, the editable element(s) become non-editable.\n\t *\n\t * In order to make the editor read-only, you need to call the {@link #enableReadOnlyMode} method:\n\t *\n\t * ```ts\n\t * editor.enableReadOnlyMode( 'feature-id' );\n\t * ```\n\t *\n     * Later, to turn off the read-only mode, call {@link #disableReadOnlyMode}:\n\t *\n\t * ```ts\n\t * editor.disableReadOnlyMode( 'feature-id' );\n\t * ```\n\t *\n\t * @readonly\n\t * @observable\n\t */ get isReadOnly() {\n        return this._readOnlyLocks.size > 0;\n    }\n    set isReadOnly(value) {\n        /**\n\t\t * The {@link module:core/editor/editor~Editor#isReadOnly Editor#isReadOnly} property is read-only since version `34.0.0`\n\t\t * and can be set only using {@link module:core/editor/editor~Editor#enableReadOnlyMode `Editor#enableReadOnlyMode( lockId )`} and\n\t\t * {@link module:core/editor/editor~Editor#disableReadOnlyMode `Editor#disableReadOnlyMode( lockId )`}.\n\t\t *\n\t\t * Usage before version `34.0.0`:\n\t\t *\n\t\t * ```ts\n\t\t * editor.isReadOnly = true;\n\t\t * editor.isReadOnly = false;\n\t\t * ```\n\t\t *\n\t\t * Usage since version `34.0.0`:\n\t\t *\n\t\t * ```ts\n\t\t * editor.enableReadOnlyMode( 'my-feature-id' );\n\t\t * editor.disableReadOnlyMode( 'my-feature-id' );\n\t\t * ```\n\t\t *\n\t\t * @error editor-isreadonly-has-no-setter\n\t\t */ throw new CKEditorError('editor-isreadonly-has-no-setter');\n    }\n    /**\n\t * Turns on the read-only mode in the editor.\n\t *\n\t * Editor can be switched to or out of the read-only mode by many features, under various circumstances. The editor supports locking\n\t * mechanism for the read-only mode. It enables easy control over the read-only mode when many features wants to turn it on or off at\n\t * the same time, without conflicting with each other. It guarantees that you will not make the editor editable accidentally (which\n\t * could lead to errors).\n\t *\n\t * Each read-only mode request is identified by a unique id (also called \"lock\"). If multiple plugins requested to turn on the\n\t * read-only mode, then, the editor will become editable only after all these plugins turn the read-only mode off (using the same ids).\n\t *\n\t * Note, that you cannot force the editor to disable the read-only mode if other plugins set it.\n\t *\n\t * After the first `enableReadOnlyMode()` call, the {@link #isReadOnly `isReadOnly` property} will be set to `true`:\n\t *\n\t * ```ts\n\t * editor.isReadOnly; // `false`.\n\t * editor.enableReadOnlyMode( 'my-feature-id' );\n\t * editor.isReadOnly; // `true`.\n\t * ```\n\t *\n\t * You can turn off the read-only mode (\"clear the lock\") using the {@link #disableReadOnlyMode `disableReadOnlyMode()`} method:\n\t *\n\t * ```ts\n\t * editor.enableReadOnlyMode( 'my-feature-id' );\n\t * // ...\n\t * editor.disableReadOnlyMode( 'my-feature-id' );\n\t * editor.isReadOnly; // `false`.\n\t * ```\n\t *\n\t * All \"locks\" need to be removed to enable editing:\n\t *\n\t * ```ts\n\t * editor.enableReadOnlyMode( 'my-feature-id' );\n\t * editor.enableReadOnlyMode( 'my-other-feature-id' );\n\t * // ...\n\t * editor.disableReadOnlyMode( 'my-feature-id' );\n\t * editor.isReadOnly; // `true`.\n\t * editor.disableReadOnlyMode( 'my-other-feature-id' );\n\t * editor.isReadOnly; // `false`.\n\t * ```\n\t *\n\t * @param lockId A unique ID for setting the editor to the read-only state.\n\t */ enableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            /**\n\t\t\t * The lock ID is missing or it is not a string or symbol.\n\t\t\t *\n\t\t\t * @error editor-read-only-lock-id-invalid\n\t\t\t */ throw new CKEditorError('editor-read-only-lock-id-invalid', null, {\n                lockId\n            });\n        }\n        if (this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.add(lockId);\n        if (this._readOnlyLocks.size === 1) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', true, false);\n        }\n    }\n    /**\n\t * Removes the read-only lock from the editor with given lock ID.\n\t *\n\t * When no lock is present on the editor anymore, then the {@link #isReadOnly `isReadOnly` property} will be set to `false`.\n\t *\n\t * @param lockId The lock ID for setting the editor to the read-only state.\n\t */ disableReadOnlyMode(lockId) {\n        if (typeof lockId !== 'string' && typeof lockId !== 'symbol') {\n            throw new CKEditorError('editor-read-only-lock-id-invalid', null, {\n                lockId\n            });\n        }\n        if (!this._readOnlyLocks.has(lockId)) {\n            return;\n        }\n        this._readOnlyLocks.delete(lockId);\n        if (this._readOnlyLocks.size === 0) {\n            // Manually fire the `change:isReadOnly` event as only getter is provided.\n            this.fire('change:isReadOnly', 'isReadOnly', false, true);\n        }\n    }\n    /**\n\t * Sets the data in the editor.\n\t *\n\t * ```ts\n\t * editor.setData( '<p>This is editor!</p>' );\n\t * ```\n\t *\n\t * If your editor implementation uses multiple roots, you should pass an object with keys corresponding\n\t * to the editor root names and values equal to the data that should be set in each root:\n\t *\n\t * ```ts\n\t * editor.setData( {\n\t *     header: '<p>Content for header part.</p>',\n\t *     content: '<p>Content for main part.</p>',\n\t *     footer: '<p>Content for footer part.</p>'\n\t * } );\n\t * ```\n\t *\n\t * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n\t * See the {@glink features/markdown Markdown output} guide for more details.\n\t *\n\t * @param data Input data.\n\t */ setData(data) {\n        this.data.set(data);\n    }\n    /**\n\t * Gets the data from the editor.\n\t *\n\t * ```ts\n\t * editor.getData(); // -> '<p>This is editor!</p>'\n\t * ```\n\t *\n\t * If your editor implementation uses multiple roots, you should pass root name as one of the options:\n\t *\n\t * ```ts\n\t * editor.getData( { rootName: 'header' } ); // -> '<p>Content for header part.</p>'\n\t * ```\n\t *\n\t * By default, the editor outputs HTML. This can be controlled by injecting a different data processor.\n\t * See the {@glink features/markdown Markdown output} guide for more details.\n\t *\n\t * A warning is logged when you try to retrieve data for a detached root, as most probably this is a mistake. A detached root should\n\t * be treated like it is removed, and you should not save its data. Note, that the detached root data is always an empty string.\n\t *\n\t * @param options Additional configuration for the retrieved data.\n\t * Editor features may introduce more configuration options that can be set through this parameter.\n\t * @param options.rootName Root name. Defaults to `'main'`.\n\t * @param options.trim Whether returned data should be trimmed. This option is set to `'empty'` by default,\n\t * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n\t * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n\t * @returns Output data.\n\t */ getData(options) {\n        return this.data.get(options);\n    }\n    /**\n\t * Loads and initializes plugins specified in the configuration.\n\t *\n\t * @returns A promise which resolves once the initialization is completed, providing an array of loaded plugins.\n\t */ initPlugins() {\n        const config = this.config;\n        const plugins = config.get('plugins');\n        const removePlugins = config.get('removePlugins') || [];\n        const extraPlugins = config.get('extraPlugins') || [];\n        const substitutePlugins = config.get('substitutePlugins') || [];\n        return this.plugins.init(plugins.concat(extraPlugins), removePlugins, substitutePlugins);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n\t * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n\t *\n\t * @fires destroy\n\t * @returns A promise that resolves once the editor instance is fully destroyed.\n\t */ destroy() {\n        let readyPromise = Promise.resolve();\n        if (this.state == 'initializing') {\n            readyPromise = new Promise((resolve)=>this.once('ready', resolve));\n        }\n        return readyPromise.then(()=>{\n            this.fire('destroy');\n            this.stopListening();\n            this.commands.destroy();\n        }).then(()=>this.plugins.destroy()).then(()=>{\n            this.model.destroy();\n            this.data.destroy();\n            this.editing.destroy();\n            this.keystrokes.destroy();\n        })// Remove the editor from the context.\n        // When the context was created by this editor, the context will be destroyed.\n        .then(()=>this._context._removeEditor(this));\n    }\n    /**\n\t * Executes the specified command with given parameters.\n\t *\n\t * Shorthand for:\n\t *\n\t * ```ts\n\t * editor.commands.get( commandName ).execute( ... );\n\t * ```\n\t *\n\t * @param commandName The name of the command to execute.\n\t * @param commandParams Command parameters.\n\t * @returns The value returned by the {@link module:core/commandcollection~CommandCollection#execute `commands.execute()`}.\n\t */ execute(commandName, ...commandParams) {\n        try {\n            return this.commands.execute(commandName, ...commandParams);\n        } catch (err) {\n            // @if CK_DEBUG // throw err;\n            /* istanbul ignore next -- @preserve */ CKEditorError.rethrowUnexpectedError(err, this);\n        }\n    }\n    /**\n\t * Focuses the editor.\n\t *\n\t * **Note** To explicitly focus the editing area of the editor, use the\n\t * {@link module:engine/view/view~View#focus `editor.editing.view.focus()`} method of the editing view.\n\t *\n\t * Check out the {@glink framework/deep-dive/ui/focus-tracking#focus-in-the-editor-ui Focus in the editor UI} section\n\t * of the {@glink framework/deep-dive/ui/focus-tracking Deep dive into focus tracking} guide to learn more.\n\t */ focus() {\n        this.editing.view.focus();\n    }\n    /* istanbul ignore next -- @preserve */ /**\n\t * Creates and initializes a new editor instance.\n\t *\n\t * This is an abstract method. Every editor type needs to implement its own initialization logic.\n\t *\n\t * See the `create()` methods of the existing editor types to learn how to use them:\n\t *\n\t * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n\t * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n\t * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n\t * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n\t */ static create(...args) {\n        throw new Error('This is an abstract method.');\n    }\n    /**\n\t * The {@link module:core/context~Context} class.\n\t *\n\t * Exposed as static editor field for easier access in editor builds.\n\t */ static Context = Context;\n    /**\n\t * The {@link module:watchdog/editorwatchdog~EditorWatchdog} class.\n\t *\n\t * Exposed as static editor field for easier access in editor builds.\n\t */ static EditorWatchdog = EditorWatchdog;\n    /**\n\t * The {@link module:watchdog/contextwatchdog~ContextWatchdog} class.\n\t *\n\t * Exposed as static editor field for easier access in editor builds.\n\t */ static ContextWatchdog = ContextWatchdog;\n}\n /**\n * This error is thrown when trying to pass a `<textarea>` element to a `create()` function of an editor class.\n *\n * The only editor type which can be initialized on `<textarea>` elements is\n * the {@glink getting-started/setup/editor-types#classic-editor classic editor}.\n * This editor hides the passed element and inserts its own UI next to it. Other types of editors reuse the passed element as their root\n * editable element and therefore `<textarea>` is not appropriate for them. Use a `<div>` or another text container instead:\n *\n * ```html\n * <div id=\"editor\">\n * \t<p>Initial content.</p>\n * </div>\n * ```\n *\n * @error editor-wrong-element\n */\n\n/**\n * Checks if the editor is initialized on a `<textarea>` element that belongs to a form. If yes, it updates the editor's element\n * content before submitting the form.\n *\n * This helper requires the {@link module:core/editor/utils/elementapimixin~ElementApi ElementApi interface}.\n *\n * @param editor Editor instance.\n */ function attachToForm(editor) {\n    if (!isFunction(editor.updateSourceElement)) {\n        /**\n\t\t * The editor passed to `attachToForm()` must implement the\n\t\t * {@link module:core/editor/utils/elementapimixin~ElementApi} interface.\n\t\t *\n\t\t * @error attachtoform-missing-elementapi-interface\n\t\t */ throw new CKEditorError('attachtoform-missing-elementapi-interface', editor);\n    }\n    const sourceElement = editor.sourceElement;\n    // Only when replacing a textarea which is inside of a form element.\n    if (isTextArea(sourceElement) && sourceElement.form) {\n        let originalSubmit;\n        const form = sourceElement.form;\n        const onSubmit = ()=>editor.updateSourceElement();\n        // Replace the original form#submit() to call a custom submit function first.\n        // Check if #submit is a function because the form might have an input named \"submit\".\n        if (isFunction(form.submit)) {\n            originalSubmit = form.submit;\n            form.submit = ()=>{\n                onSubmit();\n                originalSubmit.apply(form);\n            };\n        }\n        // Update the replaced textarea with data before each form#submit event.\n        form.addEventListener('submit', onSubmit);\n        // Remove the submit listener and revert the original submit method on\n        // editor#destroy.\n        editor.on('destroy', ()=>{\n            form.removeEventListener('submit', onSubmit);\n            if (originalSubmit) {\n                form.submit = originalSubmit;\n            }\n        });\n    }\n}\nfunction isTextArea(sourceElement) {\n    return !!sourceElement && sourceElement.tagName.toLowerCase() === 'textarea';\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module core/editor/utils/dataapimixin\n */ /**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @deprecated This functionality is already implemented by the `Editor` class.\n */ function DataApiMixin(base) {\n    return base;\n}\n\n/**\n * Implementation of the {@link module:core/editor/utils/elementapimixin~ElementApi}.\n */ function ElementApiMixin(base) {\n    class Mixin extends base {\n        sourceElement;\n        updateSourceElement(data) {\n            if (!this.sourceElement) {\n                /**\n\t\t\t\t * Cannot update the source element of a detached editor.\n\t\t\t\t *\n\t\t\t\t * The {@link module:core/editor/utils/elementapimixin~ElementApi#updateSourceElement `updateSourceElement()`}\n\t\t\t\t * method cannot be called if you did not pass an element to `Editor.create()`.\n\t\t\t\t *\n\t\t\t\t * @error editor-missing-sourceelement\n\t\t\t\t */ throw new CKEditorError('editor-missing-sourceelement', this);\n            }\n            const shouldUpdateSourceElement = this.config.get('updateSourceElementOnDestroy');\n            const isSourceElementTextArea = this.sourceElement instanceof HTMLTextAreaElement;\n            // The data returned by the editor might be unsafe, so we want to prevent rendering\n            // unsafe content inside the source element different than <textarea>, which is considered\n            // secure. This behavior could be changed by setting the `updateSourceElementOnDestroy`\n            // configuration option to `true`.\n            if (!shouldUpdateSourceElement && !isSourceElementTextArea) {\n                setDataInElement(this.sourceElement, '');\n                return;\n            }\n            const dataToSet = typeof data === 'string' ? data : this.data.get();\n            setDataInElement(this.sourceElement, dataToSet);\n        }\n    }\n    return Mixin;\n}\n// Backward compatibility with `mix`.\nElementApiMixin.updateSourceElement = ElementApiMixin(Object).prototype.updateSourceElement;\n\n/**\n * Marks the source element on which the editor was initialized. This prevents other editor instances from using this element.\n *\n * Running multiple editor instances on the same source element causes various issues and it is\n * crucial this helper is called as soon as the source element is known to prevent collisions.\n *\n * @param editor Editor instance.\n * @param sourceElement Element to bind with the editor instance.\n */ function secureSourceElement(editor, sourceElement) {\n    if (sourceElement.ckeditorInstance) {\n        /**\n\t\t * A DOM element used to create the editor (e.g.\n\t\t * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`})\n\t\t * has already been used to create another editor instance. Make sure each editor is\n\t\t * created with an unique DOM element.\n\t\t *\n\t\t * @error editor-source-element-already-used\n\t\t * @param element DOM element that caused the collision.\n\t\t */ throw new CKEditorError('editor-source-element-already-used', editor);\n    }\n    sourceElement.ckeditorInstance = editor;\n    editor.once('destroy', ()=>{\n        delete sourceElement.ckeditorInstance;\n    });\n}\n\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n * // You can update the message:\n * action.message = 'Upload in progress: 10%.';\n * ```\n *\n * Removing a pending action:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n * const action = pendingActions.add( 'Unsaved changes.' );\n *\n * pendingActions.remove( action );\n * ```\n *\n * Getting pending actions:\n *\n * ```ts\n * const pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * const action1 = pendingActions.add( 'Action 1' );\n * const action2 = pendingActions.add( 'Action 2' );\n *\n * pendingActions.first; // Returns action1\n * Array.from( pendingActions ); // Returns [ action1, action2 ]\n * ```\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the\n * {@glink getting-started/setup/getting-and-setting-data Saving and getting data} guide.\n */ class PendingActions extends ContextPlugin {\n    /**\n\t * A list of pending actions.\n\t */ _actions;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PendingActions';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this.set('hasAny', false);\n        this._actions = new Collection({\n            idProperty: '_id'\n        });\n        this._actions.delegate('add', 'remove').to(this);\n    }\n    /**\n\t * Adds an action to the list of pending actions.\n\t *\n\t * This method returns an action object with an observable message property.\n\t * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n\t *\n\t * @param message The action message.\n\t * @returns An observable object that represents a pending action.\n\t */ add(message) {\n        if (typeof message !== 'string') {\n            /**\n\t\t\t * The message must be a string.\n\t\t\t *\n\t\t\t * @error pendingactions-add-invalid-message\n\t\t\t */ throw new CKEditorError('pendingactions-add-invalid-message', this);\n        }\n        const action = new (ObservableMixin())();\n        action.set('message', message);\n        this._actions.add(action);\n        this.hasAny = true;\n        return action;\n    }\n    /**\n\t * Removes an action from the list of pending actions.\n\t *\n\t * @param action An action object.\n\t */ remove(action) {\n        this._actions.remove(action);\n        this.hasAny = !!this._actions.length;\n    }\n    /**\n\t * Returns the first action from the list or null if the list is empty\n\t *\n\t * @returns The pending action object.\n\t */ get first() {\n        return this._actions.get(0);\n    }\n    /**\n\t * Iterable interface.\n\t */ [Symbol.iterator]() {\n        return this._actions[Symbol.iterator]();\n    }\n}\n\nvar cancel = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.591 10.177 4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\";\n\nvar caption = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 16h9a1 1 0 0 1 0 2H2a1 1 0 0 1 0-2z\\\"/><path d=\\\"M17 1a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14zm0 1.5H3a.5.5 0 0 0-.492.41L2.5 3v9a.5.5 0 0 0 .41.492L3 12.5h14a.5.5 0 0 0 .492-.41L17.5 12V3a.5.5 0 0 0-.41-.492L17 2.5z\\\" fill-opacity=\\\".6\\\"/></svg>\";\n\nvar check = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\";\n\nvar cog = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.333 2 .19 2.263a5.899 5.899 0 0 1 1.458.604L14.714 3.4 16.6 5.286l-1.467 1.733c.263.452.468.942.605 1.46L18 8.666v2.666l-2.263.19a5.899 5.899 0 0 1-.604 1.458l1.467 1.733-1.886 1.886-1.733-1.467a5.899 5.899 0 0 1-1.46.605L11.334 18H8.667l-.19-2.263a5.899 5.899 0 0 1-1.458-.604L5.286 16.6 3.4 14.714l1.467-1.733a5.899 5.899 0 0 1-.604-1.458L2 11.333V8.667l2.262-.189a5.899 5.899 0 0 1 .605-1.459L3.4 5.286 5.286 3.4l1.733 1.467a5.899 5.899 0 0 1 1.46-.605L8.666 2h2.666zM10 6.267a3.733 3.733 0 1 0 0 7.466 3.733 3.733 0 0 0 0-7.466z\\\"/></svg>\";\n\nvar colorPalette = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.209 18.717A8.5 8.5 0 1 1 18.686 9.6h-.008l.002.12a3 3 0 0 1-2.866 2.997h-.268l-.046-.002v.002h-4.791a2 2 0 1 0 0 4 1 1 0 1 1-.128 1.992 8.665 8.665 0 0 1-.372.008Zm-3.918-7.01a1.25 1.25 0 1 0-2.415-.648 1.25 1.25 0 0 0 2.415.647ZM5.723 8.18a1.25 1.25 0 1 0 .647-2.414 1.25 1.25 0 0 0-.647 2.414ZM9.76 6.155a1.25 1.25 0 1 0 .647-2.415 1.25 1.25 0 0 0-.647 2.415Zm4.028 1.759a1.25 1.25 0 1 0 .647-2.415 1.25 1.25 0 0 0-.647 2.415Z\\\"/></svg>\";\n\nvar eraser = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m8.636 9.531-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z\\\"/><path d=\\\"M4 18h5.523v-1H4zm-2 0h1v-1H2z\\\"/></svg>\";\n\nvar history = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11 1a9 9 0 1 1-8.027 13.075l1.128-1.129A7.502 7.502 0 0 0 18.5 10a7.5 7.5 0 1 0-14.962.759l-.745-.746-.76.76A9 9 0 0 1 11 1z\\\"/><path d=\\\"M.475 8.17a.75.75 0 0 1 .978.047l.075.082 1.284 1.643 1.681-1.284a.75.75 0 0 1 .978.057l.073.083a.75.75 0 0 1-.057.978l-.083.073-2.27 1.737a.75.75 0 0 1-.973-.052l-.074-.082-1.741-2.23a.75.75 0 0 1 .13-1.052z\\\"/><path d=\\\"M11.5 5v4.999l3.196 3.196-1.06 1.06L10.1 10.72l-.1-.113V5z\\\"/></svg>\";\n\nvar lowVision = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22 2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\"/></svg>\";\n\nvar textAlternative = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.035 1C2.446 1 2 1.54 2 2.098V10.5h1.5v-8h13v8H18V2.098C18 1.539 17.48 1 16.9 1H3.035Zm10.453 2.61a1.885 1.885 0 0 0-1.442.736 1.89 1.89 0 0 0 1.011 2.976 1.903 1.903 0 0 0 2.253-1.114 1.887 1.887 0 0 0-1.822-2.598ZM7.463 8.163a.611.611 0 0 0-.432.154L5.071 10.5h5.119L7.88 8.348a.628.628 0 0 0-.417-.185Zm6.236 1.059a.62.62 0 0 0-.42.164L12.07 10.5h2.969l-.92-1.113a.618.618 0 0 0-.42-.165ZM.91 11.5a.91.91 0 0 0-.91.912v6.877c0 .505.405.91.91.91h18.178a.91.91 0 0 0 .912-.91v-6.877a.908.908 0 0 0-.912-.912H.91ZM3.668 13h1.947l2.135 5.7H5.898l-.28-.946H3.601l-.278.945H1.516L3.668 13Zm4.947 0h1.801v4.3h2.7v1.4h-4.5V13h-.001Zm4.5 0h5.4v1.4h-1.798v4.3h-1.701v-4.3h-1.9V13h-.001Zm-8.517 1.457-.614 2.059h1.262l-.648-2.059Z\\\"/></svg>\";\n\nvar loupe = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.68 13.74h-.001l4.209 4.208a1 1 0 1 0 1.414-1.414l-4.267-4.268a6 6 0 1 0-1.355 1.474ZM13 9a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z\\\"/></svg>\";\n\nvar previousArrow = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z\\\"/></svg>\";\n\nvar nextArrow = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z\\\"/></svg>\";\n\nvar image = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.66 9.118a.693.693 0 0 1 .956.032l3.65 3.411 2.422-2.238a.695.695 0 0 1 .945 0L17.5 13.6V2.5h-15v11.1l4.16-4.482ZM17.8 1c.652 0 1.2.47 1.2 1.1v14.362c0 .64-.532 1.038-1.184 1.038H2.184C1.532 17.5 1 17.103 1 16.462V2.1C1 1.47 1.537 1 2.2 1h15.6Zm-5.655 6a2.128 2.128 0 0 1 .157-2.364A2.133 2.133 0 1 1 12.145 7Z\\\"/></svg>\";\n\nvar imageUpload = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1.201 1C.538 1 0 1.47 0 2.1v14.363c0 .64.534 1.037 1.186 1.037h9.494a2.97 2.97 0 0 1-.414-.287 2.998 2.998 0 0 1-1.055-2.03 3.003 3.003 0 0 1 .693-2.185l.383-.455-.02.018-3.65-3.41a.695.695 0 0 0-.957-.034L1.5 13.6V2.5h15v5.535a2.97 2.97 0 0 1 1.412.932l.088.105V2.1c0-.63-.547-1.1-1.2-1.1H1.202Zm11.713 2.803a2.146 2.146 0 0 0-2.049 1.992 2.14 2.14 0 0 0 1.28 2.096 2.13 2.13 0 0 0 2.644-3.11 2.134 2.134 0 0 0-1.875-.978Z\\\"/><path d=\\\"M15.522 19.1a.79.79 0 0 0 .79-.79v-5.373l2.059 2.455a.79.79 0 1 0 1.211-1.015l-3.352-3.995a.79.79 0 0 0-.995-.179.784.784 0 0 0-.299.221l-3.35 3.99a.79.79 0 1 0 1.21 1.017l1.936-2.306v5.185c0 .436.353.79.79.79Z\\\"/><path d=\\\"M15.522 19.1a.79.79 0 0 0 .79-.79v-5.373l2.059 2.455a.79.79 0 1 0 1.211-1.015l-3.352-3.995a.79.79 0 0 0-.995-.179.784.784 0 0 0-.299.221l-3.35 3.99a.79.79 0 1 0 1.21 1.017l1.936-2.306v5.185c0 .436.353.79.79.79Z\\\"/></svg>\";\n\nvar imageAssetManager = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1.201 1c-.662 0-1.2.47-1.2 1.1v14.248c0 .64.533 1.152 1.185 1.152h6.623v-7.236L6.617 9.15a.694.694 0 0 0-.957-.033L1.602 13.55V2.553l14.798.003V9.7H18V2.1c0-.63-.547-1.1-1.2-1.1H1.202Zm11.723 2.805a2.094 2.094 0 0 0-1.621.832 2.127 2.127 0 0 0 1.136 3.357 2.13 2.13 0 0 0 2.611-1.506 2.133 2.133 0 0 0-.76-2.244 2.13 2.13 0 0 0-1.366-.44Z\\\"/><path clip-rule=\\\"evenodd\\\" d=\\\"M19.898 12.369v6.187a.844.844 0 0 1-.844.844h-8.719a.844.844 0 0 1-.843-.844v-7.312a.844.844 0 0 1 .843-.844h2.531a.843.843 0 0 1 .597.248l.838.852h4.75c.223 0 .441.114.6.272a.844.844 0 0 1 .247.597Zm-1.52.654-4.377.02-1.1-1.143H11v6h7.4l-.023-4.877Z\\\"/></svg>\";\n\nvar imageUrl = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1.201 1C.538 1 0 1.47 0 2.1v14.363c0 .64.534 1.037 1.186 1.037h7.029a5.401 5.401 0 0 1 .615-4.338l.762-1.232-2.975-2.78a.696.696 0 0 0-.957-.033L1.5 13.6V2.5h15v6.023c.449.131.887.32 1.307.573l.058.033c.046.028.09.057.135.086V2.1c0-.63-.547-1.1-1.2-1.1H1.202Zm11.713 2.803a2.15 2.15 0 0 0-1.611.834 2.118 2.118 0 0 0-.438 1.158 2.14 2.14 0 0 0 1.277 2.096 2.132 2.132 0 0 0 2.645-3.11 2.13 2.13 0 0 0-1.873-.978Z\\\"/><path d=\\\"M16.63 10.294a3.003 3.003 0 0 0-4.142.887l-.117.177a.647.647 0 0 0-.096.492.664.664 0 0 0 .278.418.7.7 0 0 0 .944-.234 1.741 1.741 0 0 1 2.478-.463 1.869 1.869 0 0 1 .476 2.55.637.637 0 0 0-.071.5.646.646 0 0 0 .309.396.627.627 0 0 0 .869-.19l.027-.041a3.226 3.226 0 0 0-.956-4.492Zm-6.061 3.78-.044.066a3.228 3.228 0 0 0 .82 4.403 3.005 3.005 0 0 0 4.275-.798l.13-.197a.626.626 0 0 0 .092-.475.638.638 0 0 0-.268-.402.713.713 0 0 0-.99.26l-.018.029a1.741 1.741 0 0 1-2.477.461 1.87 1.87 0 0 1-.475-2.55l.029-.047a.647.647 0 0 0 .086-.485.66.66 0 0 0-.275-.408l-.04-.027a.609.609 0 0 0-.845.17Z\\\"/><path d=\\\"M15.312 13.925c.24-.36.154-.838-.19-1.067-.346-.23-.82-.124-1.059.236l-1.268 1.907c-.239.36-.153.838.192 1.067.345.23.818.123 1.057-.236l1.268-1.907Z\\\"/></svg>\";\n\nvar alignBottom = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m9.239 13.938-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z\\\"/></svg>\";\n\nvar alignMiddle = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z\\\"/></svg>\";\n\nvar alignTop = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m10.261 7.062 2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z\\\"/></svg>\";\n\nvar alignLeft = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\";\n\nvar alignCenter = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z\\\"/></svg>\";\n\nvar alignRight = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z\\\"/></svg>\";\n\nvar alignJustify = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\";\n\nvar objectBlockLeft = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectCenter = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M15.003 7v5.5a1 1 0 0 1-1 1H5.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H6.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectBlockRight = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectFullWidth = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2z\\\"/><path d=\\\"M18 7v5.5a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1zm-1.505.5H3.504V12h12.991V7.5z\\\"/></svg>\";\n\nvar objectInline = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zM2 15h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectLeft = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm11.5 9H18v1.5h-4.5zm0-3H18v1.5h-4.5zm0-3H18v1.5h-4.5zM2 15h16v1.5H2z\\\"/><path d=\\\"M12.003 7v5.5a1 1 0 0 1-1 1H2.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H3.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectRight = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path opacity=\\\".5\\\" d=\\\"M2 3h16v1.5H2zm0 12h16v1.5H2zm0-9h5v1.5H2zm0 3h5v1.5H2zm0 3h5v1.5H2z\\\"/><path d=\\\"M18.003 7v5.5a1 1 0 0 1-1 1H8.996a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h8.007a1 1 0 0 1 1 1zm-1.506.5H9.5V12h6.997V7.5z\\\"/></svg>\";\n\nvar objectSizeFull = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M2.5 17v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zm2 0v1h-1v-1h1zM1 15.5v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm-19-2v1H0v-1h1zm19 0v1h-1v-1h1zm0-2v1h-1v-1h1zm-19 0v1H0v-1h1zM14.5 2v1h-1V2h1zm2 0v1h-1V2h1zm2 0v1h-1V2h1zm-8 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm-2 0v1h-1V2h1zm8 0v1h-1V2h1zm-10 0v1h-1V2h1z\\\"/><path d=\\\"M18.095 2H1.905C.853 2 0 2.895 0 4v12c0 1.105.853 2 1.905 2h16.19C19.147 18 20 17.105 20 16V4c0-1.105-.853-2-1.905-2zm0 1.5c.263 0 .476.224.476.5v12c0 .276-.213.5-.476.5H1.905a.489.489 0 0 1-.476-.5V4c0-.276.213-.5.476-.5h16.19z\\\"/></svg>\";\n\nvar objectSizeCustom = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:v=\\\"https://vecta.io/nano\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M.95 1.43a.95.95 0 0 0-.95.95v3.1a.95.95 0 0 0 .95.95h.75v6.3H.95a.95.95 0 0 0-.95.95v3.1a.95.95 0 0 0 .95.95h3.1a.95.95 0 0 0 .95-.95v-.65h1.932l1.539-1.5H5v-.95a.95.95 0 0 0-.95-.95H3.2v-6.3h.85A.95.95 0 0 0 5 5.48v-.55h10v.55a.95.95 0 0 0 .95.95h3.1a.95.95 0 0 0 .95-.95v-3.1a.95.95 0 0 0-.95-.95h-3.1a.95.95 0 0 0-.95.95v1.05H5V2.38a.95.95 0 0 0-.95-.95H.95zm.55 3.5v-2h2v2h-2zm0 9.3v2h2v-2h-2zm15-11.3v2h2v-2h-2z\\\"/><path d=\\\"M8.139 20.004v-2.388l7.045-7.048 2.391 2.391-7.046 7.046h-2.39zm11.421-9.101a.64.64 0 0 1-.138.206l-1.165 1.168-2.391-2.391 1.167-1.163a.63.63 0 0 1 .206-.138.635.635 0 0 1 .243-.049.63.63 0 0 1 .449.187l1.491 1.488c.059.059.108.129.138.206s.049.16.049.243a.6.6 0 0 1-.049.243z\\\"/></svg>\";\n\nvar objectSizeLarge = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 16.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1ZM1 15v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 13v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 11v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 9v1H0V9h1Zm19 0v1h-1V9h1ZM1 7v1H0V7h1Zm19 0v1h-1V7h1ZM1 5v1H0V5h1Zm19 0v1h-1V5h1Zm0-2v1h-1V3h1ZM1 3v1H0V3h1Zm13.5-1.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm-8 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm8 0v1h-1v-1h1Zm-10 0v1h-1v-1h1Z\\\"/><path d=\\\"M13 5.5H2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h11a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2ZM13 7a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-8A.5.5 0 0 1 2 7h11Z\\\"/></svg>\";\n\nvar objectSizeSmall = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 16.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1ZM1 15v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 13v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 11v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 9v1H0V9h1Zm19 0v1h-1V9h1ZM1 7v1H0V7h1Zm19 0v1h-1V7h1ZM1 5v1H0V5h1Zm19 0v1h-1V5h1Zm0-2v1h-1V3h1ZM1 3v1H0V3h1Zm13.5-1.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm-8 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm8 0v1h-1v-1h1Zm-10 0v1h-1v-1h1Z\\\"/><path d=\\\"M7 9.5H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h5a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2ZM7 11a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-4A.5.5 0 0 1 2 11h5Z\\\"/></svg>\";\n\nvar objectSizeMedium = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 16.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1ZM1 15v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 13v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 11v1H0v-1h1Zm19 0v1h-1v-1h1ZM1 9v1H0V9h1Zm19 0v1h-1V9h1ZM1 7v1H0V7h1Zm19 0v1h-1V7h1ZM1 5v1H0V5h1Zm19 0v1h-1V5h1Zm0-2v1h-1V3h1ZM1 3v1H0V3h1Zm13.5-1.5v1h-1v-1h1Zm2 0v1h-1v-1h1Zm2 0v1h-1v-1h1Zm-8 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm-2 0v1h-1v-1h1Zm8 0v1h-1v-1h1Zm-10 0v1h-1v-1h1Z\\\"/><path d=\\\"M10 7.5H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-6a2 2 0 0 0-2-2ZM10 9a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5v-6A.5.5 0 0 1 2 9h8Z\\\"/></svg>\";\n\nvar pencil = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m7.3 17.37-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506 13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5 9.375 17H19v1.5H8z\\\"/></svg>\";\n\nvar pilcrow = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.999 2H15a1 1 0 0 1 0 2h-1.004v13a1 1 0 1 1-2 0V4H8.999v13a1 1 0 1 1-2 0v-7A4 4 0 0 1 3 6a4 4 0 0 1 3.999-4z\\\"/></svg>\";\n\nvar quote = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z\\\"/></svg>\";\n\nvar threeVerticalDots = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"9.5\\\" cy=\\\"4.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"10.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\"/></svg>\";\n\nvar dragIndicator = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5 3.25a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/><path d=\\\"M12 3.25a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/><path d=\\\"M5 10a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/><path d=\\\"M12 10a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/><path d=\\\"M5 16.75a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/><path d=\\\"M12 16.75a1.5 1.5 0 1 0 3 0 1.5 1.5 0 1 0-3 0\\\"/></svg>\";\n\nvar bold = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\";\n\nvar paragraph = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.5 5.5H7v5h3.5a2.5 2.5 0 1 0 0-5zM5 3h6.5v.025a5 5 0 0 1 0 9.95V13H7v4a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z\\\"/></svg>\";\n\nvar plus = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10 2a1 1 0 0 0-1 1v6H3a1 1 0 1 0 0 2h6v6a1 1 0 1 0 2 0v-6h6a1 1 0 1 0 0-2h-6V3a1 1 0 0 0-1-1Z\\\"/></svg>\";\n\nvar text = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.816 11.5 7.038 4.785 4.261 11.5h5.555Zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13Z\\\"/><path d=\\\"m12.09 17-.534-1.292.848-1.971.545 1.319L12.113 17h-.023Zm1.142-5.187.545 1.319L15.5 9.13l1.858 4.316h-3.45l.398.965h3.467L18.887 17H20l-3.873-9h-1.254l-1.641 3.813Z\\\"/></svg>\";\n\nvar importExport = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19 4.5 14 0H3v12.673l.868-1.041c.185-.222.4-.402.632-.54V1.5h8v5h5v7.626a2.24 2.24 0 0 1 1.5.822V4.5ZM14 5V2l3.3 3H14Zm-3.692 12.5c.062.105.133.206.213.303L11.52 19H8v-.876a2.243 2.243 0 0 0 1.82-.624h.488Zm7.518-.657a.75.75 0 0 0-1.152-.96L15.5 17.29V12H14v5.29l-1.174-1.408a.75.75 0 0 0-1.152.96l2.346 2.816a.95.95 0 0 0 1.46 0l2.346-2.815Zm-15.056-.38a.75.75 0 0 1-.096-1.056l2.346-2.815a.95.95 0 0 1 1.46 0l2.346 2.815a.75.75 0 1 1-1.152.96L6.5 14.96V20H5v-5.04l-1.174 1.408a.75.75 0 0 1-1.056.096Z\\\"/></svg>\";\n\nvar redo = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m14.958 9.367-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\";\n\nvar undo = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m5.042 9.367 2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\";\n\nvar bulletedList = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\"/></svg>\";\n\nvar numberedList = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\";\n\nvar todoList = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m2.315 14.705 2.224-2.24a.689.689 0 0 1 .963 0 .664.664 0 0 1 0 .949L2.865 16.07a.682.682 0 0 1-.112.089.647.647 0 0 1-.852-.051L.688 14.886a.635.635 0 0 1 0-.903.647.647 0 0 1 .91 0l.717.722zm5.185.045a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75zM2.329 5.745l2.21-2.226a.689.689 0 0 1 .963 0 .664.664 0 0 1 0 .95L2.865 7.125a.685.685 0 0 1-.496.196.644.644 0 0 1-.468-.187L.688 5.912a.635.635 0 0 1 0-.903.647.647 0 0 1 .91 0l.73.736zM7.5 5.75A.75.75 0 0 1 8.25 5h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\";\n\nvar codeBlock = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.87 12.61a.75.75 0 0 1-.089.976l-.085.07-3.154 2.254 3.412 2.414a.75.75 0 0 1 .237.95l-.057.095a.75.75 0 0 1-.95.237l-.096-.058-4.272-3.022-.003-1.223 4.01-2.867a.75.75 0 0 1 1.047.174zm2.795-.231.095.057 4.011 2.867-.003 1.223-4.272 3.022-.095.058a.75.75 0 0 1-.88-.151l-.07-.086-.058-.095a.75.75 0 0 1 .15-.88l.087-.07 3.412-2.414-3.154-2.253-.085-.071a.75.75 0 0 1 .862-1.207zM16 0a2 2 0 0 1 2 2v9.354l-.663-.492-.837-.001V2a.5.5 0 0 0-.5-.5H2a.5.5 0 0 0-.5.5v15a.5.5 0 0 0 .5.5h3.118L7.156 19H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h14zM5.009 15l.003 1H3v-1h2.009zm2.188-2-1.471 1H5v-1h2.197zM10 11v.095L8.668 12H7v-1h3zm4-2v1H7V9h7zm0-2v1H7V7h7zm-4-2v1H5V5h5zM6 3v1H3V3h3z\\\"/></svg>\";\n\nvar browseFiles = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.627 16.5zm5.873-.196zm0-7.001V8h-13v8.5h4.341c.191.54.457 1.044.785 1.5H2a1.5 1.5 0 0 1-1.5-1.5v-13A1.5 1.5 0 0 1 2 2h4.5a1.5 1.5 0 0 1 1.06.44L9.122 4H16a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 19 8v2.531a6.027 6.027 0 0 0-1.5-1.228zM16 6.5v-1H8.5l-2-2H2v13h1V8a1.5 1.5 0 0 1 1.5-1.5H16z\\\"/><path d=\\\"M14.5 19.5a5 5 0 1 1 0-10 5 5 0 0 1 0 10zM15 14v-2h-1v2h-2v1h2v2h1v-2h2v-1h-2z\\\"/></svg>\";\n\nvar heading1 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M19 9v10h-2v-8h-2V9h4zM4 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1H10a1 1 0 0 1-1-1V11H4v4.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1H3a1 1 0 0 1 1 1v4.5z\\\"/></svg>\";\n\nvar heading2 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V11H3v4.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1H2a1 1 0 0 1 1 1v4.5zm16.076 8.343V18.5h-6.252c.067-.626.27-1.22.61-1.78.338-.561 1.006-1.305 2.005-2.232.804-.749 1.297-1.257 1.479-1.523.245-.368.368-.732.368-1.092 0-.398-.107-.703-.32-.917-.214-.214-.51-.32-.886-.32-.372 0-.669.111-.889.336-.22.224-.347.596-.38 1.117l-1.778-.178c.106-.982.438-1.686.997-2.114.558-.427 1.257-.64 2.095-.64.918 0 1.64.247 2.164.742.525.495.787 1.11.787 1.847 0 .419-.075.818-.225 1.197-.15.378-.388.775-.714 1.19-.216.275-.605.67-1.168 1.187-.563.516-.92.859-1.07 1.028a3.11 3.11 0 0 0-.365.495h3.542z\\\"/></svg>\";\n\nvar heading3 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V11H3v4.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1H2a1 1 0 0 1 1 1v4.5zm9.989 7.53 1.726-.209c.055.44.203.777.445 1.01.24.232.533.349.876.349.368 0 .678-.14.93-.42.251-.279.377-.655.377-1.13 0-.448-.12-.803-.362-1.066a1.153 1.153 0 0 0-.882-.393c-.228 0-.501.044-.819.133l.197-1.453c.482.012.85-.092 1.105-.315.253-.222.38-.517.38-.885 0-.313-.093-.563-.279-.75-.186-.185-.434-.278-.743-.278a1.07 1.07 0 0 0-.78.317c-.216.212-.347.52-.394.927l-1.644-.28c.114-.562.287-1.012.517-1.348.231-.337.553-.601.965-.794a3.24 3.24 0 0 1 1.387-.289c.876 0 1.579.28 2.108.838.436.457.653.973.653 1.549 0 .817-.446 1.468-1.339 1.955.533.114.96.37 1.28.768.319.398.478.878.478 1.441 0 .817-.298 1.513-.895 2.088-.596.576-1.339.864-2.228.864-.842 0-1.54-.243-2.094-.727-.555-.485-.876-1.118-.965-1.901z\\\"/></svg>\";\n\nvar heading4 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.5 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V11h-5v4.5a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v4.5zm13.55 10v-1.873h-3.81v-1.561l4.037-5.91h1.498v5.904h1.156v1.567h-1.156V18.5H17.05zm0-3.44v-3.18l-2.14 3.18h2.14z\\\"/></svg>\";\n\nvar heading5 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.5 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V11h-5v4.5a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v4.5zm9.578 7.607 1.777-.184c.05.402.201.72.45.955a1.223 1.223 0 0 0 1.81-.101c.258-.303.387-.759.387-1.368 0-.572-.128-1-.384-1.286-.256-.285-.59-.428-1-.428-.512 0-.971.226-1.377.679l-1.448-.21.915-4.843h4.716v1.67H15.56l-.28 1.58a2.697 2.697 0 0 1 1.219-.298 2.68 2.68 0 0 1 2.012.863c.55.576.825 1.323.825 2.241a3.36 3.36 0 0 1-.666 2.05c-.605.821-1.445 1.232-2.52 1.232-.86 0-1.56-.23-2.101-.692-.542-.461-.866-1.081-.971-1.86z\\\"/></svg>\";\n\nvar heading6 = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.5 8.5h5V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v11.5a1 1 0 0 1-1 1h-.5a1 1 0 0 1-1-1V11h-5v4.5a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h.5a1 1 0 0 1 1 1v4.5zm15.595 2.973-1.726.19c-.043-.355-.153-.617-.33-.787-.178-.169-.409-.253-.692-.253-.377 0-.695.169-.956.507-.26.339-.424 1.043-.492 2.114.445-.525.997-.787 1.657-.787.745 0 1.383.284 1.914.85.531.568.797 1.3.797 2.197 0 .952-.28 1.716-.838 2.291-.559.576-1.276.864-2.152.864-.94 0-1.712-.365-2.317-1.095-.605-.73-.908-1.927-.908-3.59 0-1.705.316-2.935.946-3.688.63-.753 1.45-1.13 2.457-1.13.706 0 1.291.198 1.755.594.463.395.758.97.885 1.723zm-4.043 3.891c0 .58.133 1.028.4 1.343.266.315.57.473.914.473.33 0 .605-.13.825-.388.22-.258.33-.68.33-1.27 0-.604-.118-1.047-.355-1.329a1.115 1.115 0 0 0-.89-.422c-.342 0-.632.134-.869.403s-.355.666-.355 1.19z\\\"/></svg>\";\n\nvar horizontalLine = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 9h16v2H2z\\\"/></svg>\";\n\nvar html = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M17 0a2 2 0 0 1 2 2v7a1 1 0 0 1 1 1v5a1 1 0 0 1-.883.993l-.118.006L19 17a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2l-.001-1.001-.116-.006A1 1 0 0 1 0 15v-5a1 1 0 0 1 .999-1L1 2a2 2 0 0 1 2-2h14zm.499 15.999h-15L2.5 17a.5.5 0 0 0 .5.5h14a.5.5 0 0 0 .5-.5l-.001-1.001zm-3.478-6.013-.014.014H14v.007l-1.525 1.525-1.46-1.46-.015.013V10h-1v5h1v-3.53l1.428 1.43.048.043.131-.129L14 11.421V15h1v-5h-.965l-.014-.014zM2 10H1v5h1v-2h2v2h1v-5H4v2H2v-2zm7 0H6v1h1v4h1v-4h1v-1zm8 0h-1v5h3v-1h-2v-4zm0-8.5H3a.5.5 0 0 0-.5.5l-.001 6.999h15L17.5 2a.5.5 0 0 0-.5-.5zM10 7v1H4V7h6zm3-2v1H4V5h9zm-3-2v1H4V3h6z\\\"/></svg>\";\n\nvar indent = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zM1.632 6.95 5.02 9.358a.4.4 0 0 1-.013.661l-3.39 2.207A.4.4 0 0 1 1 11.892V7.275a.4.4 0 0 1 .632-.326z\\\"/></svg>\";\n\nvar outdent = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zm1.618-9.55L.98 9.358a.4.4 0 0 0 .013.661l3.39 2.207A.4.4 0 0 0 5 11.892V7.275a.4.4 0 0 0-.632-.326z\\\"/></svg>\";\n\nvar table = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 5.5v3h4v-3H3Zm0 4v3h4v-3H3Zm0 4v3h4v-3H3Zm5 3h4v-3H8v3Zm5 0h4v-3h-4v3Zm4-4v-3h-4v3h4Zm0-4v-3h-4v3h4Zm1.5 8A1.5 1.5 0 0 1 17 18H3a1.5 1.5 0 0 1-1.5-1.5V3c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13.5Zm-6.5-4v-3H8v3h4Zm0-4v-3H8v3h4Z\\\"/></svg>\";\n\nconst icons = {\n    bold,\n    cancel,\n    caption,\n    check,\n    cog,\n    colorPalette,\n    eraser,\n    history,\n    image,\n    imageUpload,\n    imageAssetManager,\n    imageUrl,\n    lowVision,\n    textAlternative,\n    loupe,\n    previousArrow,\n    nextArrow,\n    importExport,\n    paragraph,\n    plus,\n    text,\n    alignBottom,\n    alignMiddle,\n    alignTop,\n    alignLeft,\n    alignCenter,\n    alignRight,\n    alignJustify,\n    objectLeft,\n    objectCenter,\n    objectRight,\n    objectFullWidth,\n    objectInline,\n    objectBlockLeft,\n    objectBlockRight,\n    objectSizeCustom,\n    objectSizeFull,\n    objectSizeLarge,\n    objectSizeSmall,\n    objectSizeMedium,\n    pencil,\n    pilcrow,\n    quote,\n    threeVerticalDots,\n    dragIndicator,\n    redo,\n    undo,\n    bulletedList,\n    numberedList,\n    todoList,\n    codeBlock,\n    browseFiles,\n    heading1,\n    heading2,\n    heading3,\n    heading4,\n    heading5,\n    heading6,\n    horizontalLine,\n    html,\n    indent,\n    outdent,\n    table\n};\n\nexport { Command, Context, ContextPlugin, DataApiMixin, Editor, ElementApiMixin, MultiCommand, PendingActions, Plugin, attachToForm, icons, secureSourceElement };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Observer, BubblingEventInfo, DomEventData } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { env } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module enter/utils\n */ /**\n * Returns attributes that should be preserved on the enter keystroke.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param schema Model's schema.\n * @param allAttributes Attributes to filter.\n */ function* getCopyOnEnterAttributes(schema, allAttributes) {\n    for (const attribute of allAttributes){\n        if (attribute && schema.getAttributeProperties(attribute[0]).copyOnEnter) {\n            yield attribute;\n        }\n    }\n}\n\n/**\n * Enter command used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> keystroke.\n */ class EnterCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        this.editor.model.change((writer)=>{\n            this.enterBlock(writer);\n            this.fire('afterExecute', {\n                writer\n            });\n        });\n    }\n    /**\n\t * Splits a block where the document selection is placed, in the way how the <kbd>Enter</kbd> key is expected to work:\n\t *\n\t * ```\n\t * <p>Foo[]bar</p>   ->   <p>Foo</p><p>[]bar</p>\n\t * <p>Foobar[]</p>   ->   <p>Foobar</p><p>[]</p>\n\t * <p>Fo[ob]ar</p>   ->   <p>Fo</p><p>[]ar</p>\n\t * ```\n\t *\n\t * In some cases, the split will not happen:\n\t *\n\t * ```\n\t * // The selection parent is a limit element:\n\t * <figcaption>A[bc]d</figcaption>   ->   <figcaption>A[]d</figcaption>\n\t *\n\t * // The selection spans over multiple elements:\n\t * <h>x[x</h><p>y]y<p>   ->   <h>x</h><p>[]y</p>\n\t * ```\n\t *\n\t * @param writer Writer to use when performing the enter action.\n\t * @returns Boolean indicating if the block was split.\n\t */ enterBlock(writer) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const schema = model.schema;\n        const isSelectionEmpty = selection.isCollapsed;\n        const range = selection.getFirstRange();\n        const startElement = range.start.parent;\n        const endElement = range.end.parent;\n        // Don't touch the roots and other limit elements.\n        if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n            // Delete the selected content but only if inside a single limit element.\n            // Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n            // This is an edge case and it's hard to tell what should actually happen because such a selection\n            // is not entirely valid.\n            if (!isSelectionEmpty && startElement == endElement) {\n                model.deleteContent(selection);\n            }\n            return false;\n        }\n        if (isSelectionEmpty) {\n            const attributesToCopy = getCopyOnEnterAttributes(writer.model.schema, selection.getAttributes());\n            splitBlock(writer, range.start);\n            writer.setSelectionAttribute(attributesToCopy);\n            return true;\n        } else {\n            const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n            const isContainedWithinOneElement = startElement == endElement;\n            model.deleteContent(selection, {\n                leaveUnmerged\n            });\n            if (leaveUnmerged) {\n                // Partially selected elements.\n                //\n                // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n                if (isContainedWithinOneElement) {\n                    splitBlock(writer, selection.focus);\n                    return true;\n                } else {\n                    writer.setSelection(endElement, 0);\n                }\n            }\n        }\n        return false;\n    }\n}\nfunction splitBlock(writer, splitPos) {\n    writer.split(splitPos);\n    writer.setSelection(splitPos.parent.nextSibling, 0);\n}\n\nconst ENTER_EVENT_TYPES = {\n    insertParagraph: {\n        isSoft: false\n    },\n    insertLineBreak: {\n        isSoft: true\n    }\n};\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter `Document#enter`} event.\n */ class EnterObserver extends Observer {\n    /**\n\t * @inheritDoc\n\t */ constructor(view){\n        super(view);\n        const doc = this.document;\n        let shiftPressed = false;\n        doc.on('keydown', (evt, data)=>{\n            shiftPressed = data.shiftKey;\n        });\n        doc.on('beforeinput', (evt, data)=>{\n            if (!this.isEnabled) {\n                return;\n            }\n            let inputType = data.inputType;\n            // See https://github.com/ckeditor/ckeditor5/issues/13321.\n            if (env.isSafari && shiftPressed && inputType == 'insertParagraph') {\n                inputType = 'insertLineBreak';\n            }\n            const domEvent = data.domEvent;\n            const enterEventSpec = ENTER_EVENT_TYPES[inputType];\n            if (!enterEventSpec) {\n                return;\n            }\n            const event = new BubblingEventInfo(doc, 'enter', data.targetRanges[0]);\n            doc.fire(event, new DomEventData(view, domEvent, {\n                isSoft: enterEventSpec.isSoft\n            }));\n            // Stop `beforeinput` event if `enter` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (event.stop.called) {\n                evt.stop();\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ observe() {}\n    /**\n\t * @inheritDoc\n\t */ stopObserving() {}\n}\n\n/**\n * This plugin handles the <kbd>Enter</kbd> keystroke (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */ class Enter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Enter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = this.editor.t;\n        view.addObserver(EnterObserver);\n        editor.commands.add('enter', new EnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data)=>{\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The soft enter key is handled by the ShiftEnter plugin.\n            if (data.isSoft) {\n                return;\n            }\n            editor.execute('enter');\n            view.scrollToTheSelection();\n        }, {\n            priority: 'low'\n        });\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Insert a hard break (a new paragraph)'),\n                    keystroke: 'Enter'\n                }\n            ]\n        });\n    }\n}\n\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n */ class ShiftEnterCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const doc = model.document;\n        model.change((writer)=>{\n            softBreakAction(model, writer, doc.selection);\n            this.fire('afterExecute', {\n                writer\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.isEnabled = isEnabled(model.schema, doc.selection);\n    }\n}\n/**\n * Checks whether the ShiftEnter command should be enabled in the specified selection.\n */ function isEnabled(schema, selection) {\n    // At this moment it is okay to support single range selections only.\n    // But in the future we may need to change that.\n    if (selection.rangeCount > 1) {\n        return false;\n    }\n    const anchorPos = selection.anchor;\n    // Check whether the break element can be inserted in the current selection anchor.\n    if (!anchorPos || !schema.checkChild(anchorPos, 'softBreak')) {\n        return false;\n    }\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    // Do not modify the content if selection is cross-limit elements.\n    if ((isInsideLimitElement(startElement, schema) || isInsideLimitElement(endElement, schema)) && startElement !== endElement) {\n        return false;\n    }\n    return true;\n}\n/**\n * Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n */ function softBreakAction(model, writer, selection) {\n    const isSelectionEmpty = selection.isCollapsed;\n    const range = selection.getFirstRange();\n    const startElement = range.start.parent;\n    const endElement = range.end.parent;\n    const isContainedWithinOneElement = startElement == endElement;\n    if (isSelectionEmpty) {\n        const attributesToCopy = getCopyOnEnterAttributes(model.schema, selection.getAttributes());\n        insertBreak(model, writer, range.end);\n        writer.removeSelectionAttribute(selection.getAttributeKeys());\n        writer.setSelectionAttribute(attributesToCopy);\n    } else {\n        const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n        model.deleteContent(selection, {\n            leaveUnmerged\n        });\n        // Selection within one element:\n        //\n        // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n        if (isContainedWithinOneElement) {\n            insertBreak(model, writer, selection.focus);\n        } else {\n            // Move the selection to the 2nd element (last step of the example above).\n            if (leaveUnmerged) {\n                writer.setSelection(endElement, 0);\n            }\n        }\n    }\n}\nfunction insertBreak(model, writer, position) {\n    const breakLineElement = writer.createElement('softBreak');\n    model.insertContent(breakLineElement, position);\n    writer.setSelection(breakLineElement, 'after');\n}\n/**\n * Checks whether the specified `element` is a child of the limit element.\n *\n * Checking whether the `<p>` element is inside a limit element:\n *   - `<$root><p>Text.</p></$root> => false`\n *   - `<$root><limitElement><p>Text</p></limitElement></$root> => true`\n */ function isInsideLimitElement(element, schema) {\n    // `$root` is a limit element but in this case is an invalid element.\n    if (element.is('rootElement')) {\n        return false;\n    }\n    return schema.isLimit(element) || isInsideLimitElement(element.parent, schema);\n}\n\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n */ class ShiftEnter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ShiftEnter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = this.editor.t;\n        // Configure the schema.\n        schema.register('softBreak', {\n            allowWhere: '$text',\n            isInline: true\n        });\n        // Configure converters.\n        conversion.for('upcast').elementToElement({\n            model: 'softBreak',\n            view: 'br'\n        });\n        conversion.for('downcast').elementToElement({\n            model: 'softBreak',\n            view: (modelElement, { writer })=>writer.createEmptyElement('br')\n        });\n        view.addObserver(EnterObserver);\n        editor.commands.add('shiftEnter', new ShiftEnterCommand(editor));\n        this.listenTo(viewDocument, 'enter', (evt, data)=>{\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            // The hard enter key is handled by the Enter plugin.\n            if (!data.isSoft) {\n                return;\n            }\n            editor.execute('shiftEnter');\n            view.scrollToTheSelection();\n        }, {\n            priority: 'low'\n        });\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Insert a soft break (a <code>&lt;br&gt;</code> element)'),\n                    keystroke: 'Shift+Enter'\n                }\n            ]\n        });\n    }\n}\n\nexport { Enter, ShiftEnter };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction createDefer() {\n  const deferred = {\n    resolve: null,\n    promise: null\n  };\n  deferred.promise = new Promise((resolve) => {\n    deferred.resolve = resolve;\n  });\n  return deferred;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction waitFor(callback, {\n  timeOutAfter = 500,\n  retryAfter = 100\n} = {}) {\n  return new Promise((resolve, reject) => {\n    const startTime = Date.now();\n    let lastError = null;\n    const timeoutTimerId = setTimeout(() => {\n      reject(lastError ?? new Error(\"Timeout\"));\n    }, timeOutAfter);\n    const tick = async () => {\n      try {\n        const result = await callback();\n        clearTimeout(timeoutTimerId);\n        resolve(result);\n      } catch (err) {\n        lastError = err;\n        if (Date.now() - startTime > timeOutAfter) {\n          reject(err);\n        } else {\n          setTimeout(tick, retryAfter);\n        }\n      }\n    };\n    tick();\n  });\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst INJECTED_SCRIPTS = /* @__PURE__ */ new Map();\nfunction injectScript(src, { attributes } = {}) {\n  if (INJECTED_SCRIPTS.has(src)) {\n    return INJECTED_SCRIPTS.get(src);\n  }\n  const maybePrevScript = document.querySelector(`script[src=\"${src}\"]`);\n  if (maybePrevScript) {\n    console.warn(`Script with \"${src}\" src is already present in DOM!`);\n    maybePrevScript.remove();\n  }\n  const promise = new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.onerror = reject;\n    script.onload = () => {\n      resolve();\n    };\n    for (const [key, value] of Object.entries(attributes || {})) {\n      script.setAttribute(key, value);\n    }\n    script.setAttribute(\"data-injected-by\", \"ckeditor-integration\");\n    script.type = \"text/javascript\";\n    script.async = true;\n    script.src = src;\n    document.head.appendChild(script);\n    const observer = new MutationObserver((mutations) => {\n      const removedNodes = mutations.flatMap((mutation) => Array.from(mutation.removedNodes));\n      if (removedNodes.includes(script)) {\n        INJECTED_SCRIPTS.delete(src);\n        observer.disconnect();\n      }\n    });\n    observer.observe(document.head, {\n      childList: true,\n      subtree: true\n    });\n  });\n  INJECTED_SCRIPTS.set(src, promise);\n  return promise;\n}\nasync function injectScriptsInParallel(sources, props) {\n  await Promise.all(\n    sources.map((src) => injectScript(src, props))\n  );\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst INJECTED_STYLESHEETS = /* @__PURE__ */ new Map();\nfunction injectStylesheet({\n  href,\n  placementInHead = \"start\",\n  attributes = {}\n}) {\n  if (INJECTED_STYLESHEETS.has(href)) {\n    return INJECTED_STYLESHEETS.get(href);\n  }\n  const maybePrevStylesheet = document.querySelector(`link[href=\"${href}\"][rel=\"stylesheet\"]`);\n  if (maybePrevStylesheet) {\n    console.warn(`Stylesheet with \"${href}\" href is already present in DOM!`);\n    maybePrevStylesheet.remove();\n  }\n  const appendLinkTagToHead = (link) => {\n    const previouslyInjectedLinks = Array.from(\n      document.head.querySelectorAll('link[data-injected-by=\"ckeditor-integration\"]')\n    );\n    switch (placementInHead) {\n      case \"start\":\n        if (previouslyInjectedLinks.length) {\n          previouslyInjectedLinks.slice(-1)[0].after(link);\n        } else {\n          document.head.insertBefore(link, document.head.firstChild);\n        }\n        break;\n      case \"end\":\n        document.head.appendChild(link);\n        break;\n    }\n  };\n  const promise = new Promise((resolve, reject) => {\n    const link = document.createElement(\"link\");\n    for (const [key, value] of Object.entries(attributes || {})) {\n      link.setAttribute(key, value);\n    }\n    link.setAttribute(\"data-injected-by\", \"ckeditor-integration\");\n    link.rel = \"stylesheet\";\n    link.href = href;\n    link.onerror = reject;\n    link.onload = () => {\n      resolve();\n    };\n    appendLinkTagToHead(link);\n    const observer = new MutationObserver((mutations) => {\n      const removedNodes = mutations.flatMap((mutation) => Array.from(mutation.removedNodes));\n      if (removedNodes.includes(link)) {\n        INJECTED_STYLESHEETS.delete(href);\n        observer.disconnect();\n      }\n    });\n    observer.observe(document.head, {\n      childList: true,\n      subtree: true\n    });\n  });\n  INJECTED_STYLESHEETS.set(href, promise);\n  return promise;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction isSSR() {\n  return typeof window === \"undefined\";\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction once(fn) {\n  let lastResult = null;\n  return (...args) => {\n    if (!lastResult) {\n      lastResult = {\n        current: fn(...args)\n      };\n    }\n    return lastResult.current;\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction overwriteArray(source, destination) {\n  destination.length = 0;\n  destination.push(...source);\n  return destination;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction overwriteObject(source, destination) {\n  for (const prop of Object.getOwnPropertyNames(destination)) {\n    delete destination[prop];\n  }\n  for (const [key, value] of Object.entries(source)) {\n    if (value !== destination && key !== \"prototype\" && key !== \"__proto__\") {\n      destination[key] = value;\n    }\n  }\n  return destination;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction preloadResource(url, { attributes } = {}) {\n  if (document.head.querySelector(`link[href=\"${url}\"][rel=\"preload\"]`)) {\n    return;\n  }\n  const link = document.createElement(\"link\");\n  for (const [key, value] of Object.entries(attributes || {})) {\n    link.setAttribute(key, value);\n  }\n  link.setAttribute(\"data-injected-by\", \"ckeditor-integration\");\n  link.rel = \"preload\";\n  link.as = detectTypeOfResource(url);\n  link.href = url;\n  document.head.insertBefore(link, document.head.firstChild);\n}\nfunction detectTypeOfResource(url) {\n  switch (true) {\n    case /\\.css$/.test(url):\n      return \"style\";\n    case /\\.js$/.test(url):\n      return \"script\";\n    default:\n      return \"fetch\";\n  }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction shallowCompareArrays(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst HEX_NUMBERS = new Array(256).fill(\"\").map((_, index) => (\"0\" + index.toString(16)).slice(-2));\nfunction uid() {\n  const [r1, r2, r3, r4] = crypto.getRandomValues(new Uint32Array(4));\n  return \"e\" + HEX_NUMBERS[r1 >> 0 & 255] + HEX_NUMBERS[r1 >> 8 & 255] + HEX_NUMBERS[r1 >> 16 & 255] + HEX_NUMBERS[r1 >> 24 & 255] + HEX_NUMBERS[r2 >> 0 & 255] + HEX_NUMBERS[r2 >> 8 & 255] + HEX_NUMBERS[r2 >> 16 & 255] + HEX_NUMBERS[r2 >> 24 & 255] + HEX_NUMBERS[r3 >> 0 & 255] + HEX_NUMBERS[r3 >> 8 & 255] + HEX_NUMBERS[r3 >> 16 & 255] + HEX_NUMBERS[r3 >> 24 & 255] + HEX_NUMBERS[r4 >> 0 & 255] + HEX_NUMBERS[r4 >> 8 & 255] + HEX_NUMBERS[r4 >> 16 & 255] + HEX_NUMBERS[r4 >> 24 & 255];\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction uniq(source) {\n  return Array.from(new Set(source));\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nasync function waitForWindowEntry(entryNames, config) {\n  const tryPickBundle = () => entryNames.map((name) => window[name]).filter(Boolean)[0];\n  return waitFor(\n    () => {\n      const result = tryPickBundle();\n      if (!result) {\n        throw new Error(`Window entry \"${entryNames.join(\",\")}\" not found.`);\n      }\n      return result;\n    },\n    config\n  );\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction filterObjectValues(obj, filter) {\n  const filteredEntries = Object.entries(obj).filter(([key, value]) => filter(value, key));\n  return Object.fromEntries(filteredEntries);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction filterBlankObjectValues(obj) {\n  return filterObjectValues(\n    obj,\n    (value) => value !== null && value !== void 0\n  );\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction mapObjectValues(obj, mapper) {\n  const mappedEntries = Object.entries(obj).map(([key, value]) => [key, mapper(value, key)]);\n  return Object.fromEntries(mappedEntries);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction without(itemsToRemove, items) {\n  return items.filter((item) => !itemsToRemove.includes(item));\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction appendExtraPluginsToEditorConfig(config, plugins) {\n  const extraPlugins = config.extraPlugins || [];\n  return {\n    ...config,\n    extraPlugins: [\n      ...extraPlugins,\n      ...plugins.filter((item) => !extraPlugins.includes(item))\n    ]\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction isSemanticVersion(version) {\n  return !!version && /^\\d+\\.\\d+\\.\\d+/.test(version);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction isCKCdnTestingVersion(version) {\n  if (!version) {\n    return false;\n  }\n  return [\"nightly\", \"alpha\", \"internal\"].some((testVersion) => version.includes(testVersion));\n}\nfunction isCKCdnVersion(version) {\n  return isSemanticVersion(version) || isCKCdnTestingVersion(version);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction destructureSemanticVersion(version) {\n  if (!isSemanticVersion(version)) {\n    throw new Error(`Invalid semantic version: ${version || \"<blank>\"}.`);\n  }\n  const [major, minor, patch] = version.split(\".\");\n  return {\n    major: Number.parseInt(major, 10),\n    minor: Number.parseInt(minor, 10),\n    patch: Number.parseInt(patch, 10)\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction getLicenseVersionFromEditorVersion(version) {\n  if (isCKCdnTestingVersion(version)) {\n    return 3;\n  }\n  const { major } = destructureSemanticVersion(version);\n  switch (true) {\n    case major >= 44:\n      return 3;\n    case major >= 38:\n      return 2;\n    default:\n      return 1;\n  }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction getCKBaseBundleInstallationInfo() {\n  const { CKEDITOR_VERSION, CKEDITOR } = window;\n  if (!isCKCdnVersion(CKEDITOR_VERSION)) {\n    return null;\n  }\n  return {\n    source: CKEDITOR ? \"cdn\" : \"npm\",\n    version: CKEDITOR_VERSION\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction getSupportedLicenseVersionInstallationInfo() {\n  const installationInfo = getCKBaseBundleInstallationInfo();\n  if (!installationInfo) {\n    return null;\n  }\n  return getLicenseVersionFromEditorVersion(installationInfo.version);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction isCKEditorFreeLicense(licenseKey, licenseVersion) {\n  licenseVersion ||= getSupportedLicenseVersionInstallationInfo() || void 0;\n  switch (licenseVersion) {\n    case 1:\n    case 2:\n      return licenseKey === void 0;\n    case 3:\n      return licenseKey === \"GPL\";\n    default: {\n      return false;\n    }\n  }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction createIntegrationUsageDataPlugin(integrationName, usageData) {\n  return function IntegrationUsageDataPlugin(editor) {\n    if (isCKEditorFreeLicense(editor.config.get(\"licenseKey\"))) {\n      return;\n    }\n    editor.on(\"collectUsageData\", (source, { setUsageData }) => {\n      setUsageData(`integration.${integrationName}`, usageData);\n    });\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst CK_CDN_URL = \"https://cdn.ckeditor.com\";\nfunction createCKCdnUrl(bundle, file, version) {\n  return `${CK_CDN_URL}/${bundle}/${version}/${file}`;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst CKBOX_CDN_URL = \"https://cdn.ckbox.io\";\nfunction createCKBoxCdnUrl(bundle, file, version) {\n  return `${CKBOX_CDN_URL}/${bundle}/${version}/${file}`;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst CK_DOCS_URL = \"https://ckeditor.com/docs/ckeditor5\";\nfunction createCKDocsUrl(path, version = \"latest\") {\n  return `${CK_DOCS_URL}/${version}/${path}`;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction createCKCdnBaseBundlePack({\n  version,\n  translations,\n  createCustomCdnUrl = createCKCdnUrl\n}) {\n  const urls = {\n    scripts: [\n      // Load the main script of the base features.\n      createCustomCdnUrl(\"ckeditor5\", \"ckeditor5.umd.js\", version),\n      // Load all JavaScript files from the base features.\n      // EN bundle is prebuilt into the main script, so we don't need to load it separately.\n      ...without([\"en\"], translations || []).map(\n        (translation) => createCustomCdnUrl(\"ckeditor5\", `translations/${translation}.umd.js`, version)\n      )\n    ],\n    stylesheets: [\n      createCustomCdnUrl(\"ckeditor5\", \"ckeditor5.css\", version)\n    ]\n  };\n  return {\n    // Preload resources specified in the pack, before loading the main script.\n    preload: [\n      ...urls.stylesheets,\n      ...urls.scripts\n    ],\n    scripts: [\n      // It's safe to load translations and the main script in parallel.\n      async (attributes) => injectScriptsInParallel(urls.scripts, attributes)\n    ],\n    // Load all stylesheets of the base features.\n    stylesheets: urls.stylesheets,\n    // Pick the exported global variables from the window object.\n    checkPluginLoaded: async () => waitForWindowEntry([\"CKEDITOR\"]),\n    // Check if the CKEditor base bundle is already loaded and throw an error if it is.\n    beforeInject: () => {\n      const installationInfo = getCKBaseBundleInstallationInfo();\n      switch (installationInfo?.source) {\n        case \"npm\":\n          throw new Error(\n            \"CKEditor 5 is already loaded from npm. Check the migration guide for more details: \" + createCKDocsUrl(\"updating/migration-to-cdn/vanilla-js.html\")\n          );\n        case \"cdn\":\n          if (installationInfo.version !== version) {\n            throw new Error(\n              `CKEditor 5 is already loaded from CDN in version ${installationInfo.version}. Remove the old <script> and <link> tags loading CKEditor 5 to allow loading the ${version} version.`\n            );\n          }\n          break;\n      }\n    }\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction createCKCdnPremiumBundlePack({\n  version,\n  translations,\n  createCustomCdnUrl = createCKCdnUrl\n}) {\n  const urls = {\n    scripts: [\n      // Load the main script of the premium features.\n      createCustomCdnUrl(\"ckeditor5-premium-features\", \"ckeditor5-premium-features.umd.js\", version),\n      // Load all JavaScript files from the premium features.\n      // EN bundle is prebuilt into the main script, so we don't need to load it separately.\n      ...without([\"en\"], translations || []).map(\n        (translation) => createCustomCdnUrl(\"ckeditor5-premium-features\", `translations/${translation}.umd.js`, version)\n      )\n    ],\n    stylesheets: [\n      createCustomCdnUrl(\"ckeditor5-premium-features\", \"ckeditor5-premium-features.css\", version)\n    ]\n  };\n  return {\n    // Preload resources specified in the pack, before loading the main script.\n    preload: [\n      ...urls.stylesheets,\n      ...urls.scripts\n    ],\n    scripts: [\n      // It's safe to load translations and the main script in parallel.\n      async (attributes) => injectScriptsInParallel(urls.scripts, attributes)\n    ],\n    // Load all stylesheets of the premium features.\n    stylesheets: urls.stylesheets,\n    // Pick the exported global variables from the window object.\n    checkPluginLoaded: async () => waitForWindowEntry([\"CKEDITOR_PREMIUM_FEATURES\"])\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nasync function loadCKCdnResourcesPack(pack) {\n  let {\n    htmlAttributes = {},\n    scripts = [],\n    stylesheets = [],\n    preload,\n    beforeInject,\n    checkPluginLoaded\n  } = normalizeCKCdnResourcesPack(pack);\n  beforeInject?.();\n  if (!preload) {\n    preload = uniq([\n      ...stylesheets.filter((item) => typeof item === \"string\"),\n      ...scripts.filter((item) => typeof item === \"string\")\n    ]);\n  }\n  for (const url of preload) {\n    preloadResource(url, {\n      attributes: htmlAttributes\n    });\n  }\n  await Promise.all(\n    uniq(stylesheets).map((href) => injectStylesheet({\n      href,\n      attributes: htmlAttributes,\n      placementInHead: \"start\"\n    }))\n  );\n  for (const script of uniq(scripts)) {\n    const injectorProps = {\n      attributes: htmlAttributes\n    };\n    if (typeof script === \"string\") {\n      await injectScript(script, injectorProps);\n    } else {\n      await script(injectorProps);\n    }\n  }\n  return checkPluginLoaded?.();\n}\nfunction normalizeCKCdnResourcesPack(pack) {\n  if (Array.isArray(pack)) {\n    return {\n      scripts: pack.filter(\n        (item) => typeof item === \"function\" || item.endsWith(\".js\")\n      ),\n      stylesheets: pack.filter(\n        (item) => item.endsWith(\".css\")\n      )\n    };\n  }\n  if (typeof pack === \"function\") {\n    return {\n      checkPluginLoaded: pack\n    };\n  }\n  return pack;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction combineCKCdnBundlesPacks(packs) {\n  const normalizedPacks = mapObjectValues(\n    filterBlankObjectValues(packs),\n    normalizeCKCdnResourcesPack\n  );\n  const mergedPacks = Object.values(normalizedPacks).reduce(\n    (acc, pack) => {\n      acc.scripts.push(...pack.scripts ?? []);\n      acc.stylesheets.push(...pack.stylesheets ?? []);\n      acc.preload.push(...pack.preload ?? []);\n      return acc;\n    },\n    {\n      preload: [],\n      scripts: [],\n      stylesheets: []\n    }\n  );\n  const checkPluginLoaded = async () => {\n    const exportedGlobalVariables = /* @__PURE__ */ Object.create(null);\n    for (const [name, pack] of Object.entries(normalizedPacks)) {\n      exportedGlobalVariables[name] = await pack?.checkPluginLoaded?.();\n    }\n    return exportedGlobalVariables;\n  };\n  const beforeInject = () => {\n    for (const pack of Object.values(normalizedPacks)) {\n      pack.beforeInject?.();\n    }\n  };\n  return {\n    ...mergedPacks,\n    beforeInject,\n    checkPluginLoaded\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction getCKBoxInstallationInfo() {\n  const version = window.CKBox?.version;\n  if (!isSemanticVersion(version)) {\n    return null;\n  }\n  return {\n    source: \"cdn\",\n    version\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction createCKBoxBundlePack({\n  version,\n  theme = \"lark\",\n  translations,\n  createCustomCdnUrl = createCKBoxCdnUrl\n}) {\n  return {\n    // Load the main script of the base features.\n    scripts: [\n      createCustomCdnUrl(\"ckbox\", \"ckbox.js\", version),\n      // EN bundle is prebuilt into the main script, so we don't need to load it separately.\n      ...without([\"en\"], translations || []).map(\n        (translation) => createCustomCdnUrl(\"ckbox\", `translations/${translation}.js`, version)\n      )\n    ],\n    // Load optional theme, if provided. It's not required but recommended because it improves the look and feel.\n    ...theme && {\n      stylesheets: [\n        createCustomCdnUrl(\"ckbox\", `styles/themes/${theme}.css`, version)\n      ]\n    },\n    // Pick the exported global variables from the window object.\n    checkPluginLoaded: async () => waitForWindowEntry([\"CKBox\"]),\n    // Check if the CKBox bundle is already loaded and throw an error if it is.\n    beforeInject: () => {\n      const installationInfo = getCKBoxInstallationInfo();\n      if (installationInfo && installationInfo.version !== version) {\n        throw new Error(\n          `CKBox is already loaded from CDN in version ${installationInfo.version}. Remove the old <script> and <link> tags loading CKBox to allow loading the ${version} version.`\n        );\n      }\n    }\n  };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction isCKCdnSupportedByEditorVersion(version) {\n  if (isCKCdnTestingVersion(version)) {\n    return true;\n  }\n  const { major } = destructureSemanticVersion(version);\n  const licenseVersion = getLicenseVersionFromEditorVersion(version);\n  switch (licenseVersion) {\n    case 3:\n      return true;\n    default:\n      return major === 43;\n  }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction combineCdnPluginsPacks(pluginsPacks) {\n  const normalizedPluginsPacks = mapObjectValues(pluginsPacks, (pluginPack, pluginName) => {\n    if (!pluginPack) {\n      return void 0;\n    }\n    const normalizedPluginPack = normalizeCKCdnResourcesPack(pluginPack);\n    return {\n      // Provide default window accessor object if the plugin pack does not define it.\n      checkPluginLoaded: async () => waitForWindowEntry([pluginName]),\n      // Transform the plugin pack to a normalized advanced pack.\n      ...normalizedPluginPack\n    };\n  });\n  return combineCKCdnBundlesPacks(\n    normalizedPluginsPacks\n  );\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction loadCKEditorCloud(config) {\n  const {\n    version,\n    translations,\n    plugins,\n    premium,\n    ckbox,\n    createCustomCdnUrl,\n    injectedHtmlElementsAttributes = {\n      crossorigin: \"anonymous\"\n    }\n  } = config;\n  validateCKEditorVersion(version);\n  const pack = combineCKCdnBundlesPacks({\n    CKEditor: createCKCdnBaseBundlePack({\n      version,\n      translations,\n      createCustomCdnUrl\n    }),\n    ...premium && {\n      CKEditorPremiumFeatures: createCKCdnPremiumBundlePack({\n        version,\n        translations,\n        createCustomCdnUrl\n      })\n    },\n    ...ckbox && {\n      CKBox: createCKBoxBundlePack(ckbox)\n    },\n    loadedPlugins: combineCdnPluginsPacks(plugins ?? {})\n  });\n  return loadCKCdnResourcesPack(\n    {\n      ...pack,\n      htmlAttributes: injectedHtmlElementsAttributes\n    }\n  );\n}\nfunction validateCKEditorVersion(version) {\n  if (isCKCdnTestingVersion(version)) {\n    console.warn(\n      \"You are using a testing version of CKEditor 5. Please remember that it is not suitable for production environments.\"\n    );\n  }\n  if (!isCKCdnSupportedByEditorVersion(version)) {\n    throw new Error(\n      `The CKEditor 5 CDN can't be used with the given editor version: ${version}. Please make sure you are using at least the CKEditor 5 version 44.`\n    );\n  }\n}\n\nexport { CKBOX_CDN_URL, CK_CDN_URL, INJECTED_SCRIPTS, INJECTED_STYLESHEETS, appendExtraPluginsToEditorConfig, createCKBoxCdnUrl, createCKCdnUrl, createDefer, createIntegrationUsageDataPlugin, filterBlankObjectValues, filterObjectValues, injectScript, injectScriptsInParallel, injectStylesheet, isCKEditorFreeLicense, isSSR, loadCKEditorCloud, mapObjectValues, once, overwriteArray, overwriteObject, preloadResource, shallowCompareArrays, uid, uniq, waitFor, waitForWindowEntry, without };\n//# sourceMappingURL=index.js.map\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nimport React, { useRef, useEffect, useCallback, useState, memo, forwardRef, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createDefer, once, uid, createIntegrationUsageDataPlugin, isCKEditorFreeLicense, appendExtraPluginsToEditorConfig, shallowCompareArrays, uniq, overwriteObject, overwriteArray, isSSR, loadCKEditorCloud } from \"@ckeditor/ckeditor5-integrations-common\";\nimport { loadCKEditorCloud as loadCKEditorCloud2 } from \"@ckeditor/ckeditor5-integrations-common\";\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst _LifeCycleElementSemaphore = class _LifeCycleElementSemaphore {\n  constructor(element, lifecycle) {\n    /**\n     * This should define async methods for initializing and destroying the editor.\n     * Essentially, it's an async version of basic React lifecycle methods like `componentDidMount`, `componentWillUnmount`.\n     *\n     * \t* Result of {@link LifeCycleAsyncOperators#mount} method is passed to {@link LifeCycleAsyncOperators#unmount} as an argument.\n     */\n    __publicField(this, \"_lifecycle\");\n    /**\n     * This is the element instance that the editor uses for mounting. This element should contain the `ckeditorInstance` member\n     * once the editor has been successfully mounted to it. The semaphore ensures that a new instance of the editor, which will\n     * be assigned to this element by the {@link #_lifecycle:mount} method, will always be initialized after the successful\n     * destruction of the underlying `ckeditorInstance` that was previously mounted on this element.\n     */\n    __publicField(this, \"_element\");\n    /**\n     * This is the lock mechanism utilized by the {@link #lock} and {@link #release} methods.\n     *\n     * \t* If the editor is not yet mounted and is awaiting mounting (for instance, when another editor is\n     * \t  occupying the element), then it is null.\n     *\n     * \t* When the editor is mounted on the element, this variable holds an unresolved promise that will be\n     * \t  resolved after the editor is destroyed.\n     *\n     * \t* Once the editor is destroyed (and it was previously mounted), the promise is resolved.\n     */\n    __publicField(this, \"_releaseLock\", null);\n    /**\n     * This is the result of the {@link #_lifecycle:mount} function. This value should be reset to `null`\n     * once the semaphore is released. It is utilized to store certain data that must be removed following\n     * the destruction of the editor. This data may include the editor's instance, the assigned watchdog,\n     * or handles for additional window listeners.\n     */\n    __publicField(this, \"_value\", null);\n    /**\n     * This is a list of callbacks that are triggered if the semaphore {@link #_lifecycle:mount} method executes successfully.\n     * It is utilized in scenarios where we need to assign certain properties to an editor that is currently in the process of mounting.\n     * An instance of such usage could be two-way binding. We aim to prevent the loss of all `setData` calls if the editor has not\n     * yet been mounted, therefore these calls will be executed immediately following the completion of the mounting process.\n     */\n    __publicField(this, \"_afterMountCallbacks\", []);\n    /**\n     * This represents the actual mounting state of the semaphore. It is primarily used by the {@link #release} method to\n     * determine whether the initialization of the editor should be skipped or, if the editor is already initialized, the editor\n     * should be destroyed.\n     *\n     * \t* If `destroyedBeforeInitialization` is true, then the {@link #release} method was invoked before the editor began to mount.\n     * \t  This often occurs in strict mode when we assign a promise to the {@link LifeCycleEditorElementSemaphore#_semaphores} map\n     * \t  and the assigned `mount` callback has not yet been called. In this scenario, it is safe to skip the initialization of the editor\n     * \t  and simply release the semaphore.\n     *\n     *\t* If `mountingInProgress` is a Promise, then the {@link #release} method was invoked after the initialization of the editor and\n     \t  the editor must be destroyed before the semaphore is released.\n    */\n    __publicField(this, \"_state\", {\n      destroyedBeforeInitialization: false,\n      mountingInProgress: null\n    });\n    /**\n     * Inverse of {@link #_lock} method that tries to destroy attached editor.\n     *\n     * \t* If editor is being already attached to element (or is in attaching process) then after fully initialization of editor\n     * \t  destroy is performed and semaphore is released. The {@link #_lifecycle} unmount method is called.\n     *\n     * \t* If editor is being destroyed before initialization then it does nothing but sets `destroyedBeforeInitialization` flag that\n     * \t  will be later checked by {@link #_lock} method in initialization. The {@link #_lifecycle} unmount method is not called.\n     *\n     * *Important note:*\n     *\n     * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n     * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n     */\n    __publicField(this, \"release\", once(() => {\n      const { _releaseLock, _state, _element, _lifecycle } = this;\n      if (_state.mountingInProgress) {\n        _state.mountingInProgress.then(() => _lifecycle.unmount({\n          element: _element,\n          // Mount result might be overridden by watchdog during restart so use instance variable.\n          mountResult: this.value\n        })).catch((error) => {\n          console.error(\"Semaphore unmounting error:\", error);\n        }).then(_releaseLock.resolve).then(() => {\n          this._value = null;\n        });\n      } else {\n        _state.destroyedBeforeInitialization = true;\n        _releaseLock.resolve();\n      }\n    }));\n    this._element = element;\n    this._lifecycle = lifecycle;\n    this._lock();\n  }\n  /**\n   * Getter for {@link #_value}.\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * Occasionally, the Watchdog restarts the editor instance, resulting in a new instance being assigned to the semaphore.\n   * In terms of race conditions, it's generally safer to simply override the semaphore value rather than recreating it\n   * with a different one.\n   */\n  unsafeSetValue(value) {\n    this._value = value;\n    this._afterMountCallbacks.forEach((callback) => callback(value));\n    this._afterMountCallbacks = [];\n  }\n  /**\n   * This registers a callback that will be triggered after the editor has been successfully mounted.\n   *\n   * \t* If the editor is already mounted, the callback will be executed immediately.\n   *\t* If the editor is in the process of mounting, the callback will be executed upon successful mounting.\n  * \t* If the editor is never mounted, the passed callback will not be executed.\n  * \t* If an exception is thrown within the callback, it will be re-thrown in the semaphore.\n  */\n  runAfterMount(callback) {\n    const { _value, _afterMountCallbacks } = this;\n    if (_value) {\n      callback(_value);\n    } else {\n      _afterMountCallbacks.push(callback);\n    }\n  }\n  /**\n   * This method is used to inform other components that the {@link #_element} will be used by the editor,\n   * which is initialized by the {@link #_lifecycle} methods.\n   *\n   * \t* If an editor is already present on the provided element, the initialization of the current one\n   * \t  will be postponed until the previous one is destroyed.\n   *\n   * \t* If the element is empty and does not have an editor attached to it, the currently locked editor will\n   * \t  be mounted immediately.\n   *\n   * After the successful initialization of the editor and the assignment of the {@link #_value} member,\n   * the `onReady` lifecycle method is called.\n   *\n   * *Important note:*\n   *\n   * It’s really important to keep this method *sync*. If we make this method *async*, it won’t work well because\n   * it will cause problems when we’re trying to set up the {@link LifeCycleEditorElementSemaphore#_semaphores} map entries.\n   */\n  _lock() {\n    const { _semaphores } = _LifeCycleElementSemaphore;\n    const { _state, _element, _lifecycle } = this;\n    const prevElementSemaphore = _semaphores.get(_element) || Promise.resolve(null);\n    const releaseLock = createDefer();\n    this._releaseLock = releaseLock;\n    const newElementSemaphore = prevElementSemaphore.then(() => {\n      if (_state.destroyedBeforeInitialization) {\n        return Promise.resolve(void 0);\n      }\n      _state.mountingInProgress = _lifecycle.mount().then((mountResult) => {\n        if (mountResult) {\n          this.unsafeSetValue(mountResult);\n        }\n        return mountResult;\n      });\n      return _state.mountingInProgress;\n    }).then(async (mountResult) => {\n      if (mountResult && _lifecycle.afterMount) {\n        await _lifecycle.afterMount({\n          element: _element,\n          mountResult\n        });\n      }\n    }).then(() => releaseLock.promise).catch((error) => {\n      console.error(\"Semaphore mounting error:\", error);\n    }).then(() => {\n      if (_semaphores.get(_element) === newElementSemaphore) {\n        _semaphores.delete(_element);\n      }\n    });\n    _semaphores.set(_element, newElementSemaphore);\n  }\n};\n/**\n * This is a map of elements associated with promises. It informs the semaphore that the underlying HTML element, used as a key,\n * is currently in use by another editor. Each element is assigned a promise, which allows for the easy chaining of new\n * editor instances on an element that is already in use by another instance. The process works as follows:\n *\n * \t1. If an element is being used by an editor, then the initialization of a new editor\n * \t   instance is chained using the `.then()` method of the Promise.\n *\n * \t2. If the editor associated with the underlying element is destroyed, then `Promise.resolve()` is called\n * \t   and the previously assigned `.then()` editor callback is executed.\n *\n *  @see {@link #lock} for more detailed information on the implementation.\n */\n__publicField(_LifeCycleElementSemaphore, \"_semaphores\", /* @__PURE__ */ new Map());\nlet LifeCycleElementSemaphore = _LifeCycleElementSemaphore;\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst ReactContextMetadataKey = \"$__CKEditorReactContextMetadata\";\nfunction withCKEditorReactContextMetadata(metadata, config) {\n  return {\n    ...config,\n    [ReactContextMetadataKey]: metadata\n  };\n}\nfunction tryExtractCKEditorReactContextMetadata(object) {\n  return object.get(ReactContextMetadataKey);\n}\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useIsMountedRef = () => {\n  const mountedRef = useRef(false);\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useRefSafeCallback = (fn) => {\n  const callbackRef = useRef();\n  callbackRef.current = fn;\n  return useCallback(\n    (...args) => callbackRef.current(...args),\n    []\n  );\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useInitializedCKEditorsMap = ({\n  currentContextWatchdog,\n  onChangeInitializedEditors\n}) => {\n  const onChangeInitializedEditorsSafe = useRefSafeCallback(onChangeInitializedEditors || (() => {\n  }));\n  useEffect(() => {\n    var _a;\n    if (currentContextWatchdog.status !== \"initialized\") {\n      return;\n    }\n    const { watchdog } = currentContextWatchdog;\n    const editors = (_a = watchdog == null ? void 0 : watchdog.context) == null ? void 0 : _a.editors;\n    if (!editors) {\n      return;\n    }\n    const getInitializedContextEditors = () => [...editors].reduce(\n      (map, editor) => {\n        var _a2;\n        if (editor.state !== \"ready\") {\n          return map;\n        }\n        const metadata = tryExtractCKEditorReactContextMetadata(editor.config);\n        const nameOrId = (_a2 = metadata == null ? void 0 : metadata.name) != null ? _a2 : editor.id;\n        map[nameOrId] = {\n          instance: editor,\n          metadata\n        };\n        return map;\n      },\n      /* @__PURE__ */ Object.create({})\n      // Prevent the prototype pollution.\n    );\n    const onEditorStatusChange = () => {\n      onChangeInitializedEditorsSafe(\n        getInitializedContextEditors(),\n        watchdog\n      );\n    };\n    const trackEditorLifecycle = (editor) => {\n      editor.once(\"ready\", onEditorStatusChange, { priority: \"lowest\" });\n      editor.once(\"destroy\", onEditorStatusChange, { priority: \"lowest\" });\n    };\n    const onAddEditorToCollection = (_, editor) => {\n      trackEditorLifecycle(editor);\n    };\n    editors.forEach(trackEditorLifecycle);\n    editors.on(\"add\", onAddEditorToCollection);\n    if (Array.from(editors).some((editor) => editor.state === \"ready\")) {\n      onEditorStatusChange();\n    }\n    return () => {\n      editors.off(\"add\", onAddEditorToCollection);\n    };\n  }, [currentContextWatchdog]);\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst ContextWatchdogContext = React.createContext(null);\nconst CKEditorContext = (props) => {\n  const {\n    id,\n    context,\n    watchdogConfig,\n    children,\n    config,\n    onReady,\n    contextWatchdog: ContextWatchdogConstructor,\n    isLayoutReady = true,\n    onChangeInitializedEditors,\n    onError = (error, details) => console.error(error, details)\n  } = props;\n  const isMountedRef = useIsMountedRef();\n  const prevWatchdogInitializationIDRef = useRef(null);\n  const [currentContextWatchdog, setCurrentContextWatchdog] = useState({\n    status: \"initializing\"\n  });\n  useEffect(() => {\n    if (isLayoutReady) {\n      initializeContextWatchdog();\n    } else {\n      setCurrentContextWatchdog({\n        status: \"initializing\"\n      });\n    }\n  }, [id, isLayoutReady]);\n  useEffect(() => () => {\n    if (currentContextWatchdog.status === \"initialized\") {\n      currentContextWatchdog.watchdog.destroy();\n    }\n  }, [currentContextWatchdog]);\n  useInitializedCKEditorsMap({\n    currentContextWatchdog,\n    onChangeInitializedEditors\n  });\n  function regenerateInitializationID() {\n    prevWatchdogInitializationIDRef.current = uid();\n    return prevWatchdogInitializationIDRef.current;\n  }\n  function canUpdateState(initializationID) {\n    return prevWatchdogInitializationIDRef.current === initializationID && isMountedRef.current;\n  }\n  function initializeContextWatchdog() {\n    const watchdogInitializationID = regenerateInitializationID();\n    const contextWatchdog = new ContextWatchdogConstructor(context, watchdogConfig);\n    contextWatchdog.on(\"error\", (_, errorEvent) => {\n      /* istanbul ignore else -- @preserve */\n      if (canUpdateState(watchdogInitializationID)) {\n        onError(errorEvent.error, {\n          phase: \"runtime\",\n          willContextRestart: errorEvent.causesRestart\n        });\n      }\n    });\n    contextWatchdog.on(\"stateChange\", () => {\n      if (onReady && contextWatchdog.state === \"ready\" && canUpdateState(watchdogInitializationID)) {\n        onReady(\n          contextWatchdog.context,\n          contextWatchdog\n        );\n      }\n    });\n    contextWatchdog.create(config).then(() => {\n      if (canUpdateState(watchdogInitializationID)) {\n        setCurrentContextWatchdog({\n          status: \"initialized\",\n          watchdog: contextWatchdog\n        });\n      } else {\n        contextWatchdog.destroy();\n      }\n    }).catch((error) => {\n      if (canUpdateState(watchdogInitializationID)) {\n        onError(error, {\n          phase: \"initialization\",\n          willContextRestart: false\n        });\n        setCurrentContextWatchdog({\n          status: \"error\",\n          error\n        });\n      }\n    });\n    return contextWatchdog;\n  }\n  return /* @__PURE__ */ React.createElement(ContextWatchdogContext.Provider, { value: currentContextWatchdog }, children);\n};\nconst isContextWatchdogValue = (obj) => !!obj && typeof obj === \"object\" && \"status\" in obj && [\"initializing\", \"initialized\", \"error\"].includes(obj.status);\nconst isContextWatchdogValueWithStatus = (status) => (obj) => isContextWatchdogValue(obj) && obj.status === status;\nconst isContextWatchdogInitializing = isContextWatchdogValueWithStatus(\"initializing\");\nconst isContextWatchdogReadyToUse = (obj) => isContextWatchdogValueWithStatus(\"initialized\")(obj) && obj.watchdog.state === \"ready\";\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst ReactIntegrationUsageDataPlugin = createIntegrationUsageDataPlugin(\n  \"react\",\n  {\n    version: \"9.4.0\",\n    frameworkVersion: React.version\n  }\n);\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction appendAllIntegrationPluginsToConfig(editorConfig) {\n  if (isCKEditorFreeLicense(editorConfig.licenseKey)) {\n    return editorConfig;\n  }\n  return appendExtraPluginsToEditorConfig(editorConfig, [\n    /**\n     * This part of the code is not executed in open-source implementations using a GPL key.\n     * It only runs when a specific license key is provided. If you are uncertain whether\n     * this applies to your installation, please contact our support team.\n     */\n    ReactIntegrationUsageDataPlugin\n  ]);\n}\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID$1 = \"Lock from React integration (@ckeditor/ckeditor5-react)\";\nclass CKEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    /**\n     * After mounting the editor, the variable will contain a reference to the created editor.\n     * @see: https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n     */\n    __publicField(this, \"domContainer\", React.createRef());\n    /**\n     * Unlocks element in editor semaphore after destroy editor instance.\n     */\n    __publicField(this, \"editorSemaphore\", null);\n    this._checkVersion();\n  }\n  /**\n   * Checks if the CKEditor version used in the application is compatible with the component.\n   */\n  _checkVersion() {\n    const { CKEDITOR_VERSION } = window;\n    if (!CKEDITOR_VERSION) {\n      return console.warn('Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.');\n    }\n    const [major] = CKEDITOR_VERSION.split(\".\").map(Number);\n    if (major >= 42 || CKEDITOR_VERSION.startsWith(\"0.0.0\")) {\n      return;\n    }\n    console.warn(\"The <CKEditor> component requires using CKEditor 5 in version 42+ or nightly build.\");\n  }\n  get _semaphoreValue() {\n    const { editorSemaphore } = this;\n    return editorSemaphore ? editorSemaphore.value : null;\n  }\n  /**\n   * An watchdog instance.\n   */\n  get watchdog() {\n    const { _semaphoreValue } = this;\n    return _semaphoreValue ? _semaphoreValue.watchdog : null;\n  }\n  /**\n   * An editor instance.\n   */\n  get editor() {\n    const { _semaphoreValue } = this;\n    return _semaphoreValue ? _semaphoreValue.instance : null;\n  }\n  /**\n   * The CKEditor component should not be updated by React itself.\n   * However, if the component identifier changes, the whole structure should be created once again.\n   */\n  shouldComponentUpdate(nextProps) {\n    const { props, editorSemaphore } = this;\n    if (nextProps.id !== props.id) {\n      return true;\n    }\n    if (nextProps.disableWatchdog !== props.disableWatchdog) {\n      return true;\n    }\n    if (editorSemaphore) {\n      editorSemaphore.runAfterMount(({ instance }) => {\n        if (this._shouldUpdateEditorData(props, nextProps, instance)) {\n          instance.data.set(nextProps.data);\n        }\n      });\n      if (\"disabled\" in nextProps) {\n        editorSemaphore.runAfterMount(({ instance }) => {\n          if (nextProps.disabled) {\n            instance.enableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID$1);\n          } else {\n            instance.disableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID$1);\n          }\n        });\n      }\n    }\n    return false;\n  }\n  /**\n   * Initialize the editor when the component is mounted.\n   */\n  componentDidMount() {\n    if (!isContextWatchdogInitializing(this.context)) {\n      this._initLifeCycleSemaphore();\n    }\n  }\n  /**\n   * Re-render the entire component once again. The old editor will be destroyed and the new one will be created.\n   */\n  componentDidUpdate() {\n    if (!isContextWatchdogInitializing(this.context)) {\n      this._initLifeCycleSemaphore();\n    }\n  }\n  /**\n   * Destroy the editor before unmounting the component.\n   */\n  componentWillUnmount() {\n    this._unlockLifeCycleSemaphore();\n  }\n  /**\n   * Async destroy attached editor and unlock element semaphore.\n   */\n  _unlockLifeCycleSemaphore() {\n    if (this.editorSemaphore) {\n      this.editorSemaphore.release();\n      this.editorSemaphore = null;\n    }\n  }\n  /**\n   * Unlocks previous editor semaphore and creates new one..\n   */\n  _initLifeCycleSemaphore() {\n    this._unlockLifeCycleSemaphore();\n    this.editorSemaphore = new LifeCycleElementSemaphore(this.domContainer.current, {\n      mount: async () => this._initializeEditor(),\n      afterMount: ({ mountResult }) => {\n        const { onReady } = this.props;\n        if (onReady && this.domContainer.current !== null) {\n          onReady(mountResult.instance);\n        }\n      },\n      unmount: async ({ element, mountResult }) => {\n        const { onAfterDestroy } = this.props;\n        try {\n          await this._destroyEditor(mountResult);\n          element.innerHTML = \"\";\n        } finally {\n          if (onAfterDestroy) {\n            onAfterDestroy(mountResult.instance);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Render a <div> element which will be replaced by CKEditor.\n   */\n  render() {\n    return /* @__PURE__ */ React.createElement(\"div\", { ref: this.domContainer });\n  }\n  /**\n   * Initializes the editor by creating a proper watchdog and initializing it with the editor's configuration.\n   */\n  async _initializeEditor() {\n    if (this.props.disableWatchdog) {\n      const instance = await this._createEditor(this.domContainer.current, this._getConfig());\n      return {\n        instance,\n        watchdog: null\n      };\n    }\n    const watchdog = (() => {\n      if (isContextWatchdogReadyToUse(this.context)) {\n        return new EditorWatchdogAdapter(this.context.watchdog);\n      }\n      return new this.props.editor.EditorWatchdog(this.props.editor, this.props.watchdogConfig);\n    })();\n    const totalRestartsRef = {\n      current: 0\n    };\n    watchdog.setCreator(async (el, config) => {\n      var _a;\n      const { editorSemaphore } = this;\n      const { onAfterDestroy } = this.props;\n      if (totalRestartsRef.current > 0 && onAfterDestroy && ((_a = editorSemaphore == null ? void 0 : editorSemaphore.value) == null ? void 0 : _a.instance)) {\n        onAfterDestroy(editorSemaphore.value.instance);\n      }\n      const instance = await this._createEditor(el, config);\n      if (editorSemaphore && totalRestartsRef.current > 0) {\n        editorSemaphore.unsafeSetValue({\n          instance,\n          watchdog\n        });\n        setTimeout(() => {\n          if (this.props.onReady) {\n            this.props.onReady(watchdog.editor);\n          }\n        });\n      }\n      totalRestartsRef.current++;\n      return instance;\n    });\n    watchdog.on(\"error\", (_, { error, causesRestart }) => {\n      const onError = this.props.onError || console.error;\n      onError(error, { phase: \"runtime\", willEditorRestart: causesRestart });\n    });\n    await watchdog.create(this.domContainer.current, this._getConfig()).catch((error) => {\n      const onError = this.props.onError || console.error;\n      onError(error, { phase: \"initialization\", willEditorRestart: false });\n    });\n    return {\n      watchdog,\n      instance: watchdog.editor\n    };\n  }\n  /**\n   * Creates an editor from the element and configuration.\n   *\n   * @param element The source element.\n   * @param config CKEditor 5 editor configuration.\n   */\n  _createEditor(element, config) {\n    const { contextItemMetadata } = this.props;\n    if (contextItemMetadata) {\n      config = withCKEditorReactContextMetadata(contextItemMetadata, config);\n    }\n    return this.props.editor.create(\n      element,\n      appendAllIntegrationPluginsToConfig(config)\n    ).then((editor) => {\n      if (\"disabled\" in this.props) {\n        /* istanbul ignore else -- @preserve */\n        if (this.props.disabled) {\n          editor.enableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID$1);\n        }\n      }\n      const modelDocument = editor.model.document;\n      const viewDocument = editor.editing.view.document;\n      modelDocument.on(\"change:data\", (event) => {\n        /* istanbul ignore else -- @preserve */\n        if (this.props.onChange) {\n          this.props.onChange(event, editor);\n        }\n      });\n      viewDocument.on(\"focus\", (event) => {\n        /* istanbul ignore else -- @preserve */\n        if (this.props.onFocus) {\n          this.props.onFocus(event, editor);\n        }\n      });\n      viewDocument.on(\"blur\", (event) => {\n        /* istanbul ignore else -- @preserve */\n        if (this.props.onBlur) {\n          this.props.onBlur(event, editor);\n        }\n      });\n      return editor;\n    });\n  }\n  /**\n   * Destroys the editor by destroying the watchdog.\n   */\n  async _destroyEditor(initializeResult) {\n    const { watchdog, instance } = initializeResult;\n    return new Promise((resolve, reject) => {\n      /* istanbul ignore next -- @preserve */\n      setTimeout(async () => {\n        try {\n          if (watchdog) {\n            await watchdog.destroy();\n            return resolve();\n          }\n          if (instance) {\n            await instance.destroy();\n            return resolve();\n          }\n          resolve();\n        } catch (e) {\n          console.error(e);\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Returns true when the editor should be updated.\n   *\n   * @param prevProps Previous react's properties.\n   * @param nextProps React's properties.\n   * @param editor Current editor instance.\n   */\n  _shouldUpdateEditorData(prevProps, nextProps, editor) {\n    if (prevProps.data === nextProps.data) {\n      return false;\n    }\n    if (editor.data.get() === nextProps.data) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns the editor configuration.\n   */\n  _getConfig() {\n    const config = this.props.config || {};\n    if (this.props.data && config.initialData) {\n      console.warn(\n        \"Editor data should be provided either using `config.initialData` or `content` property. The config value takes precedence over `content` property and will be used when both are specified.\"\n      );\n    }\n    return {\n      ...config,\n      initialData: config.initialData || this.props.data || \"\"\n    };\n  }\n}\n__publicField(CKEditor, \"contextType\", ContextWatchdogContext);\n// Properties definition.\n__publicField(CKEditor, \"propTypes\", {\n  editor: PropTypes.func.isRequired,\n  data: PropTypes.string,\n  config: PropTypes.object,\n  disableWatchdog: PropTypes.bool,\n  watchdogConfig: PropTypes.object,\n  onChange: PropTypes.func,\n  onReady: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onError: PropTypes.func,\n  disabled: PropTypes.bool,\n  id: PropTypes.any\n});\nclass EditorWatchdogAdapter {\n  /**\n   * @param contextWatchdog The context watchdog instance that will be wrapped into editor watchdog API.\n   */\n  constructor(contextWatchdog) {\n    /**\n     * The context watchdog instance that will be wrapped into editor watchdog API.\n     */\n    __publicField(this, \"_contextWatchdog\");\n    /**\n     * A unique id for the adapter to distinguish editor items when using the context watchdog API.\n     */\n    __publicField(this, \"_id\");\n    /**\n     * A watchdog's editor creator function.\n     */\n    __publicField(this, \"_creator\");\n    this._contextWatchdog = contextWatchdog;\n    this._id = uid();\n  }\n  /**\n   *  @param creator A watchdog's editor creator function.\n   */\n  setCreator(creator) {\n    this._creator = creator;\n  }\n  /**\n   * Adds an editor configuration to the context watchdog registry. Creates an instance of it.\n   *\n   * @param sourceElementOrData A source element or data for the new editor.\n   * @param config CKEditor 5 editor config.\n   */\n  create(sourceElementOrData, config) {\n    return this._contextWatchdog.add({\n      sourceElementOrData,\n      config,\n      creator: this._creator,\n      id: this._id,\n      type: \"editor\"\n    });\n  }\n  /**\n   * Creates a listener that is attached to context watchdog's item and run when the context watchdog fires.\n   * Currently works only for the `error` event.\n   */\n  on(_, callback) {\n    this._contextWatchdog.on(\"itemError\", (_2, { itemId, error }) => {\n      if (itemId === this._id) {\n        callback(null, { error, causesRestart: void 0 });\n      }\n    });\n  }\n  destroy() {\n    if (this._contextWatchdog.state === \"ready\") {\n      return this._contextWatchdog.remove(this._id);\n    }\n    return Promise.resolve();\n  }\n  /**\n   * An editor instance.\n   */\n  get editor() {\n    return this._contextWatchdog.getItem(this._id);\n  }\n}\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useLifeCycleSemaphoreSyncRef = () => {\n  const semaphoreRef = useRef(null);\n  const [revision, setRevision] = useState(() => Date.now());\n  const refresh = () => {\n    setRevision(Date.now());\n  };\n  const release = (rerender = true) => {\n    if (semaphoreRef.current) {\n      semaphoreRef.current.release();\n      semaphoreRef.current = null;\n    }\n    if (rerender) {\n      setRevision(Date.now());\n    }\n  };\n  const unsafeSetValue = (value) => {\n    var _a;\n    (_a = semaphoreRef.current) == null ? void 0 : _a.unsafeSetValue(value);\n    refresh();\n  };\n  const runAfterMount = (callback) => {\n    if (semaphoreRef.current) {\n      semaphoreRef.current.runAfterMount(callback);\n    }\n  };\n  const replace = (newSemaphore) => {\n    release(false);\n    semaphoreRef.current = newSemaphore();\n    refresh();\n    runAfterMount(refresh);\n  };\n  const createAttributeRef = (key) => ({\n    get current() {\n      if (!semaphoreRef.current || !semaphoreRef.current.value) {\n        return null;\n      }\n      return semaphoreRef.current.value[key];\n    }\n  });\n  return {\n    get current() {\n      return semaphoreRef.current;\n    },\n    revision,\n    createAttributeRef,\n    unsafeSetValue,\n    release,\n    replace,\n    runAfterMount\n  };\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction mergeRefs(...refs) {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useInstantEffect = (fn, deps) => {\n  const [prevDeps, setDeps] = useState(null);\n  if (!shallowCompareArrays(prevDeps, deps)) {\n    fn();\n    setDeps([...deps]);\n  }\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useInstantEditorEffect = (semaphore, fn, deps) => {\n  useInstantEffect(() => {\n    if (semaphore) {\n      semaphore.runAfterMount(fn);\n    }\n  }, [semaphore, ...deps]);\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst REACT_INTEGRATION_READ_ONLY_LOCK_ID = \"Lock from React integration (@ckeditor/ckeditor5-react)\";\nconst useMultiRootEditor = (props) => {\n  const semaphoreElementRef = useRef(props.semaphoreElement || null);\n  const semaphore = useLifeCycleSemaphoreSyncRef();\n  const editorRefs = {\n    watchdog: semaphore.createAttributeRef(\"watchdog\"),\n    instance: semaphore.createAttributeRef(\"instance\")\n  };\n  const context = useContext(ContextWatchdogContext);\n  const [roots, setRoots] = useState(() => Object.keys(props.data));\n  const [data, setData] = useState({ ...props.data });\n  const [attributes, setAttributes] = useState({ ...props.rootsAttributes });\n  const shouldUpdateEditor = useRef(true);\n  const forceAssignFakeEditableElements = () => {\n    const editor = editorRefs.instance.current;\n    if (!editor) {\n      return;\n    }\n    const initializeEditableWithFakeElement = (editable) => {\n      if (editable.name && !editor.editing.view.getDomRoot(editable.name)) {\n        editor.editing.view.attachDomRoot(document.createElement(\"div\"), editable.name);\n      }\n    };\n    Object.values(editor.ui.view.editables).forEach(initializeEditableWithFakeElement);\n  };\n  useEffect(() => {\n    const semaphoreElement = semaphoreElementRef.current;\n    if (context && !isContextWatchdogReadyToUse(context)) {\n      return;\n    }\n    if (!semaphoreElement || props.isLayoutReady === false) {\n      return;\n    }\n    semaphore.replace(() => new LifeCycleElementSemaphore(semaphoreElement, {\n      mount: _initializeEditor,\n      afterMount: ({ mountResult }) => {\n        const { onReady } = props;\n        if (onReady && semaphoreElementRef.current !== null) {\n          onReady(mountResult.instance);\n        }\n      },\n      unmount: async ({ element, mountResult }) => {\n        const { onAfterDestroy } = props;\n        try {\n          await _destroyEditor(mountResult);\n          element.innerHTML = \"\";\n        } finally {\n          if (onAfterDestroy) {\n            onAfterDestroy(mountResult.instance);\n          }\n        }\n      }\n    }));\n    return () => {\n      forceAssignFakeEditableElements();\n      semaphore.release(false);\n    };\n  }, [props.id, props.isLayoutReady, context == null ? void 0 : context.status]);\n  const _getConfig = () => {\n    const config = props.config || {};\n    if (props.data && config.initialData) {\n      console.warn(\n        \"Editor data should be provided either using `config.initialData` or `data` property. The config value takes precedence over `data` property and will be used when both are specified.\"\n      );\n    }\n    return {\n      ...config,\n      rootsAttributes: attributes\n    };\n  };\n  const onChangeData = useRefSafeCallback((editor, event) => {\n    const modelDocument = editor.model.document;\n    if (!props.disableTwoWayDataBinding) {\n      const newData = {};\n      const newAttributes = {};\n      modelDocument.differ.getChanges().forEach((change) => {\n        let root;\n        /* istanbul ignore else -- @preserve */\n        if (change.type == \"insert\" || change.type == \"remove\") {\n          root = change.position.root;\n        } else {\n          root = change.range.root;\n        }\n        if (!root.isAttached()) {\n          return;\n        }\n        const { rootName } = root;\n        newData[rootName] = editor.getData({ rootName });\n      });\n      modelDocument.differ.getChangedRoots().forEach((changedRoot) => {\n        if (changedRoot.state) {\n          if (newData[changedRoot.name] !== void 0) {\n            delete newData[changedRoot.name];\n          }\n          return;\n        }\n        const rootName = changedRoot.name;\n        newAttributes[rootName] = editor.getRootAttributes(rootName);\n      });\n      if (Object.keys(newData).length) {\n        setData((previousData) => ({ ...previousData, ...newData }));\n      }\n      if (Object.keys(newAttributes).length) {\n        setAttributes((previousAttributes) => ({ ...previousAttributes, ...newAttributes }));\n      }\n    }\n    /* istanbul ignore else -- @preserve */\n    if (props.onChange) {\n      props.onChange(event, editor);\n    }\n  });\n  const onAddRoot = useRefSafeCallback((editor, _evt, root) => {\n    const rootName = root.rootName;\n    if (!props.disableTwoWayDataBinding) {\n      setData(\n        (previousData) => ({ ...previousData, [rootName]: editor.getData({ rootName }) })\n      );\n      setAttributes(\n        (previousAttributes) => ({ ...previousAttributes, [rootName]: editor.getRootAttributes(rootName) })\n      );\n    }\n    setRoots((prevRoots) => uniq([...prevRoots, root.rootName]));\n  });\n  const onDetachRoot = useRefSafeCallback((_editor, _evt, root) => {\n    const rootName = root.rootName;\n    if (!props.disableTwoWayDataBinding) {\n      setData((previousData) => {\n        const { [rootName]: _, ...newData } = previousData;\n        return { ...newData };\n      });\n      setAttributes((previousAttributes) => {\n        const { [rootName]: _, ...newAttributes } = previousAttributes;\n        return { ...newAttributes };\n      });\n    }\n    setRoots((prevRoots) => prevRoots.filter((root2) => root2 !== rootName));\n  });\n  const _createEditor = useRefSafeCallback((initialData, config) => {\n    overwriteObject({ ...props.rootsAttributes }, attributes);\n    overwriteObject({ ...props.data }, data);\n    overwriteArray(Object.keys(props.data), roots);\n    return props.editor.create(\n      initialData,\n      appendAllIntegrationPluginsToConfig(config)\n    ).then((editor) => {\n      const editorData = editor.getFullData();\n      overwriteObject({ ...editorData }, data);\n      overwriteObject({ ...editor.getRootsAttributes() }, attributes);\n      overwriteArray(Object.keys(editorData), roots);\n      if (props.disabled) {\n        /* istanbul ignore else -- @preserve */\n        editor.enableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID);\n      }\n      const modelDocument = editor.model.document;\n      const viewDocument = editor.editing.view.document;\n      modelDocument.on(\"change:data\", (evt) => onChangeData(editor, evt));\n      editor.on(\"addRoot\", (evt, root) => onAddRoot(editor, evt, root));\n      editor.on(\"detachRoot\", (evt, root) => onDetachRoot(editor, evt, root));\n      viewDocument.on(\"focus\", (event) => {\n        /* istanbul ignore else -- @preserve */\n        if (props.onFocus) {\n          props.onFocus(event, editor);\n        }\n      });\n      viewDocument.on(\"blur\", (event) => {\n        /* istanbul ignore else -- @preserve */\n        if (props.onBlur) {\n          props.onBlur(event, editor);\n        }\n      });\n      return editor;\n    });\n  });\n  const _destroyEditor = (initializeResult) => {\n    const { watchdog, instance } = initializeResult;\n    return new Promise((resolve, reject) => {\n      /* istanbul ignore next -- @preserve */\n      setTimeout(async () => {\n        try {\n          if (watchdog) {\n            await watchdog.destroy();\n            return resolve();\n          }\n          if (instance) {\n            await instance.destroy();\n            return resolve();\n          }\n          resolve();\n        } catch (e) {\n          console.error(e);\n          reject(e);\n        }\n      });\n    });\n  };\n  const _initializeEditor = async () => {\n    if (props.disableWatchdog) {\n      const instance = await _createEditor(props.data, _getConfig());\n      return {\n        instance,\n        watchdog: null\n      };\n    }\n    const watchdog = (() => {\n      if (isContextWatchdogReadyToUse(context)) {\n        return new EditorWatchdogAdapter(context.watchdog);\n      }\n      return new props.editor.EditorWatchdog(props.editor, props.watchdogConfig);\n    })();\n    const totalRestartsRef = {\n      current: 0\n    };\n    watchdog.setCreator(async (_, config) => {\n      const { onAfterDestroy } = props;\n      if (totalRestartsRef.current > 0 && onAfterDestroy && editorRefs.instance.current) {\n        onAfterDestroy(editorRefs.instance.current);\n      }\n      const instance = await _createEditor(data, config);\n      if (totalRestartsRef.current > 0) {\n        semaphore.unsafeSetValue({\n          instance,\n          watchdog\n        });\n        setTimeout(() => {\n          /* istanbul ignore next -- @preserve */\n          if (props.onReady) {\n            props.onReady(watchdog.editor);\n          }\n        });\n      }\n      totalRestartsRef.current++;\n      return instance;\n    });\n    watchdog.on(\"error\", (_, { error, causesRestart }) => {\n      const onError = props.onError || console.error;\n      onError(error, { phase: \"runtime\", willEditorRestart: causesRestart });\n    });\n    await watchdog.create(data, _getConfig()).catch((error) => {\n      const onError = props.onError || console.error;\n      onError(error, { phase: \"initialization\", willEditorRestart: false });\n      throw error;\n    });\n    return {\n      watchdog,\n      instance: watchdog.editor\n    };\n  };\n  const _getStateDiff = (previousState, newState) => {\n    const previousStateKeys = Object.keys(previousState);\n    const newStateKeys = Object.keys(newState);\n    return {\n      addedKeys: newStateKeys.filter((key) => !previousStateKeys.includes(key)),\n      removedKeys: previousStateKeys.filter((key) => !newStateKeys.includes(key))\n    };\n  };\n  const _externalSetData = useCallback(\n    (newData) => {\n      semaphore.runAfterMount(() => {\n        shouldUpdateEditor.current = true;\n        setData(newData);\n      });\n    },\n    [setData]\n  );\n  const _externalSetAttributes = useCallback(\n    (newAttributes) => {\n      semaphore.runAfterMount(() => {\n        shouldUpdateEditor.current = true;\n        setAttributes(newAttributes);\n      });\n    },\n    [setAttributes]\n  );\n  const toolbarElement = /* @__PURE__ */ React.createElement(\n    EditorToolbarWrapper,\n    {\n      ref: semaphoreElementRef,\n      editor: editorRefs.instance.current\n    }\n  );\n  useInstantEditorEffect(semaphore.current, ({ instance }) => {\n    if (props.disabled) {\n      instance.enableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID);\n    } else {\n      instance.disableReadOnlyMode(REACT_INTEGRATION_READ_ONLY_LOCK_ID);\n    }\n  }, [props.disabled]);\n  useInstantEditorEffect(semaphore.current, ({ instance }) => {\n    if (shouldUpdateEditor.current) {\n      shouldUpdateEditor.current = false;\n      const dataKeys = Object.keys(data);\n      const attributesKeys = Object.keys(attributes);\n      if (!dataKeys.every((key) => attributesKeys.includes(key))) {\n        console.error(\"`data` and `attributes` objects must have the same keys (roots).\");\n        throw new Error(\"`data` and `attributes` objects must have the same keys (roots).\");\n      }\n      const editorData = instance.getFullData();\n      const editorAttributes = instance.getRootsAttributes();\n      const {\n        addedKeys: newRoots,\n        removedKeys: removedRoots\n      } = _getStateDiff(\n        editorData,\n        data || /* istanbul ignore next -- @preserve: It should never happen, data should be always filled. */\n        {}\n      );\n      const modifiedRoots = dataKeys.filter(\n        (rootName) => editorData[rootName] !== void 0 && JSON.stringify(editorData[rootName]) !== JSON.stringify(data[rootName])\n      );\n      const rootsWithChangedAttributes = attributesKeys.filter((rootName) => JSON.stringify(editorAttributes[rootName]) !== JSON.stringify(attributes[rootName]));\n      const _handleNewRoots = (roots2) => {\n        roots2.forEach((rootName) => {\n          instance.addRoot(rootName, {\n            data: data[rootName] || \"\",\n            attributes: (attributes == null ? void 0 : attributes[rootName]) || /* istanbul ignore next -- @preserve: attributes should be in sync with root keys */\n            {},\n            isUndoable: true\n          });\n        });\n      };\n      const _handleRemovedRoots = (roots2) => {\n        roots2.forEach((rootName) => {\n          instance.detachRoot(rootName, true);\n        });\n      };\n      const _updateEditorData = (roots2) => {\n        const dataToUpdate = roots2.reduce(\n          (result, rootName) => ({ ...result, [rootName]: data[rootName] }),\n          /* @__PURE__ */ Object.create(null)\n        );\n        instance.data.set(dataToUpdate, { suppressErrorInCollaboration: true });\n      };\n      const _updateEditorAttributes = (writer, roots2) => {\n        roots2.forEach((rootName) => {\n          Object.keys(attributes[rootName]).forEach((attr) => {\n            instance.registerRootAttribute(attr);\n          });\n          writer.clearAttributes(instance.model.document.getRoot(rootName));\n          writer.setAttributes(attributes[rootName], instance.model.document.getRoot(rootName));\n        });\n      };\n      setTimeout(() => {\n        instance.model.change((writer) => {\n          _handleNewRoots(newRoots);\n          _handleRemovedRoots(removedRoots);\n          if (modifiedRoots.length) {\n            _updateEditorData(modifiedRoots);\n          }\n          if (rootsWithChangedAttributes.length) {\n            _updateEditorAttributes(writer, rootsWithChangedAttributes);\n          }\n        });\n      });\n    }\n  }, [data, attributes]);\n  const editableElements = roots.map(\n    (rootName) => /* @__PURE__ */ React.createElement(\n      EditorEditable,\n      {\n        key: rootName,\n        id: rootName,\n        rootName,\n        semaphore\n      }\n    )\n  );\n  return {\n    editor: editorRefs.instance.current,\n    editableElements,\n    toolbarElement,\n    data,\n    setData: _externalSetData,\n    attributes,\n    setAttributes: _externalSetAttributes\n  };\n};\nconst EditorEditable = memo(forwardRef(({ id, semaphore, rootName }, ref) => {\n  const innerRef = useRef(null);\n  useEffect(() => {\n    let editable;\n    let editor;\n    semaphore.runAfterMount(({ instance }) => {\n      if (!innerRef.current) {\n        return;\n      }\n      editor = instance;\n      const { ui, model } = editor;\n      const root = model.document.getRoot(rootName);\n      if (root && editor.ui.getEditableElement(rootName)) {\n        editor.detachEditable(root);\n      }\n      editable = ui.view.createEditable(rootName, innerRef.current);\n      ui.addEditable(editable);\n      instance.editing.view.forceRender();\n    });\n    return () => {\n      if (editor && editor.state !== \"destroyed\" && innerRef.current) {\n        const root = editor.model.document.getRoot(rootName);\n        /* istanbul ignore else -- @preserve */\n        if (root) {\n          editor.detachEditable(root);\n        }\n      }\n    };\n  }, [semaphore.revision]);\n  return /* @__PURE__ */ React.createElement(\n    \"div\",\n    {\n      key: semaphore.revision,\n      id,\n      ref: mergeRefs(ref, innerRef)\n    }\n  );\n}));\nEditorEditable.displayName = \"EditorEditable\";\nconst EditorToolbarWrapper = forwardRef(({ editor }, ref) => {\n  const toolbarRef = useRef(null);\n  useEffect(() => {\n    const toolbarContainer = toolbarRef.current;\n    if (!editor || !toolbarContainer) {\n      return void 0;\n    }\n    const element = editor.ui.view.toolbar.element;\n    toolbarContainer.appendChild(element);\n    return () => {\n      if (toolbarContainer.contains(element)) {\n        toolbarContainer.removeChild(element);\n      }\n    };\n  }, [editor && editor.id]);\n  return /* @__PURE__ */ React.createElement(\"div\", { ref: mergeRefs(toolbarRef, ref) });\n});\nEditorToolbarWrapper.displayName = \"EditorToolbarWrapper\";\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useIsUnmountedRef = () => {\n  const mountedRef = useRef(false);\n  useEffect(() => {\n    mountedRef.current = false;\n    return () => {\n      mountedRef.current = true;\n    };\n  }, []);\n  return mountedRef;\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useAsyncCallback = (callback) => {\n  const [asyncState, setAsyncState] = useState({\n    status: \"idle\"\n  });\n  const unmountedRef = useIsUnmountedRef();\n  const prevExecutionUIDRef = useRef(null);\n  const asyncExecutor = useRefSafeCallback(async (...args) => {\n    if (unmountedRef.current || isSSR()) {\n      return null;\n    }\n    const currentExecutionUUID = uid();\n    prevExecutionUIDRef.current = currentExecutionUUID;\n    try {\n      if (asyncState.status !== \"loading\") {\n        setAsyncState({\n          status: \"loading\"\n        });\n      }\n      const result = await callback(...args);\n      if (!unmountedRef.current && prevExecutionUIDRef.current === currentExecutionUUID) {\n        setAsyncState({\n          status: \"success\",\n          data: result\n        });\n      }\n      return result;\n    } catch (error) {\n      console.error(error);\n      if (!unmountedRef.current && prevExecutionUIDRef.current === currentExecutionUUID) {\n        setAsyncState({\n          status: \"error\",\n          error\n        });\n      }\n    }\n    return null;\n  });\n  return [asyncExecutor, asyncState];\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst useAsyncValue = (callback, deps) => {\n  const [asyncCallback, asyncState] = useAsyncCallback(callback);\n  useInstantEffect(asyncCallback, deps);\n  if (asyncState.status === \"idle\") {\n    return {\n      status: \"loading\"\n    };\n  }\n  return asyncState;\n};\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nfunction useCKEditorCloud(config) {\n  const serializedConfigKey = JSON.stringify(config);\n  const result = useAsyncValue(\n    async () => loadCKEditorCloud(config),\n    [serializedConfigKey]\n  );\n  if (result.status === \"success\") {\n    return {\n      ...result.data,\n      status: \"success\"\n    };\n  }\n  return result;\n}\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nconst withCKEditorCloud = (config) => (WrappedComponent) => {\n  const ComponentWithCKEditorCloud = (props) => {\n    var _a, _b;\n    const ckeditorCloudResult = useCKEditorCloud(config.cloud);\n    switch (ckeditorCloudResult.status) {\n      case \"error\":\n        if (!config.renderError) {\n          return \"Unable to load CKEditor Cloud data!\";\n        }\n        return config.renderError(ckeditorCloudResult.error);\n      case \"success\":\n        return /* @__PURE__ */ React.createElement(WrappedComponent, { ...props, cloud: ckeditorCloudResult });\n      default:\n        return (_b = (_a = config.renderLoader) == null ? void 0 : _a.call(config)) != null ? _b : null;\n    }\n  };\n  ComponentWithCKEditorCloud.displayName = \"ComponentWithCKEditorCloud\";\n  return ComponentWithCKEditorCloud;\n};\nexport {\n  CKEditor,\n  CKEditorContext,\n  loadCKEditorCloud2 as loadCKEditorCloud,\n  useCKEditorCloud,\n  useMultiRootEditor,\n  withCKEditorCloud\n};\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { env, EventInfo, count, keyCodes, isInsideSurrogatePair, isInsideCombinedSymbol, isInsideEmojiSequence, ObservableMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { Observer, FocusObserver, DomEventData, LiveRange, BubblingEventInfo, MouseObserver } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { debounce, escapeRegExp } from 'lodash-es';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module typing/utils/changebuffer\n */ /**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n * ```ts\n * const buffer = new ChangeBuffer( model, LIMIT );\n *\n * // Later on in your feature:\n * buffer.batch.insert( pos, insertedCharacters );\n * buffer.input( insertedCharacters.length );\n * ```\n */ class ChangeBuffer {\n    /**\n\t * The model instance.\n\t */ model;\n    /**\n\t * The maximum number of atomic changes which can be contained in one batch.\n\t */ limit;\n    /**\n\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t */ _isLocked;\n    /**\n\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t * the {@link #batch batch} is set to a new one.\n\t */ _size;\n    /**\n\t * The current batch instance.\n\t */ _batch = null;\n    /**\n\t * The callback to document the change event which later needs to be removed.\n\t */ _changeCallback;\n    /**\n\t * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n\t */ _selectionChangeCallback;\n    /**\n\t * Creates a new instance of the change buffer.\n\t *\n\t * @param limit The maximum number of atomic changes which can be contained in one batch.\n\t */ constructor(model, limit = 20){\n        this.model = model;\n        this._size = 0;\n        this.limit = limit;\n        this._isLocked = false;\n        // The function to be called in order to notify the buffer about batches which appeared in the document.\n        // The callback will check whether it is a new batch and in that case the buffer will be flushed.\n        //\n        // The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n        // should be added to a new batch. For instance, when the user types, then inserts an image, and then types again,\n        // the characters typed after inserting the image should be added to a different batch than the characters typed before.\n        this._changeCallback = (evt, batch)=>{\n            if (batch.isLocal && batch.isUndoable && batch !== this._batch) {\n                this._reset(true);\n            }\n        };\n        this._selectionChangeCallback = ()=>{\n            this._reset();\n        };\n        this.model.document.on('change', this._changeCallback);\n        this.model.document.selection.on('change:range', this._selectionChangeCallback);\n        this.model.document.selection.on('change:attribute', this._selectionChangeCallback);\n    }\n    /**\n\t * The current batch to which a feature should add its operations. Once the {@link #size}\n\t * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t */ get batch() {\n        if (!this._batch) {\n            this._batch = this.model.createBatch({\n                isTyping: true\n            });\n        }\n        return this._batch;\n    }\n    /**\n\t * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n\t * the {@link #batch batch} is set to a new one.\n\t */ get size() {\n        return this._size;\n    }\n    /**\n\t * The input number of changes into the buffer. Once the {@link #size} is\n\t * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n\t *\n\t * @param changeCount The number of atomic changes to input.\n\t */ input(changeCount) {\n        this._size += changeCount;\n        if (this._size >= this.limit) {\n            this._reset(true);\n        }\n    }\n    /**\n\t * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n\t */ get isLocked() {\n        return this._isLocked;\n    }\n    /**\n\t * Locks the buffer.\n\t */ lock() {\n        this._isLocked = true;\n    }\n    /**\n\t * Unlocks the buffer.\n\t */ unlock() {\n        this._isLocked = false;\n    }\n    /**\n\t * Destroys the buffer.\n\t */ destroy() {\n        this.model.document.off('change', this._changeCallback);\n        this.model.document.selection.off('change:range', this._selectionChangeCallback);\n        this.model.document.selection.off('change:attribute', this._selectionChangeCallback);\n    }\n    /**\n\t * Resets the change buffer.\n\t *\n\t * @param ignoreLock Whether internal lock {@link #isLocked} should be ignored.\n\t */ _reset(ignoreLock = false) {\n        if (!this.isLocked || ignoreLock) {\n            this._batch = null;\n            this._size = 0;\n        }\n    }\n}\n\n/**\n * The insert text command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n */ class InsertTextCommand extends Command {\n    /**\n\t * Typing's change buffer used to group subsequent changes into batches.\n\t */ _buffer;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param undoStepSize The maximum number of atomic changes\n\t * which can be contained in one batch in the command buffer.\n\t */ constructor(editor, undoStepSize){\n        super(editor);\n        this._buffer = new ChangeBuffer(editor.model, undoStepSize);\n        // Since this command may execute on different selectable than selection, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * The current change buffer.\n\t */ get buffer() {\n        return this._buffer;\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._buffer.destroy();\n    }\n    /**\n\t * Executes the input command. It replaces the content within the given range with the given text.\n\t * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n\t * at the beginning of the range (which after the removal is a collapsed range).\n\t *\n\t * @fires execute\n\t * @param options The command options.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const text = options.text || '';\n        const textInsertions = text.length;\n        let selection = doc.selection;\n        if (options.selection) {\n            selection = options.selection;\n        } else if (options.range) {\n            selection = model.createSelection(options.range);\n        }\n        // Stop executing if selectable is in non-editable place.\n        if (!model.canEditAt(selection)) {\n            return;\n        }\n        const resultRange = options.resultRange;\n        model.enqueueChange(this._buffer.batch, (writer)=>{\n            this._buffer.lock();\n            // Store selection attributes before deleting old content to preserve formatting and link.\n            // This unifies the behavior between DocumentSelection and Selection provided as input option.\n            const selectionAttributes = Array.from(doc.selection.getAttributes());\n            model.deleteContent(selection);\n            if (text) {\n                model.insertContent(writer.createText(text, selectionAttributes), selection);\n            }\n            if (resultRange) {\n                writer.setSelection(resultRange);\n            } else if (!selection.is('documentSelection')) {\n                writer.setSelection(selection);\n            }\n            this._buffer.unlock();\n            this._buffer.input(textInsertions);\n        });\n    }\n}\n\nconst TYPING_INPUT_TYPES = [\n    // For collapsed range:\n    //\t- This one is a regular typing (all browsers, all systems).\n    //\t- This one is used by Chrome when typing accented letter – 2nd step when the user selects the accent (Mac).\n    // For non-collapsed range:\n    //\t- This one is used by Chrome when typing accented letter – when the selection box first appears (Mac).\n    //\t- This one is used by Safari when accepting spell check suggestions from the context menu (Mac).\n    'insertText',\n    // This one is used by Safari when typing accented letter (Mac).\n    // This one is used by Safari when accepting spell check suggestions from the autocorrection pop-up (Mac).\n    'insertReplacementText'\n];\nconst TYPING_INPUT_TYPES_ANDROID = [\n    ...TYPING_INPUT_TYPES,\n    'insertCompositionText'\n];\n/**\n * Text insertion observer introduces the {@link module:engine/view/document~Document#event:insertText} event.\n */ class InsertTextObserver extends Observer {\n    /**\n\t * Instance of the focus observer. Insert text observer calls\n\t * {@link module:engine/view/observer/focusobserver~FocusObserver#flush} to mark the latest focus change as complete.\n\t */ focusObserver;\n    /**\n\t * @inheritDoc\n\t */ constructor(view){\n        super(view);\n        this.focusObserver = view.getObserver(FocusObserver);\n        // On Android composition events should immediately be applied to the model. Rendering is not disabled.\n        // On non-Android the model is updated only on composition end.\n        // On Android we can't rely on composition start/end to update model.\n        const typingInputTypes = env.isAndroid ? TYPING_INPUT_TYPES_ANDROID : TYPING_INPUT_TYPES;\n        const viewDocument = view.document;\n        viewDocument.on('beforeinput', (evt, data)=>{\n            if (!this.isEnabled) {\n                return;\n            }\n            const { data: text, targetRanges, inputType, domEvent } = data;\n            if (!typingInputTypes.includes(inputType)) {\n                return;\n            }\n            // Mark the latest focus change as complete (we are typing in editable after the focus\n            // so the selection is in the focused element).\n            this.focusObserver.flush();\n            const eventInfo = new EventInfo(viewDocument, 'insertText');\n            viewDocument.fire(eventInfo, new DomEventData(view, domEvent, {\n                text,\n                selection: view.createSelection(targetRanges)\n            }));\n            // Stop the beforeinput event if `delete` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n        });\n        // On Android composition events are immediately applied to the model.\n        // On non-Android the model is updated only on composition end.\n        // On Android we can't rely on composition start/end to update model.\n        if (!env.isAndroid) {\n            // Note: The priority must be lower than the CompositionObserver handler to call it after the renderer is unblocked.\n            // This is important for view to DOM position mapping.\n            // This causes the effect of first remove composed DOM and then reapply it after model modification.\n            viewDocument.on('compositionend', (evt, { data, domEvent })=>{\n                if (!this.isEnabled) {\n                    return;\n                }\n                // In case of aborted composition.\n                if (!data) {\n                    return;\n                }\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.log( `%c[InsertTextObserver]%c Fire insertText event, %c${ JSON.stringify( data ) }`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', 'color: blue'\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                // How do we know where to insert the composed text?\n                // 1. The SelectionObserver is blocked and the view is not updated with the composition changes.\n                // 2. The last moment before it's locked is the `compositionstart` event.\n                // 3. The `SelectionObserver` is listening for `compositionstart` event and immediately converts\n                //    the selection. Handles this at the lowest priority so after the rendering is blocked.\n                viewDocument.fire('insertText', new DomEventData(view, domEvent, {\n                    text: data\n                }));\n            }, {\n                priority: 'lowest'\n            });\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ observe() {}\n    /**\n\t * @inheritDoc\n\t */ stopObserving() {}\n}\n\n/**\n * Handles text input coming from the keyboard or other input methods.\n */ class Input extends Plugin {\n    /**\n\t * The queue of `insertText` command executions that are waiting for the DOM to get updated after beforeinput event.\n\t */ _compositionQueue;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Input';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const mapper = editor.editing.mapper;\n        const modelSelection = model.document.selection;\n        this._compositionQueue = new CompositionQueue(editor);\n        view.addObserver(InsertTextObserver);\n        // TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n        const insertTextCommand = new InsertTextCommand(editor, editor.config.get('typing.undoStep') || 20);\n        // Register `insertText` command and add `input` command as an alias for backward compatibility.\n        editor.commands.add('insertText', insertTextCommand);\n        editor.commands.add('input', insertTextCommand);\n        this.listenTo(view.document, 'insertText', (evt, data)=>{\n            // Rendering is disabled while composing so prevent events that will be rendered by the engine\n            // and should not be applied by the browser.\n            if (!view.document.isComposing) {\n                data.preventDefault();\n            }\n            // Flush queue on the next beforeinput event because it could happen\n            // that the mutation observer does not notice the DOM change in time.\n            if (env.isAndroid && view.document.isComposing) {\n                this._compositionQueue.flush('next beforeinput');\n            }\n            const { text, selection: viewSelection } = data;\n            let modelRanges;\n            // If view selection was specified, translate it to model selection.\n            if (viewSelection) {\n                modelRanges = Array.from(viewSelection.getRanges()).map((viewRange)=>mapper.toModelRange(viewRange));\n            } else {\n                modelRanges = Array.from(modelSelection.getRanges());\n            }\n            let insertText = text;\n            // Typing in English on Android is firing composition events for the whole typed word.\n            // We need to check the target range text to only apply the difference.\n            if (env.isAndroid) {\n                const selectedText = Array.from(modelRanges[0].getItems()).reduce((rangeText, node)=>{\n                    return rangeText + (node.is('$textProxy') ? node.data : '');\n                }, '');\n                if (selectedText) {\n                    if (selectedText.length <= insertText.length) {\n                        if (insertText.startsWith(selectedText)) {\n                            insertText = insertText.substring(selectedText.length);\n                            modelRanges[0].start = modelRanges[0].start.getShiftedBy(selectedText.length);\n                        }\n                    } else {\n                        if (selectedText.startsWith(insertText)) {\n                            // TODO this should be mapped as delete?\n                            modelRanges[0].start = modelRanges[0].start.getShiftedBy(insertText.length);\n                            insertText = '';\n                        }\n                    }\n                }\n                if (insertText.length == 0 && modelRanges[0].isCollapsed) {\n                    // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                    // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Ignore insertion of an empty data to the collapsed range.',\n                    // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-style: italic'\n                    // @if CK_DEBUG_TYPING // \t);\n                    // @if CK_DEBUG_TYPING // }\n                    return;\n                }\n            }\n            const commandData = {\n                text: insertText,\n                selection: model.createSelection(modelRanges)\n            };\n            // This is a composition event and those are not cancellable, so we need to wait until browser updates the DOM\n            // and we could apply changes to the model and verify if the DOM is valid.\n            // The browser applies changes to the DOM not immediately on beforeinput event.\n            // We just wait for mutation observer to notice changes or as a fallback a timeout.\n            if (env.isAndroid && view.document.isComposing) {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.log( `%c[Input]%c Queue insertText:%c \"${ commandData.text }\"%c ` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getFirstPosition().path }]-` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getLastPosition().path }]` +\n                // @if CK_DEBUG_TYPING // \t\t` queue size: ${ this._compositionQueue.length + 1 }`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', 'color: blue', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                this._compositionQueue.push(commandData);\n            } else {\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.log( `%c[Input]%c Execute insertText:%c \"${ commandData.text }\"%c ` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getFirstPosition().path }]-` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getLastPosition().path }]`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', 'color: blue', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                editor.execute('insertText', commandData);\n                view.scrollToTheSelection();\n            }\n        });\n        // Delete selected content on composition start.\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this.listenTo(view.document, 'keydown', (evt, data)=>{\n                if (modelSelection.isCollapsed || data.keyCode != 229 || !view.document.isComposing) {\n                    return;\n                }\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconst firstPositionPath = modelSelection.getFirstPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconst lastPositionPath = modelSelection.getLastPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c KeyDown 229%c -> model.deleteContent() ' +\n                // @if CK_DEBUG_TYPING // \t\t`[${ firstPositionPath }]-[${ lastPositionPath }]`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', '',\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                deleteSelectionContent(model, insertTextCommand);\n            });\n        } else {\n            // Note: The priority must precede the CompositionObserver handler to call it before\n            // the renderer is blocked, because we want to render this change.\n            this.listenTo(view.document, 'compositionstart', ()=>{\n                if (modelSelection.isCollapsed) {\n                    return;\n                }\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconst firstPositionPath = modelSelection.getFirstPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconst lastPositionPath = modelSelection.getLastPosition()!.path;\n                // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Composition start%c -> model.deleteContent() ' +\n                // @if CK_DEBUG_TYPING // \t\t`[${ firstPositionPath }]-[${ lastPositionPath }]`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', '',\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                deleteSelectionContent(model, insertTextCommand);\n            });\n        }\n        // Apply composed changes to the model.\n        if (env.isAndroid) {\n            // Apply changes to the model as they are applied to the DOM by the browser.\n            // On beforeinput event, the DOM is not yet modified. We wait for detected mutations to apply model changes.\n            this.listenTo(view.document, 'mutations', (evt, { mutations })=>{\n                if (!view.document.isComposing) {\n                    return;\n                }\n                // Check if mutations are relevant for queued changes.\n                for (const { node } of mutations){\n                    const viewElement = findMappedViewAncestor(node, mapper);\n                    const modelElement = mapper.toModelElement(viewElement);\n                    if (this._compositionQueue.isComposedElement(modelElement)) {\n                        this._compositionQueue.flush('mutations');\n                        return;\n                    }\n                }\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Mutations not related to the composition.',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-style: italic'\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            });\n            // Make sure that all changes are applied to the model before the end of composition.\n            this.listenTo(view.document, 'compositionend', ()=>{\n                this._compositionQueue.flush('composition end');\n            });\n            // Trigger mutations check after the composition completes to fix all DOM changes that got ignored during composition.\n            // On Android the Renderer is not disabled while composing. While updating DOM nodes we ignore some changes\n            // that are not that important (like NBSP vs plain space character) and could break the composition flow.\n            // After composition is completed we trigger additional `mutations` event for elements affected by the composition\n            // so the Renderer can adjust the DOM to the expected structure without breaking the composition.\n            this.listenTo(view.document, 'compositionend', ()=>{\n                const mutations = [];\n                for (const element of this._compositionQueue.flushComposedElements()){\n                    const viewElement = mapper.toViewElement(element);\n                    if (!viewElement) {\n                        continue;\n                    }\n                    mutations.push({\n                        type: 'children',\n                        node: viewElement\n                    });\n                }\n                if (mutations.length) {\n                    // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                    // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Input]%c Fire post-composition mutation fixes.',\n                    // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', 'font-weight: bold', ''\n                    // @if CK_DEBUG_TYPING // \t);\n                    // @if CK_DEBUG_TYPING // }\n                    view.document.fire('mutations', {\n                        mutations\n                    });\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n                // @if CK_DEBUG_TYPING // }\n                }\n            }, {\n                priority: 'lowest'\n            });\n        } else {\n            // After composition end we need to verify if there are no left-overs.\n            // Listening at the lowest priority so after the `InsertTextObserver` added above (all composed text\n            // should already be applied to the model, view, and DOM).\n            // On non-Android the `Renderer` is blocked while user is composing but the `MutationObserver` still collects\n            // mutated nodes and fires `mutations` events.\n            // Those events are recorded by the `Renderer` but not applied to the DOM while composing.\n            // We need to trigger those checks (and fixes) once again but this time without specifying the exact mutations\n            // since they are already recorded by the `Renderer`.\n            // It in the most cases just clears the internal record of mutated text nodes\n            // since all changes should already be applied to the DOM.\n            // This is especially needed when user cancels composition, so we can clear nodes marked to sync.\n            this.listenTo(view.document, 'compositionend', ()=>{\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.group( '%c[Input]%c Force render after composition end.',\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', 'font-weight: bold', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                view.document.fire('mutations', {\n                    mutations: []\n                });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n            // @if CK_DEBUG_TYPING // }\n            }, {\n                priority: 'lowest'\n            });\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._compositionQueue.destroy();\n    }\n}\n/**\n * The queue of `insertText` command executions that are waiting for the DOM to get updated after beforeinput event.\n */ class CompositionQueue {\n    /**\n\t * The editor instance.\n\t */ editor;\n    /**\n\t * Debounced queue flush as a safety mechanism for cases of mutation observer not triggering.\n\t */ flushDebounced = debounce(()=>this.flush('timeout'), 50);\n    /**\n\t * The queue of `insertText` command executions that are waiting for the DOM to get updated after beforeinput event.\n\t */ _queue = [];\n    /**\n\t * A set of model elements. The composition happened in those elements. It's used for mutations check.\n\t */ _compositionElements = new Set();\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        this.editor = editor;\n    }\n    /**\n\t * Destroys the helper object.\n\t */ destroy() {\n        this.flushDebounced.cancel();\n        this._compositionElements.clear();\n        while(this._queue.length){\n            this.shift();\n        }\n    }\n    /**\n\t * Returns the size of the queue.\n\t */ get length() {\n        return this._queue.length;\n    }\n    /**\n\t * Push next insertText command data to the queue.\n\t */ push(commandData) {\n        const commandLiveData = {\n            text: commandData.text\n        };\n        if (commandData.selection) {\n            commandLiveData.selectionRanges = [];\n            for (const range of commandData.selection.getRanges()){\n                commandLiveData.selectionRanges.push(LiveRange.fromRange(range));\n                // Keep reference to the model element for later mutation checks.\n                this._compositionElements.add(range.start.parent);\n            }\n        }\n        this._queue.push(commandLiveData);\n        this.flushDebounced();\n    }\n    /**\n\t * Shift the first item from the insertText command data queue.\n\t */ shift() {\n        const commandLiveData = this._queue.shift();\n        const commandData = {\n            text: commandLiveData.text\n        };\n        if (commandLiveData.selectionRanges) {\n            const ranges = commandLiveData.selectionRanges.map((liveRange)=>detachLiveRange(liveRange)).filter((range)=>!!range);\n            if (ranges.length) {\n                commandData.selection = this.editor.model.createSelection(ranges);\n            }\n        }\n        return commandData;\n    }\n    /**\n\t * Applies all queued insertText command executions.\n\t *\n\t * @param reason Used only for debugging.\n\t */ flush(reason) {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        this.flushDebounced.cancel();\n        if (!this._queue.length) {\n            return;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.group( `%c[Input]%c Flush insertText queue on ${ reason }.`,\n        // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold'\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const insertTextCommand = editor.commands.get('insertText');\n        const buffer = insertTextCommand.buffer;\n        model.enqueueChange(buffer.batch, ()=>{\n            buffer.lock();\n            while(this._queue.length){\n                const commandData = this.shift();\n                // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n                // @if CK_DEBUG_TYPING // \tconsole.log( '%c[Input]%c Execute queued insertText:%c ' +\n                // @if CK_DEBUG_TYPING // \t\t`\"${ commandData.text }\"%c ` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getFirstPosition().path }]-` +\n                // @if CK_DEBUG_TYPING // \t\t`[${ commandData.selection.getLastPosition().path }]`,\n                // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', 'font-weight: bold', 'color: blue', ''\n                // @if CK_DEBUG_TYPING // \t);\n                // @if CK_DEBUG_TYPING // }\n                editor.execute('insertText', commandData);\n            }\n            buffer.unlock();\n        });\n        view.scrollToTheSelection();\n    // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n    // @if CK_DEBUG_TYPING // \tconsole.groupEnd();\n    // @if CK_DEBUG_TYPING // }\n    }\n    /**\n\t * Returns `true` if the given model element is related to recent composition.\n\t */ isComposedElement(element) {\n        return this._compositionElements.has(element);\n    }\n    /**\n\t * Returns an array of composition-related elements and clears the internal list.\n\t */ flushComposedElements() {\n        const result = Array.from(this._compositionElements);\n        this._compositionElements.clear();\n        return result;\n    }\n}\n/**\n * Deletes the content selected by the document selection at the start of composition.\n */ function deleteSelectionContent(model, insertTextCommand) {\n    // By relying on the state of the input command we allow disabling the entire input easily\n    // by just disabling the input command. We could’ve used here the delete command but that\n    // would mean requiring the delete feature which would block loading one without the other.\n    // We could also check the editor.isReadOnly property, but that wouldn't allow to block\n    // the input without blocking other features.\n    if (!insertTextCommand.isEnabled) {\n        return;\n    }\n    const buffer = insertTextCommand.buffer;\n    buffer.lock();\n    model.enqueueChange(buffer.batch, ()=>{\n        model.deleteContent(model.document.selection);\n    });\n    buffer.unlock();\n}\n/**\n * Detaches a LiveRange and returns the static range from it.\n */ function detachLiveRange(liveRange) {\n    const range = liveRange.toRange();\n    liveRange.detach();\n    if (range.root.rootName == '$graveyard') {\n        return null;\n    }\n    return range;\n}\n/**\n * For the given `viewNode`, finds and returns the closest ancestor of this node that has a mapping to the model.\n */ function findMappedViewAncestor(viewNode, mapper) {\n    let node = viewNode.is('$text') ? viewNode.parent : viewNode;\n    while(!mapper.toModelElement(node)){\n        node = node.parent;\n    }\n    return node;\n}\n\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n */ class DeleteCommand extends Command {\n    /**\n\t * The directionality of the delete describing in what direction it should\n\t * consume the content when the selection is collapsed.\n\t */ direction;\n    /**\n\t * Delete's change buffer used to group subsequent changes into batches.\n\t */ _buffer;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param direction The directionality of the delete describing in what direction it\n\t * should consume the content when the selection is collapsed.\n\t */ constructor(editor, direction){\n        super(editor);\n        this.direction = direction;\n        this._buffer = new ChangeBuffer(editor.model, editor.config.get('typing.undoStep'));\n        // Since this command may execute on different selectable than selection, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * The current change buffer.\n\t */ get buffer() {\n        return this._buffer;\n    }\n    /**\n\t * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n\t * or a piece of content in the {@link #direction defined direction}.\n\t *\n\t * @fires execute\n\t * @param options The command options.\n\t * @param options.unit See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n\t * @param options.sequence A number describing which subsequent delete event it is without the key being released.\n\t * See the {@link module:engine/view/document~Document#event:delete} event data.\n\t * @param options.selection Selection to remove. If not set, current model selection will be used.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        model.enqueueChange(this._buffer.batch, (writer)=>{\n            this._buffer.lock();\n            const selection = writer.createSelection(options.selection || doc.selection);\n            // Don't execute command when selection is in non-editable place.\n            if (!model.canEditAt(selection)) {\n                return;\n            }\n            const sequence = options.sequence || 1;\n            // Do not replace the whole selected content if selection was collapsed.\n            // This prevents such situation:\n            //\n            // <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n            // starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n            const doNotResetEntireContent = selection.isCollapsed;\n            // Try to extend the selection in the specified direction.\n            if (selection.isCollapsed) {\n                model.modifySelection(selection, {\n                    direction: this.direction,\n                    unit: options.unit,\n                    treatEmojiAsSingleUnit: true\n                });\n            }\n            // Check if deleting in an empty editor. See #61.\n            if (this._shouldEntireContentBeReplacedWithParagraph(sequence)) {\n                this._replaceEntireContentWithParagraph(writer);\n                return;\n            }\n            // Check if deleting in the first empty block.\n            // See https://github.com/ckeditor/ckeditor5/issues/8137.\n            if (this._shouldReplaceFirstBlockWithParagraph(selection, sequence)) {\n                this.editor.execute('paragraph', {\n                    selection\n                });\n                return;\n            }\n            // If selection is still collapsed, then there's nothing to delete.\n            if (selection.isCollapsed) {\n                return;\n            }\n            let changeCount = 0;\n            selection.getFirstRange().getMinimalFlatRanges().forEach((range)=>{\n                changeCount += count(range.getWalker({\n                    singleCharacters: true,\n                    ignoreElementEnd: true,\n                    shallow: true\n                }));\n            });\n            // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n            // @if CK_DEBUG_TYPING // \tconsole.log( '%c[DeleteCommand]%c Delete content',\n            // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green;', '',\n            // @if CK_DEBUG_TYPING // \t\t`[${ selection.getFirstPosition()!.path }]-[${ selection.getLastPosition()!.path }]`, options\n            // @if CK_DEBUG_TYPING // \t);\n            // @if CK_DEBUG_TYPING // }\n            model.deleteContent(selection, {\n                doNotResetEntireContent,\n                direction: this.direction\n            });\n            this._buffer.input(changeCount);\n            writer.setSelection(selection);\n            this._buffer.unlock();\n        });\n    }\n    /**\n\t * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n\t * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n\t * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n\t *\n\t * But, if the user pressed the key in an empty editable for the first time,\n\t * we want to replace the entire content with a paragraph if:\n\t *\n\t * * the current limit element is empty,\n\t * * the paragraph is allowed in the limit element,\n\t * * the limit doesn't already have a paragraph inside.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n\t *\n\t * @param sequence A number describing which subsequent delete event it is without the key being released.\n\t */ _shouldEntireContentBeReplacedWithParagraph(sequence) {\n        // Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n        if (sequence > 1) {\n            return false;\n        }\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const limitElement = model.schema.getLimitElement(selection);\n        // If a collapsed selection contains the whole content it means that the content is empty\n        // (from the user perspective).\n        const limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent(limitElement);\n        if (!limitElementIsEmpty) {\n            return false;\n        }\n        if (!model.schema.checkChild(limitElement, 'paragraph')) {\n            return false;\n        }\n        const limitElementFirstChild = limitElement.getChild(0);\n        // Does nothing if the limit element already contains only a paragraph.\n        // We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n        // because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n        if (limitElementFirstChild && limitElementFirstChild.is('element', 'paragraph')) {\n            return false;\n        }\n        return true;\n    }\n    /**\n\t * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n\t *\n\t * @param writer The model writer.\n\t */ _replaceEntireContentWithParagraph(writer) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const limitElement = model.schema.getLimitElement(selection);\n        const paragraph = writer.createElement('paragraph');\n        writer.remove(writer.createRangeIn(limitElement));\n        writer.insert(paragraph, limitElement);\n        writer.setSelection(paragraph, 0);\n    }\n    /**\n\t * Checks if the selection is inside an empty element that is the first child of the limit element\n\t * and should be replaced with a paragraph.\n\t *\n\t * @param selection The selection.\n\t * @param sequence A number describing which subsequent delete event it is without the key being released.\n\t */ _shouldReplaceFirstBlockWithParagraph(selection, sequence) {\n        const model = this.editor.model;\n        // Does nothing if user pressed and held the \"Backspace\" key or it was a \"Delete\" button.\n        if (sequence > 1 || this.direction != 'backward') {\n            return false;\n        }\n        if (!selection.isCollapsed) {\n            return false;\n        }\n        const position = selection.getFirstPosition();\n        const limitElement = model.schema.getLimitElement(position);\n        const limitElementFirstChild = limitElement.getChild(0);\n        // Only elements that are direct children of the limit element can be replaced.\n        // Unwrapping from a block quote should be handled in a dedicated feature.\n        if (position.parent != limitElementFirstChild) {\n            return false;\n        }\n        // A block should be replaced only if it was empty.\n        if (!selection.containsEntireContent(limitElementFirstChild)) {\n            return false;\n        }\n        // Replace with a paragraph only if it's allowed there.\n        if (!model.schema.checkChild(limitElement, 'paragraph')) {\n            return false;\n        }\n        // Does nothing if the limit element already contains only a paragraph.\n        if (limitElementFirstChild.name == 'paragraph') {\n            return false;\n        }\n        return true;\n    }\n}\n\nconst DELETE_CHARACTER = 'character';\nconst DELETE_WORD = 'word';\nconst DELETE_CODE_POINT = 'codePoint';\nconst DELETE_SELECTION = 'selection';\nconst DELETE_BACKWARD = 'backward';\nconst DELETE_FORWARD = 'forward';\nconst DELETE_EVENT_TYPES = {\n    // --------------------------------------- Backward delete types -----------------------------------------------------\n    // This happens in Safari on Mac when some content is selected and Ctrl + K is pressed.\n    deleteContent: {\n        unit: DELETE_SELECTION,\n        // According to the Input Events Level 2 spec, this delete type has no direction\n        // but to keep things simple, let's default to backward.\n        direction: DELETE_BACKWARD\n    },\n    // Chrome and Safari on Mac: Backspace or Ctrl + H\n    deleteContentBackward: {\n        // This kind of deletions must be done on the code point-level instead of target range provided by the DOM beforeinput event.\n        // Take for instance \"👨‍👩‍👧‍👧\", it equals:\n        //\n        //\t* [ \"👨\", \"ZERO WIDTH JOINER\", \"👩\", \"ZERO WIDTH JOINER\", \"👧\", \"ZERO WIDTH JOINER\", \"👧\" ]\n        //\t* or simply \"\\u{1F468}\\u200D\\u{1F469}\\u200D\\u{1F467}\\u200D\\u{1F467}\"\n        //\n        // The range provided by the browser would cause the entire multi-byte grapheme to disappear while the user\n        // intention when deleting backwards (\"👨‍👩‍👧‍👧[]\", then backspace) is gradual \"decomposition\" (first to \"👨‍👩‍👧‍[]\",\n        // then to \"👨‍👩‍[]\", etc.).\n        //\n        //\t* \"👨‍👩‍👧‍👧[]\" + backward delete (by code point)  -> results in \"👨‍👩‍👧[]\", removed the last \"👧\" 👍\n        //\t* \"👨‍👩‍👧‍👧[]\" + backward delete (by character)  -> results in \"[]\", removed the whole grapheme 👎\n        //\n        // Deleting by code-point is simply a better UX. See \"deleteContentForward\" to learn more.\n        unit: DELETE_CODE_POINT,\n        direction: DELETE_BACKWARD\n    },\n    // On Mac: Option + Backspace.\n    // On iOS: Hold the backspace for a while and the whole words will start to disappear.\n    deleteWordBackward: {\n        unit: DELETE_WORD,\n        direction: DELETE_BACKWARD\n    },\n    // Safari on Mac: Cmd + Backspace\n    deleteHardLineBackward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_BACKWARD\n    },\n    // Chrome on Mac: Cmd + Backspace.\n    deleteSoftLineBackward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_BACKWARD\n    },\n    // --------------------------------------- Forward delete types -----------------------------------------------------\n    // Chrome on Mac: Fn + Backspace or Ctrl + D\n    // Safari on Mac: Ctrl + K or Ctrl + D\n    deleteContentForward: {\n        // Unlike backward delete, this delete must be performed by character instead of by code point, which\n        // provides the best UX for working with accented letters.\n        // Take, for example \"b̂\" (\"\\u0062\\u0302\", or [ \"LATIN SMALL LETTER B\", \"COMBINING CIRCUMFLEX ACCENT\" ]):\n        //\n        //\t* \"b̂[]\" + backward delete (by code point)  -> results in \"b[]\", removed the combining mark 👍\n        //\t* \"[]b̂\" + forward delete (by code point)   -> results in \"[]^\", a bare combining mark does that not make sense when alone 👎\n        //\t* \"[]b̂\" + forward delete (by character)    -> results in \"[]\", removed both \"b\" and the combining mark 👍\n        //\n        // See: \"deleteContentBackward\" to learn more.\n        unit: DELETE_CHARACTER,\n        direction: DELETE_FORWARD\n    },\n    // On Mac: Fn + Option + Backspace.\n    deleteWordForward: {\n        unit: DELETE_WORD,\n        direction: DELETE_FORWARD\n    },\n    // Chrome on Mac: Ctrl + K (you have to disable the Link plugin first, though, because it uses the same keystroke)\n    // This is weird that it does not work in Safari on Mac despite being listed in the official shortcuts listing\n    // on Apple's webpage.\n    deleteHardLineForward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_FORWARD\n    },\n    // At this moment there is no known way to trigger this event type but let's keep it for the symmetry with\n    // deleteSoftLineBackward.\n    deleteSoftLineForward: {\n        unit: DELETE_SELECTION,\n        direction: DELETE_FORWARD\n    }\n};\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n */ class DeleteObserver extends Observer {\n    /**\n\t * @inheritDoc\n\t */ constructor(view){\n        super(view);\n        const document = view.document;\n        // It matters how many subsequent deletions were made, e.g. when the backspace key was pressed and held\n        // by the user for some time. For instance, if such scenario ocurred and the heading the selection was\n        // anchored to was the only content of the editor, it will not be converted into a paragraph (the user\n        // wanted to clean it up, not remove it, it's about UX). Check out the DeleteCommand implementation to learn more.\n        //\n        // Fun fact: Safari on Mac won't fire beforeinput for backspace in an empty heading (only content).\n        let sequence = 0;\n        document.on('keydown', ()=>{\n            sequence++;\n        });\n        document.on('keyup', ()=>{\n            sequence = 0;\n        });\n        document.on('beforeinput', (evt, data)=>{\n            if (!this.isEnabled) {\n                return;\n            }\n            const { targetRanges, domEvent, inputType } = data;\n            const deleteEventSpec = DELETE_EVENT_TYPES[inputType];\n            if (!deleteEventSpec) {\n                return;\n            }\n            const deleteData = {\n                direction: deleteEventSpec.direction,\n                unit: deleteEventSpec.unit,\n                sequence\n            };\n            if (deleteData.unit == DELETE_SELECTION) {\n                deleteData.selectionToRemove = view.createSelection(targetRanges[0]);\n            }\n            // The default deletion unit for deleteContentBackward is a single code point\n            // but if the browser provides a wider target range then we should use it.\n            if (inputType === 'deleteContentBackward') {\n                // On Android, deleteContentBackward has sequence 1 by default.\n                if (env.isAndroid) {\n                    deleteData.sequence = 1;\n                }\n                // The beforeInput event wants more than a single character to be removed.\n                if (shouldUseTargetRanges(targetRanges)) {\n                    deleteData.unit = DELETE_SELECTION;\n                    deleteData.selectionToRemove = view.createSelection(targetRanges);\n                }\n            }\n            const eventInfo = new BubblingEventInfo(document, 'delete', targetRanges[0]);\n            document.fire(eventInfo, new DomEventData(view, domEvent, deleteData));\n            // Stop the beforeinput event if `delete` event was stopped.\n            // https://github.com/ckeditor/ckeditor5/issues/753\n            if (eventInfo.stop.called) {\n                evt.stop();\n            }\n        });\n        // TODO: to be removed when https://bugs.chromium.org/p/chromium/issues/detail?id=1365311 is solved.\n        if (env.isBlink) {\n            enableChromeWorkaround(this);\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ observe() {}\n    /**\n\t * @inheritDoc\n\t */ stopObserving() {}\n}\n/**\n * Enables workaround for the issue https://github.com/ckeditor/ckeditor5/issues/11904.\n */ function enableChromeWorkaround(observer) {\n    const view = observer.view;\n    const document = view.document;\n    let pressedKeyCode = null;\n    let beforeInputReceived = false;\n    document.on('keydown', (evt, { keyCode })=>{\n        pressedKeyCode = keyCode;\n        beforeInputReceived = false;\n    });\n    document.on('keyup', (evt, { keyCode, domEvent })=>{\n        const selection = document.selection;\n        const shouldFireDeleteEvent = observer.isEnabled && keyCode == pressedKeyCode && isDeleteKeyCode(keyCode) && !selection.isCollapsed && !beforeInputReceived;\n        pressedKeyCode = null;\n        if (shouldFireDeleteEvent) {\n            const targetRange = selection.getFirstRange();\n            const eventInfo = new BubblingEventInfo(document, 'delete', targetRange);\n            const deleteData = {\n                unit: DELETE_SELECTION,\n                direction: getDeleteDirection(keyCode),\n                selectionToRemove: selection\n            };\n            document.fire(eventInfo, new DomEventData(view, domEvent, deleteData));\n        }\n    });\n    document.on('beforeinput', (evt, { inputType })=>{\n        const deleteEventSpec = DELETE_EVENT_TYPES[inputType];\n        const isMatchingBeforeInput = isDeleteKeyCode(pressedKeyCode) && deleteEventSpec && deleteEventSpec.direction == getDeleteDirection(pressedKeyCode);\n        if (isMatchingBeforeInput) {\n            beforeInputReceived = true;\n        }\n    }, {\n        priority: 'high'\n    });\n    document.on('beforeinput', (evt, { inputType, data })=>{\n        const shouldIgnoreBeforeInput = pressedKeyCode == keyCodes.delete && inputType == 'insertText' && data == '\\x7f'; // Delete character :P\n        if (shouldIgnoreBeforeInput) {\n            evt.stop();\n        }\n    }, {\n        priority: 'high'\n    });\n    function isDeleteKeyCode(keyCode) {\n        return keyCode == keyCodes.backspace || keyCode == keyCodes.delete;\n    }\n    function getDeleteDirection(keyCode) {\n        return keyCode == keyCodes.backspace ? DELETE_BACKWARD : DELETE_FORWARD;\n    }\n}\n/**\n * Verifies whether the given target ranges cover more than a single character and should be used instead of a single code-point deletion.\n */ function shouldUseTargetRanges(targetRanges) {\n    // The collapsed target range could happen for example while deleting inside an inline filler\n    // (it's mapped to collapsed position before an inline filler).\n    if (targetRanges.length != 1 || targetRanges[0].isCollapsed) {\n        return false;\n    }\n    const walker = targetRanges[0].getWalker({\n        direction: 'backward',\n        singleCharacters: true,\n        ignoreElementEnd: true\n    });\n    let count = 0;\n    for (const { nextPosition, item } of walker){\n        if (nextPosition.parent.is('$text')) {\n            const data = nextPosition.parent.data;\n            const offset = nextPosition.offset;\n            // Count combined symbols and emoji sequences as a single character.\n            if (isInsideSurrogatePair(data, offset) || isInsideCombinedSymbol(data, offset) || isInsideEmojiSequence(data, offset)) {\n                continue;\n            }\n            count++;\n        } else if (item.is('containerElement') || item.is('emptyElement')) {\n            count++;\n        }\n        if (count > 1) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * The delete and backspace feature. Handles keys such as <kbd>Delete</kbd> and <kbd>Backspace</kbd>, other\n * keystrokes and user actions that result in deleting content in the editor.\n */ class Delete extends Plugin {\n    /**\n\t * Whether pressing backspace should trigger undo action\n\t */ _undoOnBackspace;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Delete';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const modelDocument = editor.model.document;\n        view.addObserver(DeleteObserver);\n        this._undoOnBackspace = false;\n        const deleteForwardCommand = new DeleteCommand(editor, 'forward');\n        // Register `deleteForward` command and add `forwardDelete` command as an alias for backward compatibility.\n        editor.commands.add('deleteForward', deleteForwardCommand);\n        editor.commands.add('forwardDelete', deleteForwardCommand);\n        editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            // When not in composition, we handle the action, so prevent the default one.\n            // When in composition, it's the browser who modify the DOM (renderer is disabled).\n            if (!viewDocument.isComposing) {\n                data.preventDefault();\n            }\n            const { direction, sequence, selectionToRemove, unit } = data;\n            const commandName = direction === 'forward' ? 'deleteForward' : 'delete';\n            const commandData = {\n                sequence\n            };\n            if (unit == 'selection') {\n                const modelRanges = Array.from(selectionToRemove.getRanges()).map((viewRange)=>{\n                    return editor.editing.mapper.toModelRange(viewRange);\n                });\n                commandData.selection = editor.model.createSelection(modelRanges);\n            } else {\n                commandData.unit = unit;\n            }\n            editor.execute(commandName, commandData);\n            view.scrollToTheSelection();\n        }, {\n            priority: 'low'\n        });\n        if (this.editor.plugins.has('UndoEditing')) {\n            this.listenTo(viewDocument, 'delete', (evt, data)=>{\n                if (this._undoOnBackspace && data.direction == 'backward' && data.sequence == 1 && data.unit == 'codePoint') {\n                    this._undoOnBackspace = false;\n                    editor.execute('undo');\n                    data.preventDefault();\n                    evt.stop();\n                }\n            }, {\n                context: '$capture'\n            });\n            this.listenTo(modelDocument, 'change', ()=>{\n                this._undoOnBackspace = false;\n            });\n        }\n    }\n    /**\n\t * If the next user action after calling this method is pressing backspace, it would undo the last change.\n\t *\n\t * Requires {@link module:undo/undoediting~UndoEditing} plugin. If not loaded, does nothing.\n\t */ requestUndoOnBackspace() {\n        if (this.editor.plugins.has('UndoEditing')) {\n            this._undoOnBackspace = true;\n        }\n    }\n}\n\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n */ class Typing extends Plugin {\n    static get requires() {\n        return [\n            Input,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Typing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module typing/utils/getlasttextline\n */ /**\n * Returns the last text line from the given range.\n *\n * \"The last text line\" is understood as text (from one or more text nodes) which is limited either by a parent block\n * or by inline elements (e.g. `<softBreak>`).\n *\n * ```ts\n * const rangeToCheck = model.createRange(\n * \tmodel.createPositionAt( paragraph, 0 ),\n * \tmodel.createPositionAt( paragraph, 'end' )\n * );\n *\n * const { text, range } = getLastTextLine( rangeToCheck, model );\n * ```\n *\n * For model below, the returned `text` will be \"Foo bar baz\" and `range` will be set on whole `<paragraph>` content:\n *\n * ```xml\n * <paragraph>Foo bar baz<paragraph>\n * ```\n *\n * However, in below case, `text` will be set to \"baz\" and `range` will be set only on \"baz\".\n *\n * ```xml\n * <paragraph>Foo<softBreak></softBreak>bar<softBreak></softBreak>baz<paragraph>\n * ```\n */ function getLastTextLine(range, model) {\n    let start = range.start;\n    const text = Array.from(range.getWalker({\n        ignoreElementEnd: false\n    })).reduce((rangeText, { item })=>{\n        // Trim text to a last occurrence of an inline element and update range start.\n        if (!(item.is('$text') || item.is('$textProxy'))) {\n            start = model.createPositionAfter(item);\n            return '';\n        }\n        return rangeText + item.data;\n    }, '');\n    return {\n        text,\n        range: model.createRange(start, range.end)\n    };\n}\n\n/**\n * The text watcher feature.\n *\n * Fires the {@link module:typing/textwatcher~TextWatcher#event:matched:data `matched:data`},\n * {@link module:typing/textwatcher~TextWatcher#event:matched:selection `matched:selection`} and\n * {@link module:typing/textwatcher~TextWatcher#event:unmatched `unmatched`} events on typing or selection changes.\n */ class TextWatcher extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The editor's model.\n\t */ model;\n    /**\n\t * The function used to match the text.\n\t *\n\t * The test callback can return 3 values:\n\t *\n\t * * `false` if there is no match,\n\t * * `true` if there is a match,\n\t * * an object if there is a match and we want to pass some additional information to the {@link #event:matched:data} event.\n\t */ testCallback;\n    /**\n\t * Whether there is a match currently.\n\t */ _hasMatch;\n    /**\n\t * Creates a text watcher instance.\n\t *\n\t * @param testCallback See {@link module:typing/textwatcher~TextWatcher#testCallback}.\n\t */ constructor(model, testCallback){\n        super();\n        this.model = model;\n        this.testCallback = testCallback;\n        this._hasMatch = false;\n        this.set('isEnabled', true);\n        // Toggle text watching on isEnabled state change.\n        this.on('change:isEnabled', ()=>{\n            if (this.isEnabled) {\n                this._startListening();\n            } else {\n                this.stopListening(model.document.selection);\n                this.stopListening(model.document);\n            }\n        });\n        this._startListening();\n    }\n    /**\n\t * Flag indicating whether there is a match currently.\n\t */ get hasMatch() {\n        return this._hasMatch;\n    }\n    /**\n\t * Starts listening to the editor for typing and selection events.\n\t */ _startListening() {\n        const model = this.model;\n        const document = model.document;\n        this.listenTo(document.selection, 'change:range', (evt, { directChange })=>{\n            // Indirect changes (i.e. when the user types or external changes are applied) are handled in the document's change event.\n            if (!directChange) {\n                return;\n            }\n            // Act only on collapsed selection.\n            if (!document.selection.isCollapsed) {\n                if (this.hasMatch) {\n                    this.fire('unmatched');\n                    this._hasMatch = false;\n                }\n                return;\n            }\n            this._evaluateTextBeforeSelection('selection');\n        });\n        this.listenTo(document, 'change:data', (evt, batch)=>{\n            if (batch.isUndo || !batch.isLocal) {\n                return;\n            }\n            this._evaluateTextBeforeSelection('data', {\n                batch\n            });\n        });\n    }\n    /**\n\t * Checks the editor content for matched text.\n\t *\n\t * @fires matched:data\n\t * @fires matched:selection\n\t * @fires unmatched\n\t *\n\t * @param suffix A suffix used for generating the event name.\n\t * @param data Data object for event.\n\t */ _evaluateTextBeforeSelection(suffix, data = {}) {\n        const model = this.model;\n        const document = model.document;\n        const selection = document.selection;\n        const rangeBeforeSelection = model.createRange(model.createPositionAt(selection.focus.parent, 0), selection.focus);\n        const { text, range } = getLastTextLine(rangeBeforeSelection, model);\n        const testResult = this.testCallback(text);\n        if (!testResult && this.hasMatch) {\n            this.fire('unmatched');\n        }\n        this._hasMatch = !!testResult;\n        if (testResult) {\n            const eventData = Object.assign(data, {\n                text,\n                range\n            });\n            // If the test callback returns an object with additional data, assign the data as well.\n            if (typeof testResult == 'object') {\n                Object.assign(eventData, testResult);\n            }\n            this.fire(`matched:${suffix}`, eventData);\n        }\n    }\n}\n\n/**\n * This plugin enables the two-step caret (phantom) movement behavior for\n * {@link module:typing/twostepcaretmovement~TwoStepCaretMovement#registerAttribute registered attributes}\n * on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * **Note:** This plugin support right–to–left (Arabic, Hebrew, etc.) content by mirroring its behavior\n * but for the sake of simplicity examples showcase only left–to–right use–cases.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this plugin is enabled and registered for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n * ```xml\n * foo{}<$text a=\"true\">bar</$text>\n * ```\n *\n * \t<kbd>→</kbd>\n *\n * ```xml\n * foo<$text a=\"true\">{}bar</$text>\n * ```\n *\n * * When disabled:\n *\n * ```xml\n * foo{}<$text a=\"true\">bar</$text>\n * ```\n *\n * \t<kbd>→</kbd>\n *\n * ```xml\n * foo<$text a=\"true\">b{}ar</$text>\n * ```\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n * ```xml\n * <$text a=\"true\">bar{}</$text>baz\n * ```\n *\n * \t<kbd>→</kbd>\n *\n * ```xml\n * <$text a=\"true\">bar</$text>{}baz\n * ```\n *\n * * When disabled:\n *\n * ```xml\n * <$text a=\"true\">bar{}</$text>baz\n * ```\n *\n * \t<kbd>→</kbd>\n *\n * ```xml\n * <$text a=\"true\">bar</$text>b{}az\n * ```\n *\n * # Backward movement\n *\n * * When enabled:\n *\n * ```xml\n * <$text a=\"true\">bar</$text>{}baz\n * ```\n *\n * \t<kbd>←</kbd>\n *\n * ```xml\n * <$text a=\"true\">bar{}</$text>baz\n * ```\n *\n * * When disabled:\n *\n * ```xml\n * <$text a=\"true\">bar</$text>{}baz\n * ```\n *\n * \t<kbd>←</kbd>\n *\n * ```xml\n * <$text a=\"true\">ba{}r</$text>b{}az\n * ```\n *\n * # Multiple attributes\n *\n * * When enabled and many attributes starts or ends at the same position:\n *\n * ```xml\n * <$text a=\"true\" b=\"true\">bar</$text>{}baz\n * ```\n *\n * \t<kbd>←</kbd>\n *\n * ```xml\n * <$text a=\"true\" b=\"true\">bar{}</$text>baz\n * ```\n *\n * * When enabled and one procedes another:\n *\n * ```xml\n * <$text a=\"true\">bar</$text><$text b=\"true\">{}bar</$text>\n * ```\n *\n * \t<kbd>←</kbd>\n *\n * ```xml\n * <$text a=\"true\">bar{}</$text><$text b=\"true\">bar</$text>\n * ```\n *\n */ class TwoStepCaretMovement extends Plugin {\n    /**\n\t * A set of attributes to handle.\n\t */ attributes;\n    /**\n\t * The current UID of the overridden gravity, as returned by\n\t * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t */ _overrideUid;\n    /**\n\t * A flag indicating that the automatic gravity restoration should not happen upon the next\n\t * gravity restoration.\n\t * {@link module:engine/model/selection~Selection#event:change:range} event.\n\t */ _isNextGravityRestorationSkipped = false;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TwoStepCaretMovement';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.attributes = new Set();\n        this._overrideUid = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const locale = editor.locale;\n        const modelSelection = model.document.selection;\n        // Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n        this.listenTo(view.document, 'arrowKey', (evt, data)=>{\n            // This implementation works only for collapsed selection.\n            if (!modelSelection.isCollapsed) {\n                return;\n            }\n            // When user tries to expand the selection or jump over the whole word or to the beginning/end then\n            // two-steps movement is not necessary.\n            if (data.shiftKey || data.altKey || data.ctrlKey) {\n                return;\n            }\n            const arrowRightPressed = data.keyCode == keyCodes.arrowright;\n            const arrowLeftPressed = data.keyCode == keyCodes.arrowleft;\n            // When neither left or right arrow has been pressed then do noting.\n            if (!arrowRightPressed && !arrowLeftPressed) {\n                return;\n            }\n            const contentDirection = locale.contentLanguageDirection;\n            let isMovementHandled = false;\n            if (contentDirection === 'ltr' && arrowRightPressed || contentDirection === 'rtl' && arrowLeftPressed) {\n                isMovementHandled = this._handleForwardMovement(data);\n            } else {\n                isMovementHandled = this._handleBackwardMovement(data);\n            }\n            // Stop the keydown event if the two-step caret movement handled it. Avoid collisions\n            // with other features which may also take over the caret movement (e.g. Widget).\n            if (isMovementHandled === true) {\n                evt.stop();\n            }\n        }, {\n            context: '$text',\n            priority: 'highest'\n        });\n        // The automatic gravity restoration logic.\n        this.listenTo(modelSelection, 'change:range', (evt, data)=>{\n            // Skipping the automatic restoration is needed if the selection should change\n            // but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n            // to learn more.\n            if (this._isNextGravityRestorationSkipped) {\n                this._isNextGravityRestorationSkipped = false;\n                return;\n            }\n            // Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n            // at this moment.\n            if (!this._isGravityOverridden) {\n                return;\n            }\n            // Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n            // It means that e.g. if the change was external (collaboration) and the user had their\n            // selection around the link, its gravity should remain intact in this change:range event.\n            if (!data.directChange && isBetweenDifferentAttributes(modelSelection.getFirstPosition(), this.attributes)) {\n                return;\n            }\n            this._restoreGravity();\n        });\n        // Handle a click at the beginning/end of a two-step element.\n        this._enableClickingAfterNode();\n        // Change the attributes of the selection in certain situations after the two-step node was inserted into the document.\n        this._enableInsertContentSelectionAttributesFixer();\n        // Handle removing the content after the two-step node.\n        this._handleDeleteContentAfterNode();\n    }\n    /**\n\t * Registers a given attribute for the two-step caret movement.\n\t *\n\t * @param attribute Name of the attribute to handle.\n\t */ registerAttribute(attribute) {\n        this.attributes.add(attribute);\n    }\n    /**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param data Data of the key press.\n\t * @returns `true` when the handler prevented caret movement.\n\t */ _handleForwardMovement(data) {\n        const attributes = this.attributes;\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const position = selection.getFirstPosition();\n        // DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n        //\n        // \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n        //\n        // or left the attribute\n        //\n        // \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n        //\n        // and the gravity will be restored automatically.\n        if (this._isGravityOverridden) {\n            return false;\n        }\n        // DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n        // attribute:\n        // * when the selection was initially set there using the mouse,\n        // * when the editor has just started\n        //\n        //\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n        //\n        if (position.isAtStart && hasAnyAttribute(selection, attributes)) {\n            return false;\n        }\n        // ENGAGE 2-SCM When at least one of the observed attributes changes its value (incl. starts, ends).\n        //\n        //\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n        //\t\t<paragraph>foo<$text attribute>bar{}</$text><$text otherAttribute>baz</$text></paragraph>\n        //\t\t<paragraph>foo<$text attribute=1>bar{}</$text><$text attribute=2>baz</$text></paragraph>\n        //\t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n        //\n        if (isBetweenDifferentAttributes(position, attributes)) {\n            preventCaretMovement(data);\n            // CLEAR 2-SCM attributes if we are at the end of one 2-SCM and before\n            // the next one with a different value of the same attribute.\n            //\n            //\t\t<paragraph>foo<$text attribute=1>bar{}</$text><$text attribute=2>bar</$text>baz</paragraph>\n            //\n            if (hasAnyAttribute(selection, attributes) && isBetweenDifferentAttributes(position, attributes, true)) {\n                clearSelectionAttributes(model, attributes);\n            } else {\n                this._overrideGravity();\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Updates the document selection and the view according to the two–step caret movement state\n\t * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n\t *\n\t * @param data Data of the key press.\n\t * @returns `true` when the handler prevented caret movement\n\t */ _handleBackwardMovement(data) {\n        const attributes = this.attributes;\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const position = selection.getFirstPosition();\n        // When the gravity is already overridden (by this plugin), it means we are on the two-step position.\n        // Prevent the movement, restore the gravity and update selection attributes.\n        //\n        //\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>{}baz</$text></paragraph>\n        //\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>{}baz</$text></paragraph>\n        //\t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n        //\t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n        //\n        if (this._isGravityOverridden) {\n            preventCaretMovement(data);\n            this._restoreGravity();\n            // CLEAR 2-SCM attributes if we are at the end of one 2-SCM and before\n            // the next one with a different value of the same attribute.\n            //\n            //\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>{}bar</$text>baz</paragraph>\n            //\n            if (isBetweenDifferentAttributes(position, attributes, true)) {\n                clearSelectionAttributes(model, attributes);\n            } else {\n                setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n            }\n            return true;\n        } else {\n            // REMOVE SELECTION ATTRIBUTE when restoring gravity towards a non-existent content at the\n            // beginning of the block.\n            //\n            // \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n            //\n            if (position.isAtStart) {\n                if (hasAnyAttribute(selection, attributes)) {\n                    preventCaretMovement(data);\n                    setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n                    return true;\n                }\n                return false;\n            }\n            // SET 2-SCM attributes if we are between nodes with the same attribute but with different values.\n            //\n            //\t\t<paragraph>foo<$text attribute=1>bar</$text>[]<$text attribute=2>bar</$text>baz</paragraph>\n            //\n            if (!hasAnyAttribute(selection, attributes) && isBetweenDifferentAttributes(position, attributes, true)) {\n                preventCaretMovement(data);\n                setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n                return true;\n            }\n            // When we are moving from natural gravity, to the position of the 2SCM, we need to override the gravity,\n            // and make sure it won't be restored. Unless it's at the end of the block and an observed attribute.\n            // We need to check if the caret is a one position before the attribute boundary:\n            //\n            //\t\t<paragraph>foo<$text attribute=1>bar</$text><$text attribute=2>b{}az</$text></paragraph>\n            //\t\t<paragraph>foo<$text attribute>bar</$text><$text otherAttribute>b{}az</$text></paragraph>\n            //\t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n            //\t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n            //\n            if (isStepAfterAnyAttributeBoundary(position, attributes)) {\n                // ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n                // left the attribute using a FORWARD 2-SCM.\n                //\n                // \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n                //\n                if (position.isAtEnd && !hasAnyAttribute(selection, attributes) && isBetweenDifferentAttributes(position, attributes)) {\n                    preventCaretMovement(data);\n                    setSelectionAttributesFromTheNodeBefore(model, attributes, position);\n                    return true;\n                }\n                // Skip the automatic gravity restore upon the next selection#change:range event.\n                // If not skipped, it would automatically restore the gravity, which should remain\n                // overridden.\n                this._isNextGravityRestorationSkipped = true;\n                this._overrideGravity();\n                // Don't return \"true\" here because we didn't call _preventCaretMovement.\n                // Returning here will destabilize the filler logic, which also listens to\n                // keydown (and the event would be stopped).\n                return false;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Starts listening to {@link module:engine/view/document~Document#event:mousedown} and\n\t * {@link module:engine/view/document~Document#event:selectionChange} and puts the selection before/after a 2-step node\n\t * if clicked at the beginning/ending of the 2-step node.\n\t *\n\t * The purpose of this action is to allow typing around the 2-step node directly after a click.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/1016.\n\t */ _enableClickingAfterNode() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const document = editor.editing.view.document;\n        editor.editing.view.addObserver(MouseObserver);\n        let clicked = false;\n        // Detect the click.\n        this.listenTo(document, 'mousedown', ()=>{\n            clicked = true;\n        });\n        // When the selection has changed...\n        this.listenTo(document, 'selectionChange', ()=>{\n            const attributes = this.attributes;\n            if (!clicked) {\n                return;\n            }\n            // ...and it was caused by the click...\n            clicked = false;\n            // ...and no text is selected...\n            if (!selection.isCollapsed) {\n                return;\n            }\n            // ...and clicked text is the 2-step node...\n            if (!hasAnyAttribute(selection, attributes)) {\n                return;\n            }\n            const position = selection.getFirstPosition();\n            if (!isBetweenDifferentAttributes(position, attributes)) {\n                return;\n            }\n            // The selection at the start of a block would use surrounding attributes\n            // from text after the selection so just clear 2-SCM attributes.\n            //\n            // Also, clear attributes for selection between same attribute with different values.\n            if (position.isAtStart || isBetweenDifferentAttributes(position, attributes, true)) {\n                clearSelectionAttributes(model, attributes);\n            } else if (!this._isGravityOverridden) {\n                this._overrideGravity();\n            }\n        });\n    }\n    /**\n\t * Starts listening to {@link module:engine/model/model~Model#event:insertContent} and corrects the model\n\t * selection attributes if the selection is at the end of a two-step node after inserting the content.\n\t *\n\t * The purpose of this action is to improve the overall UX because the user is no longer \"trapped\" by the\n\t * two-step attribute of the selection, and they can type a \"clean\" (`linkHref`–less) text right away.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/6053.\n\t */ _enableInsertContentSelectionAttributesFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const attributes = this.attributes;\n        this.listenTo(model, 'insertContent', ()=>{\n            const position = selection.getFirstPosition();\n            if (hasAnyAttribute(selection, attributes) && isBetweenDifferentAttributes(position, attributes)) {\n                clearSelectionAttributes(model, attributes);\n            }\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * Starts listening to {@link module:engine/model/model~Model#deleteContent} and checks whether\n\t * removing a content right after the tow-step attribute.\n\t *\n\t * If so, the selection should not preserve the two-step attribute. However, if\n\t * the {@link module:typing/twostepcaretmovement~TwoStepCaretMovement} plugin is active and\n\t * the selection has the two-step attribute due to overridden gravity (at the end), the two-step attribute should stay untouched.\n\t *\n\t * The purpose of this action is to allow removing the link text and keep the selection outside the link.\n\t *\n\t * See https://github.com/ckeditor/ckeditor5/issues/7521.\n\t */ _handleDeleteContentAfterNode() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const view = editor.editing.view;\n        let isBackspace = false;\n        let shouldPreserveAttributes = false;\n        // Detect pressing `Backspace`.\n        this.listenTo(view.document, 'delete', (evt, data)=>{\n            isBackspace = data.direction === 'backward';\n        }, {\n            priority: 'high'\n        });\n        // Before removing the content, check whether the selection is inside a two-step attribute.\n        // If so, we want to preserve those attributes.\n        this.listenTo(model, 'deleteContent', ()=>{\n            if (!isBackspace) {\n                return;\n            }\n            const position = selection.getFirstPosition();\n            shouldPreserveAttributes = hasAnyAttribute(selection, this.attributes) && !isStepAfterAnyAttributeBoundary(position, this.attributes);\n        }, {\n            priority: 'high'\n        });\n        // After removing the content, check whether the current selection should preserve the `linkHref` attribute.\n        this.listenTo(model, 'deleteContent', ()=>{\n            if (!isBackspace) {\n                return;\n            }\n            isBackspace = false;\n            // Do not escape two-step attribute if it was inside it before content deletion.\n            if (shouldPreserveAttributes) {\n                return;\n            }\n            // Use `model.enqueueChange()` in order to execute the callback at the end of the changes process.\n            editor.model.enqueueChange(()=>{\n                const position = selection.getFirstPosition();\n                if (hasAnyAttribute(selection, this.attributes) && isBetweenDifferentAttributes(position, this.attributes)) {\n                    if (position.isAtStart || isBetweenDifferentAttributes(position, this.attributes, true)) {\n                        clearSelectionAttributes(model, this.attributes);\n                    } else if (!this._isGravityOverridden) {\n                        this._overrideGravity();\n                    }\n                }\n            });\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * `true` when the gravity is overridden for the plugin.\n\t */ get _isGravityOverridden() {\n        return !!this._overrideUid;\n    }\n    /**\n\t * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n\t * and stores the information about this fact in the {@link #_overrideUid}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n\t */ _overrideGravity() {\n        this._overrideUid = this.editor.model.change((writer)=>{\n            return writer.overrideSelectionGravity();\n        });\n    }\n    /**\n\t * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n\t *\n\t * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n\t */ _restoreGravity() {\n        this.editor.model.change((writer)=>{\n            writer.restoreSelectionGravity(this._overrideUid);\n            this._overrideUid = null;\n        });\n    }\n}\n/**\n * Checks whether the selection has any of given attributes.\n */ function hasAnyAttribute(selection, attributes) {\n    for (const observedAttribute of attributes){\n        if (selection.hasAttribute(observedAttribute)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Applies the given attributes to the current selection using using the\n * values from the node before the current position. Uses\n * the {@link module:engine/model/writer~Writer model writer}.\n */ function setSelectionAttributesFromTheNodeBefore(model, attributes, position) {\n    const nodeBefore = position.nodeBefore;\n    model.change((writer)=>{\n        if (nodeBefore) {\n            const attributes = [];\n            const isInlineObject = model.schema.isObject(nodeBefore) && model.schema.isInline(nodeBefore);\n            for (const [key, value] of nodeBefore.getAttributes()){\n                if (model.schema.checkAttribute('$text', key) && (!isInlineObject || model.schema.getAttributeProperties(key).copyFromObject !== false)) {\n                    attributes.push([\n                        key,\n                        value\n                    ]);\n                }\n            }\n            writer.setSelectionAttribute(attributes);\n        } else {\n            writer.removeSelectionAttribute(attributes);\n        }\n    });\n}\n/**\n * Removes 2-SCM attributes from the selection.\n */ function clearSelectionAttributes(model, attributes) {\n    model.change((writer)=>{\n        writer.removeSelectionAttribute(attributes);\n    });\n}\n/**\n * Prevents the caret movement in the view by calling `preventDefault` on the event data.\n *\n * @alias data.preventDefault\n */ function preventCaretMovement(data) {\n    data.preventDefault();\n}\n/**\n * Checks whether the step before `isBetweenDifferentAttributes()`.\n */ function isStepAfterAnyAttributeBoundary(position, attributes) {\n    const positionBefore = position.getShiftedBy(-1);\n    return isBetweenDifferentAttributes(positionBefore, attributes);\n}\n/**\n * Checks whether the given position is between different values of given attributes.\n */ function isBetweenDifferentAttributes(position, attributes, isStrict = false) {\n    const { nodeBefore, nodeAfter } = position;\n    for (const observedAttribute of attributes){\n        const attrBefore = nodeBefore ? nodeBefore.getAttribute(observedAttribute) : undefined;\n        const attrAfter = nodeAfter ? nodeAfter.getAttribute(observedAttribute) : undefined;\n        if (isStrict && (attrBefore === undefined || attrAfter === undefined)) {\n            continue;\n        }\n        if (attrAfter !== attrBefore) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// All named transformations.\nconst TRANSFORMATIONS = {\n    // Common symbols:\n    copyright: {\n        from: '(c)',\n        to: '©'\n    },\n    registeredTrademark: {\n        from: '(r)',\n        to: '®'\n    },\n    trademark: {\n        from: '(tm)',\n        to: '™'\n    },\n    // Mathematical:\n    oneHalf: {\n        from: /(^|[^/a-z0-9])(1\\/2)([^/a-z0-9])$/i,\n        to: [\n            null,\n            '½',\n            null\n        ]\n    },\n    oneThird: {\n        from: /(^|[^/a-z0-9])(1\\/3)([^/a-z0-9])$/i,\n        to: [\n            null,\n            '⅓',\n            null\n        ]\n    },\n    twoThirds: {\n        from: /(^|[^/a-z0-9])(2\\/3)([^/a-z0-9])$/i,\n        to: [\n            null,\n            '⅔',\n            null\n        ]\n    },\n    oneForth: {\n        from: /(^|[^/a-z0-9])(1\\/4)([^/a-z0-9])$/i,\n        to: [\n            null,\n            '¼',\n            null\n        ]\n    },\n    threeQuarters: {\n        from: /(^|[^/a-z0-9])(3\\/4)([^/a-z0-9])$/i,\n        to: [\n            null,\n            '¾',\n            null\n        ]\n    },\n    lessThanOrEqual: {\n        from: '<=',\n        to: '≤'\n    },\n    greaterThanOrEqual: {\n        from: '>=',\n        to: '≥'\n    },\n    notEqual: {\n        from: '!=',\n        to: '≠'\n    },\n    arrowLeft: {\n        from: '<-',\n        to: '←'\n    },\n    arrowRight: {\n        from: '->',\n        to: '→'\n    },\n    // Typography:\n    horizontalEllipsis: {\n        from: '...',\n        to: '…'\n    },\n    enDash: {\n        from: /(^| )(--)( )$/,\n        to: [\n            null,\n            '–',\n            null\n        ]\n    },\n    emDash: {\n        from: /(^| )(---)( )$/,\n        to: [\n            null,\n            '—',\n            null\n        ]\n    },\n    // Quotations:\n    // English, US\n    quotesPrimary: {\n        from: buildQuotesRegExp('\"'),\n        to: [\n            null,\n            '“',\n            null,\n            '”'\n        ]\n    },\n    quotesSecondary: {\n        from: buildQuotesRegExp('\\''),\n        to: [\n            null,\n            '‘',\n            null,\n            '’'\n        ]\n    },\n    // English, UK\n    quotesPrimaryEnGb: {\n        from: buildQuotesRegExp('\\''),\n        to: [\n            null,\n            '‘',\n            null,\n            '’'\n        ]\n    },\n    quotesSecondaryEnGb: {\n        from: buildQuotesRegExp('\"'),\n        to: [\n            null,\n            '“',\n            null,\n            '”'\n        ]\n    },\n    // Polish\n    quotesPrimaryPl: {\n        from: buildQuotesRegExp('\"'),\n        to: [\n            null,\n            '„',\n            null,\n            '”'\n        ]\n    },\n    quotesSecondaryPl: {\n        from: buildQuotesRegExp('\\''),\n        to: [\n            null,\n            '‚',\n            null,\n            '’'\n        ]\n    }\n};\n// Transformation groups.\nconst TRANSFORMATION_GROUPS = {\n    symbols: [\n        'copyright',\n        'registeredTrademark',\n        'trademark'\n    ],\n    mathematical: [\n        'oneHalf',\n        'oneThird',\n        'twoThirds',\n        'oneForth',\n        'threeQuarters',\n        'lessThanOrEqual',\n        'greaterThanOrEqual',\n        'notEqual',\n        'arrowLeft',\n        'arrowRight'\n    ],\n    typography: [\n        'horizontalEllipsis',\n        'enDash',\n        'emDash'\n    ],\n    quotes: [\n        'quotesPrimary',\n        'quotesSecondary'\n    ]\n};\n// A set of default transformations provided by the feature.\nconst DEFAULT_TRANSFORMATIONS = [\n    'symbols',\n    'mathematical',\n    'typography',\n    'quotes'\n];\n/**\n * The text transformation plugin.\n */ class TextTransformation extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'Delete',\n            'Input'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TextTransformation';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('typing', {\n            transformations: {\n                include: DEFAULT_TRANSFORMATIONS\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const model = this.editor.model;\n        const modelSelection = model.document.selection;\n        modelSelection.on('change:range', ()=>{\n            // Disable plugin when selection is inside a code block.\n            this.isEnabled = !modelSelection.anchor.parent.is('element', 'codeBlock');\n        });\n        this._enableTransformationWatchers();\n    }\n    /**\n\t * Create new TextWatcher listening to the editor for typing and selection events.\n\t */ _enableTransformationWatchers() {\n        const editor = this.editor;\n        const model = editor.model;\n        const deletePlugin = editor.plugins.get('Delete');\n        const normalizedTransformations = normalizeTransformations(editor.config.get('typing.transformations'));\n        const testCallback = (text)=>{\n            for (const normalizedTransformation of normalizedTransformations){\n                const from = normalizedTransformation.from;\n                const match = from.test(text);\n                if (match) {\n                    return {\n                        normalizedTransformation\n                    };\n                }\n            }\n        };\n        const watcher = new TextWatcher(editor.model, testCallback);\n        watcher.on('matched:data', (evt, data)=>{\n            if (!data.batch.isTyping) {\n                return;\n            }\n            const { from, to } = data.normalizedTransformation;\n            const matches = from.exec(data.text);\n            const replaces = to(matches.slice(1));\n            const matchedRange = data.range;\n            let changeIndex = matches.index;\n            model.enqueueChange((writer)=>{\n                for(let i = 1; i < matches.length; i++){\n                    const match = matches[i];\n                    const replaceWith = replaces[i - 1];\n                    if (replaceWith == null) {\n                        changeIndex += match.length;\n                        continue;\n                    }\n                    const replacePosition = matchedRange.start.getShiftedBy(changeIndex);\n                    const replaceRange = model.createRange(replacePosition, replacePosition.getShiftedBy(match.length));\n                    const attributes = getTextAttributesAfterPosition(replacePosition);\n                    model.insertContent(writer.createText(replaceWith, attributes), replaceRange);\n                    changeIndex += replaceWith.length;\n                }\n                model.enqueueChange(()=>{\n                    deletePlugin.requestUndoOnBackspace();\n                });\n            });\n        });\n        watcher.bind('isEnabled').to(this);\n    }\n}\n/**\n * Normalizes the configuration `from` parameter value.\n * The normalized value for the `from` parameter is a RegExp instance. If the passed `from` is already a RegExp instance,\n * it is returned unchanged.\n */ function normalizeFrom(from) {\n    if (typeof from == 'string') {\n        return new RegExp(`(${escapeRegExp(from)})$`);\n    }\n    // `from` is already a regular expression.\n    return from;\n}\n/**\n * Normalizes the configuration `to` parameter value.\n * The normalized value for the `to` parameter is a function that takes an array and returns an array. See more in the\n * configuration description. If the passed `to` is already a function, it is returned unchanged.\n */ function normalizeTo(to) {\n    if (typeof to == 'string') {\n        return ()=>[\n                to\n            ];\n    } else if (to instanceof Array) {\n        return ()=>to;\n    }\n    // `to` is already a function.\n    return to;\n}\n/**\n * For given `position` returns attributes for the text that is after that position.\n * The text can be in the same text node as the position (`foo[]bar`) or in the next text node (`foo[]<$text bold=\"true\">bar</$text>`).\n */ function getTextAttributesAfterPosition(position) {\n    const textNode = position.textNode ? position.textNode : position.nodeAfter;\n    return textNode.getAttributes();\n}\n/**\n * Returns a RegExp pattern string that detects a sentence inside a quote.\n *\n * @param quoteCharacter The character to create a pattern for.\n */ function buildQuotesRegExp(quoteCharacter) {\n    return new RegExp(`(^|\\\\s)(${quoteCharacter})([^${quoteCharacter}]*)(${quoteCharacter})$`);\n}\n/**\n * Reads text transformation config and returns normalized array of transformations objects.\n */ function normalizeTransformations(config) {\n    const extra = config.extra || [];\n    const remove = config.remove || [];\n    const isNotRemoved = (transformation)=>!remove.includes(transformation);\n    const configured = config.include.concat(extra).filter(isNotRemoved);\n    return expandGroupsAndRemoveDuplicates(configured).filter(isNotRemoved) // Filter out 'remove' transformations as they might be set in group.\n    .map((transformation)=>typeof transformation == 'string' && TRANSFORMATIONS[transformation] ? TRANSFORMATIONS[transformation] : transformation)// Filter out transformations set as string that has not been found.\n    .filter((transformation)=>typeof transformation === 'object').map((transformation)=>({\n            from: normalizeFrom(transformation.from),\n            to: normalizeTo(transformation.to)\n        }));\n}\n/**\n * Reads definitions and expands named groups if needed to transformation names.\n * This method also removes duplicated named transformations if any.\n */ function expandGroupsAndRemoveDuplicates(definitions) {\n    // Set is using to make sure that transformation names are not duplicated.\n    const definedTransformations = new Set();\n    for (const transformationOrGroup of definitions){\n        if (typeof transformationOrGroup == 'string' && TRANSFORMATION_GROUPS[transformationOrGroup]) {\n            for (const transformation of TRANSFORMATION_GROUPS[transformationOrGroup]){\n                definedTransformations.add(transformation);\n            }\n        } else {\n            definedTransformations.add(transformationOrGroup);\n        }\n    }\n    return Array.from(definedTransformations);\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module typing/utils/findattributerange\n */ /**\n * Returns a model range that covers all consecutive nodes with the same `attributeName` and its `value`\n * that intersect the given `position`.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param position The start position.\n * @param attributeName The attribute name.\n * @param value The attribute value.\n * @param model The model instance.\n * @returns The link range.\n */ function findAttributeRange(position, attributeName, value, model) {\n    return model.createRange(findAttributeRangeBound(position, attributeName, value, true, model), findAttributeRangeBound(position, attributeName, value, false, model));\n}\n/**\n * Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same attribute value\n * and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n *\n * @param position The start position.\n * @param attributeName The attribute name.\n * @param value The attribute value.\n * @param lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n * @returns The position just before the last matched node.\n */ function findAttributeRangeBound(position, attributeName, value, lookBack, model) {\n    // Get node before or after position (depends on `lookBack` flag).\n    // When position is inside text node then start searching from text node.\n    let node = position.textNode || (lookBack ? position.nodeBefore : position.nodeAfter);\n    let lastNode = null;\n    while(node && node.getAttribute(attributeName) == value){\n        lastNode = node;\n        node = lookBack ? node.previousSibling : node.nextSibling;\n    }\n    return lastNode ? model.createPositionAt(lastNode, lookBack ? 'before' : 'after') : position;\n}\n\n/**\n * Adds a visual highlight style to an attribute element in which the selection is anchored.\n * Together with two-step caret movement, they indicate that the user is typing inside the element.\n *\n * Highlight is turned on by adding the given class to the attribute element in the view:\n *\n * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n *\n * This way, adding and removing the highlight does not interfere with conversion.\n *\n * Usage:\n *\n * ```ts\n * import inlineHighlight from '@ckeditor/ckeditor5-typing/src/utils/inlinehighlight';\n *\n * // Make `ck-link_selected` class be applied on an `a` element\n * // whenever the corresponding `linkHref` attribute element is selected.\n * inlineHighlight( editor, 'linkHref', 'a', 'ck-link_selected' );\n * ```\n *\n * @param editor The editor instance.\n * @param attributeName The attribute name to check.\n * @param tagName The tagName of a view item.\n * @param className The class name to apply in the view.\n */ function inlineHighlight(editor, attributeName, tagName, className) {\n    const view = editor.editing.view;\n    const highlightedElements = new Set();\n    // Adding the class.\n    view.document.registerPostFixer((writer)=>{\n        const selection = editor.model.document.selection;\n        let changed = false;\n        if (selection.hasAttribute(attributeName)) {\n            const modelRange = findAttributeRange(selection.getFirstPosition(), attributeName, selection.getAttribute(attributeName), editor.model);\n            const viewRange = editor.editing.mapper.toViewRange(modelRange);\n            // There might be multiple view elements in the `viewRange`, for example, when the `a` element is\n            // broken by a UIElement.\n            for (const item of viewRange.getItems()){\n                if (item.is('element', tagName) && !item.hasClass(className)) {\n                    writer.addClass(className, item);\n                    highlightedElements.add(item);\n                    changed = true;\n                }\n            }\n        }\n        return changed;\n    });\n    // Removing the class.\n    editor.conversion.for('editingDowncast').add((dispatcher)=>{\n        // Make sure the highlight is removed on every possible event, before conversion is started.\n        dispatcher.on('insert', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('remove', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('attribute', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('selection', removeHighlight, {\n            priority: 'highest'\n        });\n        function removeHighlight() {\n            view.change((writer)=>{\n                for (const item of highlightedElements.values()){\n                    writer.removeClass(className, item);\n                    highlightedElements.delete(item);\n                }\n            });\n        }\n    });\n}\n\nexport { Delete, Input, InsertTextCommand, TextTransformation, TextWatcher, TwoStepCaretMovement, Typing, findAttributeRange, findAttributeRangeBound, getLastTextLine, inlineHighlight };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { transformSets, NoOperation } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Base class for the undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n */ class BaseCommand extends Command {\n    /**\n\t * Stack of items stored by the command. These are pairs of:\n\t *\n\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t */ _stack = [];\n    /**\n\t * Stores all batches that were created by this command.\n\t *\n\t * @internal\n\t */ _createdBatches = new WeakSet();\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Refresh state, so the command is inactive right after initialization.\n        this.refresh();\n        // This command should not depend on selection change.\n        this._isEnabledBasedOnSelection = false;\n        // Set the transparent batch for the `editor.data.set()` call if the\n        // batch type is not set already.\n        this.listenTo(editor.data, 'set', (evt, data)=>{\n            // Create a shallow copy of the options to not change the original args.\n            // And make sure that an object is assigned to data[ 1 ].\n            data[1] = {\n                ...data[1]\n            };\n            const options = data[1];\n            // If batch type is not set, default to non-undoable batch.\n            if (!options.batchType) {\n                options.batchType = {\n                    isUndoable: false\n                };\n            }\n        }, {\n            priority: 'high'\n        });\n        // Clear the stack for the `transparent` batches.\n        this.listenTo(editor.data, 'set', (evt, data)=>{\n            // We can assume that the object exists and it has a `batchType` property.\n            // It was ensured with a higher priority listener before.\n            const options = data[1];\n            if (!options.batchType.isUndoable) {\n                this.clearStack();\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._stack.length > 0;\n    }\n    /**\n\t * Returns all batches created by this command.\n\t */ get createdBatches() {\n        return this._createdBatches;\n    }\n    /**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param batch The batch to add.\n\t */ addBatch(batch) {\n        const docSelection = this.editor.model.document.selection;\n        const selection = {\n            ranges: docSelection.hasOwnRange ? Array.from(docSelection.getRanges()) : [],\n            isBackward: docSelection.isBackward\n        };\n        this._stack.push({\n            batch,\n            selection\n        });\n        this.refresh();\n    }\n    /**\n\t * Removes all items from the stack.\n\t */ clearStack() {\n        this._stack = [];\n        this.refresh();\n    }\n    /**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @param ranges Ranges to be restored.\n\t * @param isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param operations Operations which has been applied since selection has been stored.\n\t */ _restoreSelection(ranges, isBackward, operations) {\n        const model = this.editor.model;\n        const document = model.document;\n        // This will keep the transformed selection ranges.\n        const selectionRanges = [];\n        // Transform all ranges from the restored selection.\n        const transformedRangeGroups = ranges.map((range)=>range.getTransformedByOperations(operations));\n        const allRanges = transformedRangeGroups.flat();\n        for (const rangeGroup of transformedRangeGroups){\n            // While transforming there could appear ranges that are contained by other ranges, we shall ignore them.\n            const transformed = rangeGroup.filter((range)=>range.root != document.graveyard).filter((range)=>!isRangeContainedByAnyOtherRange(range, allRanges));\n            // All the transformed ranges ended up in graveyard.\n            if (!transformed.length) {\n                continue;\n            }\n            // After the range got transformed, we have an array of ranges. Some of those\n            // ranges may be \"touching\" -- they can be next to each other and could be merged.\n            normalizeRanges(transformed);\n            // For each `range` from `ranges`, we take only one transformed range.\n            // This is because we want to prevent situation where single-range selection\n            // got transformed to multi-range selection.\n            selectionRanges.push(transformed[0]);\n        }\n        // @if CK_DEBUG_ENGINE // console.log( `Restored selection by undo: ${ selectionRanges.join( ', ' ) }` );\n        // `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n        if (selectionRanges.length) {\n            model.change((writer)=>{\n                writer.setSelection(selectionRanges, {\n                    backward: isBackward\n                });\n            });\n        }\n    }\n    /**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @param batchToUndo The batch to be undone.\n\t * @param undoingBatch The batch that will contain undoing changes.\n\t */ _undo(batchToUndo, undoingBatch) {\n        const model = this.editor.model;\n        const document = model.document;\n        // All changes done by the command execution will be saved as one batch.\n        this._createdBatches.add(undoingBatch);\n        const operationsToUndo = batchToUndo.operations.slice().filter((operation)=>operation.isDocumentOperation);\n        operationsToUndo.reverse();\n        // We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n        // we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n        for (const operationToUndo of operationsToUndo){\n            const nextBaseVersion = operationToUndo.baseVersion + 1;\n            const historyOperations = Array.from(document.history.getOperations(nextBaseVersion));\n            const transformedSets = transformSets([\n                operationToUndo.getReversed()\n            ], historyOperations, {\n                useRelations: true,\n                document: this.editor.model.document,\n                padWithNoOps: false,\n                forceWeakRemove: true\n            });\n            const reversedOperations = transformedSets.operationsA;\n            // After reversed operation has been transformed by all history operations, apply it.\n            for (let operation of reversedOperations){\n                // Do not apply any operation on non-editable space.\n                const affectedSelectable = operation.affectedSelectable;\n                if (affectedSelectable && !model.canEditAt(affectedSelectable)) {\n                    operation = new NoOperation(operation.baseVersion);\n                }\n                // Before applying, add the operation to the `undoingBatch`.\n                undoingBatch.addOperation(operation);\n                model.applyOperation(operation);\n                document.history.setOperationAsUndone(operationToUndo, operation);\n            }\n        }\n    }\n}\n/**\n * Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n *\n * @param ranges Ranges to be normalized.\n */ function normalizeRanges(ranges) {\n    ranges.sort((a, b)=>a.start.isBefore(b.start) ? -1 : 1);\n    for(let i = 1; i < ranges.length; i++){\n        const previousRange = ranges[i - 1];\n        const joinedRange = previousRange.getJoined(ranges[i], true);\n        if (joinedRange) {\n            // Replace the ranges on the list with the new joined range.\n            i--;\n            ranges.splice(i, 2, joinedRange);\n        }\n    }\n}\nfunction isRangeContainedByAnyOtherRange(range, ranges) {\n    return ranges.some((otherRange)=>otherRange !== range && otherRange.containsRange(range, true));\n}\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */ class UndoCommand extends BaseCommand {\n    /**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param batch A batch that should be undone. If not set, the last added batch will be undone.\n\t */ execute(batch = null) {\n        // If batch is not given, set `batchIndex` to the last index in command stack.\n        const batchIndex = batch ? this._stack.findIndex((a)=>a.batch == batch) : this._stack.length - 1;\n        const item = this._stack.splice(batchIndex, 1)[0];\n        const undoingBatch = this.editor.model.createBatch({\n            isUndo: true\n        });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not\n        // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(undoingBatch, ()=>{\n            this._undo(item.batch, undoingBatch);\n            const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n        });\n        // Firing `revert` event after the change block to make sure that it includes all changes from post-fixers\n        // and make sure that the selection is \"stabilized\" (the selection range is saved after undo is executed and then\n        // restored on redo, so it is important that the selection range is saved after post-fixers are done).\n        this.fire('revert', item.batch, undoingBatch);\n        this.refresh();\n    }\n}\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */ class RedoCommand extends BaseCommand {\n    /**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const item = this._stack.pop();\n        const redoingBatch = this.editor.model.createBatch({\n            isUndo: true\n        });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n        // operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(redoingBatch, ()=>{\n            const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n            const nextBaseVersion = lastOperation.baseVersion + 1;\n            const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n            this._undo(item.batch, redoingBatch);\n        });\n        this.refresh();\n    }\n}\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n */ class UndoEditing extends Plugin {\n    /**\n\t * The command that manages the undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t * Created and registered during the {@link #init feature initialization}.\n\t */ _undoCommand;\n    /**\n\t * The command that manages the redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t * Created and registered during the {@link #init feature initialization}.\n\t */ _redoCommand;\n    /**\n\t * Keeps track of which batches were registered in undo.\n\t */ _batchRegistry = new WeakSet();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UndoEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Create commands.\n        this._undoCommand = new UndoCommand(editor);\n        this._redoCommand = new RedoCommand(editor);\n        // Register command to the editor.\n        editor.commands.add('undo', this._undoCommand);\n        editor.commands.add('redo', this._redoCommand);\n        this.listenTo(editor.model, 'applyOperation', (evt, args)=>{\n            const operation = args[0];\n            // Do not register batch if the operation is not a document operation.\n            // This prevents from creating empty undo steps, where all operations where non-document operations.\n            // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n            // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n            // Such operations should not be reversed.\n            if (!operation.isDocumentOperation) {\n                return;\n            }\n            const batch = operation.batch;\n            const isRedoBatch = this._redoCommand.createdBatches.has(batch);\n            const isUndoBatch = this._undoCommand.createdBatches.has(batch);\n            const wasProcessed = this._batchRegistry.has(batch);\n            // Skip the batch if it was already processed.\n            if (wasProcessed) {\n                return;\n            }\n            // Add the batch to the registry so it will not be processed again.\n            this._batchRegistry.add(batch);\n            if (!batch.isUndoable) {\n                return;\n            }\n            if (isRedoBatch) {\n                // If this batch comes from `redoCommand`, add it to the `undoCommand` stack.\n                this._undoCommand.addBatch(batch);\n            } else if (!isUndoBatch) {\n                // If the batch comes neither  from `redoCommand` nor from `undoCommand` then it is a new, regular batch.\n                // Add the batch to the `undoCommand` stack and clear the `redoCommand` stack.\n                this._undoCommand.addBatch(batch);\n                this._redoCommand.clearStack();\n            }\n        }, {\n            priority: 'highest'\n        });\n        this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch)=>{\n            this._redoCommand.addBatch(undoingBatch);\n        });\n        editor.keystrokes.set('CTRL+Z', 'undo');\n        editor.keystrokes.set('CTRL+Y', 'redo');\n        editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Undo'),\n                    keystroke: 'CTRL+Z'\n                },\n                {\n                    label: t('Redo'),\n                    keystroke: [\n                        [\n                            'CTRL+Y'\n                        ],\n                        [\n                            'CTRL+SHIFT+Z'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n}\n\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n */ class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UndoUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? icons.undo : icons.redo;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? icons.redo : icons.undo;\n        this._addButtonsToFactory('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButtonsToFactory('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @param name Command name.\n\t * @param label Button label.\n\t * @param keystroke Command keystroke.\n\t * @param Icon Source of the icon.\n\t */ _addButtonsToFactory(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, ()=>{\n            const buttonView = this._createButton(ButtonView, name, label, keystroke, Icon);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:' + name, ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView, name, label, keystroke, Icon);\n        });\n    }\n    /**\n\t * TODO\n\t */ _createButton(ButtonClass, name, label, keystroke, Icon) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get(name);\n        const view = new ButtonClass(locale);\n        view.set({\n            label,\n            icon: Icon,\n            keystroke\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute(name);\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and the {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is an explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever an {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n * ```\n *    History                            Undo stack\n * ==============             ==================================\n * [operation A1]                      [  batch A  ]\n * [operation B1]                      [  batch B  ]\n * [operation B2]                      [  batch C  ]\n * [operation C1]\n * [operation C2]\n * [operation B3]\n * [operation C3]\n * ```\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n * ```\n *      History                             Undo stack\n * =================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]             [   processing undoing batch C   ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * ```\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * ```\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * the batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]                      [ batch Crr ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * [ operation C1'r]\n * [ operation C2'r]\n * [ operation C3rr]\n * ```\n */ class Undo extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            UndoEditing,\n            UndoUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Undo';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Undo, UndoEditing, UndoUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ObservableMixin, Collection, logWarning, uid, CKEditorError } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * Wrapper over the native `FileReader`.\n */ class FileReader extends /* #__PURE__ */ ObservableMixin() {\n    total;\n    /**\n\t * Instance of native FileReader.\n\t */ _reader;\n    /**\n\t * Holds the data of an already loaded file. The file must be first loaded\n\t * by using {@link module:upload/filereader~FileReader#read `read()`}.\n\t */ _data;\n    /**\n\t * Creates an instance of the FileReader.\n\t */ constructor(){\n        super();\n        const reader = new window.FileReader();\n        this._reader = reader;\n        this._data = undefined;\n        this.set('loaded', 0);\n        reader.onprogress = (evt)=>{\n            this.loaded = evt.loaded;\n        };\n    }\n    /**\n\t * Returns error that occurred during file reading.\n\t */ get error() {\n        return this._reader.error;\n    }\n    /**\n\t * Holds the data of an already loaded file. The file must be first loaded\n\t * by using {@link module:upload/filereader~FileReader#read `read()`}.\n\t */ get data() {\n        return this._data;\n    }\n    /**\n\t * Reads the provided file.\n\t *\n\t * @param file Native File object.\n\t * @returns Returns a promise that will be resolved with file's content.\n\t * The promise will be rejected in case of an error or when the reading process is aborted.\n\t */ read(file) {\n        const reader = this._reader;\n        this.total = file.size;\n        return new Promise((resolve, reject)=>{\n            reader.onload = ()=>{\n                const result = reader.result;\n                this._data = result;\n                resolve(result);\n            };\n            reader.onerror = ()=>{\n                reject('error');\n            };\n            reader.onabort = ()=>{\n                reject('aborted');\n            };\n            this._reader.readAsDataURL(file);\n        });\n    }\n    /**\n\t * Aborts file reader.\n\t */ abort() {\n        this._reader.abort();\n    }\n}\n\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/deep-dive/upload-adapter Custom image upload adapter deep-dive} guide.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n */ class FileRepository extends Plugin {\n    /**\n\t * Collection of loaders associated with this repository.\n\t */ loaders = new Collection();\n    /**\n\t * Loaders mappings used to retrieve loaders references.\n\t */ _loadersMap = new Map();\n    /**\n\t * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n\t * while upload is in progress. When there is no upload then value is `null`.\n\t */ _pendingAction = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FileRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PendingActions\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        // Keeps upload in a sync with pending actions.\n        this.loaders.on('change', ()=>this._updatePendingAction());\n        this.set('uploaded', 0);\n        this.set('uploadTotal', null);\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total)=>{\n            return total ? uploaded / total * 100 : 0;\n        });\n    }\n    /**\n\t * Returns the loader associated with specified file or promise.\n\t *\n\t * To get loader by id use `fileRepository.loaders.get( id )`.\n\t *\n\t * @param fileOrPromise Native file or promise handle.\n\t */ getLoader(fileOrPromise) {\n        return this._loadersMap.get(fileOrPromise) || null;\n    }\n    /**\n\t * Creates a loader instance for the given file.\n\t *\n\t * Requires {@link #createUploadAdapter} factory to be defined.\n\t *\n\t * @param fileOrPromise Native File object or native Promise object which resolves to a File.\n\t */ createLoader(fileOrPromise) {\n        if (!this.createUploadAdapter) {\n            /**\n\t\t\t * You need to enable an upload adapter in order to be able to upload files.\n\t\t\t *\n\t\t\t * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n\t\t\t * without {@link module:upload/filerepository~FileRepository#createUploadAdapter defining an upload adapter}.\n\t\t\t *\n\t\t\t * **If you see this warning when using one of the {@glink getting-started/legacy/installation-methods/predefined-builds\n\t\t\t * CKEditor 5 Builds}**\n\t\t\t * it means that you did not configure any of the upload adapters available by default in those builds.\n\t\t\t *\n\t\t\t * Predefined builds are a deprecated solution and we strongly advise\n\t\t\t * {@glink updating/nim-migration/migration-to-new-installation-methods migrating to new installation methods}.\n\t\t\t *\n\t\t\t * See the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n\t\t\t * adapters are available in the builds and how to configure them.\n\t\t\t *\n\t\t\t * Otherwise, if you see this warning, there is a chance that you enabled\n\t\t\t * a feature like {@link module:image/imageupload~ImageUpload},\n\t\t\t * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n\t\t\t * You can choose one of the existing upload adapters listed in the\n\t\t\t * {@glink features/images/image-upload/image-upload \"Image upload overview\"}.\n\t\t\t *\n\t\t\t * You can also implement your {@glink framework/deep-dive/upload-adapter own image upload adapter}.\n\t\t\t *\n\t\t\t * @error filerepository-no-upload-adapter\n\t\t\t */ logWarning('filerepository-no-upload-adapter');\n            return null;\n        }\n        const loader = new FileLoader(Promise.resolve(fileOrPromise), this.createUploadAdapter);\n        this.loaders.add(loader);\n        this._loadersMap.set(fileOrPromise, loader);\n        // Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n        if (fileOrPromise instanceof Promise) {\n            loader.file.then((file)=>{\n                this._loadersMap.set(file, loader);\n            })// Every then() must have a catch().\n            // File loader state (and rejections) are handled in read() and upload().\n            // Also, see the \"does not swallow the file promise rejection\" test.\n            .catch(()=>{});\n        }\n        loader.on('change:uploaded', ()=>{\n            let aggregatedUploaded = 0;\n            for (const loader of this.loaders){\n                aggregatedUploaded += loader.uploaded;\n            }\n            this.uploaded = aggregatedUploaded;\n        });\n        loader.on('change:uploadTotal', ()=>{\n            let aggregatedTotal = 0;\n            for (const loader of this.loaders){\n                if (loader.uploadTotal) {\n                    aggregatedTotal += loader.uploadTotal;\n                }\n            }\n            this.uploadTotal = aggregatedTotal;\n        });\n        return loader;\n    }\n    /**\n\t * Destroys the given loader.\n\t *\n\t * @param fileOrPromiseOrLoader File or Promise associated with that loader or loader itself.\n\t */ destroyLoader(fileOrPromiseOrLoader) {\n        const loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader(fileOrPromiseOrLoader);\n        loader._destroy();\n        this.loaders.remove(loader);\n        this._loadersMap.forEach((value, key)=>{\n            if (value === loader) {\n                this._loadersMap.delete(key);\n            }\n        });\n    }\n    /**\n\t * Registers or deregisters pending action bound with upload progress.\n\t */ _updatePendingAction() {\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        if (this.loaders.length) {\n            if (!this._pendingAction) {\n                const t = this.editor.t;\n                const getMessage = (value)=>`${t('Upload in progress')} ${parseInt(value)}%.`;\n                this._pendingAction = pendingActions.add(getMessage(this.uploadedPercent));\n                this._pendingAction.bind('message').to(this, 'uploadedPercent', getMessage);\n            }\n        } else {\n            pendingActions.remove(this._pendingAction);\n            this._pendingAction = null;\n        }\n    }\n}\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */ class FileLoader extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Unique id of FileLoader instance.\n\t *\n\t * @readonly\n\t */ id;\n    /**\n\t * Additional wrapper over the initial file promise passed to this loader.\n\t */ _filePromiseWrapper;\n    /**\n\t * Adapter instance associated with this file loader.\n\t */ _adapter;\n    /**\n\t * FileReader used by FileLoader.\n\t */ _reader;\n    /**\n\t * Creates a new instance of `FileLoader`.\n\t *\n\t * @param filePromise A promise which resolves to a file instance.\n\t * @param uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n\t */ constructor(filePromise, uploadAdapterCreator){\n        super();\n        this.id = uid();\n        this._filePromiseWrapper = this._createFilePromiseWrapper(filePromise);\n        this._adapter = uploadAdapterCreator(this);\n        this._reader = new FileReader();\n        this.set('status', 'idle');\n        this.set('uploaded', 0);\n        this.set('uploadTotal', null);\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total)=>{\n            return total ? uploaded / total * 100 : 0;\n        });\n        this.set('uploadResponse', null);\n    }\n    /**\n\t * A `Promise` which resolves to a `File` instance associated with this file loader.\n\t */ get file() {\n        if (!this._filePromiseWrapper) {\n            // Loader was destroyed, return promise which resolves to null.\n            return Promise.resolve(null);\n        } else {\n            // The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n            //\n            //\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n            //\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n            //\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n            //\n            // Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n            // is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n            return this._filePromiseWrapper.promise.then((file)=>this._filePromiseWrapper ? file : null);\n        }\n    }\n    /**\n\t * Returns the file data. To read its data, you need for first load the file\n\t * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n\t */ get data() {\n        return this._reader.data;\n    }\n    /**\n\t * Reads file using {@link module:upload/filereader~FileReader}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n\t * is different than `idle`.\n\t *\n\t * Example usage:\n\t *\n\t * ```ts\n\t * fileLoader.read()\n\t * \t.then( data => { ... } )\n\t * \t.catch( err => {\n\t * \t\tif ( err === 'aborted' ) {\n\t * \t\t\tconsole.log( 'Reading aborted.' );\n\t * \t\t} else {\n\t * \t\t\tconsole.log( 'Reading error.', err );\n\t * \t\t}\n\t * \t} );\n\t * ```\n\t *\n\t * @returns Returns promise that will be resolved with read data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */ read() {\n        if (this.status != 'idle') {\n            /**\n\t\t\t * You cannot call read if the status is different than idle.\n\t\t\t *\n\t\t\t * @error filerepository-read-wrong-status\n\t\t\t */ throw new CKEditorError('filerepository-read-wrong-status', this);\n        }\n        this.status = 'reading';\n        return this.file.then((file)=>this._reader.read(file)).then((data)=>{\n            // Edge case: reader was aborted after file was read - double check for proper status.\n            // It can happen when image was deleted during its upload.\n            if (this.status !== 'reading') {\n                throw this.status;\n            }\n            this.status = 'idle';\n            return data;\n        }).catch((err)=>{\n            if (err === 'aborted') {\n                this.status = 'aborted';\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw this._reader.error ? this._reader.error : err;\n        });\n    }\n    /**\n\t * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n\t * is different than `idle`.\n\t * Example usage:\n\t *\n\t * ```ts\n\t * fileLoader.upload()\n\t * \t.then( data => { ... } )\n\t * \t.catch( e => {\n\t * \t\tif ( e === 'aborted' ) {\n\t * \t\t\tconsole.log( 'Uploading aborted.' );\n\t * \t\t} else {\n\t * \t\t\tconsole.log( 'Uploading error.', e );\n\t * \t\t}\n\t * \t} );\n\t * ```\n\t *\n\t * @returns Returns promise that will be resolved with response data. Promise will be rejected if error\n\t * occurs or if read process is aborted.\n\t */ upload() {\n        if (this.status != 'idle') {\n            /**\n\t\t\t * You cannot call upload if the status is different than idle.\n\t\t\t *\n\t\t\t * @error filerepository-upload-wrong-status\n\t\t\t */ throw new CKEditorError('filerepository-upload-wrong-status', this);\n        }\n        this.status = 'uploading';\n        return this.file.then(()=>this._adapter.upload()).then((data)=>{\n            this.uploadResponse = data;\n            this.status = 'idle';\n            return data;\n        }).catch((err)=>{\n            if (this.status === 'aborted') {\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw err;\n        });\n    }\n    /**\n\t * Aborts loading process.\n\t */ abort() {\n        const status = this.status;\n        this.status = 'aborted';\n        if (!this._filePromiseWrapper.isFulfilled) {\n            // Edge case: file loader is aborted before read() is called\n            // so it might happen that no one handled the rejection of this promise.\n            // See https://github.com/ckeditor/ckeditor5-upload/pull/100\n            this._filePromiseWrapper.promise.catch(()=>{});\n            this._filePromiseWrapper.rejecter('aborted');\n        } else if (status == 'reading') {\n            this._reader.abort();\n        } else if (status == 'uploading' && this._adapter.abort) {\n            this._adapter.abort();\n        }\n        this._destroy();\n    }\n    /**\n\t * Performs cleanup.\n\t *\n\t * @internal\n\t */ _destroy() {\n        this._filePromiseWrapper = undefined;\n        this._reader = undefined;\n        this._adapter = undefined;\n        this.uploadResponse = undefined;\n    }\n    /**\n\t * Wraps a given file promise into another promise giving additional\n\t * control (resolving, rejecting, checking if fulfilled) over it.\n\t *\n\t * @param filePromise The initial file promise to be wrapped.\n\t */ _createFilePromiseWrapper(filePromise) {\n        const wrapper = {};\n        wrapper.promise = new Promise((resolve, reject)=>{\n            wrapper.rejecter = reject;\n            wrapper.isFulfilled = false;\n            filePromise.then((file)=>{\n                wrapper.isFulfilled = true;\n                resolve(file);\n            }).catch((err)=>{\n                wrapper.isFulfilled = true;\n                reject(err);\n            });\n        });\n        return wrapper;\n    }\n}\n\n/**\n * A plugin that converts images inserted into the editor into [Base64 strings](https://en.wikipedia.org/wiki/Base64)\n * in the {@glink getting-started/setup/getting-and-setting-data editor output}.\n *\n * This kind of image upload does not require server processing – images are stored with the rest of the text and\n * displayed by the web browser without additional requests.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n */ class Base64UploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FileRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Base64UploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this.editor.plugins.get(FileRepository).createUploadAdapter = (loader)=>new Adapter$1(loader);\n    }\n}\n/**\n * The upload adapter that converts images inserted into the editor into Base64 strings.\n */ let Adapter$1 = class Adapter {\n    /**\n\t * `FileLoader` instance to use during the upload.\n\t */ loader;\n    reader;\n    /**\n\t * Creates a new adapter instance.\n\t */ constructor(loader){\n        this.loader = loader;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t */ upload() {\n        return new Promise((resolve, reject)=>{\n            const reader = this.reader = new window.FileReader();\n            reader.addEventListener('load', ()=>{\n                resolve({\n                    default: reader.result\n                });\n            });\n            reader.addEventListener('error', (err)=>{\n                reject(err);\n            });\n            reader.addEventListener('abort', ()=>{\n                reject();\n            });\n            this.loader.file.then((file)=>{\n                reader.readAsDataURL(file);\n            });\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */ abort() {\n        this.reader.abort();\n    }\n};\n\n/**\n * The Simple upload adapter allows uploading images to an application running on your server using\n * the [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) API with a\n * minimal {@link module:upload/uploadconfig~SimpleUploadConfig editor configuration}.\n *\n * ```ts\n * ClassicEditor\n * \t.create( document.querySelector( '#editor' ), {\n * \t\tsimpleUpload: {\n * \t\t\tuploadUrl: 'http://example.com',\n * \t\t\theaders: {\n * \t\t\t\t...\n * \t\t\t}\n * \t\t}\n * \t} )\n * \t.then( ... )\n * \t.catch( ... );\n * ```\n *\n * See the {@glink features/images/image-upload/simple-upload-adapter \"Simple upload adapter\"} guide to learn how to\n * learn more about the feature (configuration, server–side requirements, etc.).\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n */ class SimpleUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FileRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SimpleUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const options = this.editor.config.get('simpleUpload');\n        if (!options) {\n            return;\n        }\n        if (!options.uploadUrl) {\n            /**\n\t\t\t * The {@link module:upload/uploadconfig~SimpleUploadConfig#uploadUrl `config.simpleUpload.uploadUrl`}\n\t\t\t * configuration required by the {@link module:upload/adapters/simpleuploadadapter~SimpleUploadAdapter `SimpleUploadAdapter`}\n\t\t\t * is missing. Make sure the correct URL is specified for the image upload to work properly.\n\t\t\t *\n\t\t\t * @error simple-upload-adapter-missing-uploadurl\n\t\t\t */ logWarning('simple-upload-adapter-missing-uploadurl');\n            return;\n        }\n        this.editor.plugins.get(FileRepository).createUploadAdapter = (loader)=>{\n            return new Adapter(loader, options);\n        };\n    }\n}\n/**\n * Upload adapter.\n */ class Adapter {\n    /**\n\t * FileLoader instance to use during the upload.\n\t */ loader;\n    /**\n\t * The configuration of the adapter.\n\t */ options;\n    xhr;\n    /**\n\t * Creates a new adapter instance.\n\t */ constructor(loader, options){\n        this.loader = loader;\n        this.options = options;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t */ upload() {\n        return this.loader.file.then((file)=>new Promise((resolve, reject)=>{\n                this._initRequest();\n                this._initListeners(resolve, reject, file);\n                this._sendRequest(file);\n            }));\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */ abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n\t * Initializes the `XMLHttpRequest` object using the URL specified as\n\t * {@link module:upload/uploadconfig~SimpleUploadConfig#uploadUrl `simpleUpload.uploadUrl`} in the editor's\n\t * configuration.\n\t */ _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.options.uploadUrl, true);\n        xhr.responseType = 'json';\n    }\n    /**\n\t * Initializes XMLHttpRequest listeners\n\t *\n\t * @param resolve Callback function to be called when the request is successful.\n\t * @param reject Callback function to be called when the request cannot be completed.\n\t * @param file Native File object.\n\t */ _initListeners(resolve, reject, file) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const genericErrorText = `Couldn't upload file: ${file.name}.`;\n        xhr.addEventListener('error', ()=>reject(genericErrorText));\n        xhr.addEventListener('abort', ()=>reject());\n        xhr.addEventListener('load', ()=>{\n            const response = xhr.response;\n            if (!response || response.error) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericErrorText);\n            }\n            const urls = response.url ? {\n                default: response.url\n            } : response.urls;\n            // Resolve with the normalized `urls` property and pass the rest of the response\n            // to allow customizing the behavior of features relying on the upload adapters.\n            resolve({\n                ...response,\n                urls\n            });\n        });\n        // Upload progress when it is supported.\n        /* istanbul ignore else -- @preserve */ if (xhr.upload) {\n            xhr.upload.addEventListener('progress', (evt)=>{\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n\t * Prepares the data and sends the request.\n\t *\n\t * @param file File instance to be uploaded.\n\t */ _sendRequest(file) {\n        // Set headers if specified.\n        const headers = this.options.headers || {};\n        // Use the withCredentials flag if specified.\n        const withCredentials = this.options.withCredentials || false;\n        for (const headerName of Object.keys(headers)){\n            this.xhr.setRequestHeader(headerName, headers[headerName]);\n        }\n        this.xhr.withCredentials = withCredentials;\n        // Prepare the form data.\n        const data = new FormData();\n        data.append('upload', file);\n        // Send the request.\n        this.xhr.send(data);\n    }\n}\n\nexport { Base64UploadAdapter, FileRepository, SimpleUploadAdapter };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { throttle, isElement, cloneDeepWith } from 'lodash-es';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module watchdog/watchdog\n */ /* globals window */ // eslint-disable-next-line ckeditor5-rules/no-cross-package-imports\n/**\n * An abstract watchdog class that handles most of the error handling process and the state of the underlying component.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and how to use it.\n *\n * @internal\n */ class Watchdog {\n    /**\n\t * An array of crashes saved as an object with the following properties:\n\t *\n\t * * `message`: `String`,\n\t * * `stack`: `String`,\n\t * * `date`: `Number`,\n\t * * `filename`: `String | undefined`,\n\t * * `lineno`: `Number | undefined`,\n\t * * `colno`: `Number | undefined`,\n\t */ crashes = [];\n    /**\n\t * Specifies the state of the item watched by the watchdog. The state can be one of the following values:\n\t *\n\t * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.\n\t * * `ready` &ndash; A state when the user can interact with the item.\n\t * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`\n\t * depending on how many and how frequent errors have been caught recently.\n\t * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,\n\t * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.\n\t */ state = 'initializing';\n    /**\n\t * @see module:watchdog/watchdog~WatchdogConfig\n\t */ _crashNumberLimit;\n    /**\n\t * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular\n\t * approaches like `sinon.useFakeTimers()` do not work well with error handling.\n\t */ _now = Date.now;\n    /**\n\t * @see module:watchdog/watchdog~WatchdogConfig\n\t */ _minimumNonErrorTimePeriod;\n    /**\n\t * Checks if the event error comes from the underlying item and restarts the item.\n\t */ _boundErrorHandler;\n    /**\n\t * A dictionary of event emitter listeners.\n\t */ _listeners;\n    /**\n\t * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.\n\t */ constructor(config){\n        this.crashes = [];\n        this._crashNumberLimit = typeof config.crashNumberLimit === 'number' ? config.crashNumberLimit : 3;\n        this._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === 'number' ? config.minimumNonErrorTimePeriod : 5000;\n        this._boundErrorHandler = (evt)=>{\n            // `evt.error` is exposed by EventError while `evt.reason` is available in PromiseRejectionEvent.\n            const error = 'error' in evt ? evt.error : evt.reason;\n            // Note that `evt.reason` might be everything that is in the promise rejection.\n            // Similarly everything that is thrown lands in `evt.error`.\n            if (error instanceof Error) {\n                this._handleError(error, evt);\n            }\n        };\n        this._listeners = {};\n        if (!this._restart) {\n            throw new Error('The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. ' + 'Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.');\n        }\n    }\n    /**\n\t * Destroys the watchdog and releases the resources.\n\t */ destroy() {\n        this._stopErrorHandling();\n        this._listeners = {};\n    }\n    /**\n\t * Starts listening to a specific event name by registering a callback that will be executed\n\t * whenever an event with a given name fires.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t *\n\t * @param eventName The event name.\n\t * @param callback A callback which will be added to event listeners.\n\t */ on(eventName, callback) {\n        if (!this._listeners[eventName]) {\n            this._listeners[eventName] = [];\n        }\n        this._listeners[eventName].push(callback);\n    }\n    /**\n\t * Stops listening to the specified event name by removing the callback from event listeners.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t *\n\t * @param eventName The event name.\n\t * @param callback A callback which will be removed from event listeners.\n\t */ off(eventName, callback) {\n        this._listeners[eventName] = this._listeners[eventName].filter((cb)=>cb !== callback);\n    }\n    /**\n\t * Fires an event with a given event name and arguments.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t */ _fire(eventName, ...args) {\n        const callbacks = this._listeners[eventName] || [];\n        for (const callback of callbacks){\n            callback.apply(this, [\n                null,\n                ...args\n            ]);\n        }\n    }\n    /**\n\t * Starts error handling by attaching global error handlers.\n\t */ _startErrorHandling() {\n        window.addEventListener('error', this._boundErrorHandler);\n        window.addEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n\t * Stops error handling by detaching global error handlers.\n\t */ _stopErrorHandling() {\n        window.removeEventListener('error', this._boundErrorHandler);\n        window.removeEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n\t * Checks if an error comes from the watched item and restarts it.\n\t * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.\n\t *\n\t * @fires error\n\t * @param error Error.\n\t * @param evt An error event.\n\t */ _handleError(error, evt) {\n        // @if CK_DEBUG // const err = error as CKEditorError;\n        // @if CK_DEBUG // if ( err.is && err.is( 'CKEditorError' ) && err.context === undefined ) {\n        // @if CK_DEBUG // console.warn( 'The error is missing its context and Watchdog cannot restart the proper item.' );\n        // @if CK_DEBUG // }\n        if (this._shouldReactToError(error)) {\n            this.crashes.push({\n                message: error.message,\n                stack: error.stack,\n                // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events\n                filename: evt instanceof ErrorEvent ? evt.filename : undefined,\n                lineno: evt instanceof ErrorEvent ? evt.lineno : undefined,\n                colno: evt instanceof ErrorEvent ? evt.colno : undefined,\n                date: this._now()\n            });\n            const causesRestart = this._shouldRestart();\n            this.state = 'crashed';\n            this._fire('stateChange');\n            this._fire('error', {\n                error,\n                causesRestart\n            });\n            if (causesRestart) {\n                this._restart();\n            } else {\n                this.state = 'crashedPermanently';\n                this._fire('stateChange');\n            }\n        }\n    }\n    /**\n\t * Checks whether an error should be handled by the watchdog.\n\t *\n\t * @param error An error that was caught by the error handling process.\n\t */ _shouldReactToError(error) {\n        return error.is && error.is('CKEditorError') && error.context !== undefined && // In some cases the watched item should not be restarted - e.g. during the item initialization.\n        // That's why the `null` was introduced as a correct error context which does cause restarting.\n        error.context !== null && // Do not react to errors if the watchdog is in states other than `ready`.\n        this.state === 'ready' && this._isErrorComingFromThisItem(error);\n    }\n    /**\n\t * Checks if the watchdog should restart the underlying item.\n\t */ _shouldRestart() {\n        if (this.crashes.length <= this._crashNumberLimit) {\n            return true;\n        }\n        const lastErrorTime = this.crashes[this.crashes.length - 1].date;\n        const firstMeaningfulErrorTime = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;\n        const averageNonErrorTimePeriod = (lastErrorTime - firstMeaningfulErrorTime) / this._crashNumberLimit;\n        return averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module watchdog/utils/getsubnodes\n */ /* globals EventTarget, Event */ function getSubNodes(head, excludedProperties = new Set()) {\n    const nodes = [\n        head\n    ];\n    // @if CK_DEBUG_WATCHDOG // const prevNodeMap = new Map();\n    // Nodes are stored to prevent infinite looping.\n    const subNodes = new Set();\n    let nodeIndex = 0;\n    while(nodes.length > nodeIndex){\n        // Incrementing the iterator is much faster than changing size of the array with Array.prototype.shift().\n        const node = nodes[nodeIndex++];\n        if (subNodes.has(node) || !shouldNodeBeIncluded(node) || excludedProperties.has(node)) {\n            continue;\n        }\n        subNodes.add(node);\n        // Handle arrays, maps, sets, custom collections that implements `[ Symbol.iterator ]()`, etc.\n        if (Symbol.iterator in node) {\n            // The custom editor iterators might cause some problems if the editor is crashed.\n            try {\n                for (const n of node){\n                    nodes.push(n);\n                // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( n ) ) {\n                // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( n, node );\n                // @if CK_DEBUG_WATCHDOG // }\n                }\n            } catch (err) {\n            // Do not log errors for broken structures\n            // since we are in the error handling process already.\n            // eslint-disable-line no-empty\n            }\n        } else {\n            for(const key in node){\n                // We share a reference via the protobuf library within the editors,\n                // hence the shared value should be skipped. Although, it's not a perfect\n                // solution since new places like that might occur in the future.\n                if (key === 'defaultValue') {\n                    continue;\n                }\n                nodes.push(node[key]);\n            // @if CK_DEBUG_WATCHDOG // if ( !prevNodeMap.has( node[ key ] ) ) {\n            // @if CK_DEBUG_WATCHDOG // \tprevNodeMap.set( node[ key ], node );\n            // @if CK_DEBUG_WATCHDOG // }\n            }\n        }\n    }\n    // @if CK_DEBUG_WATCHDOG // return { subNodes, prevNodeMap } as any;\n    return subNodes;\n}\nfunction shouldNodeBeIncluded(node) {\n    const type = Object.prototype.toString.call(node);\n    const typeOfNode = typeof node;\n    return !(typeOfNode === 'number' || typeOfNode === 'boolean' || typeOfNode === 'string' || typeOfNode === 'symbol' || typeOfNode === 'function' || type === '[object Date]' || type === '[object RegExp]' || type === '[object Module]' || node === undefined || node === null || // This flag is meant to exclude singletons shared across editor instances. So when an error is thrown in one editor,\n    // the other editors connected through the reference to the same singleton are not restarted. This is a temporary workaround\n    // until a better solution is found.\n    // More in https://github.com/ckeditor/ckeditor5/issues/12292.\n    node._watchdogExcluded || // Skip native DOM objects, e.g. Window, nodes, events, etc.\n    node instanceof EventTarget || node instanceof Event);\n}\n\n/**\n * Traverses both structures to find out whether there is a reference that is shared between both structures.\n */ function areConnectedThroughProperties(target1, target2, excludedNodes = new Set()) {\n    if (target1 === target2 && isObject(target1)) {\n        return true;\n    }\n    // @if CK_DEBUG_WATCHDOG // return checkConnectionBetweenProps( target1, target2, excludedNodes );\n    const subNodes1 = getSubNodes(target1, excludedNodes);\n    const subNodes2 = getSubNodes(target2, excludedNodes);\n    for (const node of subNodes1){\n        if (subNodes2.has(node)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isObject(structure) {\n    return typeof structure === 'object' && structure !== null;\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module watchdog/editorwatchdog\n */ /* globals console */ // eslint-disable-next-line ckeditor5-rules/no-cross-package-imports\n/**\n * A watchdog for CKEditor 5 editors.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */ class EditorWatchdog extends Watchdog {\n    /**\n\t * The current editor instance.\n\t */ _editor = null;\n    /**\n\t * A promise associated with the life cycle of the editor (creation or destruction processes).\n\t *\n\t * It is used to prevent the initialization of the editor if the previous instance has not been destroyed yet,\n\t * and conversely, to prevent the destruction of the editor if it has not been initialized.\n\t */ _lifecyclePromise = null;\n    /**\n\t * Throttled save method. The `save()` method is called the specified `saveInterval` after `throttledSave()` is called,\n\t * unless a new action happens in the meantime.\n\t */ _throttledSave;\n    /**\n\t * The latest saved editor data represented as a root name -> root data object.\n\t */ _data;\n    /**\n\t * The last document version.\n\t */ _lastDocumentVersion;\n    /**\n\t * The editor source element or data.\n\t */ _elementOrData;\n    /**\n\t * Specifies whether the editor was initialized using document data (`true`) or HTML elements (`false`).\n\t */ _initUsingData = true;\n    /**\n\t * The latest record of the editor editable elements. Used to restart the editor.\n\t */ _editables = {};\n    /**\n\t * The editor configuration.\n\t */ _config;\n    _excludedProps;\n    /**\n\t * @param Editor The editor class.\n\t * @param watchdogConfig The watchdog plugin configuration.\n\t */ constructor(Editor, watchdogConfig = {}){\n        super(watchdogConfig);\n        // this._editorClass = Editor;\n        this._throttledSave = throttle(this._save.bind(this), typeof watchdogConfig.saveInterval === 'number' ? watchdogConfig.saveInterval : 5000);\n        // Set default creator and destructor functions:\n        if (Editor) {\n            this._creator = (elementOrData, config)=>Editor.create(elementOrData, config);\n        }\n        this._destructor = (editor)=>editor.destroy();\n    }\n    /**\n\t * The current editor instance.\n\t */ get editor() {\n        return this._editor;\n    }\n    /**\n\t * @internal\n\t */ get _item() {\n        return this._editor;\n    }\n    /**\n\t * Sets the function that is responsible for the editor creation.\n\t * It expects a function that should return a promise.\n\t *\n\t * ```ts\n\t * watchdog.setCreator( ( element, config ) => ClassicEditor.create( element, config ) );\n\t * ```\n\t */ setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n\t * Sets the function that is responsible for the editor destruction.\n\t * Overrides the default destruction function, which destroys only the editor instance.\n\t * It expects a function that should return a promise or `undefined`.\n\t *\n\t * ```ts\n\t * watchdog.setDestructor( editor => {\n\t * \t// Do something before the editor is destroyed.\n\t *\n\t * \treturn editor\n\t * \t\t.destroy()\n\t * \t\t.then( () => {\n\t * \t\t\t// Do something after the editor is destroyed.\n\t * \t\t} );\n\t * } );\n\t * ```\n\t */ setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n\t * Restarts the editor instance. This method is called whenever an editor error occurs. It fires the `restart` event and changes\n\t * the state to `initializing`.\n\t *\n\t * @fires restart\n\t */ _restart() {\n        return Promise.resolve().then(()=>{\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy();\n        }).catch((err)=>{\n            console.error('An error happened during the editor destroying.', err);\n        }).then(()=>{\n            // Pre-process some data from the original editor config.\n            // Our goal here is to make sure that the restarted editor will be reinitialized with correct set of roots.\n            // We are not interested in any data set in config or in `.create()` first parameter. It will be replaced anyway.\n            // But we need to set them correctly to make sure that proper roots are created.\n            //\n            // Since a different set of roots will be created, `lazyRoots` and `rootsAttributes` properties must be managed too.\n            // Keys are root names, values are ''. Used when the editor was initialized by setting the first parameter to document data.\n            const existingRoots = {};\n            // Keeps lazy roots. They may be different when compared to initial config if some of the roots were loaded.\n            const lazyRoots = [];\n            // Roots attributes from the old config. Will be referred when setting new attributes.\n            const oldRootsAttributes = this._config.rootsAttributes || {};\n            // New attributes to be set. Is filled only for roots that still exist in the document.\n            const rootsAttributes = {};\n            // Traverse through the roots saved when the editor crashed and set up the discussed values.\n            for (const [rootName, rootData] of Object.entries(this._data.roots)){\n                if (rootData.isLoaded) {\n                    existingRoots[rootName] = '';\n                    rootsAttributes[rootName] = oldRootsAttributes[rootName] || {};\n                } else {\n                    lazyRoots.push(rootName);\n                }\n            }\n            const updatedConfig = {\n                ...this._config,\n                extraPlugins: this._config.extraPlugins || [],\n                lazyRoots,\n                rootsAttributes,\n                _watchdogInitialData: this._data\n            };\n            // Delete `initialData` as it is not needed. Data will be set by the watchdog based on `_watchdogInitialData`.\n            // First parameter of the editor `.create()` will be used to set up initial roots.\n            delete updatedConfig.initialData;\n            updatedConfig.extraPlugins.push(EditorWatchdogInitPlugin);\n            if (this._initUsingData) {\n                return this.create(existingRoots, updatedConfig, updatedConfig.context);\n            } else {\n                // Set correct editables to make sure that proper roots are created and linked with DOM elements.\n                // No need to set initial data, as it would be discarded anyway.\n                //\n                // If one element was initially set in `elementOrData`, then use that original element to restart the editor.\n                // This is for compatibility purposes with single-root editor types.\n                if (isElement(this._elementOrData)) {\n                    return this.create(this._elementOrData, updatedConfig, updatedConfig.context);\n                } else {\n                    return this.create(this._editables, updatedConfig, updatedConfig.context);\n                }\n            }\n        }).then(()=>{\n            this._fire('restart');\n        });\n    }\n    /**\n\t * Creates the editor instance and keeps it running, using the defined creator and destructor.\n\t *\n\t * @param elementOrData The editor source element or the editor data.\n\t * @param config The editor configuration.\n\t * @param context A context for the editor.\n\t */ create(elementOrData = this._elementOrData, config = this._config, context) {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(()=>{\n            super._startErrorHandling();\n            this._elementOrData = elementOrData;\n            // Use document data in the first parameter of the editor `.create()` call only if it was used like this originally.\n            // Use document data if a string or object with strings was passed.\n            this._initUsingData = typeof elementOrData == 'string' || Object.keys(elementOrData).length > 0 && typeof Object.values(elementOrData)[0] == 'string';\n            // Clone configuration because it might be shared within multiple watchdog instances. Otherwise,\n            // when an error occurs in one of these editors, the watchdog will restart all of them.\n            this._config = this._cloneEditorConfiguration(config) || {};\n            this._config.context = context;\n            return this._creator(elementOrData, this._config);\n        }).then((editor)=>{\n            this._editor = editor;\n            editor.model.document.on('change:data', this._throttledSave);\n            this._lastDocumentVersion = editor.model.document.version;\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this.state = 'ready';\n            this._fire('stateChange');\n        }).finally(()=>{\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    /**\n\t * Destroys the watchdog and the current editor instance. It fires the callback\n\t * registered in {@link #setDestructor `setDestructor()`} and uses it to destroy the editor instance.\n\t * It also sets the state to `destroyed`.\n\t */ destroy() {\n        this._lifecyclePromise = Promise.resolve(this._lifecyclePromise).then(()=>{\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        }).finally(()=>{\n            this._lifecyclePromise = null;\n        });\n        return this._lifecyclePromise;\n    }\n    _destroy() {\n        return Promise.resolve().then(()=>{\n            this._stopErrorHandling();\n            this._throttledSave.cancel();\n            const editor = this._editor;\n            this._editor = null;\n            // Remove the `change:data` listener before destroying the editor.\n            // Incorrectly written plugins may trigger firing `change:data` events during the editor destruction phase\n            // causing the watchdog to call `editor.getData()` when some parts of editor are already destroyed.\n            editor.model.document.off('change:data', this._throttledSave);\n            return this._destructor(editor);\n        });\n    }\n    /**\n\t * Saves the editor data, so it can be restored after the crash even if the data cannot be fetched at\n\t * the moment of the crash.\n\t */ _save() {\n        const version = this._editor.model.document.version;\n        try {\n            this._data = this._getData();\n            if (!this._initUsingData) {\n                this._editables = this._getEditables();\n            }\n            this._lastDocumentVersion = version;\n        } catch (err) {\n            console.error(err, 'An error happened during restoring editor data. ' + 'Editor will be restored from the previously saved data.');\n        }\n    }\n    /**\n\t * @internal\n\t */ _setExcludedProperties(props) {\n        this._excludedProps = props;\n    }\n    /**\n\t * Gets all data that is required to reinitialize editor instance.\n\t */ _getData() {\n        const editor = this._editor;\n        const roots = editor.model.document.roots.filter((root)=>root.isAttached() && root.rootName != '$graveyard');\n        const { plugins } = editor;\n        // `as any` to avoid linking from external private repo.\n        const commentsRepository = plugins.has('CommentsRepository') && plugins.get('CommentsRepository');\n        const trackChanges = plugins.has('TrackChanges') && plugins.get('TrackChanges');\n        const data = {\n            roots: {},\n            markers: {},\n            commentThreads: JSON.stringify([]),\n            suggestions: JSON.stringify([])\n        };\n        roots.forEach((root)=>{\n            data.roots[root.rootName] = {\n                content: JSON.stringify(Array.from(root.getChildren())),\n                attributes: JSON.stringify(Array.from(root.getAttributes())),\n                isLoaded: root._isLoaded\n            };\n        });\n        for (const marker of editor.model.markers){\n            if (!marker._affectsData) {\n                continue;\n            }\n            data.markers[marker.name] = {\n                rangeJSON: marker.getRange().toJSON(),\n                usingOperation: marker._managedUsingOperations,\n                affectsData: marker._affectsData\n            };\n        }\n        if (commentsRepository) {\n            data.commentThreads = JSON.stringify(commentsRepository.getCommentThreads({\n                toJSON: true,\n                skipNotAttached: true\n            }));\n        }\n        if (trackChanges) {\n            data.suggestions = JSON.stringify(trackChanges.getSuggestions({\n                toJSON: true,\n                skipNotAttached: true\n            }));\n        }\n        return data;\n    }\n    /**\n\t * For each attached model root, returns its HTML editable element (if available).\n\t */ _getEditables() {\n        const editables = {};\n        for (const rootName of this.editor.model.document.getRootNames()){\n            const editable = this.editor.ui.getEditableElement(rootName);\n            if (editable) {\n                editables[rootName] = editable;\n            }\n        }\n        return editables;\n    }\n    /**\n\t * Traverses the error context and the current editor to find out whether these structures are connected\n\t * to each other via properties.\n\t *\n\t * @internal\n\t */ _isErrorComingFromThisItem(error) {\n        return areConnectedThroughProperties(this._editor, error.context, this._excludedProps);\n    }\n    /**\n\t * Clones the editor configuration.\n\t */ _cloneEditorConfiguration(config) {\n        return cloneDeepWith(config, (value, key)=>{\n            // Leave DOM references.\n            if (isElement(value)) {\n                return value;\n            }\n            if (key === 'context') {\n                return value;\n            }\n        });\n    }\n}\n/**\n * Internal plugin that is used to stop the default editor initialization and restoring the editor state\n * based on the `editor.config._watchdogInitialData` data.\n */ class EditorWatchdogInitPlugin {\n    editor;\n    _data;\n    constructor(editor){\n        this.editor = editor;\n        this._data = editor.config.get('_watchdogInitialData');\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        // Stops the default editor initialization and use the saved data to restore the editor state.\n        // Some of data could not be initialize as a config properties. It is important to keep the data\n        // in the same form as it was before the restarting.\n        this.editor.data.on('init', (evt)=>{\n            evt.stop();\n            this.editor.model.enqueueChange({\n                isUndoable: false\n            }, (writer)=>{\n                this._restoreCollaborationData();\n                this._restoreEditorData(writer);\n            });\n            this.editor.data.fire('ready');\n        // Keep priority `'high' - 1` to be sure that RTC initialization will be first.\n        }, {\n            priority: 1000 - 1\n        });\n    }\n    /**\n\t * Creates a model node (element or text) based on provided JSON.\n\t */ _createNode(writer, jsonNode) {\n        if ('name' in jsonNode) {\n            // If child has name property, it is an Element.\n            const element = writer.createElement(jsonNode.name, jsonNode.attributes);\n            if (jsonNode.children) {\n                for (const child of jsonNode.children){\n                    element._appendChild(this._createNode(writer, child));\n                }\n            }\n            return element;\n        } else {\n            // Otherwise, it is a Text node.\n            return writer.createText(jsonNode.data, jsonNode.attributes);\n        }\n    }\n    /**\n\t * Restores the editor by setting the document data, roots attributes and markers.\n\t */ _restoreEditorData(writer) {\n        const editor = this.editor;\n        Object.entries(this._data.roots).forEach(([rootName, { content, attributes }])=>{\n            const parsedNodes = JSON.parse(content);\n            const parsedAttributes = JSON.parse(attributes);\n            const rootElement = editor.model.document.getRoot(rootName);\n            for (const [key, value] of parsedAttributes){\n                writer.setAttribute(key, value, rootElement);\n            }\n            for (const child of parsedNodes){\n                const node = this._createNode(writer, child);\n                writer.insert(node, rootElement, 'end');\n            }\n        });\n        Object.entries(this._data.markers).forEach(([markerName, markerOptions])=>{\n            const { document } = editor.model;\n            const { rangeJSON: { start, end }, ...options } = markerOptions;\n            const root = document.getRoot(start.root);\n            const startPosition = writer.createPositionFromPath(root, start.path, start.stickiness);\n            const endPosition = writer.createPositionFromPath(root, end.path, end.stickiness);\n            const range = writer.createRange(startPosition, endPosition);\n            writer.addMarker(markerName, {\n                range,\n                ...options\n            });\n        });\n    }\n    /**\n\t * Restores the editor collaboration data - comment threads and suggestions.\n\t */ _restoreCollaborationData() {\n        // `as any` to avoid linking from external private repo.\n        const parsedCommentThreads = JSON.parse(this._data.commentThreads);\n        const parsedSuggestions = JSON.parse(this._data.suggestions);\n        parsedCommentThreads.forEach((commentThreadData)=>{\n            const channelId = this.editor.config.get('collaboration.channelId');\n            const commentsRepository = this.editor.plugins.get('CommentsRepository');\n            if (commentsRepository.hasCommentThread(commentThreadData.threadId)) {\n                const commentThread = commentsRepository.getCommentThread(commentThreadData.threadId);\n                commentThread.remove();\n            }\n            commentsRepository.addCommentThread({\n                channelId,\n                ...commentThreadData\n            });\n        });\n        parsedSuggestions.forEach((suggestionData)=>{\n            const trackChangesEditing = this.editor.plugins.get('TrackChangesEditing');\n            if (trackChangesEditing.hasSuggestion(suggestionData.id)) {\n                const suggestion = trackChangesEditing.getSuggestion(suggestionData.id);\n                suggestion.attributes = suggestionData.attributes;\n            } else {\n                trackChangesEditing.addSuggestionData(suggestionData);\n            }\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module watchdog/contextwatchdog\n */ /* globals console */ // eslint-disable-next-line ckeditor5-rules/no-cross-package-imports\nconst mainQueueId = Symbol('MainQueueId');\n/**\n * A watchdog for the {@link module:core/context~Context} class.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and\n * how to use it.\n */ class ContextWatchdog extends Watchdog {\n    /**\n\t * A map of internal watchdogs for added items.\n\t */ _watchdogs = new Map();\n    /**\n\t * The watchdog configuration.\n\t */ _watchdogConfig;\n    /**\n\t * The current context instance.\n\t */ _context = null;\n    /**\n\t * Context properties (nodes/references) that are gathered during the initial context creation\n\t * and are used to distinguish the origin of an error.\n\t */ _contextProps = new Set();\n    /**\n\t * An action queue, which is used to handle async functions queuing.\n\t */ _actionQueues = new ActionQueues();\n    /**\n\t * The configuration for the {@link module:core/context~Context}.\n\t */ _contextConfig;\n    /**\n\t * The watched item.\n\t */ _item;\n    /**\n\t * The context watchdog class constructor.\n\t *\n\t * ```ts\n\t * const watchdog = new ContextWatchdog( Context );\n\t *\n\t * await watchdog.create( contextConfiguration );\n\t *\n\t * await watchdog.add( item );\n\t * ```\n\t *\n\t * See the {@glink features/watchdog Watchdog feature guide} to learn more how to use this feature.\n\t *\n\t * @param Context The {@link module:core/context~Context} class.\n\t * @param watchdogConfig The watchdog configuration.\n\t */ constructor(Context, watchdogConfig = {}){\n        super(watchdogConfig);\n        this._watchdogConfig = watchdogConfig;\n        // Default creator and destructor.\n        this._creator = (contextConfig)=>Context.create(contextConfig);\n        this._destructor = (context)=>context.destroy();\n        this._actionQueues.onEmpty(()=>{\n            if (this.state === 'initializing') {\n                this.state = 'ready';\n                this._fire('stateChange');\n            }\n        });\n    }\n    /**\n\t * Sets the function that is responsible for the context creation.\n\t * It expects a function that should return a promise (or `undefined`).\n\t *\n\t * ```ts\n\t * watchdog.setCreator( config => Context.create( config ) );\n\t * ```\n\t */ setCreator(creator) {\n        this._creator = creator;\n    }\n    /**\n\t * Sets the function that is responsible for the context destruction.\n\t * Overrides the default destruction function, which destroys only the context instance.\n\t * It expects a function that should return a promise (or `undefined`).\n\t *\n\t * ```ts\n\t * watchdog.setDestructor( context => {\n\t * \t// Do something before the context is destroyed.\n\t *\n\t * \treturn context\n\t * \t\t.destroy()\n\t * \t\t.then( () => {\n\t * \t\t\t// Do something after the context is destroyed.\n\t * \t\t} );\n\t * } );\n\t * ```\n\t */ setDestructor(destructor) {\n        this._destructor = destructor;\n    }\n    /**\n\t * The context instance. Keep in mind that this property might be changed when the context watchdog restarts,\n\t * so do not keep this instance internally. Always operate on the `ContextWatchdog#context` property.\n\t */ get context() {\n        return this._context;\n    }\n    /**\n\t * Initializes the context watchdog. Once it is created, the watchdog takes care about\n\t * recreating the context and the provided items, and starts the error handling mechanism.\n\t *\n\t * ```ts\n\t * await watchdog.create( {\n\t * \tplugins: []\n\t * } );\n\t * ```\n\t *\n\t * @param contextConfig The context configuration. See {@link module:core/context~Context}.\n\t */ create(contextConfig = {}) {\n        return this._actionQueues.enqueue(mainQueueId, ()=>{\n            this._contextConfig = contextConfig;\n            return this._create();\n        });\n    }\n    /**\n\t * Returns an item instance with the given `itemId`.\n\t *\n\t * ```ts\n\t * const editor1 = watchdog.getItem( 'editor1' );\n\t * ```\n\t *\n\t * @param itemId The item ID.\n\t * @returns The item instance or `undefined` if an item with a given ID has not been found.\n\t */ getItem(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog._item;\n    }\n    /**\n\t * Gets the state of the given item. See {@link #state} for a list of available states.\n\t *\n\t * ```ts\n\t * const editor1State = watchdog.getItemState( 'editor1' );\n\t * ```\n\t *\n\t * @param itemId Item ID.\n\t * @returns The state of the item.\n\t */ getItemState(itemId) {\n        const watchdog = this._getWatchdog(itemId);\n        return watchdog.state;\n    }\n    /**\n\t * Adds items to the watchdog. Once created, instances of these items will be available using the {@link #getItem} method.\n\t *\n\t * Items can be passed together as an array of objects:\n\t *\n\t * ```ts\n\t * await watchdog.add( [ {\n\t * \tid: 'editor1',\n\t * \ttype: 'editor',\n\t * \tsourceElementOrData: document.querySelector( '#editor' ),\n\t * \tconfig: {\n\t * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t * \t},\n\t * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n\t * } ] );\n\t * ```\n\t *\n\t * Or one by one as objects:\n\t *\n\t * ```ts\n\t * await watchdog.add( {\n\t * \tid: 'editor1',\n\t * \ttype: 'editor',\n\t * \tsourceElementOrData: document.querySelector( '#editor' ),\n\t * \tconfig: {\n\t * \t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t * \t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t * \t},\n\t * \tcreator: ( element, config ) => ClassicEditor.create( element, config )\n\t * ] );\n\t * ```\n\t *\n\t * Then an instance can be retrieved using the {@link #getItem} method:\n\t *\n\t * ```ts\n\t * const editor1 = watchdog.getItem( 'editor1' );\n\t * ```\n\t *\n\t * Note that this method can be called multiple times, but for performance reasons it is better\n\t * to pass all items together.\n\t *\n\t * @param itemConfigurationOrItemConfigurations An item configuration object or an array of item configurations.\n\t */ add(itemConfigurationOrItemConfigurations) {\n        const itemConfigurations = toArray(itemConfigurationOrItemConfigurations);\n        return Promise.all(itemConfigurations.map((item)=>{\n            return this._actionQueues.enqueue(item.id, ()=>{\n                if (this.state === 'destroyed') {\n                    throw new Error('Cannot add items to destroyed watchdog.');\n                }\n                if (!this._context) {\n                    throw new Error('Context was not created yet. You should call the `ContextWatchdog#create()` method first.');\n                }\n                let watchdog;\n                if (this._watchdogs.has(item.id)) {\n                    throw new Error(`Item with the given id is already added: '${item.id}'.`);\n                }\n                if (item.type === 'editor') {\n                    watchdog = new EditorWatchdog(null, this._watchdogConfig);\n                    watchdog.setCreator(item.creator);\n                    watchdog._setExcludedProperties(this._contextProps);\n                    if (item.destructor) {\n                        watchdog.setDestructor(item.destructor);\n                    }\n                    this._watchdogs.set(item.id, watchdog);\n                    // Enqueue the internal watchdog errors within the main queue.\n                    // And propagate the internal `error` events as `itemError` event.\n                    watchdog.on('error', (evt, { error, causesRestart })=>{\n                        this._fire('itemError', {\n                            itemId: item.id,\n                            error\n                        });\n                        // Do not enqueue the item restart action if the item will not restart.\n                        if (!causesRestart) {\n                            return;\n                        }\n                        this._actionQueues.enqueue(item.id, ()=>new Promise((res)=>{\n                                const rethrowRestartEventOnce = ()=>{\n                                    watchdog.off('restart', rethrowRestartEventOnce);\n                                    this._fire('itemRestart', {\n                                        itemId: item.id\n                                    });\n                                    res();\n                                };\n                                watchdog.on('restart', rethrowRestartEventOnce);\n                            }));\n                    });\n                    return watchdog.create(item.sourceElementOrData, item.config, this._context);\n                } else {\n                    throw new Error(`Not supported item type: '${item.type}'.`);\n                }\n            });\n        }));\n    }\n    /**\n\t * Removes and destroys item(s) with given ID(s).\n\t *\n\t * ```ts\n\t * await watchdog.remove( 'editor1' );\n\t * ```\n\t *\n\t * Or\n\t *\n\t * ```ts\n\t * await watchdog.remove( [ 'editor1', 'editor2' ] );\n\t * ```\n\t *\n\t * @param itemIdOrItemIds Item ID or an array of item IDs.\n\t */ remove(itemIdOrItemIds) {\n        const itemIds = toArray(itemIdOrItemIds);\n        return Promise.all(itemIds.map((itemId)=>{\n            return this._actionQueues.enqueue(itemId, ()=>{\n                const watchdog = this._getWatchdog(itemId);\n                this._watchdogs.delete(itemId);\n                return watchdog.destroy();\n            });\n        }));\n    }\n    /**\n\t * Destroys the context watchdog and all added items.\n\t * Once the context watchdog is destroyed, new items cannot be added.\n\t *\n\t * ```ts\n\t * await watchdog.destroy();\n\t * ```\n\t */ destroy() {\n        return this._actionQueues.enqueue(mainQueueId, ()=>{\n            this.state = 'destroyed';\n            this._fire('stateChange');\n            super.destroy();\n            return this._destroy();\n        });\n    }\n    /**\n\t * Restarts the context watchdog.\n\t */ _restart() {\n        return this._actionQueues.enqueue(mainQueueId, ()=>{\n            this.state = 'initializing';\n            this._fire('stateChange');\n            return this._destroy().catch((err)=>{\n                console.error('An error happened during destroying the context or items.', err);\n            }).then(()=>this._create()).then(()=>this._fire('restart'));\n        });\n    }\n    /**\n\t * Initializes the context watchdog.\n\t */ _create() {\n        return Promise.resolve().then(()=>{\n            this._startErrorHandling();\n            return this._creator(this._contextConfig);\n        }).then((context)=>{\n            this._context = context;\n            this._contextProps = getSubNodes(this._context);\n            return Promise.all(Array.from(this._watchdogs.values()).map((watchdog)=>{\n                watchdog._setExcludedProperties(this._contextProps);\n                return watchdog.create(undefined, undefined, this._context);\n            }));\n        });\n    }\n    /**\n\t * Destroys the context instance and all added items.\n\t */ _destroy() {\n        return Promise.resolve().then(()=>{\n            this._stopErrorHandling();\n            const context = this._context;\n            this._context = null;\n            this._contextProps = new Set();\n            return Promise.all(Array.from(this._watchdogs.values()).map((watchdog)=>watchdog.destroy()))// Context destructor destroys each editor.\n            .then(()=>this._destructor(context));\n        });\n    }\n    /**\n\t * Returns the watchdog for a given item ID.\n\t *\n\t * @param itemId Item ID.\n\t */ _getWatchdog(itemId) {\n        const watchdog = this._watchdogs.get(itemId);\n        if (!watchdog) {\n            throw new Error(`Item with the given id was not registered: ${itemId}.`);\n        }\n        return watchdog;\n    }\n    /**\n\t * Checks whether an error comes from the context instance and not from the item instances.\n\t *\n\t * @internal\n\t */ _isErrorComingFromThisItem(error) {\n        for (const watchdog of this._watchdogs.values()){\n            if (watchdog._isErrorComingFromThisItem(error)) {\n                return false;\n            }\n        }\n        return areConnectedThroughProperties(this._context, error.context);\n    }\n}\n/**\n * Manager of action queues that allows queuing async functions.\n */ class ActionQueues {\n    _onEmptyCallbacks = [];\n    _queues = new Map();\n    _activeActions = 0;\n    /**\n\t * Used to register callbacks that will be run when the queue becomes empty.\n\t *\n\t * @param onEmptyCallback A callback that will be run whenever the queue becomes empty.\n\t */ onEmpty(onEmptyCallback) {\n        this._onEmptyCallbacks.push(onEmptyCallback);\n    }\n    /**\n\t * It adds asynchronous actions (functions) to the proper queue and runs them one by one.\n\t *\n\t * @param queueId The action queue ID.\n\t * @param action A function that should be enqueued.\n\t */ enqueue(queueId, action) {\n        const isMainAction = queueId === mainQueueId;\n        this._activeActions++;\n        if (!this._queues.get(queueId)) {\n            this._queues.set(queueId, Promise.resolve());\n        }\n        // List all sources of actions that the current action needs to await for.\n        // For the main action wait for all other actions.\n        // For the item action wait only for the item queue and the main queue.\n        const awaitedActions = isMainAction ? Promise.all(this._queues.values()) : Promise.all([\n            this._queues.get(mainQueueId),\n            this._queues.get(queueId)\n        ]);\n        const queueWithAction = awaitedActions.then(action);\n        // Catch all errors in the main queue to stack promises even if an error occurred in the past.\n        const nonErrorQueue = queueWithAction.catch(()=>{});\n        this._queues.set(queueId, nonErrorQueue);\n        return queueWithAction.finally(()=>{\n            this._activeActions--;\n            if (this._queues.get(queueId) === nonErrorQueue && this._activeActions === 0) {\n                this._onEmptyCallbacks.forEach((cb)=>cb());\n            }\n        });\n    }\n}\n/**\n * Transforms any value to an array. If the provided value is already an array, it is returned unchanged.\n *\n * @param elementOrArray The value to transform to an array.\n * @returns An array created from data.\n */ function toArray(elementOrArray) {\n    return Array.isArray(elementOrArray) ? elementOrArray : [\n        elementOrArray\n    ];\n}\n\nexport { ContextWatchdog, EditorWatchdog, Watchdog };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { MouseObserver, TreeWalker } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { EmitterMixin, CKEditorError, Rect, toArray, isForwardArrowKeyCode, env, keyCodes, getLocalizedArrowKeyCodeDirection, getRangeFromMouseEvent, logWarning, ObservableMixin, compareArrays, global, DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IconView, Template, ContextualBalloon, ToolbarView, BalloonPanelView, View } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { throttle } from 'lodash-es';\n\n/**\n * Class used to handle the correct order of highlights on elements.\n *\n * When different highlights are applied to same element the correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */ class HighlightStack extends /* #__PURE__ */ EmitterMixin() {\n    _stack = [];\n    /**\n\t * Adds highlight descriptor to the stack.\n\t *\n\t * @fires change:top\n\t */ add(descriptor, writer) {\n        const stack = this._stack;\n        // Save top descriptor and insert new one. If top is changed - fire event.\n        const oldTop = stack[0];\n        this._insertDescriptor(descriptor);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Removes highlight descriptor from the stack.\n\t *\n\t * @fires change:top\n\t * @param id Id of the descriptor to remove.\n\t */ remove(id, writer) {\n        const stack = this._stack;\n        const oldTop = stack[0];\n        this._removeDescriptor(id);\n        const newTop = stack[0];\n        // When new object is at the top and stores different information.\n        if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n            this.fire('change:top', {\n                oldDescriptor: oldTop,\n                newDescriptor: newTop,\n                writer\n            });\n        }\n    }\n    /**\n\t * Inserts a given descriptor in correct place in the stack. It also takes care about updating information\n\t * when descriptor with same id is already present.\n\t */ _insertDescriptor(descriptor) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === descriptor.id);\n        // Inserting exact same descriptor - do nothing.\n        if (compareDescriptors(descriptor, stack[index])) {\n            return;\n        }\n        // If descriptor with same id but with different information is on the stack - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n        // Find correct place to insert descriptor in the stack.\n        // It has different information (for example priority) so it must be re-inserted in correct place.\n        let i = 0;\n        while(stack[i] && shouldABeBeforeB(stack[i], descriptor)){\n            i++;\n        }\n        stack.splice(i, 0, descriptor);\n    }\n    /**\n\t * Removes descriptor with given id from the stack.\n\t *\n\t * @param id Descriptor's id.\n\t */ _removeDescriptor(id) {\n        const stack = this._stack;\n        const index = stack.findIndex((item)=>item.id === id);\n        // If descriptor with same id is on the list - remove it.\n        if (index > -1) {\n            stack.splice(index, 1);\n        }\n    }\n}\n/**\n * Compares two descriptors by checking their priority and class list.\n *\n * @returns Returns true if both descriptors are defined and have same priority and classes.\n */ function compareDescriptors(a, b) {\n    return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n}\n/**\n * Checks whenever first descriptor should be placed in the stack before second one.\n */ function shouldABeBeforeB(a, b) {\n    if (a.priority > b.priority) {\n        return true;\n    } else if (a.priority < b.priority) {\n        return false;\n    }\n    // When priorities are equal and names are different - use classes to compare.\n    return classesToString(a.classes) > classesToString(b.classes);\n}\n/**\n * Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n * sorted string.\n */ function classesToString(classes) {\n    return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n\nvar dragHandleIcon = \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\";\n\n/**\n * CSS class added to each widget element.\n */ const WIDGET_CLASS_NAME = 'ck-widget';\n/**\n * CSS class added to currently selected widget element.\n */ const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n */ function isWidget(node) {\n    if (!node.is('element')) {\n        return false;\n    }\n    return !!node.getCustomProperty('widget');\n}\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"false\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n * \t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'widget',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param options.hasSelectionHandle If `true`, the widget will have a selection handle added.\n * @returns Returns the same element.\n */ function toWidget(element, writer, options = {}) {\n    if (!element.is('containerElement')) {\n        /**\n\t\t * The element passed to `toWidget()` must be a {@link module:engine/view/containerelement~ContainerElement}\n\t\t * instance.\n\t\t *\n\t\t * @error widget-to-widget-wrong-element-type\n\t\t * @param element The view element passed to `toWidget()`.\n\t\t */ throw new CKEditorError('widget-to-widget-wrong-element-type', null, {\n            element\n        });\n    }\n    writer.setAttribute('contenteditable', 'false', element);\n    writer.addClass(WIDGET_CLASS_NAME, element);\n    writer.setCustomProperty('widget', true, element);\n    element.getFillerOffset = getFillerOffset;\n    writer.setCustomProperty('widgetLabel', [], element);\n    if (options.label) {\n        setLabel(element, options.label);\n    }\n    if (options.hasSelectionHandle) {\n        addSelectionHandle(element, writer);\n    }\n    setHighlightHandling(element, writer);\n    return element;\n}\n/**\n * Default handler for adding a highlight on a widget.\n * It adds CSS class and attributes basing on the given highlight descriptor.\n */ function addHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.addClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.setAttribute(key, descriptor.attributes[key], element);\n        }\n    }\n}\n/**\n * Default handler for removing a highlight from a widget.\n * It removes CSS class and attributes basing on the given highlight descriptor.\n */ function removeHighlight(element, descriptor, writer) {\n    if (descriptor.classes) {\n        writer.removeClass(toArray(descriptor.classes), element);\n    }\n    if (descriptor.attributes) {\n        for(const key in descriptor.attributes){\n            writer.removeAttribute(key, element);\n        }\n    }\n}\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n */ function setHighlightHandling(element, writer, add = addHighlight, remove = removeHighlight) {\n    const stack = new HighlightStack();\n    stack.on('change:top', (evt, data)=>{\n        if (data.oldDescriptor) {\n            remove(element, data.oldDescriptor, data.writer);\n        }\n        if (data.newDescriptor) {\n            add(element, data.newDescriptor, data.writer);\n        }\n    });\n    const addHighlightCallback = (element, descriptor, writer)=>stack.add(descriptor, writer);\n    const removeHighlightCallback = (element, id, writer)=>stack.remove(id, writer);\n    writer.setCustomProperty('addHighlight', addHighlightCallback, element);\n    writer.setCustomProperty('removeHighlight', removeHighlightCallback, element);\n}\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n */ function setLabel(element, labelOrCreator) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    widgetLabel.push(labelOrCreator);\n}\n/**\n * Returns the label of the provided element.\n */ function getLabel(element) {\n    const widgetLabel = element.getCustomProperty('widgetLabel');\n    return widgetLabel.reduce((prev, current)=>{\n        if (typeof current === 'function') {\n            return prev ? prev + '. ' + current() : current();\n        } else {\n            return prev ? prev + '. ' + current : current;\n        }\n    }, '');\n}\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n * * implements the {@link ~setHighlightHandling view highlight on widget's editable}.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `editingDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n * ```ts\n * editor.conversion.for( 'editingDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n * \t\t\treturn toWidgetEditable( nested, writer, { label: 'label for editable' } );\n * \t\t}\n * \t} );\n *\n * editor.conversion.for( 'dataDowncast' )\n * \t.elementToElement( {\n * \t\tmodel: 'nested',\n * \t\tview: ( modelItem, { writer } ) => {\n * \t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n * \t\t}\n * \t} );\n * ```\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param options Additional options.\n * @param options.label Editable's label used by assistive technologies (e.g. screen readers).\n * @returns Returns the same element that was provided in the `editable` parameter\n */ function toWidgetEditable(editable, writer, options = {}) {\n    writer.addClass([\n        'ck-editor__editable',\n        'ck-editor__nested-editable'\n    ], editable);\n    writer.setAttribute('role', 'textbox', editable);\n    writer.setAttribute('tabindex', '-1', editable);\n    if (options.label) {\n        writer.setAttribute('aria-label', options.label, editable);\n    }\n    // Set initial contenteditable value.\n    writer.setAttribute('contenteditable', editable.isReadOnly ? 'false' : 'true', editable);\n    // Bind the contenteditable property to element#isReadOnly.\n    editable.on('change:isReadOnly', (evt, property, is)=>{\n        writer.setAttribute('contenteditable', is ? 'false' : 'true', editable);\n    });\n    editable.on('change:isFocused', (evt, property, is)=>{\n        if (is) {\n            writer.addClass('ck-editor__nested-editable_focused', editable);\n        } else {\n            writer.removeClass('ck-editor__nested-editable_focused', editable);\n        }\n    });\n    setHighlightHandling(editable, writer);\n    return editable;\n}\n/**\n * Returns a model range which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the collapsed range before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the collapsed range after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, the range in that block will be returned. If that range\n * is then passed to {@link module:engine/model/model~Model#insertContent}, the block will be fully replaced\n * by the inserted widget block.\n *\n * @param selection The selection based on which the insertion position should be calculated.\n * @param model Model instance.\n * @returns The optimal range.\n */ function findOptimalInsertionRange(selection, model) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement) {\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(selection);\n        // If the WidgetTypeAround \"fake caret\" is displayed, use its position for the insertion\n        // to provide the most predictable UX (https://github.com/ckeditor/ckeditor5/issues/7438).\n        if (typeAroundFakeCaretPosition) {\n            return model.createRange(model.createPositionAt(selectedElement, typeAroundFakeCaretPosition));\n        }\n    }\n    return model.schema.findOptimalInsertionRange(selection);\n}\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n * ```\n * // Model:\n * <placeholder type=\"name\"></placeholder>\n *\n * // View:\n * <span class=\"placeholder\">name</span>\n * ```\n *\n * In such case, view positions inside `<span>` cannot be correctly mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n * ```ts\n * editor.editing.mapper.on(\n * \t'viewToModelPosition',\n * \tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n * );\n * ```\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n * // Model:\n * <paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n * ```\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n * ```\n * // View:\n * <p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n * // Model:\n * <paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n * ```\n *\n * @param model Model instance on which the callback operates.\n * @param viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n */ function viewToModelPositionOutsideModelElement(model, viewElementMatcher) {\n    return (evt, data)=>{\n        const { mapper, viewPosition } = data;\n        const viewParent = mapper.findMappedViewAncestor(viewPosition);\n        if (!viewElementMatcher(viewParent)) {\n            return;\n        }\n        const modelParent = mapper.toModelElement(viewParent);\n        data.modelPosition = model.createPositionAt(modelParent, viewPosition.isAtStart ? 'before' : 'after');\n    };\n}\n/**\n * Default filler offset function applied to all widget elements.\n */ function getFillerOffset() {\n    return null;\n}\n/**\n * Adds a drag handle to the widget.\n */ function addSelectionHandle(widgetElement, writer) {\n    const selectionHandle = writer.createUIElement('div', {\n        class: 'ck ck-widget__selection-handle'\n    }, function(domDocument) {\n        const domElement = this.toDomElement(domDocument);\n        // Use the IconView from the ui library.\n        const icon = new IconView();\n        icon.set('content', dragHandleIcon);\n        // Render the icon view right away to append its #element to the selectionHandle DOM element.\n        icon.render();\n        domElement.appendChild(icon.element);\n        return domElement;\n    });\n    // Append the selection handle into the widget wrapper.\n    writer.insert(writer.createPositionAt(widgetElement, 0), selectionHandle);\n    writer.addClass([\n        'ck-widget_with-selection-handle'\n    ], widgetElement);\n}\n/**\n * Starting from a DOM resize host element (an element that receives dimensions as a result of resizing),\n * this helper returns the width of the found ancestor element.\n *\n *\t* It searches up to 5 levels of ancestors only.\n *\n * @param domResizeHost Resize host DOM element that receives dimensions as a result of resizing.\n * @returns Width of ancestor element in pixels or 0 if no ancestor with a computed width has been found.\n */ function calculateResizeHostAncestorWidth(domResizeHost) {\n    const getElementComputedWidth = (element)=>{\n        const { width, paddingLeft, paddingRight } = element.ownerDocument.defaultView.getComputedStyle(element);\n        return parseFloat(width) - (parseFloat(paddingLeft) || 0) - (parseFloat(paddingRight) || 0);\n    };\n    const domResizeHostParent = domResizeHost.parentElement;\n    if (!domResizeHostParent) {\n        return 0;\n    }\n    // Need to use computed style as it properly excludes parent's paddings from the returned value.\n    let parentWidth = getElementComputedWidth(domResizeHostParent);\n    // Sometimes parent width cannot be accessed. If that happens we should go up in the elements tree\n    // and try to get width from next ancestor.\n    // https://github.com/ckeditor/ckeditor5/issues/10776\n    const ancestorLevelLimit = 5;\n    let currentLevel = 0;\n    let checkedElement = domResizeHostParent;\n    while(isNaN(parentWidth)){\n        checkedElement = checkedElement.parentElement;\n        if (++currentLevel > ancestorLevelLimit) {\n            return 0;\n        }\n        parentWidth = getElementComputedWidth(checkedElement);\n    }\n    return parentWidth;\n}\n/**\n * Calculates a relative width of a `domResizeHost` compared to its ancestor in percents.\n *\n * @param domResizeHost Resize host DOM element.\n * @returns Percentage value between 0 and 100.\n */ function calculateResizeHostPercentageWidth(domResizeHost, resizeHostRect = new Rect(domResizeHost)) {\n    const parentWidth = calculateResizeHostAncestorWidth(domResizeHost);\n    if (!parentWidth) {\n        return 0;\n    }\n    return resizeHostRect.width / parentWidth * 100;\n}\n\n/**\n * The name of the type around model selection attribute responsible for\n * displaying a fake caret next to a selected widget.\n */ const TYPE_AROUND_SELECTION_ATTRIBUTE = 'widget-type-around';\n/**\n * Checks if an element is a widget that qualifies to get the widget type around UI.\n */ function isTypeAroundWidget(viewElement, modelElement, schema) {\n    return !!viewElement && isWidget(viewElement) && !schema.isInline(modelElement);\n}\n/**\n * For the passed HTML element, this helper finds the closest widget type around button ancestor.\n */ function getClosestTypeAroundDomButton(domElement) {\n    return domElement.closest('.ck-widget__type-around__button');\n}\n/**\n * For the passed widget type around button element, this helper determines at which position\n * the paragraph would be inserted into the content if, for instance, the button was\n * clicked by the user.\n *\n * @returns The position of the button.\n */ function getTypeAroundButtonPosition(domElement) {\n    return domElement.classList.contains('ck-widget__type-around__button_before') ? 'before' : 'after';\n}\n/**\n * For the passed HTML element, this helper returns the closest view widget ancestor.\n */ function getClosestWidgetViewElement(domElement, domConverter) {\n    const widgetDomElement = domElement.closest('.ck-widget');\n    return domConverter.mapDomToView(widgetDomElement);\n}\n/**\n * For the passed selection instance, it returns the position of the fake caret displayed next to a widget.\n *\n * **Note**: If the fake caret is not currently displayed, `null` is returned.\n *\n * @returns The position of the fake caret or `null` when none is present.\n */ function getTypeAroundFakeCaretPosition(selection) {\n    return selection.getAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n}\n\nvar returnIcon = \"<svg viewBox=\\\"0 0 10 8\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.055.263v3.972h-6.77M1 4.216l2-2.038m-2 2 2 2.038\\\"/></svg>\";\n\nconst POSSIBLE_INSERTION_POSITIONS = [\n    'before',\n    'after'\n];\n// Do the SVG parsing once and then clone the result <svg> DOM element for each new button.\nconst RETURN_ARROW_ICON_ELEMENT = new DOMParser().parseFromString(returnIcon, 'image/svg+xml').firstChild;\nconst PLUGIN_DISABLED_EDITING_ROOT_CLASS = 'ck-widget__type-around_disabled';\n/**\n * A plugin that allows users to type around widgets where normally it is impossible to place the caret due\n * to limitations of web browsers. These \"tight spots\" occur, for instance, before (or after) a widget being\n * the first (or last) child of its parent or between two block widgets.\n *\n * This plugin extends the {@link module:widget/widget~Widget `Widget`} plugin and injects the user interface\n * with two buttons into each widget instance in the editor. Each of the buttons can be clicked by the\n * user if the widget is next to the \"tight spot\". Once clicked, a paragraph is created with the selection anchored\n * in it so that users can type (or insert content, paste, etc.) straight away.\n */ class WidgetTypeAround extends Plugin {\n    /**\n\t * A reference to the model widget element that has the fake caret active\n\t * on either side of it. It is later used to remove CSS classes associated with the fake caret\n\t * when the widget no longer needs it.\n\t */ _currentFakeCaretModelElement = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetTypeAround';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        // Set a CSS class on the view editing root when the plugin is disabled so all the buttons\n        // and lines visually disappear. All the interactions are disabled in individual plugin methods.\n        this.on('change:isEnabled', (evt, data, isEnabled)=>{\n            editingView.change((writer)=>{\n                for (const root of editingView.document.roots){\n                    if (isEnabled) {\n                        writer.removeClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    } else {\n                        writer.addClass(PLUGIN_DISABLED_EDITING_ROOT_CLASS, root);\n                    }\n                }\n            });\n            if (!isEnabled) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        this._enableTypeAroundUIInjection();\n        this._enableInsertingParagraphsOnButtonClick();\n        this._enableInsertingParagraphsOnEnterKeypress();\n        this._enableInsertingParagraphsOnTypingKeystroke();\n        this._enableTypeAroundFakeCaretActivationUsingKeyboardArrows();\n        this._enableDeleteIntegration();\n        this._enableInsertContentIntegration();\n        this._enableInsertObjectIntegration();\n        this._enableDeleteContentIntegration();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._currentFakeCaretModelElement = null;\n    }\n    /**\n\t * Inserts a new paragraph next to a widget element with the selection anchored in it.\n\t *\n\t * **Note**: This method is heavily user-oriented and will both focus the editing view and scroll\n\t * the viewport to the selection in the inserted paragraph.\n\t *\n\t * @param widgetModelElement The model widget element next to which a paragraph is inserted.\n\t * @param position The position where the paragraph is inserted. Either `'before'` or `'after'` the widget.\n\t */ _insertParagraph(widgetModelElement, position) {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const attributesToCopy = editor.model.schema.getAttributesWithProperty(widgetModelElement, 'copyOnReplace', true);\n        editor.execute('insertParagraph', {\n            position: editor.model.createPositionAt(widgetModelElement, position),\n            attributes: attributesToCopy\n        });\n        editingView.focus();\n        editingView.scrollToTheSelection();\n    }\n    /**\n\t * A wrapper for the {@link module:utils/emittermixin~Emitter#listenTo} method that executes the callbacks only\n\t * when the plugin {@link #isEnabled is enabled}.\n\t *\n\t * @param emitter The object that fires the event.\n\t * @param event The name of the event.\n\t * @param callback The function to be called on event.\n\t * @param options Additional options.\n\t * @param options.priority The priority of this event callback. The higher the priority value the sooner\n\t * the callback will be fired. Events having the same priority are called in the order they were added.\n\t */ _listenToIfEnabled(emitter, event, callback, options) {\n        this.listenTo(emitter, event, (...args)=>{\n            // Do not respond if the plugin is disabled.\n            if (this.isEnabled) {\n                callback(...args);\n            }\n        }, options);\n    }\n    /**\n\t * Similar to {@link #_insertParagraph}, this method inserts a paragraph except that it\n\t * does not expect a position. Instead, it performs the insertion next to a selected widget\n\t * according to the `widget-type-around` model selection attribute value (fake caret position).\n\t *\n\t * Because this method requires the `widget-type-around` attribute to be set,\n\t * the insertion can only happen when the widget's fake caret is active (e.g. activated\n\t * using the keyboard).\n\t *\n\t * @returns Returns `true` when the paragraph was inserted (the attribute was present) and `false` otherwise.\n\t */ _insertParagraphAccordingToFakeCaretPosition() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        if (!typeAroundFakeCaretPosition) {\n            return false;\n        }\n        // @if CK_DEBUG_TYPING // if ( ( window as any ).logCKETyping ) {\n        // @if CK_DEBUG_TYPING // \tconsole.info( '%c[WidgetTypeAround]%c Fake caret -> insert paragraph',\n        // @if CK_DEBUG_TYPING // \t\t'font-weight: bold; color: green', ''\n        // @if CK_DEBUG_TYPING // \t);\n        // @if CK_DEBUG_TYPING // }\n        const selectedModelElement = modelSelection.getSelectedElement();\n        this._insertParagraph(selectedModelElement, typeAroundFakeCaretPosition);\n        return true;\n    }\n    /**\n\t * Creates a listener in the editing conversion pipeline that injects the widget type around\n\t * UI into every single widget instance created in the editor.\n\t *\n\t * The UI is delivered as a {@link module:engine/view/uielement~UIElement}\n\t * wrapper which renders DOM buttons that users can use to insert paragraphs.\n\t */ _enableTypeAroundUIInjection() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.locale.t;\n        const buttonTitles = {\n            before: t('Insert paragraph before block'),\n            after: t('Insert paragraph after block')\n        };\n        editor.editing.downcastDispatcher.on('insert', (evt, data, conversionApi)=>{\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            if (!viewElement) {\n                return;\n            }\n            // Filter out non-widgets and inline widgets.\n            if (isTypeAroundWidget(viewElement, data.item, schema)) {\n                injectUIIntoWidget(conversionApi.writer, buttonTitles, viewElement);\n                const widgetLabel = viewElement.getCustomProperty('widgetLabel');\n                widgetLabel.push(()=>{\n                    return this.isEnabled ? t('Press Enter to type after or press Shift + Enter to type before the widget') : '';\n                });\n            }\n        }, {\n            priority: 'low'\n        });\n    }\n    /**\n\t * Brings support for the fake caret that appears when either:\n\t *\n\t * * the selection moves to a widget from a position next to it using arrow keys,\n\t * * the arrow key is pressed when the widget is already selected.\n\t *\n\t * The fake caret lets the user know that they can start typing or just press\n\t * <kbd>Enter</kbd> to insert a paragraph at the position next to a widget as suggested by the fake caret.\n\t *\n\t * The fake caret disappears when the user changes the selection or the editor\n\t * gets blurred.\n\t *\n\t * The whole idea is as follows:\n\t *\n\t * 1. A user does one of the 2 scenarios described at the beginning.\n\t * 2. The \"keydown\" listener is executed and the decision is made whether to show or hide the fake caret.\n\t * 3. If it should show up, the `widget-type-around` model selection attribute is set indicating\n\t *    on which side of the widget it should appear.\n\t * 4. The selection dispatcher reacts to the selection attribute and sets CSS classes responsible for the\n\t *    fake caret on the view widget.\n\t * 5. If the fake caret should disappear, the selection attribute is removed and the dispatcher\n\t *    does the CSS class clean-up in the view.\n\t * 6. Additionally, `change:range` and `FocusTracker#isFocused` listeners also remove the selection\n\t *    attribute (the former also removes widget CSS classes).\n\t */ _enableTypeAroundFakeCaretActivationUsingKeyboardArrows() {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        // This is the main listener responsible for the fake caret.\n        // Note: The priority must precede the default Widget class keydown handler (\"high\").\n        this._listenToIfEnabled(editingView.document, 'arrowKey', (evt, domEventData)=>{\n            this._handleArrowKeyPress(evt, domEventData);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ],\n            priority: 'high'\n        });\n        // This listener makes sure the widget type around selection attribute will be gone from the model\n        // selection as soon as the model range changes. This attribute only makes sense when a widget is selected\n        // (and the \"fake horizontal caret\" is visible) so whenever the range changes (e.g. selection moved somewhere else),\n        // let's get rid of the attribute so that the selection downcast dispatcher isn't even bothered.\n        this._listenToIfEnabled(modelSelection, 'change:range', (evt, data)=>{\n            // Do not reset the selection attribute when the change was indirect.\n            if (!data.directChange) {\n                return;\n            }\n            // Get rid of the widget type around attribute of the selection on every change:range.\n            // If the range changes, it means for sure, the user is no longer in the active (\"fake horizontal caret\") mode.\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // Get rid of the widget type around attribute of the selection on every document change\n        // that makes widget not selected any more (i.e. widget was removed).\n        this._listenToIfEnabled(model.document, 'change:data', ()=>{\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (selectedModelElement) {\n                const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n                if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                    return;\n                }\n            }\n            editor.model.change((writer)=>{\n                writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n            });\n        });\n        // React to changes of the model selection attribute made by the arrow keys listener.\n        // If the block widget is selected and the attribute changes, downcast the attribute to special\n        // CSS classes associated with the active (\"fake horizontal caret\") mode of the widget.\n        this._listenToIfEnabled(editor.editing.downcastDispatcher, 'selection', (evt, data, conversionApi)=>{\n            const writer = conversionApi.writer;\n            if (this._currentFakeCaretModelElement) {\n                const selectedViewElement = conversionApi.mapper.toViewElement(this._currentFakeCaretModelElement);\n                if (selectedViewElement) {\n                    // Get rid of CSS classes associated with the active (\"fake horizontal caret\") mode from the view widget.\n                    writer.removeClass(POSSIBLE_INSERTION_POSITIONS.map(positionToWidgetCssClass), selectedViewElement);\n                    this._currentFakeCaretModelElement = null;\n                }\n            }\n            const selectedModelElement = data.selection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = conversionApi.mapper.toViewElement(selectedModelElement);\n            if (!isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(data.selection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            writer.addClass(positionToWidgetCssClass(typeAroundFakeCaretPosition), selectedViewElement);\n            // Remember the view widget that got the \"fake-caret\" CSS class. This class should be removed ASAP when the\n            // selection changes\n            this._currentFakeCaretModelElement = selectedModelElement;\n        });\n        this._listenToIfEnabled(editor.ui.focusTracker, 'change:isFocused', (evt, name, isFocused)=>{\n            if (!isFocused) {\n                editor.model.change((writer)=>{\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                });\n            }\n        });\n        function positionToWidgetCssClass(position) {\n            return `ck-widget_type-around_show-fake-caret_${position}`;\n        }\n    }\n    /**\n\t * A listener executed on each \"keydown\" in the view document, a part of\n\t * {@link #_enableTypeAroundFakeCaretActivationUsingKeyboardArrows}.\n\t *\n\t * It decides whether the arrow keypress should activate the fake caret or not (also whether it should\n\t * be deactivated).\n\t *\n\t * The fake caret activation is done by setting the `widget-type-around` model selection attribute\n\t * in this listener, and stopping and preventing the event that would normally be handled by the widget\n\t * plugin that is responsible for the regular keyboard navigation near/across all widgets (that\n\t * includes inline widgets, which are ignored by the widget type around plugin).\n\t */ _handleArrowKeyPress(evt, domEventData) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const schema = model.schema;\n        const editingView = editor.editing.view;\n        const keyCode = domEventData.keyCode;\n        const isForward = isForwardArrowKeyCode(keyCode, editor.locale.contentLanguageDirection);\n        const selectedViewElement = editingView.document.selection.getSelectedElement();\n        const selectedModelElement = editor.editing.mapper.toModelElement(selectedViewElement);\n        let shouldStopAndPreventDefault;\n        // Handle keyboard navigation when a type-around-compatible widget is currently selected.\n        if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressOnSelectedWidget(isForward);\n        } else if (modelSelection.isCollapsed) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenSelectionNextToAWidget(isForward);\n        } else if (!domEventData.shiftKey) {\n            shouldStopAndPreventDefault = this._handleArrowKeyPressWhenNonCollapsedSelection(isForward);\n        }\n        if (shouldStopAndPreventDefault) {\n            domEventData.preventDefault();\n            evt.stop();\n        }\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected and activates or deactivates\n\t * the fake caret for that widget, depending on the current value of the `widget-type-around` model\n\t * selection attribute and the direction of the pressed arrow key.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressOnSelectedWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const modelSelection = model.document.selection;\n        const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(modelSelection);\n        return model.change((writer)=>{\n            // If the fake caret is displayed...\n            if (typeAroundFakeCaretPosition) {\n                const isLeavingWidget = typeAroundFakeCaretPosition === (isForward ? 'after' : 'before');\n                // If the keyboard arrow works against the value of the selection attribute...\n                // then remove the selection attribute but prevent default DOM actions\n                // and do not let the Widget plugin listener move the selection. This brings\n                // the widget back to the state, for instance, like if was selected using the mouse.\n                //\n                // **Note**: If leaving the widget when the fake caret is active, then the default\n                // Widget handler will change the selection and, in turn, this will automatically discard\n                // the selection attribute.\n                if (!isLeavingWidget) {\n                    writer.removeSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE);\n                    return true;\n                }\n            } else {\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n                return true;\n            }\n            return false;\n        });\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when **no** widget is selected but the selection is **directly** next\n\t * to one and upon the fake caret should become active for this widget upon arrow keypress\n\t * (AKA entering/selecting the widget).\n\t *\n\t * **Note**: This code mirrors the implementation from the widget plugin but also adds the selection attribute.\n\t * Unfortunately, there is no safe way to let the widget plugin do the selection part first and then just set the\n\t * selection attribute here in the widget type around plugin. This is why this code must duplicate some from the widget plugin.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenSelectionNextToAWidget(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const widgetPlugin = editor.plugins.get('Widget');\n        // This is the widget the selection is about to be set on.\n        const modelElementNextToSelection = widgetPlugin._getObjectElementNextToSelection(isForward);\n        const viewElementNextToSelection = editor.editing.mapper.toViewElement(modelElementNextToSelection);\n        if (isTypeAroundWidget(viewElementNextToSelection, modelElementNextToSelection, schema)) {\n            model.change((writer)=>{\n                widgetPlugin._setSelectionOverElement(modelElementNextToSelection);\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'before' : 'after');\n            });\n            // The change() block above does the same job as the Widget plugin. The event can\n            // be safely canceled.\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Handles the keyboard navigation on \"keydown\" when a widget is currently selected (together with some other content)\n\t * and the widget is the first or last element in the selection. It activates or deactivates the fake caret for that widget.\n\t *\n\t * @param isForward `true` when the pressed arrow key was responsible for the forward model selection movement\n\t * as in {@link module:utils/keyboard~isForwardArrowKeyCode}.\n\t * @returns Returns `true` when the keypress was handled and no other keydown listener of the editor should\n\t * process the event any further. Returns `false` otherwise.\n\t */ _handleArrowKeyPressWhenNonCollapsedSelection(isForward) {\n        const editor = this.editor;\n        const model = editor.model;\n        const schema = model.schema;\n        const mapper = editor.editing.mapper;\n        const modelSelection = model.document.selection;\n        const selectedModelNode = isForward ? modelSelection.getLastPosition().nodeBefore : modelSelection.getFirstPosition().nodeAfter;\n        const selectedViewNode = mapper.toViewElement(selectedModelNode);\n        // There is a widget at the collapse position so collapse the selection to the fake caret on it.\n        if (isTypeAroundWidget(selectedViewNode, selectedModelNode, schema)) {\n            model.change((writer)=>{\n                writer.setSelection(selectedModelNode, 'on');\n                writer.setSelectionAttribute(TYPE_AROUND_SELECTION_ATTRIBUTE, isForward ? 'after' : 'before');\n            });\n            return true;\n        }\n        return false;\n    }\n    /**\n\t * Registers a `mousedown` listener for the view document which intercepts events\n\t * coming from the widget type around UI, which happens when a user clicks one of the buttons\n\t * that insert a paragraph next to a widget.\n\t */ _enableInsertingParagraphsOnButtonClick() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'mousedown', (evt, domEventData)=>{\n            const button = getClosestTypeAroundDomButton(domEventData.domTarget);\n            if (!button) {\n                return;\n            }\n            const buttonPosition = getTypeAroundButtonPosition(button);\n            const widgetViewElement = getClosestWidgetViewElement(button, editingView.domConverter);\n            const widgetModelElement = editor.editing.mapper.toModelElement(widgetViewElement);\n            this._insertParagraph(widgetModelElement, buttonPosition);\n            domEventData.preventDefault();\n            evt.stop();\n        });\n    }\n    /**\n\t * Creates the <kbd>Enter</kbd> key listener on the view document that allows the user to insert a paragraph\n\t * near the widget when either:\n\t *\n\t * * The fake caret was first activated using the arrow keys,\n\t * * The entire widget is selected in the model.\n\t *\n\t * In the first case, the new paragraph is inserted according to the `widget-type-around` selection\n\t * attribute (see {@link #_handleArrowKeyPress}).\n\t *\n\t * In the second case, the new paragraph is inserted based on whether a soft (<kbd>Shift</kbd>+<kbd>Enter</kbd>) keystroke\n\t * was pressed or not.\n\t */ _enableInsertingParagraphsOnEnterKeypress() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        const editingView = editor.editing.view;\n        this._listenToIfEnabled(editingView.document, 'enter', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const selectedModelElement = selection.getSelectedElement();\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            const schema = editor.model.schema;\n            let wasHandled;\n            // First check if the widget is selected and there's a type around selection attribute associated\n            // with the fake caret that would tell where to insert a new paragraph.\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                wasHandled = true;\n            } else if (isTypeAroundWidget(selectedViewElement, selectedModelElement, schema)) {\n                this._insertParagraph(selectedModelElement, domEventData.isSoft ? 'before' : 'after');\n                wasHandled = true;\n            }\n            if (wasHandled) {\n                domEventData.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Similar to the {@link #_enableInsertingParagraphsOnEnterKeypress}, it allows the user\n\t * to insert a paragraph next to a widget when the fake caret was activated using arrow\n\t * keys but it responds to typing instead of <kbd>Enter</kbd>.\n\t *\n\t * Listener enabled by this method will insert a new paragraph according to the `widget-type-around`\n\t * model selection attribute as the user simply starts typing, which creates the impression that the fake caret\n\t * behaves like a real one rendered by the browser (AKA your text appears where the caret was).\n\t *\n\t * **Note**: At the moment this listener creates 2 undo steps: one for the `insertParagraph` command\n\t * and another one for actual typing. It is not a disaster but this may need to be fixed\n\t * sooner or later.\n\t */ _enableInsertingParagraphsOnTypingKeystroke() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Note: The priority must precede the default Input plugin insertText handler.\n        this._listenToIfEnabled(viewDocument, 'insertText', (evt, data)=>{\n            if (this._insertParagraphAccordingToFakeCaretPosition()) {\n                // The view selection in the event data contains the widget. If the new paragraph\n                // was inserted, modify the view selection passed along with the insertText event\n                // so the default event handler in the Input plugin starts typing inside the paragraph.\n                // Otherwise, the typing would be over the widget.\n                data.selection = viewDocument.selection;\n            }\n        }, {\n            priority: 'high'\n        });\n        if (env.isAndroid) {\n            // On Android with English keyboard, the composition starts just by putting caret\n            // at the word end or by selecting a table column. This is not a real composition started.\n            // Trigger delete content on first composition key pressed.\n            this._listenToIfEnabled(viewDocument, 'keydown', (evt, data)=>{\n                if (data.keyCode == 229) {\n                    this._insertParagraphAccordingToFakeCaretPosition();\n                }\n            });\n        } else {\n            // Note: The priority must precede the default Input plugin compositionstart handler (to call it before delete content).\n            this._listenToIfEnabled(viewDocument, 'compositionstart', ()=>{\n                this._insertParagraphAccordingToFakeCaretPosition();\n            }, {\n                priority: 'high'\n            });\n        }\n    }\n    /**\n\t * It creates a \"delete\" event listener on the view document to handle cases when the <kbd>Delete</kbd> or <kbd>Backspace</kbd>\n\t * is pressed and the fake caret is currently active.\n\t *\n\t * The fake caret should create an illusion of a real browser caret so that when it appears before or after\n\t * a widget, pressing <kbd>Delete</kbd> or <kbd>Backspace</kbd> should remove a widget or delete the content\n\t * before or after a widget (depending on the content surrounding the widget).\n\t */ _enableDeleteIntegration() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        const schema = model.schema;\n        this._listenToIfEnabled(editingView.document, 'delete', (evt, domEventData)=>{\n            // This event could be triggered from inside the widget but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(model.document.selection);\n            // This listener handles only these cases when the fake caret is active.\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            const direction = domEventData.direction;\n            const selectedModelWidget = model.document.selection.getSelectedElement();\n            const isFakeCaretBefore = typeAroundFakeCaretPosition === 'before';\n            const isDeleteForward = direction == 'forward';\n            const shouldDeleteEntireWidget = isFakeCaretBefore === isDeleteForward;\n            if (shouldDeleteEntireWidget) {\n                editor.execute('delete', {\n                    selection: model.createSelection(selectedModelWidget, 'on')\n                });\n            } else {\n                const range = schema.getNearestSelectionRange(model.createPositionAt(selectedModelWidget, typeAroundFakeCaretPosition), direction);\n                // If there is somewhere to move selection to, then there will be something to delete.\n                if (range) {\n                    // If the range is NOT collapsed, then we know that the range contains an object (see getNearestSelectionRange() docs).\n                    if (!range.isCollapsed) {\n                        model.change((writer)=>{\n                            writer.setSelection(range);\n                            editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                        });\n                    } else {\n                        const probe = model.createSelection(range.start);\n                        model.modifySelection(probe, {\n                            direction\n                        });\n                        // If the range is collapsed, let's see if a non-collapsed range exists that can could be deleted.\n                        // If such range exists, use the editor command because it it safe for collaboration (it merges where it can).\n                        if (!probe.focus.isEqual(range.start)) {\n                            model.change((writer)=>{\n                                writer.setSelection(range);\n                                editor.execute(isDeleteForward ? 'deleteForward' : 'delete');\n                            });\n                        } else {\n                            const deepestEmptyRangeAncestor = getDeepestEmptyElementAncestor(schema, range.start.parent);\n                            model.deleteContent(model.createSelection(deepestEmptyRangeAncestor, 'on'), {\n                                doNotAutoparagraph: true\n                            });\n                        }\n                    }\n                }\n            }\n            // If some content was deleted, don't let the handler from the Widget plugin kick in.\n            // If nothing was deleted, then the default handler will have nothing to do anyway.\n            domEventData.preventDefault();\n            evt.stop();\n        }, {\n            context: isWidget\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertContent} event listener that, for instance, allows the user to paste\n\t * content near a widget when the fake caret is first activated using the arrow keys.\n\t *\n\t * The content is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertContent', (evt, [content, selectable])=>{\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            evt.stop();\n            return model.change((writer)=>{\n                const selectedElement = documentSelection.getSelectedElement();\n                const position = model.createPositionAt(selectedElement, typeAroundFakeCaretPosition);\n                const selection = writer.createSelection(position);\n                const result = model.insertContent(content, selection);\n                writer.setSelection(selection);\n                return result;\n            });\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:insertObject} event listener that modifies the\n\t * `options.findOptimalPosition`parameter to position of fake caret in relation to selected element\n\t * to reflect user's intent of desired insertion position.\n\t *\n\t * The object is inserted according to the `widget-type-around` selection attribute (see {@link #_handleArrowKeyPress}).\n\t */ _enableInsertObjectIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'insertObject', (evt, args)=>{\n            const [, selectable, options = {}] = args;\n            if (selectable && !selectable.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            if (!typeAroundFakeCaretPosition) {\n                return;\n            }\n            options.findOptimalPosition = typeAroundFakeCaretPosition;\n            args[3] = options;\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Attaches the {@link module:engine/model/model~Model#event:deleteContent} event listener to block the event when the fake\n\t * caret is active.\n\t *\n\t * This is required for cases that trigger {@link module:engine/model/model~Model#deleteContent `model.deleteContent()`}\n\t * before calling {@link module:engine/model/model~Model#insertContent `model.insertContent()`} like, for instance,\n\t * plain text pasting.\n\t */ _enableDeleteContentIntegration() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const documentSelection = model.document.selection;\n        this._listenToIfEnabled(editor.model, 'deleteContent', (evt, [selection])=>{\n            if (selection && !selection.is('documentSelection')) {\n                return;\n            }\n            const typeAroundFakeCaretPosition = getTypeAroundFakeCaretPosition(documentSelection);\n            // Disable removing the selection content while pasting plain text.\n            if (typeAroundFakeCaretPosition) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n}\n/**\n * Injects the type around UI into a view widget instance.\n */ function injectUIIntoWidget(viewWriter, buttonTitles, widgetViewElement) {\n    const typeAroundWrapper = viewWriter.createUIElement('div', {\n        class: 'ck ck-reset_all ck-widget__type-around'\n    }, function(domDocument) {\n        const wrapperDomElement = this.toDomElement(domDocument);\n        injectButtons(wrapperDomElement, buttonTitles);\n        injectFakeCaret(wrapperDomElement);\n        return wrapperDomElement;\n    });\n    // Inject the type around wrapper into the widget's wrapper.\n    viewWriter.insert(viewWriter.createPositionAt(widgetViewElement, 'end'), typeAroundWrapper);\n}\n/**\n * FYI: Not using the IconView class because each instance would need to be destroyed to avoid memory leaks\n * and it's pretty hard to figure out when a view (widget) is gone for good so it's cheaper to use raw\n * <svg> here.\n */ function injectButtons(wrapperDomElement, buttonTitles) {\n    for (const position of POSSIBLE_INSERTION_POSITIONS){\n        const buttonTemplate = new Template({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-widget__type-around__button',\n                    `ck-widget__type-around__button_${position}`\n                ],\n                title: buttonTitles[position],\n                'aria-hidden': 'true'\n            },\n            children: [\n                wrapperDomElement.ownerDocument.importNode(RETURN_ARROW_ICON_ELEMENT, true)\n            ]\n        });\n        wrapperDomElement.appendChild(buttonTemplate.render());\n    }\n}\nfunction injectFakeCaret(wrapperDomElement) {\n    const caretTemplate = new Template({\n        tag: 'div',\n        attributes: {\n            class: [\n                'ck',\n                'ck-widget__type-around__fake-caret'\n            ]\n        }\n    });\n    wrapperDomElement.appendChild(caretTemplate.render());\n}\n/**\n * Returns the ancestor of an element closest to the root which is empty. For instance,\n * for `<baz>`:\n *\n * ```\n * <foo>abc<bar><baz></baz></bar></foo>\n * ```\n *\n * it returns `<bar>`.\n */ function getDeepestEmptyElementAncestor(schema, element) {\n    let deepestEmptyAncestor = element;\n    for (const ancestor of element.getAncestors({\n        parentFirst: true\n    })){\n        if (ancestor.childCount > 1 || schema.isLimit(ancestor)) {\n            break;\n        }\n        deepestEmptyAncestor = ancestor;\n    }\n    return deepestEmptyAncestor;\n}\n\n/**\n * Returns 'keydown' handler for up/down arrow keys that modifies the caret movement if it's in a text line next to an object.\n *\n * @param editing The editing controller.\n */ function verticalNavigationHandler(editing) {\n    const model = editing.model;\n    return (evt, data)=>{\n        const arrowUpPressed = data.keyCode == keyCodes.arrowup;\n        const arrowDownPressed = data.keyCode == keyCodes.arrowdown;\n        const expandSelection = data.shiftKey;\n        const selection = model.document.selection;\n        if (!arrowUpPressed && !arrowDownPressed) {\n            return;\n        }\n        const isForward = arrowDownPressed;\n        // Navigation is in the opposite direction than the selection direction so this is shrinking of the selection.\n        // Selection for sure will not approach any object.\n        if (expandSelection && selectionWillShrink(selection, isForward)) {\n            return;\n        }\n        // Find a range between selection and closest limit element.\n        const range = findTextRangeFromSelection(editing, selection, isForward);\n        // There is no selection position inside the limit element.\n        if (!range) {\n            return;\n        }\n        // If already at the edge of a limit element.\n        if (range.isCollapsed) {\n            // A collapsed selection at limit edge - nothing more to do.\n            if (selection.isCollapsed) {\n                return;\n            } else if (expandSelection) {\n                return;\n            }\n        }\n        // If the range is a single line (there is no word wrapping) then move the selection to the position closest to the limit element.\n        //\n        // We can't move the selection directly to the isObject element (eg. table cell) because of dual position at the end/beginning\n        // of wrapped line (it's at the same time at the end of one line and at the start of the next line).\n        if (range.isCollapsed || isSingleLineRange(editing, range, isForward)) {\n            model.change((writer)=>{\n                const newPosition = isForward ? range.end : range.start;\n                if (expandSelection) {\n                    const newSelection = model.createSelection(selection.anchor);\n                    newSelection.setFocus(newPosition);\n                    writer.setSelection(newSelection);\n                } else {\n                    writer.setSelection(newPosition);\n                }\n            });\n            evt.stop();\n            data.preventDefault();\n            data.stopPropagation();\n        }\n    };\n}\n/**\n * Finds the range between selection and closest limit element (in the direction of navigation).\n * The position next to limit element is adjusted to the closest allowed `$text` position.\n *\n * Returns `null` if, according to the schema, the resulting range cannot contain a `$text` element.\n *\n * @param editing The editing controller.\n * @param selection The current selection.\n * @param isForward The expected navigation direction.\n */ function findTextRangeFromSelection(editing, selection, isForward) {\n    const model = editing.model;\n    if (isForward) {\n        const startPosition = selection.isCollapsed ? selection.focus : selection.getLastPosition();\n        const endPosition = getNearestNonInlineLimit(model, startPosition, 'forward');\n        // There is no limit element, browser should handle this.\n        if (!endPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const lastRangePosition = getNearestTextPosition(model.schema, range, 'backward');\n        if (lastRangePosition) {\n            return model.createRange(startPosition, lastRangePosition);\n        }\n        return null;\n    } else {\n        const endPosition = selection.isCollapsed ? selection.focus : selection.getFirstPosition();\n        const startPosition = getNearestNonInlineLimit(model, endPosition, 'backward');\n        // There is no limit element, browser should handle this.\n        if (!startPosition) {\n            return null;\n        }\n        const range = model.createRange(startPosition, endPosition);\n        const firstRangePosition = getNearestTextPosition(model.schema, range, 'forward');\n        if (firstRangePosition) {\n            return model.createRange(firstRangePosition, endPosition);\n        }\n        return null;\n    }\n}\n/**\n * Finds the limit element position that is closest to startPosition.\n *\n * @param direction Search direction.\n */ function getNearestNonInlineLimit(model, startPosition, direction) {\n    const schema = model.schema;\n    const range = model.createRangeIn(startPosition.root);\n    const walkerValueType = direction == 'forward' ? 'elementStart' : 'elementEnd';\n    for (const { previousPosition, item, type } of range.getWalker({\n        startPosition,\n        direction\n    })){\n        if (schema.isLimit(item) && !schema.isInline(item)) {\n            return previousPosition;\n        }\n        // Stop looking for isLimit element if the next element is a block element (it is for sure not single line).\n        if (type == walkerValueType && schema.isBlock(item)) {\n            return null;\n        }\n    }\n    return null;\n}\n/**\n * Basing on the provided range, finds the first or last (depending on `direction`) position inside the range\n * that can contain `$text` (according to schema).\n *\n * @param schema The schema.\n * @param range The range to find the position in.\n * @param direction Search direction.\n * @returns The nearest selection position.\n *\n */ function getNearestTextPosition(schema, range, direction) {\n    const position = direction == 'backward' ? range.end : range.start;\n    if (schema.checkChild(position, '$text')) {\n        return position;\n    }\n    for (const { nextPosition } of range.getWalker({\n        direction\n    })){\n        if (schema.checkChild(nextPosition, '$text')) {\n            return nextPosition;\n        }\n    }\n    return null;\n}\n/**\n * Checks if the DOM range corresponding to the provided model range renders as a single line by analyzing DOMRects\n * (verifying if they visually wrap content to the next line).\n *\n * @param editing The editing controller.\n * @param modelRange The current table cell content range.\n * @param isForward The expected navigation direction.\n */ function isSingleLineRange(editing, modelRange, isForward) {\n    const model = editing.model;\n    const domConverter = editing.view.domConverter;\n    // Wrapped lines contain exactly the same position at the end of current line\n    // and at the beginning of next line. That position's client rect is at the end\n    // of current line. In case of caret at first position of the last line that 'dual'\n    // position would be detected as it's not the last line.\n    if (isForward) {\n        const probe = model.createSelection(modelRange.start);\n        model.modifySelection(probe);\n        // If the new position is at the end of the container then we can't use this position\n        // because it would provide incorrect result for eg caption of image and selection\n        // just before end of it. Also in this case there is no \"dual\" position.\n        if (!probe.focus.isAtEnd && !modelRange.start.isEqual(probe.focus)) {\n            modelRange = model.createRange(probe.focus, modelRange.end);\n        }\n    }\n    const viewRange = editing.mapper.toViewRange(modelRange);\n    const domRange = domConverter.viewRangeToDom(viewRange);\n    const rects = Rect.getDomRangeRects(domRange);\n    let boundaryVerticalPosition;\n    for (const rect of rects){\n        if (boundaryVerticalPosition === undefined) {\n            boundaryVerticalPosition = Math.round(rect.bottom);\n            continue;\n        }\n        // Let's check if this rect is in new line.\n        if (Math.round(rect.top) >= boundaryVerticalPosition) {\n            return false;\n        }\n        boundaryVerticalPosition = Math.max(boundaryVerticalPosition, Math.round(rect.bottom));\n    }\n    return true;\n}\nfunction selectionWillShrink(selection, isForward) {\n    return !selection.isCollapsed && selection.isBackward == isForward;\n}\n\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n */ class Widget extends Plugin {\n    /**\n\t * Holds previously selected widgets.\n\t */ _previouslySelected = new Set();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Widget';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetTypeAround,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const t = editor.t;\n        // Model to view selection converter.\n        // Converts selection placed over widget element to fake selection.\n        //\n        // By default, the selection is downcasted by the engine to surround the attribute element, even though its only\n        // child is an inline widget. A similar thing also happens when a collapsed marker is rendered as a UI element\n        // next to an inline widget: the view selection contains both the widget and the marker.\n        //\n        // This prevents creating a correct fake selection when this inline widget is selected. Normalize the selection\n        // in these cases based on the model:\n        //\n        //\t\t[<attributeElement><inlineWidget /></attributeElement>] -> <attributeElement>[<inlineWidget />]</attributeElement>\n        //\t\t[<uiElement></uiElement><inlineWidget />] -> <uiElement></uiElement>[<inlineWidget />]\n        //\n        // Thanks to this:\n        //\n        // * fake selection can be set correctly,\n        // * any logic depending on (View)Selection#getSelectedElement() also works OK.\n        //\n        // See https://github.com/ckeditor/ckeditor5/issues/9524.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            const viewWriter = conversionApi.writer;\n            const modelSelection = data.selection;\n            // The collapsed selection can't contain any widget.\n            if (modelSelection.isCollapsed) {\n                return;\n            }\n            const selectedModelElement = modelSelection.getSelectedElement();\n            if (!selectedModelElement) {\n                return;\n            }\n            const selectedViewElement = editor.editing.mapper.toViewElement(selectedModelElement);\n            if (!isWidget(selectedViewElement)) {\n                return;\n            }\n            if (!conversionApi.consumable.consume(modelSelection, 'selection')) {\n                return;\n            }\n            viewWriter.setSelection(viewWriter.createRangeOn(selectedViewElement), {\n                fake: true,\n                label: getLabel(selectedViewElement)\n            });\n        });\n        // Mark all widgets inside the selection with the css class.\n        // This handler is registered at the 'low' priority so it's triggered after the real selection conversion.\n        this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi)=>{\n            // Remove selected class from previously selected widgets.\n            this._clearPreviouslySelectedWidgets(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            const viewSelection = viewWriter.document.selection;\n            let lastMarked = null;\n            for (const range of viewSelection.getRanges()){\n                // Note: There could be multiple selected widgets in a range but no fake selection.\n                // All of them must be marked as selected, for instance [<widget></widget><widget></widget>]\n                for (const value of range){\n                    const node = value.item;\n                    // Do not mark nested widgets in selected one. See: #4594\n                    if (isWidget(node) && !isChild(node, lastMarked)) {\n                        viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n                        this._previouslySelected.add(node);\n                        lastMarked = node;\n                    }\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // If mouse down is pressed on widget - create selection over whole widget.\n        view.addObserver(MouseObserver);\n        this.listenTo(viewDocument, 'mousedown', (...args)=>this._onMousedown(...args));\n        // There are two keydown listeners working on different priorities. This allows other\n        // features such as WidgetTypeAround or TableKeyboard to attach their listeners in between\n        // and customize the behavior even further in different content/selection scenarios.\n        //\n        // * The first listener handles changing the selection on arrow key press\n        // if the widget is selected or if the selection is next to a widget and the widget\n        // should become selected upon the arrow key press.\n        //\n        // * The second (late) listener makes sure the default browser action on arrow key press is\n        // prevented when a widget is selected. This prevents the selection from being moved\n        // from a fake selection container.\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._handleSelectionChangeOnArrowKeyPress(...args);\n        }, {\n            context: [\n                isWidget,\n                '$text'\n            ]\n        });\n        this.listenTo(viewDocument, 'arrowKey', (...args)=>{\n            this._preventDefaultOnArrowKeyPress(...args);\n        }, {\n            context: '$root'\n        });\n        this.listenTo(viewDocument, 'arrowKey', verticalNavigationHandler(this.editor.editing), {\n            context: '$text'\n        });\n        // Handle custom delete behaviour.\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            if (this._handleDelete(data.direction == 'forward')) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: '$root'\n        });\n        // Handle Tab key while a widget is selected.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            // This event could be triggered from inside the widget, but we are interested\n            // only when the widget is selected itself.\n            if (evt.eventPhase != 'atTarget') {\n                return;\n            }\n            if (data.shiftKey) {\n                return;\n            }\n            if (this._selectFirstNestedEditable()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: isWidget,\n            priority: 'low'\n        });\n        // Handle Shift+Tab key while caret inside a widget editable.\n        this.listenTo(viewDocument, 'tab', (evt, data)=>{\n            if (!data.shiftKey) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Handle Esc key while inside a nested editable.\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            if (data.keystroke != keyCodes.esc) {\n                return;\n            }\n            if (this._selectAncestorWidget()) {\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            priority: 'low'\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfoGroup({\n            id: 'widget',\n            label: t('Keystrokes that can be used when a widget is selected (for example: image, table, etc.)'),\n            keystrokes: [\n                {\n                    label: t('Move focus from an editable area back to the parent widget'),\n                    keystroke: 'Esc'\n                },\n                {\n                    label: t('Insert a new paragraph directly after a widget'),\n                    keystroke: 'Enter'\n                },\n                {\n                    label: t('Insert a new paragraph directly before a widget'),\n                    keystroke: 'Shift+Enter'\n                },\n                {\n                    label: t('Move the caret to allow typing directly before a widget'),\n                    keystroke: [\n                        [\n                            'arrowup'\n                        ],\n                        [\n                            'arrowleft'\n                        ]\n                    ]\n                },\n                {\n                    label: t('Move the caret to allow typing directly after a widget'),\n                    keystroke: [\n                        [\n                            'arrowdown'\n                        ],\n                        [\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n\t */ _onMousedown(eventInfo, domEventData) {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        let element = domEventData.target;\n        // Some of DOM elements have no view element representation so it may be null.\n        if (!element) {\n            return;\n        }\n        // If triple click should select entire paragraph.\n        if (domEventData.domEvent.detail >= 3) {\n            if (this._selectBlockContent(element)) {\n                domEventData.preventDefault();\n            }\n            return;\n        }\n        // If target is not a widget element - check if one of the ancestors is.\n        if (!isWidget(element)) {\n            const editableOrWidgetElement = findClosestEditableOrWidgetAncestor(element);\n            if (!editableOrWidgetElement) {\n                return;\n            }\n            if (isWidget(editableOrWidgetElement)) {\n                element = editableOrWidgetElement;\n            } else {\n                // Pick view range from the point where the mouse was clicked.\n                const clickTargetFromPoint = getElementFromMouseEvent(view, domEventData);\n                if (clickTargetFromPoint && isWidget(clickTargetFromPoint)) {\n                    element = clickTargetFromPoint;\n                } else {\n                    return;\n                }\n            }\n        }\n        // On Android selection would jump to the first table cell, on other devices\n        // we can't block it (and don't need to) because of drag and drop support.\n        if (env.isAndroid) {\n            domEventData.preventDefault();\n        }\n        // Focus editor if is not focused already.\n        if (!viewDocument.isFocused) {\n            view.focus();\n        }\n        // Create model selection over widget.\n        const modelElement = editor.editing.mapper.toModelElement(element);\n        this._setSelectionOverElement(modelElement);\n    }\n    /**\n\t * Selects entire block content, e.g. on triple click it selects entire paragraph.\n\t */ _selectBlockContent(element) {\n        const editor = this.editor;\n        const model = editor.model;\n        const mapper = editor.editing.mapper;\n        const schema = model.schema;\n        const viewElement = mapper.findMappedViewAncestor(this.editor.editing.view.createPositionAt(element, 0));\n        const modelElement = findTextBlockAncestor(mapper.toModelElement(viewElement), model.schema);\n        if (!modelElement) {\n            return false;\n        }\n        model.change((writer)=>{\n            const nextTextBlock = !schema.isLimit(modelElement) ? findNextTextBlock(writer.createPositionAfter(modelElement), schema) : null;\n            const start = writer.createPositionAt(modelElement, 0);\n            const end = nextTextBlock ? writer.createPositionAt(nextTextBlock, 0) : writer.createPositionAt(modelElement, 'end');\n            writer.setSelection(writer.createRange(start, end));\n        });\n        return true;\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and changes\n\t * the model selection when:\n\t *\n\t * * arrow key is pressed when the widget is selected,\n\t * * the selection is next to a widget and the widget should become selected upon the arrow key press.\n\t *\n\t * See {@link #_preventDefaultOnArrowKeyPress}.\n\t */ _handleSelectionChangeOnArrowKeyPress(eventInfo, domEventData) {\n        const keyCode = domEventData.keyCode;\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        const objectElement = modelSelection.getSelectedElement();\n        const direction = getLocalizedArrowKeyCodeDirection(keyCode, this.editor.locale.contentLanguageDirection);\n        const isForward = direction == 'down' || direction == 'right';\n        const isVerticalNavigation = direction == 'up' || direction == 'down';\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n            const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n            if (newRange) {\n                model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Handle collapsing of the selection when there is any widget on the edge of selection.\n        // This is needed because browsers have problems with collapsing such selection.\n        if (!modelSelection.isCollapsed && !domEventData.shiftKey) {\n            const firstPosition = modelSelection.getFirstPosition();\n            const lastPosition = modelSelection.getLastPosition();\n            const firstSelectedNode = firstPosition.nodeAfter;\n            const lastSelectedNode = lastPosition.nodeBefore;\n            if (firstSelectedNode && schema.isObject(firstSelectedNode) || lastSelectedNode && schema.isObject(lastSelectedNode)) {\n                model.change((writer)=>{\n                    writer.setSelection(isForward ? lastPosition : firstPosition);\n                });\n                domEventData.preventDefault();\n                eventInfo.stop();\n            }\n            return;\n        }\n        // Return if not collapsed.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        // If selection is next to object element.\n        const objectElementNextToSelection = this._getObjectElementNextToSelection(isForward);\n        if (objectElementNextToSelection && schema.isObject(objectElementNextToSelection)) {\n            // Do not select an inline widget while handling up/down arrow.\n            if (schema.isInline(objectElementNextToSelection) && isVerticalNavigation) {\n                return;\n            }\n            this._setSelectionOverElement(objectElementNextToSelection);\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events and prevents\n\t * the default browser behavior to make sure the fake selection is not being moved from a fake selection\n\t * container.\n\t *\n\t * See {@link #_handleSelectionChangeOnArrowKeyPress}.\n\t */ _preventDefaultOnArrowKeyPress(eventInfo, domEventData) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const objectElement = model.document.selection.getSelectedElement();\n        // If object element is selected.\n        if (objectElement && schema.isObject(objectElement)) {\n            domEventData.preventDefault();\n            eventInfo.stop();\n        }\n    }\n    /**\n\t * Handles delete keys: backspace and delete.\n\t *\n\t * @param isForward Set to true if delete was performed in forward direction.\n\t * @returns Returns `true` if keys were handled correctly.\n\t */ _handleDelete(isForward) {\n        const modelDocument = this.editor.model.document;\n        const modelSelection = modelDocument.selection;\n        // Do nothing when the read only mode is enabled.\n        if (!this.editor.model.canEditAt(modelSelection)) {\n            return;\n        }\n        // Do nothing on non-collapsed selection.\n        if (!modelSelection.isCollapsed) {\n            return;\n        }\n        const objectElement = this._getObjectElementNextToSelection(isForward);\n        if (objectElement) {\n            this.editor.model.change((writer)=>{\n                let previousNode = modelSelection.anchor.parent;\n                // Remove previous element if empty.\n                while(previousNode.isEmpty){\n                    const nodeToRemove = previousNode;\n                    previousNode = nodeToRemove.parent;\n                    writer.remove(nodeToRemove);\n                }\n                this._setSelectionOverElement(objectElement);\n            });\n            return true;\n        }\n    }\n    /**\n\t * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n\t *\n\t * @internal\n\t */ _setSelectionOverElement(element) {\n        this.editor.model.change((writer)=>{\n            writer.setSelection(writer.createRangeOn(element));\n        });\n    }\n    /**\n\t * Checks if {@link module:engine/model/element~Element element} placed next to the current\n\t * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n\t * {@link module:engine/model/schema~Schema schema} as `object`.\n\t *\n\t * @internal\n\t * @param forward Direction of checking.\n\t */ _getObjectElementNextToSelection(forward) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const modelSelection = model.document.selection;\n        // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n        // to its current state after undo.\n        const probe = model.createSelection(modelSelection);\n        model.modifySelection(probe, {\n            direction: forward ? 'forward' : 'backward'\n        });\n        // The selection didn't change so there is nothing there.\n        if (probe.isEqual(modelSelection)) {\n            return null;\n        }\n        const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n        if (!!objectElement && schema.isObject(objectElement)) {\n            return objectElement;\n        }\n        return null;\n    }\n    /**\n\t * Removes CSS class from previously selected widgets.\n\t */ _clearPreviouslySelectedWidgets(writer) {\n        for (const widget of this._previouslySelected){\n            writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n        }\n        this._previouslySelected.clear();\n    }\n    /**\n\t * Moves the document selection into the first nested editable.\n\t */ _selectFirstNestedEditable() {\n        const editor = this.editor;\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        for (const item of viewDocument.selection.getFirstRange().getItems()){\n            if (item.is('editableElement')) {\n                const modelElement = editor.editing.mapper.toModelElement(item);\n                /* istanbul ignore next -- @preserve */ if (!modelElement) {\n                    continue;\n                }\n                const position = editor.model.createPositionAt(modelElement, 0);\n                const newRange = editor.model.schema.getNearestSelectionRange(position, 'forward');\n                editor.model.change((writer)=>{\n                    writer.setSelection(newRange);\n                });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Updates the document selection so that it selects first ancestor widget.\n\t */ _selectAncestorWidget() {\n        const editor = this.editor;\n        const mapper = editor.editing.mapper;\n        const selection = editor.editing.view.document.selection;\n        const positionParent = selection.getFirstPosition().parent;\n        const positionParentElement = positionParent.is('$text') ? positionParent.parent : positionParent;\n        const viewElement = positionParentElement.findAncestor(isWidget);\n        if (!viewElement) {\n            return false;\n        }\n        const modelElement = mapper.toModelElement(viewElement);\n        /* istanbul ignore next -- @preserve */ if (!modelElement) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.setSelection(modelElement, 'on');\n        });\n        return true;\n    }\n}\n/**\n * Finds the closest ancestor element that is either an editable element or a widget.\n *\n * @param element The element from which to start searching.\n * @returns The closest ancestor element that is either an editable element or a widget, or null if none is found.\n */ function findClosestEditableOrWidgetAncestor(element) {\n    let currentElement = element;\n    while(currentElement){\n        if (currentElement.is('editableElement') || isWidget(currentElement)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parent;\n    }\n    return null;\n}\n/**\n * Retrieves the ViewElement associated with a mouse event in the editing view.\n *\n * @param view The editing view.\n * @param domEventData The DOM event data containing the mouse event.\n * @returns The ViewElement associated with the mouse event, or null if not found.\n */ function getElementFromMouseEvent(view, domEventData) {\n    const domRange = getRangeFromMouseEvent(domEventData.domEvent);\n    let viewRange = null;\n    if (domRange) {\n        viewRange = view.domConverter.domRangeToView(domRange);\n    } else {\n        // Fallback to create range in target element. It happens frequently on Safari browser.\n        // See more: https://github.com/ckeditor/ckeditor5/issues/16978\n        viewRange = view.createRange(view.createPositionAt(domEventData.target, 0));\n    }\n    if (!viewRange) {\n        return null;\n    }\n    const viewPosition = viewRange.start;\n    if (!viewPosition.parent) {\n        return null;\n    }\n    let viewNode = viewPosition.parent;\n    if (viewPosition.parent.is('editableElement')) {\n        if (viewPosition.isAtEnd && viewPosition.nodeBefore) {\n            // Click after a widget tend to return position at the end of the editable element\n            // so use the node before it if range is at the end of a parent.\n            viewNode = viewPosition.nodeBefore;\n        } else if (viewPosition.isAtStart && viewPosition.nodeAfter) {\n            // Click before a widget tend to return position at the start of the editable element\n            // so use the node after it if range is at the start of a parent.\n            // See more: https://github.com/ckeditor/ckeditor5/issues/16992\n            viewNode = viewPosition.nodeAfter;\n        }\n    }\n    if (viewNode.is('$text')) {\n        return viewNode.parent;\n    }\n    return viewNode;\n}\n/**\n * Checks whether the specified `element` is a child of the `parent` element.\n *\n * @param element An element to check.\n * @param parent A parent for the element.\n */ function isChild(element, parent) {\n    if (!parent) {\n        return false;\n    }\n    return Array.from(element.getAncestors()).includes(parent);\n}\n/**\n * Returns nearest text block ancestor.\n */ function findTextBlockAncestor(modelElement, schema) {\n    for (const element of modelElement.getAncestors({\n        includeSelf: true,\n        parentFirst: true\n    })){\n        if (schema.checkChild(element, '$text')) {\n            return element;\n        }\n        // Do not go beyond nested editable.\n        if (schema.isLimit(element) && !schema.isObject(element)) {\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Returns next text block where could put selection.\n */ function findNextTextBlock(position, schema) {\n    const treeWalker = new TreeWalker({\n        startPosition: position\n    });\n    for (const { item } of treeWalker){\n        if (schema.isLimit(item) || !item.is('element')) {\n            return null;\n        }\n        if (schema.checkChild(item, '$text')) {\n            return item;\n        }\n    }\n    return null;\n}\n\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * ```ts\n * class ImageToolbar extends Plugin {\n * \tstatic get requires() {\n * \t\treturn [ WidgetToolbarRepository ];\n * \t}\n *\n * \tafterInit() {\n * \t\tconst editor = this.editor;\n * \t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n * \t\twidgetToolbarRepository.register( 'image', {\n * \t\t\titems: editor.config.get( 'image.toolbar' ),\n * \t\t\tgetRelatedElement: getClosestSelectedImageWidget\n * \t\t} );\n * \t}\n * }\n * ```\n */ class WidgetToolbarRepository extends Plugin {\n    /**\n\t * A map of toolbar definitions.\n\t */ _toolbarDefinitions = new Map();\n    _balloon;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', (evt)=>{\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, {\n                priority: 'high'\n            });\n        }\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.on('change:isEnabled', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        this.listenTo(editor.ui, 'update', ()=>{\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', ()=>{\n            this._updateToolbarsVisibility();\n        }, {\n            priority: 'low'\n        });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()){\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n\t * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n\t * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n\t * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n\t *\n\t * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n\t * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n\t *\n\t * @param toolbarId An id for the toolbar. Used to\n\t * @param options.ariaLabel Label used by assistive technologies to describe this toolbar element.\n\t * @param options.items Array of toolbar items.\n\t * @param options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n\t * @param options.balloonClassName CSS class for the widget balloon.\n\t */ register(toolbarId, { ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container' }) {\n        // Trying to register a toolbar without any item.\n        if (!items.length) {\n            /**\n\t\t\t * When {@link module:widget/widgettoolbarrepository~WidgetToolbarRepository#register registering} a new widget toolbar, you\n\t\t\t * need to provide a non-empty array with the items that will be inserted into the toolbar.\n\t\t\t *\n\t\t\t * If you see this error when integrating the editor, you likely forgot to configure one of the widget toolbars.\n\t\t\t *\n\t\t\t * See for instance:\n\t\t\t *\n\t\t\t * * {@link module:table/tableconfig~TableConfig#contentToolbar `config.table.contentToolbar`}\n\t\t\t * * {@link module:image/imageconfig~ImageConfig#toolbar `config.image.toolbar`}\n\t\t\t *\n\t\t\t * @error widget-toolbar-no-items\n\t\t\t * @param toolbarId The id of the toolbar that has not been configured correctly.\n\t\t\t */ logWarning('widget-toolbar-no-items', {\n                toolbarId\n            });\n            return;\n        }\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('Widget toolbar');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n\t\t\t * Toolbar with the given id was already added.\n\t\t\t *\n\t\t\t * @error widget-toolbar-duplicated\n\t\t\t * @param toolbarId Toolbar id.\n\t\t\t */ throw new CKEditorError('widget-toolbar-duplicated', this, {\n                toolbarId\n            });\n        }\n        const toolbarDefinition = {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName,\n            itemsConfig: items,\n            initialized: false\n        };\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        editor.ui.addToolbar(toolbarView, {\n            isContextual: true,\n            beforeFocus: ()=>{\n                const relatedElement = getRelatedElement(editor.editing.view.document.selection);\n                if (relatedElement) {\n                    this._showToolbar(toolbarDefinition, relatedElement);\n                }\n            },\n            afterBlur: ()=>{\n                this._hideToolbar(toolbarDefinition);\n            }\n        });\n        this._toolbarDefinitions.set(toolbarId, toolbarDefinition);\n    }\n    /**\n\t * Iterates over stored toolbars and makes them visible or hidden.\n\t */ _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()){\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.isEnabled || !relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n\t * Hides the given toolbar.\n\t */ _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n\t * Shows up the toolbar if the toolbar is not visible.\n\t * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n\t *\n\t * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n\t * should be still visible after the {@link module:ui/editorui/editorui~EditorUI#event:update}.\n\t */ _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            if (!toolbarDefinition.initialized) {\n                toolbarDefinition.initialized = true;\n                toolbarDefinition.view.fillFromConfig(toolbarDefinition.itemsConfig, this.editor.ui.componentFactory);\n            }\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', ()=>{\n                for (const definition of this._toolbarDefinitions.values()){\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement);\n                    }\n                }\n            });\n        }\n    }\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast,\n            defaultPositions.viewportStickyNorth\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}\n\n/**\n * Stores the internal state of a single resizable object.\n */ class ResizeState extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n\t * traveled, so how much the image should be enlarged.\n\t * This information is only known after the DOM was rendered, so it will be updated later.\n\t *\n\t * @internal\n\t */ _referenceCoordinates;\n    /**\n\t * Resizer options.\n\t */ _options;\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidth;\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalHeight;\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t *\n\t * @readonly\n\t */ _originalWidthPercents;\n    /**\n\t * A width to height ratio of the resized image.\n\t *\n\t * @readonly\n\t */ _aspectRatio;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this.set('activeHandlePosition', null);\n        this.set('proposedWidthPercents', null);\n        this.set('proposedWidth', null);\n        this.set('proposedHeight', null);\n        this.set('proposedHandleHostWidth', null);\n        this.set('proposedHandleHostHeight', null);\n        this._options = options;\n        this._referenceCoordinates = null;\n    }\n    /**\n\t * The original width (pixels) of the resized object when the resize process was started.\n\t */ get originalWidth() {\n        return this._originalWidth;\n    }\n    /**\n\t * The original height (pixels) of the resized object when the resize process was started.\n\t */ get originalHeight() {\n        return this._originalHeight;\n    }\n    /**\n\t * The original width (percents) of the resized object when the resize process was started.\n\t */ get originalWidthPercents() {\n        return this._originalWidthPercents;\n    }\n    /**\n\t * A width to height ratio of the resized image.\n\t */ get aspectRatio() {\n        return this._aspectRatio;\n    }\n    /**\n\t *\n\t * @param domResizeHandle The handle used to calculate the reference point.\n\t */ begin(domResizeHandle, domHandleHost, domResizeHost) {\n        const clientRect = new Rect(domHandleHost);\n        this.activeHandlePosition = getHandlePosition(domResizeHandle);\n        this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n        this._originalWidth = clientRect.width;\n        this._originalHeight = clientRect.height;\n        this._aspectRatio = clientRect.width / clientRect.height;\n        const widthStyle = domResizeHost.style.width;\n        if (widthStyle && widthStyle.match(/^\\d+(\\.\\d*)?%$/)) {\n            this._originalWidthPercents = parseFloat(widthStyle);\n        } else {\n            this._originalWidthPercents = calculateResizeHostPercentageWidth(domResizeHost, clientRect);\n        }\n    }\n    update(newSize) {\n        this.proposedWidth = newSize.width;\n        this.proposedHeight = newSize.height;\n        this.proposedWidthPercents = newSize.widthPercents;\n        this.proposedHandleHostWidth = newSize.handleHostWidth;\n        this.proposedHandleHostHeight = newSize.handleHostHeight;\n    }\n}\n/**\n * Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n *\n * @param resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n */ function getAbsoluteBoundaryPoint(element, resizerPosition) {\n    const elementRect = new Rect(element);\n    const positionParts = resizerPosition.split('-');\n    const ret = {\n        x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n        y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n    };\n    ret.x += element.ownerDocument.defaultView.scrollX;\n    ret.y += element.ownerDocument.defaultView.scrollY;\n    return ret;\n}\n/**\n * @param resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element.\n */ function getResizerHandleClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n/**\n * Determines the position of a given resize handle.\n *\n * @param domHandle Handle used to calculate the reference point.\n * @returns Returns a string like `\"top-left\"` or `undefined` if not matched.\n */ function getHandlePosition(domHandle) {\n    const resizerPositions = [\n        'top-left',\n        'top-right',\n        'bottom-right',\n        'bottom-left'\n    ];\n    for (const position of resizerPositions){\n        if (domHandle.classList.contains(getResizerHandleClass(position))) {\n            return position;\n        }\n    }\n}\n/**\n * @param position Like `\"top-left\"`.\n * @returns Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n */ function getOppositePosition(position) {\n    const parts = position.split('-');\n    const replacements = {\n        top: 'bottom',\n        bottom: 'top',\n        left: 'right',\n        right: 'left'\n    };\n    return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}\n\n/**\n * A view displaying the proposed new element size during the resizing.\n */ class SizeView extends View {\n    constructor(){\n        super();\n        const bind = this.bindTemplate;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-size-view',\n                    bind.to('_viewPosition', (value)=>value ? `ck-orientation-${value}` : '')\n                ],\n                style: {\n                    display: bind.if('_isVisible', 'none', (visible)=>!visible)\n                }\n            },\n            children: [\n                {\n                    text: bind.to('_label')\n                }\n            ]\n        });\n    }\n    /**\n\t * A method used for binding the `SizeView` instance properties to the `ResizeState` instance observable properties.\n\t *\n\t * @internal\n\t * @param options An object defining the resizer options, used for setting the proper size label.\n\t * @param resizeState The `ResizeState` class instance, used for keeping the `SizeView` state up to date.\n\t */ _bindToState(options, resizeState) {\n        this.bind('_isVisible').to(resizeState, 'proposedWidth', resizeState, 'proposedHeight', (width, height)=>width !== null && height !== null);\n        this.bind('_label').to(resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', resizeState, 'proposedWidthPercents', (width, height, widthPercents)=>{\n            if (options.unit === 'px') {\n                return `${width}×${height}`;\n            } else {\n                return `${widthPercents}%`;\n            }\n        });\n        this.bind('_viewPosition').to(resizeState, 'activeHandlePosition', resizeState, 'proposedHandleHostWidth', resizeState, 'proposedHandleHostHeight', // If the widget is too small to contain the size label, display the label above.\n        (position, width, height)=>width < 50 || height < 50 ? 'above-center' : position);\n    }\n    /**\n\t * A method used for cleaning up. It removes the bindings and hides the view.\n\t *\n\t * @internal\n\t */ _dismiss() {\n        this.unbind();\n        this._isVisible = false;\n    }\n}\n\n/**\n * Represents a resizer for a single resizable object.\n */ class Resizer extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ _state;\n    /**\n\t * A view displaying the proposed new element size during the resizing.\n\t */ _sizeView;\n    /**\n\t * Options passed to the {@link #constructor}.\n\t */ _options;\n    /**\n\t * A wrapper that is controlled by the resizer. This is usually a widget element.\n\t */ _viewResizerWrapper = null;\n    /**\n\t * The width of the resized {@link module:widget/widgetresize~ResizerOptions#viewElement viewElement} before the resizing started.\n\t */ _initialViewWidth;\n    /**\n\t * @param options Resizer options.\n\t */ constructor(options){\n        super();\n        this._options = options;\n        this.set('isEnabled', true);\n        this.set('isSelected', false);\n        this.bind('isVisible').to(this, 'isEnabled', this, 'isSelected', (isEnabled, isSelected)=>isEnabled && isSelected);\n        this.decorate('begin');\n        this.decorate('cancel');\n        this.decorate('commit');\n        this.decorate('updateSize');\n        this.on('commit', (event)=>{\n            // State might not be initialized yet. In this case, prevent further handling and make sure that the resizer is\n            // cleaned up (#5195).\n            if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {\n                this._cleanup();\n                event.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n\t *\n\t * Note that a new state is created for each resize transaction.\n\t */ get state() {\n        return this._state;\n    }\n    /**\n\t * Makes resizer visible in the UI.\n\t */ show() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.removeClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Hides resizer in the UI.\n\t */ hide() {\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.addClass('ck-hidden', this._viewResizerWrapper);\n        });\n    }\n    /**\n\t * Attaches the resizer to the DOM.\n\t */ attach() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        const widgetElement = this._options.viewElement;\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const viewResizerWrapper = writer.createUIElement('div', {\n                class: 'ck ck-reset_all ck-widget__resizer'\n            }, function(domDocument) {\n                const domElement = this.toDomElement(domDocument);\n                that._appendHandles(domElement);\n                that._appendSizeUI(domElement);\n                return domElement;\n            });\n            // Append the resizer wrapper to the widget's wrapper.\n            writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n            writer.addClass('ck-widget_with-resizer', widgetElement);\n            this._viewResizerWrapper = viewResizerWrapper;\n            if (!this.isVisible) {\n                this.hide();\n            }\n        });\n        this.on('change:isVisible', ()=>{\n            if (this.isVisible) {\n                this.show();\n                this.redraw();\n            } else {\n                this.hide();\n            }\n        });\n    }\n    /**\n\t * Starts the resizing process.\n\t *\n\t * Creates a new {@link #state} for the current process.\n\t *\n\t * @fires begin\n\t * @param domResizeHandle Clicked handle.\n\t */ begin(domResizeHandle) {\n        this._state = new ResizeState(this._options);\n        this._sizeView._bindToState(this._options, this.state);\n        this._initialViewWidth = this._options.viewElement.getStyle('width');\n        this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n    }\n    /**\n\t * Updates the proposed size based on `domEventData`.\n\t *\n\t * @fires updateSize\n\t */ updateSize(domEventData) {\n        const newSize = this._proposeNewSize(domEventData);\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            const unit = this._options.unit || '%';\n            const newWidth = (unit === '%' ? newSize.widthPercents : newSize.width) + unit;\n            writer.setStyle('width', newWidth, this._options.viewElement);\n        });\n        // Get an actual image width, and:\n        // * reflect this size to the resize wrapper\n        // * apply this **real** size to the state\n        const domHandleHost = this._getHandleHost();\n        const domHandleHostRect = new Rect(domHandleHost);\n        const handleHostWidth = Math.round(domHandleHostRect.width);\n        const handleHostHeight = Math.round(domHandleHostRect.height);\n        // Handle max-width limitation.\n        const domResizeHostRect = new Rect(domHandleHost);\n        newSize.width = Math.round(domResizeHostRect.width);\n        newSize.height = Math.round(domResizeHostRect.height);\n        this.redraw(domHandleHostRect);\n        this.state.update({\n            ...newSize,\n            handleHostWidth,\n            handleHostHeight\n        });\n    }\n    /**\n\t * Applies the geometry proposed with the resizer.\n\t *\n\t * @fires commit\n\t */ commit() {\n        const unit = this._options.unit || '%';\n        const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + unit;\n        // Both cleanup and onCommit callback are very likely to make view changes. Ensure that it is made in a single step.\n        this._options.editor.editing.view.change(()=>{\n            this._cleanup();\n            this._options.onCommit(newValue);\n        });\n    }\n    /**\n\t * Cancels and rejects the proposed resize dimensions, hiding the UI.\n\t *\n\t * @fires cancel\n\t */ cancel() {\n        this._cleanup();\n    }\n    /**\n\t * Destroys the resizer.\n\t */ destroy() {\n        this.cancel();\n    }\n    /**\n\t * Redraws the resizer.\n\t *\n\t * @param handleHostRect Handle host rectangle might be given to improve performance.\n\t */ redraw(handleHostRect) {\n        const domWrapper = this._domResizerWrapper;\n        // Refresh only if resizer exists in the DOM.\n        if (!existsInDom(domWrapper)) {\n            return;\n        }\n        const widgetWrapper = domWrapper.parentElement;\n        const handleHost = this._getHandleHost();\n        const resizerWrapper = this._viewResizerWrapper;\n        const currentDimensions = [\n            resizerWrapper.getStyle('width'),\n            resizerWrapper.getStyle('height'),\n            resizerWrapper.getStyle('left'),\n            resizerWrapper.getStyle('top')\n        ];\n        let newDimensions;\n        if (widgetWrapper.isSameNode(handleHost)) {\n            const clientRect = handleHostRect || new Rect(handleHost);\n            newDimensions = [\n                clientRect.width + 'px',\n                clientRect.height + 'px',\n                undefined,\n                undefined\n            ];\n        } else {\n            newDimensions = [\n                handleHost.offsetWidth + 'px',\n                handleHost.offsetHeight + 'px',\n                handleHost.offsetLeft + 'px',\n                handleHost.offsetTop + 'px'\n            ];\n        }\n        // Make changes to the view only if the resizer should actually get new dimensions.\n        // Otherwise, if View#change() was always called, this would cause EditorUI#update\n        // loops because the WidgetResize plugin listens to EditorUI#update and updates\n        // the resizer.\n        // https://github.com/ckeditor/ckeditor5/issues/7633\n        if (compareArrays(currentDimensions, newDimensions) !== 'same') {\n            this._options.editor.editing.view.change((writer)=>{\n                writer.setStyle({\n                    width: newDimensions[0],\n                    height: newDimensions[1],\n                    left: newDimensions[2],\n                    top: newDimensions[3]\n                }, resizerWrapper);\n            });\n        }\n    }\n    containsHandle(domElement) {\n        return this._domResizerWrapper.contains(domElement);\n    }\n    static isResizeHandle(domElement) {\n        return domElement.classList.contains('ck-widget__resizer__handle');\n    }\n    /**\n\t * Cleans up the context state.\n\t */ _cleanup() {\n        this._sizeView._dismiss();\n        const editingView = this._options.editor.editing.view;\n        editingView.change((writer)=>{\n            writer.setStyle('width', this._initialViewWidth, this._options.viewElement);\n        });\n    }\n    /**\n\t * Calculates the proposed size as the resize handles are dragged.\n\t *\n\t * @param domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n\t */ _proposeNewSize(domEventData) {\n        const state = this.state;\n        const currentCoordinates = extractCoordinates(domEventData);\n        const isCentered = this._options.isCentered ? this._options.isCentered(this) : true;\n        // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n        // meaning that it has been shrunk.\n        //\n        // +----------------+--+\n        // |                |  |\n        // |       img      |  |\n        // |  /handle host  |  |\n        // +----------------+  | ^\n        // |                   | | - enlarge y\n        // +-------------------+ v\n        // \t\t\t\t\t<-->\n        // \t\t\t\t\t enlarge x\n        const enlargement = {\n            x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n            y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n        };\n        if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n            enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n        }\n        // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n        // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n        if (isCentered) {\n            enlargement.x *= 2;\n        }\n        // const resizeHost = this._getResizeHost();\n        // The size proposed by the user. It does not consider the aspect ratio.\n        let width = Math.abs(state.originalWidth + enlargement.x);\n        let height = Math.abs(state.originalHeight + enlargement.y);\n        // Dominant determination must take the ratio into account.\n        const dominant = width / state.aspectRatio > height ? 'width' : 'height';\n        if (dominant == 'width') {\n            height = width / state.aspectRatio;\n        } else {\n            width = height * state.aspectRatio;\n        }\n        return {\n            width: Math.round(width),\n            height: Math.round(height),\n            widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * width * 100) / 100, 100)\n        };\n    }\n    /**\n\t * Obtains the resize host.\n\t *\n\t * Resize host is an object that receives dimensions which are the result of resizing.\n\t */ _getResizeHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getResizeHost(widgetWrapper);\n    }\n    /**\n\t * Obtains the handle host.\n\t *\n\t * Handle host is an object that the handles are aligned to.\n\t *\n\t * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n\t * contains an image and a caption. Only the image should be surrounded with handles.\n\t */ _getHandleHost() {\n        const widgetWrapper = this._domResizerWrapper.parentElement;\n        return this._options.getHandleHost(widgetWrapper);\n    }\n    /**\n\t * DOM container of the entire resize UI.\n\t *\n\t * Note that this property will have a value only after the element bound with the resizer is rendered\n\t * (otherwise `null`).\n\t */ get _domResizerWrapper() {\n        return this._options.editor.editing.view.domConverter.mapViewToDom(this._viewResizerWrapper);\n    }\n    /**\n\t * Renders the resize handles in the DOM.\n\t *\n\t * @param domElement The resizer wrapper.\n\t */ _appendHandles(domElement) {\n        const resizerPositions = [\n            'top-left',\n            'top-right',\n            'bottom-right',\n            'bottom-left'\n        ];\n        for (const currentPosition of resizerPositions){\n            domElement.appendChild(new Template({\n                tag: 'div',\n                attributes: {\n                    class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n                }\n            }).render());\n        }\n    }\n    /**\n\t * Sets up the {@link #_sizeView} property and adds it to the passed `domElement`.\n\t */ _appendSizeUI(domElement) {\n        this._sizeView = new SizeView();\n        // Make sure icon#element is rendered before passing to appendChild().\n        this._sizeView.render();\n        domElement.appendChild(this._sizeView.element);\n    }\n}\n/**\n * @param resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n * @returns A prefixed HTML class name for the resizer element\n */ function getResizerClass(resizerPosition) {\n    return `ck-widget__resizer__handle-${resizerPosition}`;\n}\nfunction extractCoordinates(event) {\n    return {\n        x: event.pageX,\n        y: event.pageY\n    };\n}\nfunction existsInDom(element) {\n    return element && element.ownerDocument && element.ownerDocument.contains(element);\n}\n\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n */ class WidgetResize extends Plugin {\n    /**\n\t * A map of resizers created using this plugin instance.\n\t */ _resizers = new Map();\n    _observer;\n    _redrawSelectedResizerThrottled;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WidgetResize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editing = this.editor.editing;\n        const domDocument = global.window.document;\n        this.set('selectedResizer', null);\n        this.set('_activeResizer', null);\n        editing.view.addObserver(MouseObserver);\n        this._observer = new (DomEmitterMixin())();\n        this.listenTo(editing.view.document, 'mousedown', this._mouseDownListener.bind(this), {\n            priority: 'high'\n        });\n        this._observer.listenTo(domDocument, 'mousemove', this._mouseMoveListener.bind(this));\n        this._observer.listenTo(domDocument, 'mouseup', this._mouseUpListener.bind(this));\n        this._redrawSelectedResizerThrottled = throttle(()=>this.redrawSelectedResizer(), 200);\n        // Redrawing on any change of the UI of the editor (including content changes).\n        this.editor.ui.on('update', this._redrawSelectedResizerThrottled);\n        // Remove view widget-resizer mappings for widgets that have been removed from the document.\n        // https://github.com/ckeditor/ckeditor5/issues/10156\n        // https://github.com/ckeditor/ckeditor5/issues/10266\n        this.editor.model.document.on('change', ()=>{\n            for (const [viewElement, resizer] of this._resizers){\n                if (!viewElement.isAttached()) {\n                    this._resizers.delete(viewElement);\n                    resizer.destroy();\n                }\n            }\n        }, {\n            priority: 'lowest'\n        });\n        // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n        this._observer.listenTo(global.window, 'resize', this._redrawSelectedResizerThrottled);\n        const viewSelection = this.editor.editing.view.document.selection;\n        viewSelection.on('change', ()=>{\n            const selectedElement = viewSelection.getSelectedElement();\n            const resizer = this.getResizerByViewElement(selectedElement) || null;\n            if (resizer) {\n                this.select(resizer);\n            } else {\n                this.deselect();\n            }\n        });\n    }\n    /**\n\t * Redraws the selected resizer if there is any selected resizer and if it is visible.\n\t */ redrawSelectedResizer() {\n        if (this.selectedResizer && this.selectedResizer.isVisible) {\n            this.selectedResizer.redraw();\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._observer.stopListening();\n        for (const resizer of this._resizers.values()){\n            resizer.destroy();\n        }\n        this._redrawSelectedResizerThrottled.cancel();\n    }\n    /**\n\t * Marks resizer as selected.\n\t */ select(resizer) {\n        this.deselect();\n        this.selectedResizer = resizer;\n        this.selectedResizer.isSelected = true;\n    }\n    /**\n\t * Deselects currently set resizer.\n\t */ deselect() {\n        if (this.selectedResizer) {\n            this.selectedResizer.isSelected = false;\n        }\n        this.selectedResizer = null;\n    }\n    /**\n\t * @param options Resizer options.\n\t */ attachTo(options) {\n        const resizer = new Resizer(options);\n        const plugins = this.editor.plugins;\n        resizer.attach();\n        if (plugins.has('WidgetToolbarRepository')) {\n            // Hiding widget toolbar to improve the performance\n            // (https://github.com/ckeditor/ckeditor5-widget/pull/112#issuecomment-564528765).\n            const widgetToolbarRepository = plugins.get('WidgetToolbarRepository');\n            resizer.on('begin', ()=>{\n                widgetToolbarRepository.forceDisabled('resize');\n            }, {\n                priority: 'lowest'\n            });\n            resizer.on('cancel', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n            resizer.on('commit', ()=>{\n                widgetToolbarRepository.clearForceDisabled('resize');\n            }, {\n                priority: 'highest'\n            });\n        }\n        this._resizers.set(options.viewElement, resizer);\n        const viewSelection = this.editor.editing.view.document.selection;\n        const selectedElement = viewSelection.getSelectedElement();\n        // If the element the resizer is created for is currently focused, it should become visible.\n        if (this.getResizerByViewElement(selectedElement) == resizer) {\n            this.select(resizer);\n        }\n        return resizer;\n    }\n    /**\n\t * Returns a resizer created for a given view element (widget element).\n\t *\n\t * @param viewElement View element associated with the resizer.\n\t */ getResizerByViewElement(viewElement) {\n        return this._resizers.get(viewElement);\n    }\n    /**\n\t * Returns a resizer that contains a given resize handle.\n\t */ _getResizerByHandle(domResizeHandle) {\n        for (const resizer of this._resizers.values()){\n            if (resizer.containsHandle(domResizeHandle)) {\n                return resizer;\n            }\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseDownListener(event, domEventData) {\n        const resizeHandle = domEventData.domTarget;\n        if (!Resizer.isResizeHandle(resizeHandle)) {\n            return;\n        }\n        this._activeResizer = this._getResizerByHandle(resizeHandle) || null;\n        if (this._activeResizer) {\n            this._activeResizer.begin(resizeHandle);\n            // Do not call other events when resizing. See: #6755.\n            event.stop();\n            domEventData.preventDefault();\n        }\n    }\n    /**\n\t * @param domEventData Native DOM event.\n\t */ _mouseMoveListener(event, domEventData) {\n        if (this._activeResizer) {\n            this._activeResizer.updateSize(domEventData);\n        }\n    }\n    _mouseUpListener() {\n        if (this._activeResizer) {\n            this._activeResizer.commit();\n            this._activeResizer = null;\n        }\n    }\n}\n\nexport { WIDGET_CLASS_NAME, WIDGET_SELECTED_CLASS_NAME, Widget, WidgetResize, WidgetToolbarRepository, WidgetTypeAround, calculateResizeHostAncestorWidth, calculateResizeHostPercentageWidth, findOptimalInsertionRange, getLabel, isWidget, setHighlightHandling, setLabel, toWidget, toWidgetEditable, viewToModelPositionOutsideModelElement };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { FileRepository } from '@ckeditor/ckeditor5-upload/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /* globals window, document */ /**\n * @module adapter-ckfinder/utils\n */ const TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n */ function getCsrfToken() {\n    let token = getCookie(TOKEN_COOKIE_NAME);\n    if (!token || token.length != TOKEN_LENGTH) {\n        token = generateToken(TOKEN_LENGTH);\n        setCookie(TOKEN_COOKIE_NAME, token);\n    }\n    return token;\n}\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n */ function getCookie(name) {\n    name = name.toLowerCase();\n    const parts = document.cookie.split(';');\n    for (const part of parts){\n        const pair = part.split('=');\n        const key = decodeURIComponent(pair[0].trim().toLowerCase());\n        if (key === name) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    return null;\n}\n/**\n * Sets the value of the cookie with a given name.\n */ function setCookie(name, value) {\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';path=/';\n}\n/**\n * Generates the CSRF token with the given length.\n */ function generateToken(length) {\n    let result = '';\n    const randValues = new Uint8Array(length);\n    window.crypto.getRandomValues(randValues);\n    for(let j = 0; j < randValues.length; j++){\n        const character = tokenCharset.charAt(randValues[j] % tokenCharset.length);\n        result += Math.random() > 0.5 ? character.toUpperCase() : character;\n    }\n    return result;\n}\n\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/file-management/ckfinder \"CKFinder file manager integration\"} guide to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload overview\"} guide to learn\n * about other ways to upload images into CKEditor 5.\n */ class CKFinderUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FileRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKFinderUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const url = this.editor.config.get('ckfinder.uploadUrl');\n        if (!url) {\n            return;\n        }\n        // Register CKFinderAdapter\n        this.editor.plugins.get(FileRepository).createUploadAdapter = (loader)=>new UploadAdapter(loader, url, this.editor.t);\n    }\n}\n/**\n * Upload adapter for CKFinder.\n */ class UploadAdapter {\n    /**\n\t * FileLoader instance to use during the upload.\n\t */ loader;\n    /**\n\t * Upload URL.\n\t */ url;\n    /**\n\t * Locale translation method.\n\t */ t;\n    xhr;\n    /**\n\t * Creates a new adapter instance.\n\t */ constructor(loader, url, t){\n        this.loader = loader;\n        this.url = url;\n        this.t = t;\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t */ upload() {\n        return this.loader.file.then((file)=>{\n            return new Promise((resolve, reject)=>{\n                this._initRequest();\n                this._initListeners(resolve, reject, file);\n                this._sendRequest(file);\n            });\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */ abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n\t * Initializes the XMLHttpRequest object.\n\t */ _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.url, true);\n        xhr.responseType = 'json';\n    }\n    /**\n\t * Initializes XMLHttpRequest listeners.\n\t *\n\t * @param resolve Callback function to be called when the request is successful.\n\t * @param reject Callback function to be called when the request cannot be completed.\n\t * @param file File instance to be uploaded.\n\t */ _initListeners(resolve, reject, file) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const t = this.t;\n        const genericError = t('Cannot upload file:') + ` ${file.name}.`;\n        xhr.addEventListener('error', ()=>reject(genericError));\n        xhr.addEventListener('abort', ()=>reject());\n        xhr.addEventListener('load', ()=>{\n            const response = xhr.response;\n            if (!response || !response.uploaded) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericError);\n            }\n            resolve({\n                default: response.url\n            });\n        });\n        // Upload progress when it's supported.\n        /* istanbul ignore else -- @preserve */ if (xhr.upload) {\n            xhr.upload.addEventListener('progress', (evt)=>{\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n\t * Prepares the data and sends the request.\n\t *\n\t * @param file File instance to be uploaded.\n\t */ _sendRequest(file) {\n        // Prepare form data.\n        const data = new FormData();\n        data.append('upload', file);\n        data.append('ckCsrfToken', getCsrfToken());\n        // Send request.\n        this.xhr.send(data);\n    }\n}\n\nexport { CKFinderUploadAdapter };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { logWarning, CKEditorError, first } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView, createDropdown, addToolbarToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * @module alignment/utils\n */ /**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */ const supportedOptions = [\n    'left',\n    'right',\n    'center',\n    'justify'\n];\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param option The option value to check.\n */ function isSupported(option) {\n    return supportedOptions.includes(option);\n}\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param alignment The name of the alignment to check.\n * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n */ function isDefault(alignment, locale) {\n    // Right now only LTR is supported so the 'left' value is always the default one.\n    if (locale.contentLanguageDirection == 'rtl') {\n        return alignment === 'right';\n    } else {\n        return alignment === 'left';\n    }\n}\n/**\n * Brings the configuration to the common form, an array of objects.\n *\n * @param configuredOptions Alignment plugin configuration.\n * @returns Normalized object holding the configuration.\n */ function normalizeAlignmentOptions(configuredOptions) {\n    const normalizedOptions = configuredOptions.map((option)=>{\n        let result;\n        if (typeof option == 'string') {\n            result = {\n                name: option\n            };\n        } else {\n            result = option;\n        }\n        return result;\n    })// Remove all unknown options.\n    .filter((option)=>{\n        const isNameValid = supportedOptions.includes(option.name);\n        if (!isNameValid) {\n            /**\n\t\t\t\t * The `name` in one of the `alignment.options` is not recognized.\n\t\t\t\t * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-name-not-recognized\n\t\t\t\t * @param option Options with unknown value of the `name` property.\n\t\t\t\t */ logWarning('alignment-config-name-not-recognized', {\n                option\n            });\n        }\n        return isNameValid;\n    });\n    const classNameCount = normalizedOptions.filter((option)=>Boolean(option.className)).length;\n    // We either use classes for all styling options or for none.\n    if (classNameCount && classNameCount < normalizedOptions.length) {\n        /**\n\t\t * The `className` property has to be defined for all options once at least one option declares `className`.\n\t\t *\n\t\t * @error alignment-config-classnames-are-missing\n\t\t * @param configuredOptions Contents of `alignment.options`.\n\t\t */ throw new CKEditorError('alignment-config-classnames-are-missing', {\n            configuredOptions\n        });\n    }\n    // Validate resulting config.\n    normalizedOptions.forEach((option, index, allOptions)=>{\n        const succeedingOptions = allOptions.slice(index + 1);\n        const nameAlreadyExists = succeedingOptions.some((item)=>item.name == option.name);\n        if (nameAlreadyExists) {\n            /**\n\t\t\t * The same `name` in one of the `alignment.options` was already declared.\n\t\t\t * Each `name` representing one alignment option can be set exactly once.\n\t\t\t *\n\t\t\t * @error alignment-config-name-already-defined\n\t\t\t * @param option First option that declares given `name`.\n\t\t\t * @param configuredOptions Contents of `alignment.options`.\n\t\t\t */ throw new CKEditorError('alignment-config-name-already-defined', {\n                option,\n                configuredOptions\n            });\n        }\n        // The `className` property is present. Check for duplicates then.\n        if (option.className) {\n            const classNameAlreadyExists = succeedingOptions.some((item)=>item.className == option.className);\n            if (classNameAlreadyExists) {\n                /**\n\t\t\t\t * The same `className` in one of the `alignment.options` was already declared.\n\t\t\t\t *\n\t\t\t\t * @error alignment-config-classname-already-defined\n\t\t\t\t * @param option First option that declares given `className`.\n\t\t\t\t * @param configuredOptions\n\t\t\t\t * Contents of `alignment.options`.\n\t\t\t\t */ throw new CKEditorError('alignment-config-classname-already-defined', {\n                    option,\n                    configuredOptions\n                });\n            }\n        }\n    });\n    return normalizedOptions;\n}\n\nconst ALIGNMENT = 'alignment';\n/**\n * The alignment command plugin.\n */ class AlignmentCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const firstBlock = first(this.editor.model.document.selection.getSelectedBlocks());\n        // As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n        this.isEnabled = Boolean(firstBlock) && this._canBeAligned(firstBlock);\n        if (this.isEnabled && firstBlock.hasAttribute('alignment')) {\n            this.value = firstBlock.getAttribute('alignment');\n        } else {\n            this.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n        }\n    }\n    /**\n\t * Executes the command. Applies the alignment `value` to the selected blocks.\n\t * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n\t * the command will remove the attribute from the selected blocks.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.value The value to apply.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const model = editor.model;\n        const doc = model.document;\n        const value = options.value;\n        model.change((writer)=>{\n            // Get only those blocks from selected that can have alignment set\n            const blocks = Array.from(doc.selection.getSelectedBlocks()).filter((block)=>this._canBeAligned(block));\n            const currentAlignment = blocks[0].getAttribute('alignment');\n            // Remove alignment attribute if current alignment is:\n            // - default (should not be stored in model as it will bloat model data)\n            // - equal to currently set\n            // - or no value is passed - denotes default alignment.\n            const removeAlignment = isDefault(value, locale) || currentAlignment === value || !value;\n            if (removeAlignment) {\n                removeAlignmentFromSelection(blocks, writer);\n            } else {\n                setAlignmentOnSelection(blocks, writer, value);\n            }\n        });\n    }\n    /**\n\t * Checks whether a block can have alignment set.\n\t *\n\t * @param block The block to be checked.\n\t */ _canBeAligned(block) {\n        return this.editor.model.schema.checkAttribute(block, ALIGNMENT);\n    }\n}\n/**\n * Removes the alignment attribute from blocks.\n */ function removeAlignmentFromSelection(blocks, writer) {\n    for (const block of blocks){\n        writer.removeAttribute(ALIGNMENT, block);\n    }\n}\n/**\n * Sets the alignment attribute on blocks.\n */ function setAlignmentOnSelection(blocks, writer, alignment) {\n    for (const block of blocks){\n        writer.setAttribute(ALIGNMENT, alignment, block);\n    }\n}\n\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n */ class AlignmentEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AlignmentEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('alignment', {\n            options: supportedOptions.map((option)=>({\n                    name: option\n                }))\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const schema = editor.model.schema;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        // Filter out unsupported options and those that are redundant, e.g. `left` in LTR / `right` in RTL mode.\n        const optionsToConvert = options.filter((option)=>isSupported(option.name) && !isDefault(option.name, locale));\n        // Once there is at least one `className` defined, we switch to alignment with classes.\n        const shouldUseClasses = optionsToConvert.some((option)=>!!option.className);\n        // Allow alignment attribute on all blocks.\n        schema.extend('$block', {\n            allowAttributes: 'alignment'\n        });\n        editor.model.schema.setAttributeProperties('alignment', {\n            isFormatting: true\n        });\n        if (shouldUseClasses) {\n            editor.conversion.attributeToAttribute(buildClassDefinition(optionsToConvert));\n        } else {\n            // Downcast inline styles.\n            editor.conversion.for('downcast').attributeToAttribute(buildDowncastInlineDefinition(optionsToConvert));\n        }\n        const upcastInlineDefinitions = buildUpcastInlineDefinitions(optionsToConvert);\n        // Always upcast from inline styles.\n        for (const definition of upcastInlineDefinitions){\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        const upcastCompatibilityDefinitions = buildUpcastCompatibilityDefinitions(optionsToConvert);\n        // Always upcast from deprecated `align` attribute.\n        for (const definition of upcastCompatibilityDefinitions){\n            editor.conversion.for('upcast').attributeToAttribute(definition);\n        }\n        editor.commands.add('alignment', new AlignmentCommand(editor));\n    }\n}\n/**\n * Prepare downcast conversion definition for inline alignment styling.\n */ function buildDowncastInlineDefinition(options) {\n    const view = {};\n    for (const { name } of options){\n        view[name] = {\n            key: 'style',\n            value: {\n                'text-align': name\n            }\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map((option)=>option.name)\n        },\n        view\n    };\n    return definition;\n}\n/**\n * Prepare upcast definitions for inline alignment styles.\n */ function buildUpcastInlineDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options){\n        definitions.push({\n            view: {\n                key: 'style',\n                value: {\n                    'text-align': name\n                }\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare upcast definitions for deprecated `align` attribute.\n */ function buildUpcastCompatibilityDefinitions(options) {\n    const definitions = [];\n    for (const { name } of options){\n        definitions.push({\n            view: {\n                key: 'align',\n                value: name\n            },\n            model: {\n                key: 'alignment',\n                value: name\n            }\n        });\n    }\n    return definitions;\n}\n/**\n * Prepare conversion definitions for upcast and downcast alignment with classes.\n */ function buildClassDefinition(options) {\n    const view = {};\n    for (const option of options){\n        view[option.name] = {\n            key: 'class',\n            value: option.className\n        };\n    }\n    const definition = {\n        model: {\n            key: 'alignment',\n            values: options.map((option)=>option.name)\n        },\n        view\n    };\n    return definition;\n}\n\nconst iconsMap = /* #__PURE__ */ (()=>new Map([\n        [\n            'left',\n            icons.alignLeft\n        ],\n        [\n            'right',\n            icons.alignRight\n        ],\n        [\n            'center',\n            icons.alignCenter\n        ],\n        [\n            'justify',\n            icons.alignJustify\n        ]\n    ]))();\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n */ class AlignmentUI extends Plugin {\n    /**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:alignment/alignmentconfig~AlignmentConfig#options} are available:\n\t *\n\t * * `'left'`,\n\t * * `'right'`,\n\t * * `'center'`,\n\t * * `'justify'`.\n\t *\n\t * @readonly\n\t */ get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'left': t('Align left'),\n            'right': t('Align right'),\n            'center': t('Align center'),\n            'justify': t('Justify')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AlignmentUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const options = normalizeAlignmentOptions(editor.config.get('alignment.options'));\n        options.map((option)=>option.name).filter(isSupported).forEach((option)=>this._addButton(option));\n        this._addToolbarDropdown(options);\n        this._addMenuBarMenu(options);\n    }\n    /**\n\t * Helper method for initializing the button and linking it with an appropriate command.\n\t *\n\t * @param option The name of the alignment option for which the button is added.\n\t */ _addButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(`alignment:${option}`, (locale)=>this._createButton(locale, option));\n    }\n    /**\n\t * Helper method for creating the button view element.\n\t *\n\t * @param locale Editor locale.\n\t * @param option The name of the alignment option for which the button is added.\n\t * @param buttonAttrs Optional parameters passed to button view instance.\n\t */ _createButton(locale, option, buttonAttrs = {}) {\n        const editor = this.editor;\n        const command = editor.commands.get('alignment');\n        const buttonView = new ButtonView(locale);\n        buttonView.set({\n            label: this.localizedOptionTitles[option],\n            icon: iconsMap.get(option),\n            tooltip: true,\n            isToggleable: true,\n            ...buttonAttrs\n        });\n        // Bind button model to command.\n        buttonView.bind('isEnabled').to(command);\n        buttonView.bind('isOn').to(command, 'value', (value)=>value === option);\n        // Execute command.\n        this.listenTo(buttonView, 'execute', ()=>{\n            editor.execute('alignment', {\n                value: option\n            });\n            editor.editing.view.focus();\n        });\n        return buttonView;\n    }\n    /**\n\t * Helper method for initializing the toolnar dropdown and linking it with an appropriate command.\n\t *\n\t * @param option The name of the alignment option for which the button is added.\n\t */ _addToolbarDropdown(options) {\n        const editor = this.editor;\n        const factory = editor.ui.componentFactory;\n        factory.add('alignment', (locale)=>{\n            const dropdownView = createDropdown(locale);\n            const tooltipPosition = locale.uiLanguageDirection === 'rtl' ? 'w' : 'e';\n            const t = locale.t;\n            // Add existing alignment buttons to dropdown's toolbar.\n            addToolbarToDropdown(dropdownView, ()=>options.map((option)=>this._createButton(locale, option.name, {\n                        tooltipPosition\n                    })), {\n                enableActiveItemFocusOnDropdownOpen: true,\n                isVertical: true,\n                ariaLabel: t('Text alignment toolbar')\n            });\n            // Configure dropdown properties an behavior.\n            dropdownView.buttonView.set({\n                label: t('Text alignment'),\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-alignment-dropdown'\n                }\n            });\n            // The default icon depends on the direction of the content.\n            const defaultIcon = locale.contentLanguageDirection === 'rtl' ? iconsMap.get('right') : iconsMap.get('left');\n            const command = editor.commands.get('alignment');\n            // Change icon to reflect current selection's alignment.\n            dropdownView.buttonView.bind('icon').to(command, 'value', (value)=>iconsMap.get(value) || defaultIcon);\n            // Enable button if any of the buttons is enabled.\n            dropdownView.bind('isEnabled').to(command, 'isEnabled');\n            // Focus the editable after executing the command.\n            // Overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            this.listenTo(dropdownView, 'execute', ()=>{\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n\t * Creates a menu for all alignment options to use either in menu bar.\n\t *\n\t * @param options Normalized alignment options from config.\n\t */ _addMenuBarMenu(options) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('menuBar:alignment', (locale)=>{\n            const command = editor.commands.get('alignment');\n            const t = locale.t;\n            const menuView = new MenuBarMenuView(locale);\n            const listView = new MenuBarMenuListView(locale);\n            menuView.bind('isEnabled').to(command);\n            listView.set({\n                ariaLabel: t('Text alignment'),\n                role: 'menu'\n            });\n            menuView.buttonView.set({\n                label: t('Text alignment')\n            });\n            for (const option of options){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.delegate('execute').to(menuView);\n                buttonView.set({\n                    label: this.localizedOptionTitles[option.name],\n                    icon: iconsMap.get(option.name),\n                    role: 'menuitemcheckbox',\n                    isToggleable: true\n                });\n                buttonView.on('execute', ()=>{\n                    editor.execute('alignment', {\n                        value: option.name\n                    });\n                    editor.editing.view.focus();\n                });\n                buttonView.bind('isOn').to(command, 'value', (value)=>value === option.name);\n                buttonView.bind('isEnabled').to(command, 'isEnabled');\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n}\n\n/**\n * The text alignment plugin.\n *\n * For a detailed overview, check the {@glink features/text-alignment Text alignment} feature guide\n * and the {@glink api/alignment package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:alignment/alignmentediting~AlignmentEditing} and\n * {@link module:alignment/alignmentui~AlignmentUI} plugins.\n */ class Alignment extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            AlignmentEditing,\n            AlignmentUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Alignment';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Alignment, AlignmentEditing, AlignmentUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { LiveRange } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the {@link module:autoformat/blockautoformatediting~blockAutoformatEditing `blockAutoformatEditing`} documentation\n * to learn how to create custom block autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n *\n * @module autoformat/blockautoformatediting\n */ /**\n * Creates a listener triggered on {@link module:engine/model/document~Document#event:change:data `change:data`} event in the document.\n * Calls the callback when inserted text matches the regular expression or the command name\n * if provided instead of the callback.\n *\n * Examples of usage:\n *\n * To convert a paragraph into heading 1 when `- ` is typed, using just the command name:\n *\n * ```ts\n * blockAutoformatEditing( editor, plugin, /^\\- $/, 'heading1' );\n * ```\n *\n * To convert a paragraph into heading 1 when `- ` is typed, using just the callback:\n *\n * ```ts\n * blockAutoformatEditing( editor, plugin, /^\\- $/, ( context ) => {\n * \tconst { match } = context;\n * \tconst headingLevel = match[ 1 ].length;\n *\n * \teditor.execute( 'heading', {\n * \t\tformatId: `heading${ headingLevel }`\n * \t} );\n * } );\n * ```\n *\n * @param editor The editor instance.\n * @param plugin The autoformat plugin instance.\n * @param pattern The regular expression to execute on just inserted text. The regular expression is tested against the text\n * from the beginning until the caret position.\n * @param callbackOrCommand The callback to execute or the command to run when the text is matched.\n * In case of providing the callback, it receives the following parameter:\n * * match RegExp.exec() result of matching the pattern to inserted text.\n */ function blockAutoformatEditing(editor, plugin, pattern, callbackOrCommand) {\n    let callback;\n    let command = null;\n    if (typeof callbackOrCommand == 'function') {\n        callback = callbackOrCommand;\n    } else {\n        // We assume that the actual command name was provided.\n        command = editor.commands.get(callbackOrCommand);\n        callback = ()=>{\n            editor.execute(callbackOrCommand);\n        };\n    }\n    editor.model.document.on('change:data', (evt, batch)=>{\n        if (command && !command.isEnabled || !plugin.isEnabled) {\n            return;\n        }\n        const range = first(editor.model.document.selection.getRanges());\n        if (!range.isCollapsed) {\n            return;\n        }\n        if (batch.isUndo || !batch.isLocal) {\n            return;\n        }\n        const changes = Array.from(editor.model.document.differ.getChanges());\n        const entry = changes[0];\n        // Typing is represented by only a single change.\n        if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n            return;\n        }\n        const blockToFormat = entry.position.parent;\n        // Block formatting should be disabled in codeBlocks (#5800).\n        if (blockToFormat.is('element', 'codeBlock')) {\n            return;\n        }\n        // Only list commands and custom callbacks can be applied inside a list.\n        if (blockToFormat.is('element', 'listItem') && typeof callbackOrCommand !== 'function' && ![\n            'numberedList',\n            'bulletedList',\n            'todoList'\n        ].includes(callbackOrCommand)) {\n            return;\n        }\n        // In case a command is bound, do not re-execute it over an existing block style which would result in a style removal.\n        // Instead, just drop processing so that autoformat trigger text is not lost. E.g. writing \"# \" in a level 1 heading.\n        if (command && command.value === true) {\n            return;\n        }\n        const firstNode = blockToFormat.getChild(0);\n        const firstNodeRange = editor.model.createRangeOn(firstNode);\n        // Range is only expected to be within or at the very end of the first text node.\n        if (!firstNodeRange.containsRange(range) && !range.end.isEqual(firstNodeRange.end)) {\n            return;\n        }\n        const match = pattern.exec(firstNode.data.substr(0, range.end.offset));\n        // ...and this text node's data match the pattern.\n        if (!match) {\n            return;\n        }\n        // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n        editor.model.enqueueChange((writer)=>{\n            // Matched range.\n            const start = writer.createPositionAt(blockToFormat, 0);\n            const end = writer.createPositionAt(blockToFormat, match[0].length);\n            const range = new LiveRange(start, end);\n            const wasChanged = callback({\n                match\n            });\n            // Remove matched text.\n            if (wasChanged !== false) {\n                writer.remove(range);\n                const selectionRange = editor.model.document.selection.getFirstRange();\n                const blockRange = writer.createRangeIn(blockToFormat);\n                // If the block is empty and the document selection has been moved when\n                // applying formatting (e.g. is now in newly created block).\n                if (blockToFormat.isEmpty && !blockRange.isEqual(selectionRange) && !blockRange.containsRange(selectionRange, true)) {\n                    writer.remove(blockToFormat);\n                }\n            }\n            range.detach();\n            editor.model.enqueueChange(()=>{\n                const deletePlugin = editor.plugins.get('Delete');\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    });\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the {@link module:autoformat/inlineautoformatediting~inlineAutoformatEditing `inlineAutoformatEditing`} documentation\n * to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n *\n * @module autoformat/inlineautoformatediting\n */ /**\n * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n *\n * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n * On every {@link module:engine/model/document~Document#event:change:data data change} in the model document\n * the autoformatting engine checks the text on the left of the selection\n * and executes the provided action if the text matches given criteria (regular expression or callback).\n *\n * @param editor The editor instance.\n * @param plugin The autoformat plugin instance.\n * @param testRegexpOrCallback The regular expression or callback to execute on text.\n * Provided regular expression *must* have three capture groups. The first and the third capture group\n * should match opening and closing delimiters. The second capture group should match the text to format.\n *\n * ```ts\n * // Matches the `**bold text**` pattern.\n * // There are three capturing groups:\n * // - The first to match the starting `**` delimiter.\n * // - The second to match the text to format.\n * // - The third to match the ending `**` delimiter.\n * inlineAutoformatEditing( editor, plugin, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, formatCallback );\n * ```\n *\n * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n * The function should return proper \"ranges\" to delete and format.\n *\n * ```ts\n * {\n * \tremove: [\n * \t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n * \t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n * \t],\n * \tformat: [\n * \t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n * \t]\n * }\n * ```\n *\n * @param formatCallback A callback to apply actual formatting.\n * It should return `false` if changes should not be applied (e.g. if a command is disabled).\n *\n * ```ts\n * inlineAutoformatEditing( editor, plugin, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n * \tconst command = editor.commands.get( 'bold' );\n *\n * \tif ( !command.isEnabled ) {\n * \t\treturn false;\n * \t}\n *\n * \tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n *\n * \tfor ( let range of validRanges ) {\n * \t\twriter.setAttribute( 'bold', true, range );\n * \t}\n * } );\n * ```\n */ function inlineAutoformatEditing(editor, plugin, testRegexpOrCallback, formatCallback) {\n    let regExp;\n    let testCallback;\n    if (testRegexpOrCallback instanceof RegExp) {\n        regExp = testRegexpOrCallback;\n    } else {\n        testCallback = testRegexpOrCallback;\n    }\n    // A test callback run on changed text.\n    testCallback = testCallback || ((text)=>{\n        let result;\n        const remove = [];\n        const format = [];\n        while((result = regExp.exec(text)) !== null){\n            // There should be full match and 3 capture groups.\n            if (result && result.length < 4) {\n                break;\n            }\n            let { index, '1': leftDel, '2': content, '3': rightDel } = result;\n            // Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n            const found = leftDel + content + rightDel;\n            index += result[0].length - found.length;\n            // Start and End offsets of delimiters to remove.\n            const delStart = [\n                index,\n                index + leftDel.length\n            ];\n            const delEnd = [\n                index + leftDel.length + content.length,\n                index + leftDel.length + content.length + rightDel.length\n            ];\n            remove.push(delStart);\n            remove.push(delEnd);\n            format.push([\n                index + leftDel.length,\n                index + leftDel.length + content.length\n            ]);\n        }\n        return {\n            remove,\n            format\n        };\n    });\n    editor.model.document.on('change:data', (evt, batch)=>{\n        if (batch.isUndo || !batch.isLocal || !plugin.isEnabled) {\n            return;\n        }\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Do nothing if selection is not collapsed.\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const changes = Array.from(model.document.differ.getChanges());\n        const entry = changes[0];\n        // Typing is represented by only a single change.\n        if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n            return;\n        }\n        const focus = selection.focus;\n        const block = focus.parent;\n        const { text, range } = getTextAfterCode(model.createRange(model.createPositionAt(block, 0), focus), model);\n        const testOutput = testCallback(text);\n        const rangesToFormat = testOutputToRanges(range.start, testOutput.format, model);\n        const rangesToRemove = testOutputToRanges(range.start, testOutput.remove, model);\n        if (!(rangesToFormat.length && rangesToRemove.length)) {\n            return;\n        }\n        // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n        model.enqueueChange((writer)=>{\n            // Apply format.\n            const hasChanged = formatCallback(writer, rangesToFormat);\n            // Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n            if (hasChanged === false) {\n                return;\n            }\n            // Remove delimiters - use reversed order to not mix the offsets while removing.\n            for (const range of rangesToRemove.reverse()){\n                writer.remove(range);\n            }\n            model.enqueueChange(()=>{\n                const deletePlugin = editor.plugins.get('Delete');\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    });\n}\n/**\n * Converts output of the test function provided to the inlineAutoformatEditing and converts it to the model ranges\n * inside provided block.\n */ function testOutputToRanges(start, arrays, model) {\n    return arrays.filter((array)=>array[0] !== undefined && array[1] !== undefined).map((array)=>{\n        return model.createRange(start.getShiftedBy(array[0]), start.getShiftedBy(array[1]));\n    });\n}\n/**\n * Returns the last text line after the last code element from the given range.\n * It is similar to {@link module:typing/utils/getlasttextline.getLastTextLine `getLastTextLine()`},\n * but it ignores any text before the last `code`.\n */ function getTextAfterCode(range, model) {\n    let start = range.start;\n    const text = Array.from(range.getItems()).reduce((rangeText, node)=>{\n        // Trim text to a last occurrence of an inline element and update range start.\n        if (!(node.is('$text') || node.is('$textProxy')) || node.getAttribute('code')) {\n            start = model.createPositionAfter(node);\n            return '';\n        }\n        return rangeText + node.data;\n    }, '');\n    return {\n        text,\n        range: model.createRange(start, range.end)\n    };\n}\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting} feature guide\n * and the {@glink api/autoformat package page}.\n */ class Autoformat extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Autoformat';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        this._addListAutoformats();\n        this._addBasicStylesAutoformats();\n        this._addHeadingAutoformats();\n        this._addBlockQuoteAutoformats();\n        this._addCodeBlockAutoformats();\n        this._addHorizontalLineAutoformats();\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Revert autoformatting action'),\n                    keystroke: 'Backspace'\n                }\n            ]\n        });\n    }\n    /**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed into a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed into a numbered list (\"1\" can be any digit or a list of digits).\n\t * - `[] ` or `[ ] ` &ndash; A paragraph will be changed into a to-do list.\n\t * - `[x] ` or `[ x ] ` &ndash; A paragraph will be changed into a checked to-do list.\n\t */ _addListAutoformats() {\n        const commands = this.editor.commands;\n        if (commands.get('bulletedList')) {\n            blockAutoformatEditing(this.editor, this, /^[*-]\\s$/, 'bulletedList');\n        }\n        if (commands.get('numberedList')) {\n            blockAutoformatEditing(this.editor, this, /^1[.|)]\\s$/, 'numberedList');\n        }\n        if (commands.get('todoList')) {\n            blockAutoformatEditing(this.editor, this, /^\\[\\s?\\]\\s$/, 'todoList');\n        }\n        if (commands.get('checkTodoList')) {\n            blockAutoformatEditing(this.editor, this, /^\\[\\s?x\\s?\\]\\s$/, ()=>{\n                this.editor.execute('todoList');\n                this.editor.execute('checkTodoList');\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic}, {@link module:basic-styles/code~Code}\n\t * and {@link module:basic-styles/strikethrough~Strikethrough}\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code,\n\t * - `~~foobar~~` &ndash; `~~` characters are removed and `foobar` is set to strikethrough.\n\t */ _addBasicStylesAutoformats() {\n        const commands = this.editor.commands;\n        if (commands.get('bold')) {\n            const boldCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'bold');\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback);\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(__)([^_]+)(__)$/g, boldCallback);\n        }\n        if (commands.get('italic')) {\n            const italicCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'italic');\n            // The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n            // text before the pattern (e.g. `(?:^|[^\\*])`).\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*)([^*_]+)(\\*)$/g, italicCallback);\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(_)([^_]+)(_)$/g, italicCallback);\n        }\n        if (commands.get('code')) {\n            const codeCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'code');\n            inlineAutoformatEditing(this.editor, this, /(`)([^`]+)(`)$/g, codeCallback);\n        }\n        if (commands.get('strikethrough')) {\n            const strikethroughCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'strikethrough');\n            inlineAutoformatEditing(this.editor, this, /(~~)([^~]+)(~~)$/g, strikethroughCallback);\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with a `heading1` value will be executed when typing `#`,\n\t * * `heading` with a `heading2` value will be executed when typing `##`,\n\t * * ... up to `heading6` for `######`.\n\t */ _addHeadingAutoformats() {\n        const command = this.editor.commands.get('heading');\n        if (command) {\n            command.modelElements.filter((name)=>name.match(/^heading[1-6]$/)).forEach((modelName)=>{\n                const level = modelName[7];\n                const pattern = new RegExp(`^(#{${level}})\\\\s$`);\n                blockAutoformatEditing(this.editor, this, pattern, ()=>{\n                    // Should only be active if command is enabled and heading style associated with pattern is inactive.\n                    if (!command.isEnabled || command.value === modelName) {\n                        return false;\n                    }\n                    this.editor.execute('heading', {\n                        value: modelName\n                    });\n                });\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t */ _addBlockQuoteAutoformats() {\n        if (this.editor.commands.get('blockQuote')) {\n            blockAutoformatEditing(this.editor, this, /^>\\s$/, 'blockQuote');\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:code-block/codeblock~CodeBlock}.\n\t *\n\t * When typed:\n\t * - `` ``` `` &ndash; A paragraph will be changed to a code block.\n\t */ _addCodeBlockAutoformats() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        if (editor.commands.get('codeBlock')) {\n            blockAutoformatEditing(editor, this, /^```$/, ()=>{\n                if (selection.getFirstPosition().parent.is('element', 'listItem')) {\n                    return false;\n                }\n                this.editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:horizontal-line/horizontalline~HorizontalLine}.\n\t *\n\t * When typed:\n\t * - `` --- `` &ndash; Will be replaced with a horizontal line.\n\t */ _addHorizontalLineAutoformats() {\n        if (this.editor.commands.get('horizontalLine')) {\n            blockAutoformatEditing(this.editor, this, /^---$/, 'horizontalLine');\n        }\n    }\n}\n/**\n * Helper function for getting `inlineAutoformatEditing` callbacks that checks if command is enabled.\n */ function getCallbackFunctionForInlineAutoformat(editor, attributeKey) {\n    return (writer, rangesToFormat)=>{\n        const command = editor.commands.get(attributeKey);\n        if (!command.isEnabled) {\n            return false;\n        }\n        const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n        for (const range of validRanges){\n            writer.setAttribute(attributeKey, true, range);\n        }\n        // After applying attribute to the text, remove given attribute from the selection.\n        // This way user is able to type a text without attribute used by auto formatter.\n        writer.removeSelectionAttribute(attributeKey);\n    };\n}\n\nexport { Autoformat, blockAutoformatEditing, inlineAutoformatEditing };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { debounce } from 'lodash-es';\n\n/* globals window */ /**\n * The {@link module:autosave/autosave~Autosave} plugin allows you to automatically save the data (e.g. send it to the server)\n * when needed (when the user changed the content).\n *\n * It listens to the {@link module:engine/model/document~Document#event:change:data `editor.model.document#change:data`}\n * and `window#beforeunload` events and calls the\n * {@link module:autosave/autosave~AutosaveAdapter#save `config.autosave.save()`} function.\n *\n * ```ts\n * ClassicEditor\n * \t.create( document.querySelector( '#editor' ), {\n * \t\tplugins: [ ArticlePluginSet, Autosave ],\n * \t\ttoolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'undo', 'redo' ],\n * \t\timage: {\n * \t\t\ttoolbar: [ 'imageStyle:block', 'imageStyle:side', '|', 'toggleImageCaption', 'imageTextAlternative' ],\n * \t\t},\n * \t\tautosave: {\n * \t\t\tsave( editor: Editor ) {\n * \t\t\t\t// The saveData() function must return a promise\n * \t\t\t\t// which should be resolved when the data is successfully saved.\n * \t\t\t\treturn saveData( editor.getData() );\n * \t\t\t}\n * \t\t}\n * \t} );\n * ```\n *\n * Read more about this feature in the {@glink features/autosave Autosave} feature guide.\n */ class Autosave extends Plugin {\n    /**\n\t * The adapter is an object with a `save()` method. That method will be called whenever\n\t * the data changes. It might be called some time after the change,\n\t * since the event is throttled for performance reasons.\n\t */ adapter;\n    /**\n\t * Debounced save method. The `save()` method is called the specified `waitingTime` after `debouncedSave()` is called,\n\t * unless a new action happens in the meantime.\n\t */ _debouncedSave;\n    /**\n\t * The last saved document version.\n\t */ _lastDocumentVersion;\n    /**\n\t * Promise used for asynchronous save calls.\n\t *\n\t * Created to handle the autosave call to an external data source. It resolves when that call is finished. It is re-used if\n\t * save is called before the promise has been resolved. It is set to `null` if there is no call in progress.\n\t */ _savePromise;\n    /**\n\t * DOM emitter.\n\t */ _domEmitter;\n    /**\n\t * The configuration of this plugins.\n\t */ _config;\n    /**\n\t * Editor's pending actions manager.\n\t */ _pendingActions;\n    /**\n\t * Informs whether there should be another autosave callback performed, immediately after current autosave callback finishes.\n\t *\n\t * This is set to `true` when there is a save request while autosave callback is already being processed\n\t * and the model has changed since the last save.\n\t */ _makeImmediateSave;\n    /**\n\t * An action that will be added to the pending action manager for actions happening in that plugin.\n\t */ _action = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Autosave';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PendingActions\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        const config = editor.config.get('autosave') || {};\n        // A minimum amount of time that needs to pass after the last action.\n        // After that time the provided save callbacks are being called.\n        const waitingTime = config.waitingTime || 1000;\n        this.set('state', 'synchronized');\n        this._debouncedSave = debounce(this._save.bind(this), waitingTime);\n        this._lastDocumentVersion = editor.model.document.version;\n        this._savePromise = null;\n        this._domEmitter = new (DomEmitterMixin())();\n        this._config = config;\n        this._pendingActions = editor.plugins.get(PendingActions);\n        this._makeImmediateSave = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        // Add the listener only after the editor is initialized to prevent firing save callback on data init.\n        this.listenTo(editor, 'ready', ()=>{\n            this.listenTo(doc, 'change:data', (evt, batch)=>{\n                if (!this._saveCallbacks.length) {\n                    return;\n                }\n                if (!batch.isLocal) {\n                    return;\n                }\n                if (this.state === 'synchronized') {\n                    this.state = 'waiting';\n                    // Set pending action already when we are waiting for the autosave callback.\n                    this._setPendingAction();\n                }\n                if (this.state === 'waiting') {\n                    this._debouncedSave();\n                }\n            // If the plugin is in `saving` state, it will change its state later basing on the `document.version`.\n            // If the `document.version` will be higher than stored `#_lastDocumentVersion`, then it means, that some `change:data`\n            // event has fired in the meantime.\n            });\n        });\n        // Flush on the editor's destroy listener with the highest priority to ensure that\n        // `editor.getData()` will be called before plugins are destroyed.\n        this.listenTo(editor, 'destroy', ()=>this._flush(), {\n            priority: 'highest'\n        });\n        // It's not possible to easy test it because karma uses `beforeunload` event\n        // to warn before full page reload and this event cannot be dispatched manually.\n        /* istanbul ignore next -- @preserve */ this._domEmitter.listenTo(window, 'beforeunload', (evtInfo, domEvt)=>{\n            if (this._pendingActions.hasAny) {\n                domEvt.returnValue = this._pendingActions.first.message;\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        // There's no need for canceling or flushing the throttled save, as\n        // it's done on the editor's destroy event with the highest priority.\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n\t * Immediately calls autosave callback. All previously queued (debounced) callbacks are cleared. If there is already an autosave\n\t * callback in progress, then the requested save will be performed immediately after the current callback finishes.\n\t *\n\t * @returns A promise that will be resolved when the autosave callback is finished.\n\t */ save() {\n        this._debouncedSave.cancel();\n        return this._save();\n    }\n    /**\n\t * Invokes the remaining `_save()` method call.\n\t */ _flush() {\n        this._debouncedSave.flush();\n    }\n    /**\n\t * If the adapter is set and a new document version exists,\n\t * the `_save()` method creates a pending action and calls the `adapter.save()` method.\n\t * It waits for the result and then removes the created pending action.\n\t *\n\t * @returns A promise that will be resolved when the autosave callback is finished.\n\t */ _save() {\n        if (this._savePromise) {\n            this._makeImmediateSave = this.editor.model.document.version > this._lastDocumentVersion;\n            return this._savePromise;\n        }\n        // Make sure there is a pending action (in case if `_save()` was called through manual `save()` call).\n        this._setPendingAction();\n        this.state = 'saving';\n        this._lastDocumentVersion = this.editor.model.document.version;\n        // Wait one promise cycle to be sure that save callbacks are not called inside a conversion or when the editor's state changes.\n        this._savePromise = Promise.resolve()// Make autosave callback.\n        .then(()=>Promise.all(this._saveCallbacks.map((cb)=>cb(this.editor))))// When the autosave callback is finished, always clear `this._savePromise`, no matter if it was successful or not.\n        .finally(()=>{\n            this._savePromise = null;\n        })// If the save was successful, we have three scenarios:\n        //\n        // 1. If a save was requested when an autosave callback was already processed, we need to immediately call\n        // another autosave callback. In this case, `this._savePromise` will not be resolved until the next callback is done.\n        // 2. Otherwise, if changes happened to the model, make a delayed autosave callback (like the change just happened).\n        // 3. If no changes happened to the model, return to the `synchronized` state.\n        .then(()=>{\n            if (this._makeImmediateSave) {\n                this._makeImmediateSave = false;\n                // Start another autosave callback. Return a promise that will be resolved after the new autosave callback.\n                // This way promises returned by `_save()` will not be resolved until all changes are saved.\n                //\n                // If `save()` was called when another (most often automatic) autosave callback was already processed,\n                // the promise returned by `save()` call will be resolved only after new changes have been saved.\n                //\n                // Note that it would not work correctly if `this._savePromise` is not cleared.\n                return this._save();\n            } else {\n                if (this.editor.model.document.version > this._lastDocumentVersion) {\n                    this.state = 'waiting';\n                    this._debouncedSave();\n                } else {\n                    this.state = 'synchronized';\n                    this._pendingActions.remove(this._action);\n                    this._action = null;\n                }\n            }\n        })// In case of an error, retry the autosave callback after a delay (and also throw the original error).\n        .catch((err)=>{\n            // Change state to `error` so that listeners handling autosave error can be called.\n            this.state = 'error';\n            // Then, immediately change to the `saving` state as described above.\n            // Being in the `saving` state ensures that the autosave callback won't be delayed further by the `change:data` listener.\n            this.state = 'saving';\n            this._debouncedSave();\n            throw err;\n        });\n        return this._savePromise;\n    }\n    /**\n\t * Creates a pending action if it is not set already.\n\t */ _setPendingAction() {\n        const t = this.editor.t;\n        if (!this._action) {\n            this._action = this._pendingActions.add(t('Saving changes'));\n        }\n    }\n    /**\n\t * Saves callbacks.\n\t */ get _saveCallbacks() {\n        const saveCallbacks = [];\n        if (this.adapter && this.adapter.save) {\n            saveCallbacks.push(this.adapter.save);\n        }\n        if (this._config.save) {\n            saveCallbacks.push(this._config.save);\n        }\n        return saveCallbacks;\n    }\n}\n\nexport { Autosave };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { MenuBarMenuListItemButtonView, ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { TwoStepCaretMovement, inlineHighlight } from '@ckeditor/ckeditor5-typing/dist/index.js';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n */ class AttributeCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeKey;\n    /**\n\t * @param attributeKey Attribute that will be set by the command.\n\t */ constructor(editor, attributeKey){\n        super(editor);\n        this.attributeKey = attributeKey;\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = this._getValueFromFirstAllowedNode();\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n    }\n    /**\n\t * Executes the command &ndash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`,\n\t * the command will apply the attribute, otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const value = options.forceValue === undefined ? !this.value : options.forceValue;\n        model.change((writer)=>{\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute(this.attributeKey, true);\n                } else {\n                    writer.removeSelectionAttribute(this.attributeKey);\n                }\n            } else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n                for (const range of ranges){\n                    if (value) {\n                        writer.setAttribute(this.attributeKey, value, range);\n                    } else {\n                        writer.removeAttribute(this.attributeKey, range);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @returns The attribute value.\n\t */ _getValueFromFirstAllowedNode() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (selection.isCollapsed) {\n            return selection.hasAttribute(this.attributeKey);\n        }\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if (schema.checkAttribute(item, this.attributeKey)) {\n                    return item.hasAttribute(this.attributeKey);\n                }\n            }\n        }\n        return false;\n    }\n}\n\nconst BOLD$1 = 'bold';\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n */ class BoldEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BoldEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow bold attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: BOLD$1\n        });\n        editor.model.schema.setAttributeProperties(BOLD$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: BOLD$1,\n            view: 'strong',\n            upcastAlso: [\n                'b',\n                (viewElement)=>{\n                    const fontWeight = viewElement.getStyle('font-weight');\n                    if (!fontWeight) {\n                        return null;\n                    }\n                    // Value of the `font-weight` attribute can be defined as a string or a number.\n                    if (fontWeight == 'bold' || Number(fontWeight) >= 600) {\n                        return {\n                            name: true,\n                            styles: [\n                                'font-weight'\n                            ]\n                        };\n                    }\n                    return null;\n                }\n            ]\n        });\n        // Create bold command.\n        editor.commands.add(BOLD$1, new AttributeCommand(editor, BOLD$1));\n        // Set the Ctrl+B keystroke.\n        editor.keystrokes.set('CTRL+B', BOLD$1);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Bold text'),\n                    keystroke: 'CTRL+B'\n                }\n            ]\n        });\n    }\n}\n\n/**\n * Returns a function that creates a (toolbar or menu bar) button for a basic style feature.\n */ function getButtonCreator({ editor, commandName, plugin, icon, label, keystroke }) {\n    return (ButtonClass)=>{\n        const command = editor.commands.get(commandName);\n        const view = new ButtonClass(editor.locale);\n        view.set({\n            label,\n            icon,\n            keystroke,\n            isToggleable: true\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        view.bind('isOn').to(command, 'value');\n        if (view instanceof MenuBarMenuListItemButtonView) {\n            view.set({\n                role: 'menuitemcheckbox'\n            });\n        } else {\n            view.set({\n                tooltip: true\n            });\n        }\n        // Execute the command.\n        plugin.listenTo(view, 'execute', ()=>{\n            editor.execute(commandName);\n            editor.editing.view.focus();\n        });\n        return view;\n    };\n}\n\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n */ class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BoldUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: BOLD,\n            plugin: this,\n            icon: icons.bold,\n            label: t('Bold'),\n            keystroke: 'CTRL+B'\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + BOLD, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n */ class Bold extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            BoldEditing,\n            BoldUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Bold';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst CODE$1 = 'code';\nconst HIGHLIGHT_CLASS = 'ck-code_selected';\n/**\n * The code editing feature.\n *\n * It registers the `'code'` command and introduces the `code` attribute in the model which renders to the view\n * as a `<code>` element.\n */ class CodeEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TwoStepCaretMovement\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow code attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: CODE$1\n        });\n        editor.model.schema.setAttributeProperties(CODE$1, {\n            isFormatting: true,\n            copyOnEnter: false\n        });\n        editor.conversion.attributeToElement({\n            model: CODE$1,\n            view: 'code',\n            upcastAlso: {\n                styles: {\n                    'word-wrap': 'break-word'\n                }\n            }\n        });\n        // Create code command.\n        editor.commands.add(CODE$1, new AttributeCommand(editor, CODE$1));\n        // Enable two-step caret movement for `code` attribute.\n        editor.plugins.get(TwoStepCaretMovement).registerAttribute(CODE$1);\n        // Setup highlight over selected element.\n        inlineHighlight(editor, CODE$1, 'code', HIGHLIGHT_CLASS);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Move out of an inline code style'),\n                    keystroke: [\n                        [\n                            'arrowleft',\n                            'arrowleft'\n                        ],\n                        [\n                            'arrowright',\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n}\n\nvar codeIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.5 5.7 5.2 3.9v1.3l-5.6 4c-.1.2-.3.2-.5.2-.3-.1-.6-.7-.6-1l.3-.4 4.7-3.5L11.5 7l-.2-.2c-.1-.3-.1-.6 0-.8.2-.2.5-.4.8-.4a.8.8 0 0 1 .4.1zm-5.2 0L2 9.6v1.3l5.6 4c.1.2.3.2.5.2.3-.1.7-.7.6-1 0-.1 0-.3-.2-.4l-5-3.5L8.2 7l.2-.2c.1-.3.1-.6 0-.8-.2-.2-.5-.4-.8-.4a.8.8 0 0 0-.3.1z\\\"/></svg>\";\n\nconst CODE = 'code';\n/**\n * The code UI feature. It introduces the Code button.\n */ class CodeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: CODE,\n            plugin: this,\n            icon: codeIcon,\n            label: t('Code')\n        });\n        // Add code button to feature components.\n        editor.ui.componentFactory.add(CODE, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + CODE, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The code feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/code/codeediting~CodeEditing code editing feature}\n * and {@link module:basic-styles/code/codeui~CodeUI code UI feature}.\n */ class Code extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CodeEditing,\n            CodeUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Code';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst ITALIC$1 = 'italic';\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n */ class ItalicEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ItalicEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow italic attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: ITALIC$1\n        });\n        editor.model.schema.setAttributeProperties(ITALIC$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: ITALIC$1,\n            view: 'i',\n            upcastAlso: [\n                'em',\n                {\n                    styles: {\n                        'font-style': 'italic'\n                    }\n                }\n            ]\n        });\n        // Create italic command.\n        editor.commands.add(ITALIC$1, new AttributeCommand(editor, ITALIC$1));\n        // Set the Ctrl+I keystroke.\n        editor.keystrokes.set('CTRL+I', ITALIC$1);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Italic text'),\n                    keystroke: 'CTRL+I'\n                }\n            ]\n        });\n    }\n}\n\nvar italicIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m9.586 14.633.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\";\n\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n */ class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ItalicUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: ITALIC,\n            plugin: this,\n            icon: italicIcon,\n            keystroke: 'CTRL+I',\n            label: t('Italic')\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + ITALIC, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n */ class Italic extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ItalicEditing,\n            ItalicUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Italic';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst STRIKETHROUGH$1 = 'strikethrough';\n/**\n * The strikethrough editing feature.\n *\n * It registers the `'strikethrough'` command, the <kbd>Ctrl+Shift+X</kbd> keystroke and introduces the\n * `strikethroughsthrough` attribute in the model which renders to the view\n * as a `<s>` element.\n */ class StrikethroughEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StrikethroughEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow strikethrough attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: STRIKETHROUGH$1\n        });\n        editor.model.schema.setAttributeProperties(STRIKETHROUGH$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: STRIKETHROUGH$1,\n            view: 's',\n            upcastAlso: [\n                'del',\n                'strike',\n                {\n                    styles: {\n                        'text-decoration': 'line-through'\n                    }\n                }\n            ]\n        });\n        // Create strikethrough command.\n        editor.commands.add(STRIKETHROUGH$1, new AttributeCommand(editor, STRIKETHROUGH$1));\n        // Set the Ctrl+Shift+X keystroke.\n        editor.keystrokes.set('CTRL+SHIFT+X', 'strikethrough');\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Strikethrough text'),\n                    keystroke: 'CTRL+SHIFT+X'\n                }\n            ]\n        });\n    }\n}\n\nvar strikethroughIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9 6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z\\\"/><path d=\\\"M3 10.5V9h14v1.5z\\\"/></svg>\";\n\nconst STRIKETHROUGH = 'strikethrough';\n/**\n * The strikethrough UI feature. It introduces the Strikethrough button.\n */ class StrikethroughUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StrikethroughUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: STRIKETHROUGH,\n            plugin: this,\n            icon: strikethroughIcon,\n            keystroke: 'CTRL+SHIFT+X',\n            label: t('Strikethrough')\n        });\n        // Add strikethrough button to feature components.\n        editor.ui.componentFactory.add(STRIKETHROUGH, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + STRIKETHROUGH, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The strikethrough feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/strikethrough/strikethroughediting~StrikethroughEditing} and\n * {@link module:basic-styles/strikethrough/strikethroughui~StrikethroughUI} plugins.\n */ class Strikethrough extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StrikethroughEditing,\n            StrikethroughUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Strikethrough';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst SUBSCRIPT$1 = 'subscript';\n/**\n * The subscript editing feature.\n *\n * It registers the `sub` command and introduces the `sub` attribute in the model which renders to the view\n * as a `<sub>` element.\n */ class SubscriptEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SubscriptEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow sub attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: SUBSCRIPT$1\n        });\n        editor.model.schema.setAttributeProperties(SUBSCRIPT$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: SUBSCRIPT$1,\n            view: 'sub',\n            upcastAlso: [\n                {\n                    styles: {\n                        'vertical-align': 'sub'\n                    }\n                }\n            ]\n        });\n        // Create sub command.\n        editor.commands.add(SUBSCRIPT$1, new AttributeCommand(editor, SUBSCRIPT$1));\n    }\n}\n\nvar subscriptIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m7.03 10.349 3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82zm8.147 7.829h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309z\\\"/></svg>\";\n\nconst SUBSCRIPT = 'subscript';\n/**\n * The subscript UI feature. It introduces the Subscript button.\n */ class SubscriptUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SubscriptUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: SUBSCRIPT,\n            plugin: this,\n            icon: subscriptIcon,\n            label: t('Subscript')\n        });\n        // Add subscript button to feature components.\n        editor.ui.componentFactory.add(SUBSCRIPT, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + SUBSCRIPT, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The subscript feature.\n *\n * It loads the {@link module:basic-styles/subscript/subscriptediting~SubscriptEditing} and\n * {@link module:basic-styles/subscript/subscriptui~SubscriptUI} plugins.\n */ class Subscript extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SubscriptEditing,\n            SubscriptUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Subscript';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst SUPERSCRIPT$1 = 'superscript';\n/**\n * The superscript editing feature.\n *\n * It registers the `super` command and introduces the `super` attribute in the model which renders to the view\n * as a `<super>` element.\n */ class SuperscriptEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SuperscriptEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow super attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: SUPERSCRIPT$1\n        });\n        editor.model.schema.setAttributeProperties(SUPERSCRIPT$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: SUPERSCRIPT$1,\n            view: 'sup',\n            upcastAlso: [\n                {\n                    styles: {\n                        'vertical-align': 'super'\n                    }\n                }\n            ]\n        });\n        // Create super command.\n        editor.commands.add(SUPERSCRIPT$1, new AttributeCommand(editor, SUPERSCRIPT$1));\n    }\n}\n\nvar superscriptIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.677 8.678h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309zM7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82z\\\"/></svg>\";\n\nconst SUPERSCRIPT = 'superscript';\n/**\n * The superscript UI feature. It introduces the Superscript button.\n */ class SuperscriptUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SuperscriptUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: SUPERSCRIPT,\n            plugin: this,\n            icon: superscriptIcon,\n            label: t('Superscript')\n        });\n        // Add superscript button to feature components.\n        editor.ui.componentFactory.add(SUPERSCRIPT, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + SUPERSCRIPT, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The superscript feature.\n *\n * It loads the {@link module:basic-styles/superscript/superscriptediting~SuperscriptEditing} and\n * {@link module:basic-styles/superscript/superscriptui~SuperscriptUI} plugins.\n */ class Superscript extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SuperscriptEditing,\n            SuperscriptUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Superscript';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst UNDERLINE$1 = 'underline';\n/**\n * The underline editing feature.\n *\n * It registers the `'underline'` command, the <kbd>Ctrl+U</kbd> keystroke\n * and introduces the `underline` attribute in the model which renders to the view as an `<u>` element.\n */ class UnderlineEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UnderlineEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow strikethrough attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: UNDERLINE$1\n        });\n        editor.model.schema.setAttributeProperties(UNDERLINE$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: UNDERLINE$1,\n            view: 'u',\n            upcastAlso: {\n                styles: {\n                    'text-decoration': 'underline'\n                }\n            }\n        });\n        // Create underline command.\n        editor.commands.add(UNDERLINE$1, new AttributeCommand(editor, UNDERLINE$1));\n        // Set the Ctrl+U keystroke.\n        editor.keystrokes.set('CTRL+U', 'underline');\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Underline text'),\n                    keystroke: 'CTRL+U'\n                }\n            ]\n        });\n    }\n}\n\nvar underlineIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z\\\"/></svg>\";\n\nconst UNDERLINE = 'underline';\n/**\n * The underline UI feature. It introduces the Underline button.\n */ class UnderlineUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UnderlineUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: UNDERLINE,\n            plugin: this,\n            icon: underlineIcon,\n            label: t('Underline'),\n            keystroke: 'CTRL+U'\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(UNDERLINE, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + UNDERLINE, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The underline feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/underline/underlineediting~UnderlineEditing} and\n * {@link module:basic-styles/underline/underlineui~UnderlineUI} plugins.\n */ class Underline extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            UnderlineEditing,\n            UnderlineUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Underline';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { AttributeCommand, Bold, BoldEditing, BoldUI, Code, CodeEditing, CodeUI, Italic, ItalicEditing, ItalicUI, Strikethrough, StrikethroughEditing, StrikethroughUI, Subscript, SubscriptEditing, SubscriptUI, Superscript, SuperscriptEditing, SuperscriptUI, Underline, UnderlineEditing, UnderlineUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */ class BlockQuoteCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #value is on}, all top-most block quotes within\n\t * the selection will be removed. If it is off, all selected blocks will be wrapped with\n\t * a block quote.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a block quote,\n\t * otherwise the command will remove the block quote. If not set, the command will act basing on its current value.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = options.forceValue === undefined ? !this.value : options.forceValue;\n        model.change((writer)=>{\n            if (!value) {\n                this._removeQuote(writer, blocks.filter(findQuote));\n            } else {\n                const blocksToQuote = blocks.filter((block)=>{\n                    // Already quoted blocks needs to be considered while quoting too\n                    // in order to reuse their <bQ> elements.\n                    return findQuote(block) || checkCanBeQuoted(schema, block);\n                });\n                this._applyQuote(writer, blocksToQuote);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        // In the current implementation, the block quote must be an immediate parent of a block element.\n        return !!(firstBlock && findQuote(firstBlock));\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return checkCanBeQuoted(schema, firstBlock);\n    }\n    /**\n\t * Removes the quote from given blocks.\n\t *\n\t * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n\t * start it or end it, then the quote will be split (if needed) and the blocks\n\t * will be moved out of it, so other quoted blocks remained quoted.\n\t */ _removeQuote(writer, blocks) {\n        // Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n        getRangesOfBlockGroups(writer, blocks).reverse().forEach((groupRange)=>{\n            if (groupRange.start.isAtStart && groupRange.end.isAtEnd) {\n                writer.unwrap(groupRange.start.parent);\n                return;\n            }\n            // The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n            if (groupRange.start.isAtStart) {\n                const positionBefore = writer.createPositionBefore(groupRange.start.parent);\n                writer.move(groupRange, positionBefore);\n                return;\n            }\n            // The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n            // so we move the items there.\n            if (!groupRange.end.isAtEnd) {\n                writer.split(groupRange.end);\n            }\n            // Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n            const positionAfter = writer.createPositionAfter(groupRange.end.parent);\n            writer.move(groupRange, positionAfter);\n        });\n    }\n    /**\n\t * Applies the quote to given blocks.\n\t */ _applyQuote(writer, blocks) {\n        const quotesToMerge = [];\n        // Quote all groups of block. Iterate in the reverse order to not break following ranges.\n        getRangesOfBlockGroups(writer, blocks).reverse().forEach((groupRange)=>{\n            let quote = findQuote(groupRange.start);\n            if (!quote) {\n                quote = writer.createElement('blockQuote');\n                writer.wrap(groupRange, quote);\n            }\n            quotesToMerge.push(quote);\n        });\n        // Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n        // the <bQ> elements in the source order (due to how merge works – it moves the right element's content\n        // to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n        // we want to keep the reference to the first (furthest left) one.\n        quotesToMerge.reverse().reduce((currentQuote, nextQuote)=>{\n            if (currentQuote.nextSibling == nextQuote) {\n                writer.merge(writer.createPositionAfter(currentQuote));\n                return currentQuote;\n            }\n            return nextQuote;\n        });\n    }\n}\nfunction findQuote(elementOrPosition) {\n    return elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n}\n/**\n * Returns a minimal array of ranges containing groups of subsequent blocks.\n *\n * content:         abcdefgh\n * blocks:          [ a, b, d, f, g, h ]\n * output ranges:   [ab]c[d]e[fgh]\n */ function getRangesOfBlockGroups(writer, blocks) {\n    let startPosition;\n    let i = 0;\n    const ranges = [];\n    while(i < blocks.length){\n        const block = blocks[i];\n        const nextBlock = blocks[i + 1];\n        if (!startPosition) {\n            startPosition = writer.createPositionBefore(block);\n        }\n        if (!nextBlock || block.nextSibling != nextBlock) {\n            ranges.push(writer.createRange(startPosition, writer.createPositionAfter(block)));\n            startPosition = null;\n        }\n        i++;\n    }\n    return ranges;\n}\n/**\n * Checks whether <bQ> can wrap the block.\n */ function checkCanBeQuoted(schema, block) {\n    // TMP will be replaced with schema.checkWrap().\n    const isBQAllowed = schema.checkChild(block.parent, 'blockQuote');\n    const isBlockAllowedInBQ = schema.checkChild([\n        '$root',\n        'blockQuote'\n    ], block);\n    return isBQAllowed && isBlockAllowedInBQ;\n}\n\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */ class BlockQuoteEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BlockQuoteEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Enter,\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        editor.commands.add('blockQuote', new BlockQuoteCommand(editor));\n        schema.register('blockQuote', {\n            inheritAllFrom: '$container'\n        });\n        editor.conversion.elementToElement({\n            model: 'blockQuote',\n            view: 'blockquote'\n        });\n        // Postfixer which cleans incorrect model states connected with block quotes.\n        editor.model.document.registerPostFixer((writer)=>{\n            const changes = editor.model.document.differ.getChanges();\n            for (const entry of changes){\n                if (entry.type == 'insert') {\n                    const element = entry.position.nodeAfter;\n                    if (!element) {\n                        continue;\n                    }\n                    if (element.is('element', 'blockQuote') && element.isEmpty) {\n                        // Added an empty blockQuote - remove it.\n                        writer.remove(element);\n                        return true;\n                    } else if (element.is('element', 'blockQuote') && !schema.checkChild(entry.position, element)) {\n                        // Added a blockQuote in incorrect place. Unwrap it so the content inside is not lost.\n                        writer.unwrap(element);\n                        return true;\n                    } else if (element.is('element')) {\n                        // Just added an element. Check that all children meet the scheme rules.\n                        const range = writer.createRangeIn(element);\n                        for (const child of range.getItems()){\n                            if (child.is('element', 'blockQuote') && !schema.checkChild(writer.createPositionBefore(child), child)) {\n                                writer.unwrap(child);\n                                return true;\n                            }\n                        }\n                    }\n                } else if (entry.type == 'remove') {\n                    const parent = entry.position.parent;\n                    if (parent.is('element', 'blockQuote') && parent.isEmpty) {\n                        // Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n                        writer.remove(parent);\n                        return true;\n                    }\n                }\n            }\n            return false;\n        });\n        const viewDocument = this.editor.editing.view.document;\n        const selection = editor.model.document.selection;\n        const blockQuoteCommand = editor.commands.get('blockQuote');\n        // Overwrite default Enter key behavior.\n        // If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n        this.listenTo(viewDocument, 'enter', (evt, data)=>{\n            if (!selection.isCollapsed || !blockQuoteCommand.value) {\n                return;\n            }\n            const positionParent = selection.getLastPosition().parent;\n            if (positionParent.isEmpty) {\n                editor.execute('blockQuote');\n                editor.editing.view.scrollToTheSelection();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'blockquote'\n        });\n        // Overwrite default Backspace key behavior.\n        // If Backspace key is pressed with selection collapsed in first empty block inside a quote, break the quote.\n        this.listenTo(viewDocument, 'delete', (evt, data)=>{\n            if (data.direction != 'backward' || !selection.isCollapsed || !blockQuoteCommand.value) {\n                return;\n            }\n            const positionParent = selection.getLastPosition().parent;\n            if (positionParent.isEmpty && !positionParent.previousSibling) {\n                editor.execute('blockQuote');\n                editor.editing.view.scrollToTheSelection();\n                data.preventDefault();\n                evt.stop();\n            }\n        }, {\n            context: 'blockquote'\n        });\n    }\n}\n\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */ class BlockQuoteUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BlockQuoteUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('blockQuote', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:blockQuote', ()=>{\n            const buttonView = this._createButton(MenuBarMenuListItemButtonView);\n            buttonView.set({\n                role: 'menuitemcheckbox'\n            });\n            return buttonView;\n        });\n    }\n    /**\n\t * Creates a button for block quote command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('blockQuote');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Block quote'),\n            icon: icons.quote,\n            isToggleable: true\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        view.bind('isOn').to(command, 'value');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('blockQuote');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The block quote plugin.\n *\n * For more information about this feature check the {@glink api/block-quote package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */ class BlockQuote extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            BlockQuoteEditing,\n            BlockQuoteUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BlockQuote';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { BlockQuote, BlockQuoteEditing, BlockQuoteUI };\n//# sourceMappingURL=index.js.map\n","var q=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"#\",\"$\",\"%\",\"*\",\"+\",\",\",\"-\",\".\",\":\",\";\",\"=\",\"?\",\"@\",\"[\",\"]\",\"^\",\"_\",\"{\",\"|\",\"}\",\"~\"],x=t=>{let e=0;for(let r=0;r<t.length;r++){let n=t[r],l=q.indexOf(n);e=e*83+l}return e},p=(t,e)=>{var r=\"\";for(let n=1;n<=e;n++){let l=Math.floor(t)/Math.pow(83,e-n)%83;r+=q[Math.floor(l)]}return r};var f=t=>{let e=t/255;return e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)},h=t=>{let e=Math.max(0,Math.min(1,t));return e<=.0031308?Math.trunc(e*12.92*255+.5):Math.trunc((1.055*Math.pow(e,.4166666666666667)-.055)*255+.5)},F=t=>t<0?-1:1,M=(t,e)=>F(t)*Math.pow(Math.abs(t),e);var d=class extends Error{constructor(e){super(e),this.name=\"ValidationError\",this.message=e}};var C=t=>{if(!t||t.length<6)throw new d(\"The blurhash string must be at least 6 characters\");let e=x(t[0]),r=Math.floor(e/9)+1,n=e%9+1;if(t.length!==4+2*n*r)throw new d(`blurhash length mismatch: length is ${t.length} but it should be ${4+2*n*r}`)},N=t=>{try{C(t)}catch(e){return{result:!1,errorReason:e.message}}return{result:!0}},z=t=>{let e=t>>16,r=t>>8&255,n=t&255;return[f(e),f(r),f(n)]},L=(t,e)=>{let r=Math.floor(t/361),n=Math.floor(t/19)%19,l=t%19;return[M((r-9)/9,2)*e,M((n-9)/9,2)*e,M((l-9)/9,2)*e]},U=(t,e,r,n)=>{C(t),n=n|1;let l=x(t[0]),m=Math.floor(l/9)+1,b=l%9+1,i=(x(t[1])+1)/166,u=new Array(b*m);for(let o=0;o<u.length;o++)if(o===0){let a=x(t.substring(2,6));u[o]=z(a)}else{let a=x(t.substring(4+o*2,6+o*2));u[o]=L(a,i*n)}let c=e*4,s=new Uint8ClampedArray(c*r);for(let o=0;o<r;o++)for(let a=0;a<e;a++){let y=0,B=0,R=0;for(let w=0;w<m;w++)for(let P=0;P<b;P++){let G=Math.cos(Math.PI*a*P/e)*Math.cos(Math.PI*o*w/r),T=u[P+w*b];y+=T[0]*G,B+=T[1]*G,R+=T[2]*G}let V=h(y),I=h(B),E=h(R);s[4*a+0+o*c]=V,s[4*a+1+o*c]=I,s[4*a+2+o*c]=E,s[4*a+3+o*c]=255}return s},j=U;var A=4,D=(t,e,r,n)=>{let l=0,m=0,b=0,g=e*A;for(let u=0;u<e;u++){let c=A*u;for(let s=0;s<r;s++){let o=c+s*g,a=n(u,s);l+=a*f(t[o]),m+=a*f(t[o+1]),b+=a*f(t[o+2])}}let i=1/(e*r);return[l*i,m*i,b*i]},$=t=>{let e=h(t[0]),r=h(t[1]),n=h(t[2]);return(e<<16)+(r<<8)+n},H=(t,e)=>{let r=Math.floor(Math.max(0,Math.min(18,Math.floor(M(t[0]/e,.5)*9+9.5)))),n=Math.floor(Math.max(0,Math.min(18,Math.floor(M(t[1]/e,.5)*9+9.5)))),l=Math.floor(Math.max(0,Math.min(18,Math.floor(M(t[2]/e,.5)*9+9.5))));return r*19*19+n*19+l},O=(t,e,r,n,l)=>{if(n<1||n>9||l<1||l>9)throw new d(\"BlurHash must have between 1 and 9 components\");if(e*r*4!==t.length)throw new d(\"Width and height must match the pixels array\");let m=[];for(let s=0;s<l;s++)for(let o=0;o<n;o++){let a=o==0&&s==0?1:2,y=D(t,e,r,(B,R)=>a*Math.cos(Math.PI*o*B/e)*Math.cos(Math.PI*s*R/r));m.push(y)}let b=m[0],g=m.slice(1),i=\"\",u=n-1+(l-1)*9;i+=p(u,1);let c;if(g.length>0){let s=Math.max(...g.map(a=>Math.max(...a))),o=Math.floor(Math.max(0,Math.min(82,Math.floor(s*166-.5))));c=(o+1)/166,i+=p(o,1)}else c=1,i+=p(0,1);return i+=p($(b),4),g.forEach(s=>{i+=p(H(s,c),2)}),i},S=O;export{d as ValidationError,j as decode,S as encode,N as isBlurhashValid};\n//# sourceMappingURL=index.js.map","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, icons, Command, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, Notification } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Range } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { createElement, toMap, CKEditorError, logError, global, delay, abortableDebounce, retry } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { decode } from 'blurhash';\nimport { FileRepository } from '@ckeditor/ckeditor5-upload/dist/index.js';\nimport { isEqual } from 'lodash-es';\n\n/**\n * Introduces UI components for the `CKBox` plugin.\n *\n * The plugin introduces two UI components to the {@link module:ui/componentfactory~ComponentFactory UI component factory}:\n *\n * * the `'ckbox'` toolbar button,\n * * the `'menuBar:ckbox'` menu bar component, which is by default added to the `'Insert'` menu.\n *\n * It also integrates with the `insertImage` toolbar component and `menuBar:insertImage` menu component.\n */ class CKBoxUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        // Do not register the `ckbox` button if the command does not exist.\n        // This might happen when CKBox library is not loaded on the page.\n        if (!editor.commands.get('ckbox')) {\n            return;\n        }\n        editor.ui.componentFactory.add('ckbox', ()=>this._createFileToolbarButton());\n        editor.ui.componentFactory.add('menuBar:ckbox', ()=>this._createFileMenuBarButton());\n        if (editor.plugins.has('ImageInsertUI')) {\n            editor.plugins.get('ImageInsertUI').registerIntegration({\n                name: 'assetManager',\n                observable: ()=>editor.commands.get('ckbox'),\n                buttonViewCreator: ()=>this._createImageToolbarButton(),\n                formViewCreator: ()=>this._createImageDropdownButton(),\n                menuBarButtonViewCreator: (isOnly)=>this._createImageMenuBarButton(isOnly ? 'insertOnly' : 'insertNested')\n            });\n        }\n    }\n    /**\n\t * Creates the base for various kinds of the button component provided by this feature.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const view = new ButtonClass(locale);\n        const command = editor.commands.get('ckbox');\n        view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n        view.on('execute', ()=>{\n            editor.execute('ckbox');\n        });\n        return view;\n    }\n    /**\n\t * Creates a simple toolbar button for files management, with an icon and a tooltip.\n\t */ _createFileToolbarButton() {\n        const t = this.editor.locale.t;\n        const button = this._createButton(ButtonView);\n        button.icon = icons.browseFiles;\n        button.label = t('Open file manager');\n        button.tooltip = true;\n        return button;\n    }\n    /**\n\t * Creates a simple toolbar button for images management, with an icon and a tooltip.\n\t */ _createImageToolbarButton() {\n        const t = this.editor.locale.t;\n        const imageInsertUI = this.editor.plugins.get('ImageInsertUI');\n        const button = this._createButton(ButtonView);\n        button.icon = icons.imageAssetManager;\n        button.bind('label').to(imageInsertUI, 'isImageSelected', (isImageSelected)=>isImageSelected ? t('Replace image with file manager') : t('Insert image with file manager'));\n        button.tooltip = true;\n        return button;\n    }\n    /**\n\t * Creates a button for images management for the dropdown view, with an icon, text and no tooltip.\n\t */ _createImageDropdownButton() {\n        const t = this.editor.locale.t;\n        const imageInsertUI = this.editor.plugins.get('ImageInsertUI');\n        const button = this._createButton(ButtonView);\n        button.icon = icons.imageAssetManager;\n        button.withText = true;\n        button.bind('label').to(imageInsertUI, 'isImageSelected', (isImageSelected)=>isImageSelected ? t('Replace with file manager') : t('Insert with file manager'));\n        button.on('execute', ()=>{\n            imageInsertUI.dropdownView.isOpen = false;\n        });\n        return button;\n    }\n    /**\n\t * Creates a button for files management for the menu bar.\n\t */ _createFileMenuBarButton() {\n        const t = this.editor.locale.t;\n        const button = this._createButton(MenuBarMenuListItemButtonView);\n        button.icon = icons.browseFiles;\n        button.withText = true;\n        button.label = t('File');\n        return button;\n    }\n    /**\n\t * Creates a button for images management for the menu bar.\n\t */ _createImageMenuBarButton(type) {\n        // Use t() stored in a variable with a different name to reuse existing translations from another package.\n        const translateVariableKey = this.editor.locale.t;\n        const t = this.editor.locale.t;\n        const button = this._createButton(MenuBarMenuListItemButtonView);\n        button.icon = icons.imageAssetManager;\n        button.withText = true;\n        switch(type){\n            case 'insertOnly':\n                button.label = translateVariableKey('Image');\n                break;\n            case 'insertNested':\n                button.label = t('With file manager');\n                break;\n        }\n        return button;\n    }\n}\n\n/**\n * Converts image source set provided by the CKBox into an object containing:\n * - responsive URLs for the \"webp\" image format,\n * - one fallback URL for browsers that do not support the \"webp\" format.\n */ function getImageUrls(imageUrls) {\n    const responsiveUrls = [];\n    let maxWidth = 0;\n    for(const key in imageUrls){\n        const width = parseInt(key, 10);\n        if (!isNaN(width)) {\n            if (width > maxWidth) {\n                maxWidth = width;\n            }\n            responsiveUrls.push(`${imageUrls[key]} ${key}w`);\n        }\n    }\n    const imageSources = [\n        {\n            srcset: responsiveUrls.join(','),\n            sizes: `(max-width: ${maxWidth}px) 100vw, ${maxWidth}px`,\n            type: 'image/webp'\n        }\n    ];\n    return {\n        imageFallbackUrl: imageUrls.default,\n        imageSources\n    };\n}\n/**\n * Returns a workspace id to use for communication with the CKBox service.\n *\n * @param defaultWorkspaceId The default workspace to use taken from editor config.\n */ function getWorkspaceId(token, defaultWorkspaceId) {\n    const [, binaryTokenPayload] = token.value.split('.');\n    const payload = JSON.parse(atob(binaryTokenPayload));\n    const workspaces = payload.auth && payload.auth.ckbox && payload.auth.ckbox.workspaces || [\n        payload.aud\n    ];\n    if (!defaultWorkspaceId) {\n        return workspaces[0];\n    }\n    const role = payload.auth && payload.auth.ckbox && payload.auth.ckbox.role;\n    if (role == 'superadmin' || workspaces.includes(defaultWorkspaceId)) {\n        return defaultWorkspaceId;\n    }\n    return null;\n}\n/**\n * Default resolution for decoding blurhash values.\n * Relatively small values must be used in order to ensure acceptable performance.\n */ const BLUR_RESOLUTION = 32;\n/**\n * Generates an image data URL from its `blurhash` representation.\n */ function blurHashToDataUrl(hash) {\n    if (!hash) {\n        return;\n    }\n    try {\n        const resolutionInPx = `${BLUR_RESOLUTION}px`;\n        const canvas = document.createElement('canvas');\n        canvas.setAttribute('width', resolutionInPx);\n        canvas.setAttribute('height', resolutionInPx);\n        const ctx = canvas.getContext('2d');\n        /* istanbul ignore next -- @preserve */ if (!ctx) {\n            return;\n        }\n        const imageData = ctx.createImageData(BLUR_RESOLUTION, BLUR_RESOLUTION);\n        const decoded = decode(hash, BLUR_RESOLUTION, BLUR_RESOLUTION);\n        imageData.data.set(decoded);\n        ctx.putImageData(imageData, 0, 0);\n        return canvas.toDataURL();\n    } catch (e) {\n        return undefined;\n    }\n}\n/**\n * Sends the HTTP request.\n *\n * @internal\n * @param config.url the URL where the request will be sent.\n * @param config.method The HTTP method.\n * @param config.data Additional data to send.\n * @param config.onUploadProgress A callback informing about the upload progress.\n */ function sendHttpRequest({ url, method = 'GET', data, onUploadProgress, signal, authorization }) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(method, url.toString());\n    xhr.setRequestHeader('Authorization', authorization);\n    xhr.setRequestHeader('CKBox-Version', 'CKEditor 5');\n    xhr.responseType = 'json';\n    // The callback is attached to the `signal#abort` event.\n    const abortCallback = ()=>{\n        xhr.abort();\n    };\n    return new Promise((resolve, reject)=>{\n        signal.throwIfAborted();\n        signal.addEventListener('abort', abortCallback);\n        xhr.addEventListener('loadstart', ()=>{\n            signal.addEventListener('abort', abortCallback);\n        });\n        xhr.addEventListener('loadend', ()=>{\n            signal.removeEventListener('abort', abortCallback);\n        });\n        xhr.addEventListener('error', ()=>{\n            reject();\n        });\n        xhr.addEventListener('abort', ()=>{\n            reject();\n        });\n        xhr.addEventListener('load', ()=>{\n            const response = xhr.response;\n            if (!response || response.statusCode >= 400) {\n                return reject(response && response.message);\n            }\n            resolve(response);\n        });\n        /* istanbul ignore else -- @preserve */ if (onUploadProgress) {\n            xhr.upload.addEventListener('progress', (evt)=>{\n                onUploadProgress(evt);\n            });\n        }\n        // Send the request.\n        xhr.send(data);\n    });\n}\nconst MIME_TO_EXTENSION = {\n    'image/gif': 'gif',\n    'image/jpeg': 'jpg',\n    'image/png': 'png',\n    'image/webp': 'webp',\n    'image/bmp': 'bmp',\n    'image/tiff': 'tiff'\n};\n/**\n * Returns an extension a typical file in the specified `mimeType` format would have.\n */ function convertMimeTypeToExtension(mimeType) {\n    return MIME_TO_EXTENSION[mimeType];\n}\n/**\n * Tries to fetch the given `url` and returns 'content-type' of the response.\n */ async function getContentTypeOfUrl(url, options) {\n    try {\n        const response = await fetch(url, {\n            method: 'HEAD',\n            cache: 'force-cache',\n            ...options\n        });\n        if (!response.ok) {\n            return '';\n        }\n        return response.headers.get('content-type') || '';\n    } catch  {\n        return '';\n    }\n}\n/**\n * Returns an extension from the given value.\n */ function getFileExtension(file) {\n    const fileName = file.name;\n    const extensionRegExp = /\\.(?<ext>[^.]+)$/;\n    const match = fileName.match(extensionRegExp);\n    return match.groups.ext.toLowerCase();\n}\n\n// Defines the waiting time (in milliseconds) for inserting the chosen asset into the model. The chosen asset is temporarily stored in the\n// `CKBoxCommand#_chosenAssets` and it is removed from there automatically after this time. See `CKBoxCommand#_chosenAssets` for more\n// details.\nconst ASSET_INSERTION_WAIT_TIMEOUT = 1000;\n/**\n * The CKBox command. It is used by the {@link module:ckbox/ckboxediting~CKBoxEditing CKBox editing feature} to open the CKBox file manager.\n * The file manager allows inserting an image or a link to a file into the editor content.\n *\n * ```ts\n * editor.execute( 'ckbox' );\n * ```\n *\n * **Note:** This command uses other features to perform the following tasks:\n * - To insert images it uses the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command from the\n * {@link module:image/image~Image Image feature}.\n * - To insert links to other files it uses the {@link module:link/linkcommand~LinkCommand 'link'} command from the\n * {@link module:link/link~Link Link feature}.\n */ class CKBoxCommand extends Command {\n    /**\n\t * A set of all chosen assets. They are stored temporarily and they are automatically removed 1 second after being chosen.\n\t * Chosen assets have to be \"remembered\" for a while to be able to map the given asset with the element inserted into the model.\n\t * This association map is then used to set the ID on the model element.\n\t *\n\t * All chosen assets are automatically removed after the timeout, because (theoretically) it may happen that they will never be\n\t * inserted into the model, even if the {@link module:link/linkcommand~LinkCommand `'link'`} command or the\n\t * {@link module:image/image/insertimagecommand~InsertImageCommand `'insertImage'`} command is enabled. Such a case may arise when\n\t * another plugin blocks the command execution. Then, in order not to keep the chosen (but not inserted) assets forever, we delete\n\t * them automatically to prevent memory leakage. The 1 second timeout is enough to insert the asset into the model and extract the\n\t * ID from the chosen asset.\n\t *\n\t * The assets are stored only if\n\t * the {@link module:ckbox/ckboxconfig~CKBoxConfig#ignoreDataId `config.ckbox.ignoreDataId`} option is set to `false` (by default).\n\t *\n\t * @internal\n\t */ _chosenAssets = new Set();\n    /**\n\t * The DOM element that acts as a mounting point for the CKBox dialog.\n\t */ _wrapper = null;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._initListeners();\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        this.fire('ckbox:open');\n    }\n    /**\n\t * Indicates if the CKBox dialog is already opened.\n\t *\n\t * @protected\n\t * @returns {Boolean}\n\t */ _getValue() {\n        return this._wrapper !== null;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t */ _checkEnabled() {\n        const imageCommand = this.editor.commands.get('insertImage');\n        const linkCommand = this.editor.commands.get('link');\n        if (!imageCommand.isEnabled && !linkCommand.isEnabled) {\n            return false;\n        }\n        return true;\n    }\n    /**\n\t * Creates the options object for the CKBox dialog.\n\t *\n\t * @returns The object with properties:\n\t * - theme The theme for CKBox dialog.\n\t * - language The language for CKBox dialog.\n\t * - tokenUrl The token endpoint URL.\n\t * - serviceOrigin The base URL of the API service.\n\t * - forceDemoLabel Whether to force \"Powered by CKBox\" link.\n\t * - assets.onChoose The callback function invoked after choosing the assets.\n\t * - dialog.onClose The callback function invoked after closing the CKBox dialog.\n\t * - dialog.width The dialog width in pixels.\n\t * - dialog.height The dialog height in pixels.\n\t * - categories.icons Allows setting custom icons for categories.\n\t * - view.openLastView Sets if the last view visited by the user will be reopened\n\t * on the next startup.\n\t * - view.startupFolderId Sets the ID of the folder that will be opened on startup.\n\t * - view.startupCategoryId Sets the ID of the category that will be opened on startup.\n\t * - view.hideMaximizeButton Sets whether to hide the ‘Maximize’ button.\n\t * - view.componentsHideTimeout Sets timeout after which upload components are hidden\n\t * after completed upload.\n\t * - view.dialogMinimizeTimeout Sets timeout after which upload dialog is minimized\n\t * after completed upload.\n\t */ _prepareOptions() {\n        const editor = this.editor;\n        const ckboxConfig = editor.config.get('ckbox');\n        const dialog = ckboxConfig.dialog;\n        const categories = ckboxConfig.categories;\n        const view = ckboxConfig.view;\n        const upload = ckboxConfig.upload;\n        return {\n            theme: ckboxConfig.theme,\n            language: ckboxConfig.language,\n            tokenUrl: ckboxConfig.tokenUrl,\n            serviceOrigin: ckboxConfig.serviceOrigin,\n            forceDemoLabel: ckboxConfig.forceDemoLabel,\n            choosableFileExtensions: ckboxConfig.choosableFileExtensions,\n            assets: {\n                onChoose: (assets)=>this.fire('ckbox:choose', assets)\n            },\n            dialog: {\n                onClose: ()=>this.fire('ckbox:close'),\n                width: dialog && dialog.width,\n                height: dialog && dialog.height\n            },\n            categories: categories && {\n                icons: categories.icons\n            },\n            view: view && {\n                openLastView: view.openLastView,\n                startupFolderId: view.startupFolderId,\n                startupCategoryId: view.startupCategoryId,\n                hideMaximizeButton: view.hideMaximizeButton\n            },\n            upload: upload && {\n                componentsHideTimeout: upload.componentsHideTimeout,\n                dialogMinimizeTimeout: upload.dialogMinimizeTimeout\n            }\n        };\n    }\n    /**\n\t * Initializes various event listeners for the `ckbox:*` events, because all functionality of the `ckbox` command is event-based.\n\t */ _initListeners() {\n        const editor = this.editor;\n        const model = editor.model;\n        const shouldInsertDataId = !editor.config.get('ckbox.ignoreDataId');\n        // Refresh the command after firing the `ckbox:*` event.\n        this.on('ckbox', ()=>{\n            this.refresh();\n        }, {\n            priority: 'low'\n        });\n        // Handle opening of the CKBox dialog.\n        this.on('ckbox:open', ()=>{\n            if (!this.isEnabled || this.value) {\n                return;\n            }\n            this._wrapper = createElement(document, 'div', {\n                class: 'ck ckbox-wrapper'\n            });\n            document.body.appendChild(this._wrapper);\n            window.CKBox.mount(this._wrapper, this._prepareOptions());\n        });\n        // Handle closing of the CKBox dialog.\n        this.on('ckbox:close', ()=>{\n            if (!this.value) {\n                return;\n            }\n            this._wrapper.remove();\n            this._wrapper = null;\n            editor.editing.view.focus();\n        });\n        // Handle choosing the assets.\n        this.on('ckbox:choose', (evt, assets)=>{\n            if (!this.isEnabled) {\n                return;\n            }\n            const imageCommand = editor.commands.get('insertImage');\n            const linkCommand = editor.commands.get('link');\n            const assetsToProcess = prepareAssets({\n                assets,\n                isImageAllowed: imageCommand.isEnabled,\n                isLinkAllowed: linkCommand.isEnabled\n            });\n            const assetsCount = assetsToProcess.length;\n            if (assetsCount === 0) {\n                return;\n            }\n            // All assets are inserted in one undo step.\n            model.change((writer)=>{\n                for (const asset of assetsToProcess){\n                    const isLastAsset = asset === assetsToProcess[assetsCount - 1];\n                    const isSingleAsset = assetsCount === 1;\n                    this._insertAsset(asset, isLastAsset, writer, isSingleAsset);\n                    // If asset ID must be set for the inserted model element, store the asset temporarily and remove it automatically\n                    // after the timeout.\n                    if (shouldInsertDataId) {\n                        setTimeout(()=>this._chosenAssets.delete(asset), ASSET_INSERTION_WAIT_TIMEOUT);\n                        this._chosenAssets.add(asset);\n                    }\n                }\n            });\n            editor.editing.view.focus();\n        });\n        // Clean up after the editor is destroyed.\n        this.listenTo(editor, 'destroy', ()=>{\n            this.fire('ckbox:close');\n            this._chosenAssets.clear();\n        });\n    }\n    /**\n\t * Inserts the asset into the model.\n\t *\n\t * @param asset The asset to be inserted.\n\t * @param isLastAsset Indicates if the current asset is the last one from the chosen set.\n\t * @param writer An instance of the model writer.\n\t * @param isSingleAsset It's true when only one asset is processed.\n\t */ _insertAsset(asset, isLastAsset, writer, isSingleAsset) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Remove the `linkHref` attribute to not affect the asset to be inserted.\n        writer.removeSelectionAttribute('linkHref');\n        if (asset.type === 'image') {\n            this._insertImage(asset);\n        } else {\n            this._insertLink(asset, writer, isSingleAsset);\n        }\n        // Except for the last chosen asset, move the selection to the end of the current range to avoid overwriting other, already\n        // inserted assets.\n        if (!isLastAsset) {\n            writer.setSelection(selection.getLastPosition());\n        }\n    }\n    /**\n\t * Inserts the image by calling the `insertImage` command.\n\t *\n\t * @param asset The asset to be inserted.\n\t */ _insertImage(asset) {\n        const editor = this.editor;\n        const { imageFallbackUrl, imageSources, imageTextAlternative, imageWidth, imageHeight, imagePlaceholder } = asset.attributes;\n        editor.execute('insertImage', {\n            source: {\n                src: imageFallbackUrl,\n                sources: imageSources,\n                alt: imageTextAlternative,\n                width: imageWidth,\n                height: imageHeight,\n                ...imagePlaceholder ? {\n                    placeholder: imagePlaceholder\n                } : null\n            }\n        });\n    }\n    /**\n\t * Inserts the link to the asset by calling the `link` command.\n\t *\n\t * @param asset The asset to be inserted.\n\t * @param writer An instance of the model writer.\n\t * @param isSingleAsset It's true when only one asset is processed.\n\t */ _insertLink(asset, writer, isSingleAsset) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const { linkName, linkHref } = asset.attributes;\n        // If the selection is collapsed, insert the asset name as the link label and select it.\n        if (selection.isCollapsed) {\n            const selectionAttributes = toMap(selection.getAttributes());\n            const textNode = writer.createText(linkName, selectionAttributes);\n            if (!isSingleAsset) {\n                const selectionLastPosition = selection.getLastPosition();\n                const parentElement = selectionLastPosition.parent;\n                // Insert new `paragraph` when selection is not in an empty `paragraph`.\n                if (!(parentElement.name === 'paragraph' && parentElement.isEmpty)) {\n                    editor.execute('insertParagraph', {\n                        position: selectionLastPosition\n                    });\n                }\n                const range = model.insertContent(textNode);\n                writer.setSelection(range);\n                editor.execute('link', linkHref);\n                return;\n            }\n            const range = model.insertContent(textNode);\n            writer.setSelection(range);\n        }\n        editor.execute('link', linkHref);\n    }\n}\n/**\n * Parses the chosen assets into the internal data format. Filters out chosen assets that are not allowed.\n */ function prepareAssets({ assets, isImageAllowed, isLinkAllowed }) {\n    return assets.map((asset)=>isImage(asset) ? {\n            id: asset.data.id,\n            type: 'image',\n            attributes: prepareImageAssetAttributes(asset)\n        } : {\n            id: asset.data.id,\n            type: 'link',\n            attributes: prepareLinkAssetAttributes(asset)\n        }).filter((asset)=>asset.type === 'image' ? isImageAllowed : isLinkAllowed);\n}\n/**\n * Parses the assets attributes into the internal data format.\n *\n * @internal\n */ function prepareImageAssetAttributes(asset) {\n    const { imageFallbackUrl, imageSources } = getImageUrls(asset.data.imageUrls);\n    const { description, width, height, blurHash } = asset.data.metadata;\n    const imagePlaceholder = blurHashToDataUrl(blurHash);\n    return {\n        imageFallbackUrl,\n        imageSources,\n        imageTextAlternative: description || '',\n        imageWidth: width,\n        imageHeight: height,\n        ...imagePlaceholder ? {\n            imagePlaceholder\n        } : null\n    };\n}\n/**\n * Parses the assets attributes into the internal data format.\n *\n * @param origin The base URL for assets inserted into the editor.\n */ function prepareLinkAssetAttributes(asset) {\n    return {\n        linkName: asset.data.name,\n        linkHref: getAssetUrl(asset)\n    };\n}\n/**\n * Checks whether the asset is an image.\n */ function isImage(asset) {\n    const metadata = asset.data.metadata;\n    if (!metadata) {\n        return false;\n    }\n    return metadata.width && metadata.height;\n}\n/**\n * Creates the URL for the asset.\n *\n * @param origin The base URL for assets inserted into the editor.\n */ function getAssetUrl(asset) {\n    const url = new URL(asset.data.url);\n    url.searchParams.set('download', 'true');\n    return url.toString();\n}\n\nconst DEFAULT_CKBOX_THEME_NAME = 'lark';\n/**\n * The CKBox utilities plugin.\n */ class CKBoxUtils extends Plugin {\n    /**\n\t * CKEditor Cloud Services access token.\n\t */ _token;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'CloudServices'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const hasConfiguration = !!editor.config.get('ckbox');\n        const isLibraryLoaded = !!window.CKBox;\n        // Proceed with plugin initialization only when the integrator intentionally wants to use it, i.e. when the `config.ckbox` exists or\n        // the CKBox JavaScript library is loaded.\n        if (!hasConfiguration && !isLibraryLoaded) {\n            return;\n        }\n        editor.config.define('ckbox', {\n            serviceOrigin: 'https://api.ckbox.io',\n            defaultUploadCategories: null,\n            ignoreDataId: false,\n            language: editor.locale.uiLanguage,\n            theme: DEFAULT_CKBOX_THEME_NAME,\n            tokenUrl: editor.config.get('cloudServices.tokenUrl')\n        });\n        const cloudServices = editor.plugins.get('CloudServices');\n        const cloudServicesTokenUrl = editor.config.get('cloudServices.tokenUrl');\n        const ckboxTokenUrl = editor.config.get('ckbox.tokenUrl');\n        if (!ckboxTokenUrl) {\n            /**\n\t\t\t * The {@link module:ckbox/ckboxconfig~CKBoxConfig#tokenUrl `config.ckbox.tokenUrl`} or the\n\t\t\t * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl `config.cloudServices.tokenUrl`}\n\t\t\t * configuration is required for the CKBox plugin.\n\t\t\t *\n\t\t\t * ```ts\n\t\t\t * ClassicEditor.create( document.createElement( 'div' ), {\n\t\t\t * \tckbox: {\n\t\t\t * \t\ttokenUrl: \"YOUR_TOKEN_URL\"\n\t\t\t * \t\t// ...\n\t\t\t * \t}\n\t\t\t * \t// ...\n\t\t\t * } );\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @error ckbox-plugin-missing-token-url\n\t\t\t */ throw new CKEditorError('ckbox-plugin-missing-token-url', this);\n        }\n        if (ckboxTokenUrl == cloudServicesTokenUrl) {\n            this._token = Promise.resolve(cloudServices.token);\n        } else {\n            this._token = cloudServices.registerTokenUrl(ckboxTokenUrl);\n        }\n    }\n    /**\n\t * Returns a token used by the CKBox plugin for communication with the CKBox service.\n\t */ getToken() {\n        return this._token;\n    }\n    /**\n\t * The ID of workspace to use when uploading an image.\n\t */ async getWorkspaceId() {\n        const t = this.editor.t;\n        const cannotAccessDefaultWorkspaceError = t('Cannot access default workspace.');\n        const defaultWorkspaceId = this.editor.config.get('ckbox.defaultUploadWorkspaceId');\n        const workspaceId = getWorkspaceId(await this._token, defaultWorkspaceId);\n        if (workspaceId == null) {\n            /**\n\t\t\t * The user is not authorized to access the workspace defined in  the`ckbox.defaultUploadWorkspaceId` configuration.\n\t\t\t *\n\t\t\t * @error ckbox-access-default-workspace-error\n\t\t\t */ logError('ckbox-access-default-workspace-error');\n            throw cannotAccessDefaultWorkspaceError;\n        }\n        return workspaceId;\n    }\n    /**\n\t * Resolves a promise with an object containing a category with which the uploaded file is associated or an error code.\n\t */ async getCategoryIdForFile(fileOrUrl, options) {\n        const t = this.editor.t;\n        const cannotFindCategoryError = t('Cannot determine a category for the uploaded file.');\n        const defaultCategories = this.editor.config.get('ckbox.defaultUploadCategories');\n        const allCategoriesPromise = this._getAvailableCategories(options);\n        const extension = typeof fileOrUrl == 'string' ? convertMimeTypeToExtension(await getContentTypeOfUrl(fileOrUrl, options)) : getFileExtension(fileOrUrl);\n        const allCategories = await allCategoriesPromise;\n        // Couldn't fetch all categories. Perhaps the authorization token is invalid.\n        if (!allCategories) {\n            throw cannotFindCategoryError;\n        }\n        // If a user specifies the plugin configuration, find the first category that accepts the uploaded file.\n        if (defaultCategories) {\n            const userCategory = Object.keys(defaultCategories).find((category)=>{\n                return defaultCategories[category].find((e)=>e.toLowerCase() == extension);\n            });\n            // If found, return its ID if the category exists on the server side.\n            if (userCategory) {\n                const serverCategory = allCategories.find((category)=>category.id === userCategory || category.name === userCategory);\n                if (!serverCategory) {\n                    throw cannotFindCategoryError;\n                }\n                return serverCategory.id;\n            }\n        }\n        // Otherwise, find the first category that accepts the uploaded file and returns its ID.\n        const category = allCategories.find((category)=>category.extensions.find((e)=>e.toLowerCase() == extension));\n        if (!category) {\n            throw cannotFindCategoryError;\n        }\n        return category.id;\n    }\n    /**\n\t * Resolves a promise with an array containing available categories with which the uploaded file can be associated.\n\t *\n\t * If the API returns limited results, the method will collect all items.\n\t */ async _getAvailableCategories(options) {\n        const ITEMS_PER_REQUEST = 50;\n        const editor = this.editor;\n        const token = this._token;\n        const { signal } = options;\n        const serviceOrigin = editor.config.get('ckbox.serviceOrigin');\n        const workspaceId = await this.getWorkspaceId();\n        try {\n            const result = [];\n            let offset = 0;\n            let remainingItems;\n            do {\n                const data = await fetchCategories(offset);\n                result.push(...data.items);\n                remainingItems = data.totalCount - (offset + ITEMS_PER_REQUEST);\n                offset += ITEMS_PER_REQUEST;\n            }while (remainingItems > 0)\n            return result;\n        } catch  {\n            signal.throwIfAborted();\n            /**\n\t\t\t * Fetching a list of available categories with which an uploaded file can be associated failed.\n\t\t\t *\n\t\t\t * @error ckbox-fetch-category-http-error\n\t\t\t */ logError('ckbox-fetch-category-http-error');\n            return undefined;\n        }\n        async function fetchCategories(offset) {\n            const categoryUrl = new URL('categories', serviceOrigin);\n            categoryUrl.searchParams.set('limit', String(ITEMS_PER_REQUEST));\n            categoryUrl.searchParams.set('offset', String(offset));\n            categoryUrl.searchParams.set('workspaceId', workspaceId);\n            return sendHttpRequest({\n                url: categoryUrl,\n                signal,\n                authorization: (await token).value\n            });\n        }\n    }\n}\n\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKBox server–side connector.\n * See the {@glink features/file-management/ckbox CKBox file manager integration} guide to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckbox/ckbox~CKBox} plugin.\n *\n * Check out the {@glink features/images/image-upload/image-upload Image upload overview} guide to learn about\n * other ways to upload images into CKEditor 5.\n */ class CKBoxUploadAdapter extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'ImageUploadEditing',\n            'ImageUploadProgress',\n            FileRepository,\n            CKBoxEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ async afterInit() {\n        const editor = this.editor;\n        const hasConfiguration = !!editor.config.get('ckbox');\n        const isLibraryLoaded = !!window.CKBox;\n        // Editor supports only one upload adapter. Register the CKBox upload adapter (and potentially overwrite other one) only when the\n        // integrator intentionally wants to use the CKBox plugin, i.e. when the `config.ckbox` exists or the CKBox JavaScript library is\n        // loaded.\n        if (!hasConfiguration && !isLibraryLoaded) {\n            return;\n        }\n        const fileRepository = editor.plugins.get(FileRepository);\n        const ckboxUtils = editor.plugins.get(CKBoxUtils);\n        fileRepository.createUploadAdapter = (loader)=>new Adapter(loader, editor, ckboxUtils);\n        const shouldInsertDataId = !editor.config.get('ckbox.ignoreDataId');\n        const imageUploadEditing = editor.plugins.get('ImageUploadEditing');\n        // Mark uploaded assets with the `ckboxImageId` attribute. Its value represents an ID in CKBox.\n        if (shouldInsertDataId) {\n            imageUploadEditing.on('uploadComplete', (evt, { imageElement, data })=>{\n                editor.model.change((writer)=>{\n                    writer.setAttribute('ckboxImageId', data.ckboxImageId, imageElement);\n                });\n            });\n        }\n    }\n}\n/**\n * Upload adapter for CKBox.\n */ class Adapter {\n    /**\n\t * FileLoader instance to use during the upload.\n\t */ loader;\n    /**\n\t * CKEditor Cloud Services access token.\n\t */ token;\n    /**\n\t * The editor instance.\n\t */ editor;\n    /**\n\t * The abort controller for aborting asynchronous processes.\n\t */ controller;\n    /**\n\t * The base URL where all requests should be sent.\n\t */ serviceOrigin;\n    /**\n\t * The reference to CKBoxUtils plugin.\n\t */ ckboxUtils;\n    /**\n\t * Creates a new adapter instance.\n\t */ constructor(loader, editor, ckboxUtils){\n        this.loader = loader;\n        this.token = ckboxUtils.getToken();\n        this.ckboxUtils = ckboxUtils;\n        this.editor = editor;\n        this.controller = new AbortController();\n        this.serviceOrigin = editor.config.get('ckbox.serviceOrigin');\n    }\n    /**\n\t * Starts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#upload\n\t */ async upload() {\n        const ckboxUtils = this.ckboxUtils;\n        const t = this.editor.t;\n        const file = await this.loader.file;\n        const category = await ckboxUtils.getCategoryIdForFile(file, {\n            signal: this.controller.signal\n        });\n        const uploadUrl = new URL('assets', this.serviceOrigin);\n        const formData = new FormData();\n        uploadUrl.searchParams.set('workspaceId', await ckboxUtils.getWorkspaceId());\n        formData.append('categoryId', category);\n        formData.append('file', file);\n        const requestConfig = {\n            method: 'POST',\n            url: uploadUrl,\n            data: formData,\n            onUploadProgress: (evt)=>{\n                /* istanbul ignore else -- @preserve */ if (evt.lengthComputable) {\n                    this.loader.uploadTotal = evt.total;\n                    this.loader.uploaded = evt.loaded;\n                }\n            },\n            signal: this.controller.signal,\n            authorization: (await this.token).value\n        };\n        return sendHttpRequest(requestConfig).then(async (data)=>{\n            const imageUrls = getImageUrls(data.imageUrls);\n            return {\n                ckboxImageId: data.id,\n                default: imageUrls.imageFallbackUrl,\n                sources: imageUrls.imageSources\n            };\n        }).catch(()=>{\n            const genericError = t('Cannot upload file:') + ` ${file.name}.`;\n            return Promise.reject(genericError);\n        });\n    }\n    /**\n\t * Aborts the upload process.\n\t *\n\t * @see module:upload/filerepository~UploadAdapter#abort\n\t */ abort() {\n        this.controller.abort();\n    }\n}\n\nconst COMMAND_FORCE_DISABLE_ID = 'NoPermission';\n/**\n * The CKBox editing feature. It introduces the {@link module:ckbox/ckboxcommand~CKBoxCommand CKBox command} and\n * {@link module:ckbox/ckboxuploadadapter~CKBoxUploadAdapter CKBox upload adapter}.\n */ class CKBoxEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'LinkEditing',\n            'PictureEditing',\n            CKBoxUploadAdapter,\n            CKBoxUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!this._shouldBeInitialised()) {\n            return;\n        }\n        this._checkImagePlugins();\n        // Registering the `ckbox` command makes sense only if the CKBox library is loaded, as the `ckbox` command opens the CKBox dialog.\n        if (isLibraryLoaded()) {\n            editor.commands.add('ckbox', new CKBoxCommand(editor));\n        }\n        // Promise is not handled intentionally. Errors should be displayed in console if there are so.\n        isUploadPermissionGranted(editor).then((isCreateAssetAllowed)=>{\n            if (!isCreateAssetAllowed) {\n                this._blockImageCommands();\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        if (!this._shouldBeInitialised()) {\n            return;\n        }\n        // Extending the schema, registering converters and applying fixers only make sense if the configuration option to assign\n        // the assets ID with the model elements is enabled.\n        if (!editor.config.get('ckbox.ignoreDataId')) {\n            this._initSchema();\n            this._initConversion();\n            this._initFixers();\n        }\n    }\n    /**\n\t * Returns true only when the integrator intentionally wants to use the plugin, i.e. when the `config.ckbox` exists or\n\t * the CKBox JavaScript library is loaded.\n\t */ _shouldBeInitialised() {\n        const editor = this.editor;\n        const hasConfiguration = !!editor.config.get('ckbox');\n        return hasConfiguration || isLibraryLoaded();\n    }\n    /**\n\t * Blocks `uploadImage` and `ckboxImageEdit` commands.\n\t */ _blockImageCommands() {\n        const editor = this.editor;\n        const uploadImageCommand = editor.commands.get('uploadImage');\n        const imageEditingCommand = editor.commands.get('ckboxImageEdit');\n        if (uploadImageCommand) {\n            uploadImageCommand.isAccessAllowed = false;\n            uploadImageCommand.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n        if (imageEditingCommand) {\n            imageEditingCommand.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Checks if at least one image plugin is loaded.\n\t */ _checkImagePlugins() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ImageBlockEditing') && !editor.plugins.has('ImageInlineEditing')) {\n            /**\n\t\t\t * The CKBox feature requires one of the following plugins to be loaded to work correctly:\n\t\t\t *\n\t\t\t * * {@link module:image/imageblock~ImageBlock},\n\t\t\t * * {@link module:image/imageinline~ImageInline},\n\t\t\t * * {@link module:image/image~Image} (loads both `ImageBlock` and `ImageInline`)\n\t\t\t *\n\t\t\t * Please make sure your editor configuration is correct.\n\t\t\t *\n\t\t\t * @error ckbox-plugin-image-feature-missing\n\t\t\t * @param {module:core/editor/editor~Editor} editor\n\t\t\t */ logError('ckbox-plugin-image-feature-missing', editor);\n        }\n    }\n    /**\n\t * Extends the schema to allow the `ckboxImageId` and `ckboxLinkId` attributes for links and images.\n\t */ _initSchema() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        schema.extend('$text', {\n            allowAttributes: 'ckboxLinkId'\n        });\n        if (schema.isRegistered('imageBlock')) {\n            schema.extend('imageBlock', {\n                allowAttributes: [\n                    'ckboxImageId',\n                    'ckboxLinkId'\n                ]\n            });\n        }\n        if (schema.isRegistered('imageInline')) {\n            schema.extend('imageInline', {\n                allowAttributes: [\n                    'ckboxImageId',\n                    'ckboxLinkId'\n                ]\n            });\n        }\n        schema.addAttributeCheck((context)=>{\n            // Don't allow `ckboxLinkId` on elements which do not have `linkHref` attribute.\n            if (!context.last.getAttribute('linkHref')) {\n                return false;\n            }\n        }, 'ckboxLinkId');\n    }\n    /**\n\t * Configures the upcast and downcast conversions for the `ckboxImageId` and `ckboxLinkId` attributes.\n\t */ _initConversion() {\n        const editor = this.editor;\n        // Convert `ckboxLinkId` => `data-ckbox-resource-id`.\n        editor.conversion.for('downcast').add((dispatcher)=>{\n            // Due to custom converters for linked block images, handle the `ckboxLinkId` attribute manually.\n            dispatcher.on('attribute:ckboxLinkId:imageBlock', (evt, data, conversionApi)=>{\n                const { writer, mapper, consumable } = conversionApi;\n                if (!consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const viewFigure = mapper.toViewElement(data.item);\n                const linkInImage = [\n                    ...viewFigure.getChildren()\n                ].find((child)=>child.name === 'a');\n                // No link inside an image - no conversion needed.\n                if (!linkInImage) {\n                    return;\n                }\n                if (data.item.hasAttribute('ckboxLinkId')) {\n                    writer.setAttribute('data-ckbox-resource-id', data.item.getAttribute('ckboxLinkId'), linkInImage);\n                } else {\n                    writer.removeAttribute('data-ckbox-resource-id', linkInImage);\n                }\n            }, {\n                priority: 'low'\n            });\n            dispatcher.on('attribute:ckboxLinkId', (evt, data, conversionApi)=>{\n                const { writer, mapper, consumable } = conversionApi;\n                if (!consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                // Remove the previous attribute value if it was applied.\n                if (data.attributeOldValue) {\n                    const viewElement = createLinkElement(writer, data.attributeOldValue);\n                    writer.unwrap(mapper.toViewRange(data.range), viewElement);\n                }\n                // Add the new attribute value if specified in a model element.\n                if (data.attributeNewValue) {\n                    const viewElement = createLinkElement(writer, data.attributeNewValue);\n                    if (data.item.is('selection')) {\n                        const viewSelection = writer.document.selection;\n                        writer.wrap(viewSelection.getFirstRange(), viewElement);\n                    } else {\n                        writer.wrap(mapper.toViewRange(data.range), viewElement);\n                    }\n                }\n            }, {\n                priority: 'low'\n            });\n        });\n        // Convert `data-ckbox-resource-id` => `ckboxLinkId`.\n        //\n        // The helper conversion does not handle all cases, so take care of the `data-ckbox-resource-id` attribute manually for images\n        // and links.\n        editor.conversion.for('upcast').add((dispatcher)=>{\n            dispatcher.on('element:a', (evt, data, conversionApi)=>{\n                const { writer, consumable } = conversionApi;\n                // Upcast the `data-ckbox-resource-id` attribute only for valid link elements.\n                if (!data.viewItem.getAttribute('href')) {\n                    return;\n                }\n                const consumableAttributes = {\n                    attributes: [\n                        'data-ckbox-resource-id'\n                    ]\n                };\n                if (!consumable.consume(data.viewItem, consumableAttributes)) {\n                    return;\n                }\n                const attributeValue = data.viewItem.getAttribute('data-ckbox-resource-id');\n                // Missing the `data-ckbox-resource-id` attribute.\n                if (!attributeValue) {\n                    return;\n                }\n                if (data.modelRange) {\n                    // If the `<a>` element contains more than single children (e.g. a linked image), set the `ckboxLinkId` for each\n                    // allowed child.\n                    for (let item of data.modelRange.getItems()){\n                        if (item.is('$textProxy')) {\n                            item = item.textNode;\n                        }\n                        // Do not copy the `ckboxLinkId` attribute when wrapping an element in a block element, e.g. when\n                        // auto-paragraphing.\n                        if (shouldUpcastAttributeForNode(item)) {\n                            writer.setAttribute('ckboxLinkId', attributeValue, item);\n                        }\n                    }\n                } else {\n                    // Otherwise, just set the `ckboxLinkId` for the model element.\n                    const modelElement = data.modelCursor.nodeBefore || data.modelCursor.parent;\n                    writer.setAttribute('ckboxLinkId', attributeValue, modelElement);\n                }\n            }, {\n                priority: 'low'\n            });\n        });\n        // Convert `ckboxImageId` => `data-ckbox-resource-id`.\n        editor.conversion.for('downcast').attributeToAttribute({\n            model: 'ckboxImageId',\n            view: 'data-ckbox-resource-id'\n        });\n        // Convert `data-ckbox-resource-id` => `ckboxImageId`.\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: 'ckboxImageId',\n                value: (viewElement)=>viewElement.getAttribute('data-ckbox-resource-id')\n            },\n            view: {\n                attributes: {\n                    'data-ckbox-resource-id': /[\\s\\S]+/\n                }\n            }\n        });\n        const replaceImageSourceCommand = editor.commands.get('replaceImageSource');\n        if (replaceImageSourceCommand) {\n            this.listenTo(replaceImageSourceCommand, 'cleanupImage', (_, [writer, image])=>{\n                writer.removeAttribute('ckboxImageId', image);\n            });\n        }\n    }\n    /**\n\t * Registers post-fixers that add or remove the `ckboxLinkId` and `ckboxImageId` attributes.\n\t */ _initFixers() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Registers the post-fixer to sync the asset ID with the model elements.\n        model.document.registerPostFixer(syncDataIdPostFixer(editor));\n        // Registers the post-fixer to remove the `ckboxLinkId` attribute from the model selection.\n        model.document.registerPostFixer(injectSelectionPostFixer(selection));\n    }\n}\n/**\n * A post-fixer that synchronizes the asset ID with the model element.\n */ function syncDataIdPostFixer(editor) {\n    return (writer)=>{\n        let changed = false;\n        const model = editor.model;\n        const ckboxCommand = editor.commands.get('ckbox');\n        // The ID from chosen assets are stored in the `CKBoxCommand#_chosenAssets`. If there is no command, it makes no sense to check\n        // for changes in the model.\n        if (!ckboxCommand) {\n            return changed;\n        }\n        for (const entry of model.document.differ.getChanges()){\n            if (entry.type !== 'insert' && entry.type !== 'attribute') {\n                continue;\n            }\n            const range = entry.type === 'insert' ? new Range(entry.position, entry.position.getShiftedBy(entry.length)) : entry.range;\n            const isLinkHrefAttributeRemoval = entry.type === 'attribute' && entry.attributeKey === 'linkHref' && entry.attributeNewValue === null;\n            for (const item of range.getItems()){\n                // If the `linkHref` attribute has been removed, sync the change with the `ckboxLinkId` attribute.\n                if (isLinkHrefAttributeRemoval && item.hasAttribute('ckboxLinkId')) {\n                    writer.removeAttribute('ckboxLinkId', item);\n                    changed = true;\n                    continue;\n                }\n                // Otherwise, the change concerns either a new model element or an attribute change. Try to find the assets for the modified\n                // model element.\n                const assets = findAssetsForItem(item, ckboxCommand._chosenAssets);\n                for (const asset of assets){\n                    const attributeName = asset.type === 'image' ? 'ckboxImageId' : 'ckboxLinkId';\n                    if (asset.id === item.getAttribute(attributeName)) {\n                        continue;\n                    }\n                    writer.setAttribute(attributeName, asset.id, item);\n                    changed = true;\n                }\n            }\n        }\n        return changed;\n    };\n}\n/**\n * A post-fixer that removes the `ckboxLinkId` from the selection if it does not represent a link anymore.\n */ function injectSelectionPostFixer(selection) {\n    return (writer)=>{\n        const shouldRemoveLinkIdAttribute = !selection.hasAttribute('linkHref') && selection.hasAttribute('ckboxLinkId');\n        if (shouldRemoveLinkIdAttribute) {\n            writer.removeSelectionAttribute('ckboxLinkId');\n            return true;\n        }\n        return false;\n    };\n}\n/**\n * Tries to find the asset that is associated with the model element by comparing the attributes:\n * - the image fallback URL with the `src` attribute for images,\n * - the link URL with the `href` attribute for links.\n *\n * For any model element, zero, one or more than one asset can be found (e.g. a linked image may be associated with the link asset and the\n * image asset).\n */ function findAssetsForItem(item, assets) {\n    const isImageElement = item.is('element', 'imageInline') || item.is('element', 'imageBlock');\n    const isLinkElement = item.hasAttribute('linkHref');\n    return [\n        ...assets\n    ].filter((asset)=>{\n        if (asset.type === 'image' && isImageElement) {\n            return asset.attributes.imageFallbackUrl === item.getAttribute('src');\n        }\n        if (asset.type === 'link' && isLinkElement) {\n            return asset.attributes.linkHref === item.getAttribute('linkHref');\n        }\n    });\n}\n/**\n * Creates view link element with the requested ID.\n */ function createLinkElement(writer, id) {\n    // Priority equal 5 is needed to merge adjacent `<a>` elements together.\n    const viewElement = writer.createAttributeElement('a', {\n        'data-ckbox-resource-id': id\n    }, {\n        priority: 5\n    });\n    writer.setCustomProperty('link', true, viewElement);\n    return viewElement;\n}\n/**\n * Checks if the model element may have the `ckboxLinkId` attribute.\n */ function shouldUpcastAttributeForNode(node) {\n    if (node.is('$text')) {\n        return true;\n    }\n    if (node.is('element', 'imageInline') || node.is('element', 'imageBlock')) {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if the CKBox library is loaded, false otherwise.\n */ function isLibraryLoaded() {\n    return !!window.CKBox;\n}\n/**\n * Checks is access allowed to upload assets.\n */ async function isUploadPermissionGranted(editor) {\n    const ckboxUtils = editor.plugins.get(CKBoxUtils);\n    const origin = editor.config.get('ckbox.serviceOrigin');\n    const url = new URL('permissions', origin);\n    const { value } = await ckboxUtils.getToken();\n    const response = await sendHttpRequest({\n        url,\n        authorization: value,\n        signal: new AbortController().signal // Aborting is unnecessary.\n    });\n    return Object.values(response).some((category)=>category['asset:create']);\n}\n\n/**\n * The CKBox feature, a bridge between the CKEditor 5 WYSIWYG editor and the CKBox file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckbox/ckboxediting~CKBoxEditing},\n * * {@link module:ckbox/ckboxui~CKBoxUI},\n *\n * See the {@glink features/file-management/ckbox CKBox integration} guide to learn how to configure and use this feature.\n *\n * Check out the {@glink features/images/image-upload/image-upload Image upload} guide to learn about other ways to upload\n * images into CKEditor 5.\n */ class CKBox extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBox';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CKBoxEditing,\n            CKBoxUI\n        ];\n    }\n}\n\n/**\n * @internal\n */ function createEditabilityChecker(allowExternalImagesEditing) {\n    const checkUrl = createUrlChecker(allowExternalImagesEditing);\n    return (element)=>{\n        const isImageElement = element.is('element', 'imageInline') || element.is('element', 'imageBlock');\n        if (!isImageElement) {\n            return false;\n        }\n        if (element.hasAttribute('ckboxImageId')) {\n            return true;\n        }\n        if (element.hasAttribute('src')) {\n            return checkUrl(element.getAttribute('src'));\n        }\n        return false;\n    };\n}\nfunction createUrlChecker(allowExternalImagesEditing) {\n    if (Array.isArray(allowExternalImagesEditing)) {\n        const urlMatchers = allowExternalImagesEditing.map(createUrlChecker);\n        return (src)=>urlMatchers.some((matcher)=>matcher(src));\n    }\n    if (allowExternalImagesEditing == 'origin') {\n        const origin = global.window.location.origin;\n        return (src)=>new URL(src, global.document.baseURI).origin == origin;\n    }\n    if (typeof allowExternalImagesEditing == 'function') {\n        return allowExternalImagesEditing;\n    }\n    if (allowExternalImagesEditing instanceof RegExp) {\n        return (src)=>!!(src.match(allowExternalImagesEditing) || src.replace(/^https?:\\/\\//, '').match(allowExternalImagesEditing));\n    }\n    return ()=>false;\n}\n\n/**\n * The CKBox edit image command.\n *\n * Opens the CKBox dialog for editing the image.\n */ class CKBoxImageEditCommand extends Command {\n    /**\n\t * The DOM element that acts as a mounting point for the CKBox Edit Image dialog.\n\t */ _wrapper = null;\n    /**\n\t * The states of image processing in progress.\n\t */ _processInProgress = new Set();\n    /**\n\t * Determines if the element can be edited.\n\t */ _canEdit;\n    /**\n\t * A wrapper function to prepare mount options. Ensures that at most one preparation is in-flight.\n\t */ _prepareOptions;\n    /**\n\t* CKBox's onClose function runs before the final cleanup, potentially causing\n\t* page layout changes after it finishes. To address this, we use a setTimeout hack\n\t* to ensure that floating elements on the page maintain their correct position.\n\t*\n\t* See: https://github.com/ckeditor/ckeditor5/issues/16153.\n\t*/ _updateUiDelayed = delay(()=>this.editor.ui.update(), 0);\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.value = false;\n        this._canEdit = createEditabilityChecker(editor.config.get('ckbox.allowExternalImagesEditing'));\n        this._prepareOptions = abortableDebounce((signal, state)=>this._prepareOptionsAbortable(signal, state));\n        this._prepareListeners();\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        this.value = this._getValue();\n        const selectedElement = editor.model.document.selection.getSelectedElement();\n        this.isEnabled = !!selectedElement && this._canEdit(selectedElement) && !this._checkIfElementIsBeingProcessed(selectedElement);\n    }\n    /**\n\t * Opens the CKBox Image Editor dialog for editing the image.\n\t */ execute() {\n        if (this._getValue()) {\n            return;\n        }\n        const wrapper = createElement(document, 'div', {\n            class: 'ck ckbox-wrapper'\n        });\n        this._wrapper = wrapper;\n        this.value = true;\n        document.body.appendChild(this._wrapper);\n        const imageElement = this.editor.model.document.selection.getSelectedElement();\n        const processingState = {\n            element: imageElement,\n            controller: new AbortController()\n        };\n        this._prepareOptions(processingState).then((options)=>window.CKBox.mountImageEditor(wrapper, options), (error)=>{\n            const editor = this.editor;\n            const t = editor.t;\n            const notification = editor.plugins.get(Notification);\n            notification.showWarning(t('Failed to determine category of edited image.'), {\n                namespace: 'ckbox'\n            });\n            console.error(error);\n            this._handleImageEditorClose();\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._handleImageEditorClose();\n        this._prepareOptions.abort();\n        this._updateUiDelayed.cancel();\n        for (const state of this._processInProgress.values()){\n            state.controller.abort();\n        }\n        super.destroy();\n    }\n    /**\n\t * Indicates if the CKBox Image Editor dialog is already opened.\n\t */ _getValue() {\n        return this._wrapper !== null;\n    }\n    /**\n\t * Creates the options object for the CKBox Image Editor dialog.\n\t */ async _prepareOptionsAbortable(signal, state) {\n        const editor = this.editor;\n        const ckboxConfig = editor.config.get('ckbox');\n        const ckboxUtils = editor.plugins.get(CKBoxUtils);\n        const { element } = state;\n        let imageMountOptions;\n        const ckboxImageId = element.getAttribute('ckboxImageId');\n        if (ckboxImageId) {\n            imageMountOptions = {\n                assetId: ckboxImageId\n            };\n        } else {\n            const imageUrl = new URL(element.getAttribute('src'), document.baseURI).href;\n            const uploadCategoryId = await ckboxUtils.getCategoryIdForFile(imageUrl, {\n                signal\n            });\n            imageMountOptions = {\n                imageUrl,\n                uploadCategoryId\n            };\n        }\n        return {\n            ...imageMountOptions,\n            imageEditing: {\n                allowOverwrite: false\n            },\n            tokenUrl: ckboxConfig.tokenUrl,\n            ...ckboxConfig.serviceOrigin && {\n                serviceOrigin: ckboxConfig.serviceOrigin\n            },\n            onClose: ()=>this._handleImageEditorClose(),\n            onSave: (asset)=>this._handleImageEditorSave(state, asset)\n        };\n    }\n    /**\n\t * Initializes event lister for an event of removing an image.\n\t */ _prepareListeners() {\n        // Abort editing processing when the image has been removed.\n        this.listenTo(this.editor.model.document, 'change:data', ()=>{\n            const processingStates = this._getProcessingStatesOfDeletedImages();\n            processingStates.forEach((processingState)=>{\n                processingState.controller.abort();\n            });\n        });\n    }\n    /**\n\t * Gets processing states of images that have been deleted in the mean time.\n\t */ _getProcessingStatesOfDeletedImages() {\n        const states = [];\n        for (const state of this._processInProgress.values()){\n            if (state.element.root.rootName == '$graveyard') {\n                states.push(state);\n            }\n        }\n        return states;\n    }\n    _checkIfElementIsBeingProcessed(selectedElement) {\n        for (const { element } of this._processInProgress){\n            if (isEqual(element, selectedElement)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Closes the CKBox Image Editor dialog.\n\t */ _handleImageEditorClose() {\n        if (!this._wrapper) {\n            return;\n        }\n        this._wrapper.remove();\n        this._wrapper = null;\n        this.editor.editing.view.focus();\n        this._updateUiDelayed();\n        this.refresh();\n    }\n    /**\n\t * Save edited image. In case server respond with \"success\" replace with edited image,\n\t * otherwise show notification error.\n\t */ _handleImageEditorSave(state, asset) {\n        const t = this.editor.locale.t;\n        const notification = this.editor.plugins.get(Notification);\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        const action = pendingActions.add(t('Processing the edited image.'));\n        this._processInProgress.add(state);\n        this._showImageProcessingIndicator(state.element, asset);\n        this.refresh();\n        this._waitForAssetProcessed(asset.data.id, state.controller.signal).then((asset)=>{\n            this._replaceImage(state.element, asset);\n        }, (error)=>{\n            // Remove processing indicator. It was added only to ViewElement.\n            this.editor.editing.reconvertItem(state.element);\n            if (state.controller.signal.aborted) {\n                return;\n            }\n            if (!error || error instanceof CKEditorError) {\n                notification.showWarning(t('Server failed to process the image.'), {\n                    namespace: 'ckbox'\n                });\n            } else {\n                console.error(error);\n            }\n        }).finally(()=>{\n            this._processInProgress.delete(state);\n            pendingActions.remove(action);\n            this.refresh();\n        });\n    }\n    /**\n\t * Get asset's status on server. If server responds with \"success\" status then\n\t * image is already proceeded and ready for saving.\n\t */ async _getAssetStatusFromServer(id, signal) {\n        const ckboxUtils = this.editor.plugins.get(CKBoxUtils);\n        const url = new URL('assets/' + id, this.editor.config.get('ckbox.serviceOrigin'));\n        const response = await sendHttpRequest({\n            url,\n            signal,\n            authorization: (await ckboxUtils.getToken()).value\n        });\n        const status = response.metadata.metadataProcessingStatus;\n        if (!status || status == 'queued') {\n            /**\n\t\t\t * Image has not been processed yet.\n\t\t\t *\n\t\t\t * @error ckbox-image-not-processed\n\t\t\t */ throw new CKEditorError('ckbox-image-not-processed');\n        }\n        return {\n            data: {\n                ...response\n            }\n        };\n    }\n    /**\n\t * Waits for an asset to be processed.\n\t * It retries retrieving asset status from the server in case of failure.\n\t */ async _waitForAssetProcessed(id, signal) {\n        const result = await retry(()=>this._getAssetStatusFromServer(id, signal), {\n            signal,\n            maxAttempts: 5\n        });\n        if (result.data.metadata.metadataProcessingStatus != 'success') {\n            /**\n\t\t\t * The image processing failed.\n\t\t\t *\n\t\t\t * @error ckbox-image-processing-failed\n\t\t\t */ throw new CKEditorError('ckbox-image-processing-failed');\n        }\n        return result;\n    }\n    /**\n\t * Shows processing indicator while image is processing.\n\t *\n\t * @param asset Data about certain asset.\n\t */ _showImageProcessingIndicator(element, asset) {\n        const editor = this.editor;\n        editor.editing.view.change((writer)=>{\n            const imageElementView = editor.editing.mapper.toViewElement(element);\n            const imageUtils = this.editor.plugins.get('ImageUtils');\n            const img = imageUtils.findViewImgElement(imageElementView);\n            writer.removeStyle('aspect-ratio', img);\n            writer.setAttribute('width', asset.data.metadata.width, img);\n            writer.setAttribute('height', asset.data.metadata.height, img);\n            writer.setStyle('width', `${asset.data.metadata.width}px`, img);\n            writer.setStyle('height', `${asset.data.metadata.height}px`, img);\n            writer.addClass('image-processing', imageElementView);\n        });\n    }\n    /**\n\t * Replace the edited image with the new one.\n\t */ _replaceImage(element, asset) {\n        const editor = this.editor;\n        const { imageFallbackUrl, imageSources, imageWidth, imageHeight, imagePlaceholder } = prepareImageAssetAttributes(asset);\n        const previousSelectionRanges = Array.from(editor.model.document.selection.getRanges());\n        editor.model.change((writer)=>{\n            writer.setSelection(element, 'on');\n            editor.execute('insertImage', {\n                imageType: element.is('element', 'imageInline') ? 'imageInline' : null,\n                source: {\n                    src: imageFallbackUrl,\n                    sources: imageSources,\n                    width: imageWidth,\n                    height: imageHeight,\n                    ...imagePlaceholder ? {\n                        placeholder: imagePlaceholder\n                    } : null,\n                    ...element.hasAttribute('alt') ? {\n                        alt: element.getAttribute('alt')\n                    } : null\n                }\n            });\n            const previousChildren = element.getChildren();\n            element = editor.model.document.selection.getSelectedElement();\n            for (const child of previousChildren){\n                writer.append(writer.cloneElement(child), element);\n            }\n            writer.setAttribute('ckboxImageId', asset.data.id, element);\n            writer.setSelection(previousSelectionRanges);\n        });\n    }\n}\n\n/**\n * The CKBox image edit editing plugin.\n */ class CKBoxImageEditEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxImageEditEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CKBoxEditing,\n            CKBoxUtils,\n            PendingActions,\n            Notification,\n            'ImageUtils',\n            'ImageEditing'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const { editor } = this;\n        editor.commands.add('ckboxImageEdit', new CKBoxImageEditCommand(editor));\n    }\n}\n\nvar ckboxImageEditIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1.201 1C.538 1 0 1.47 0 2.1v14.363c0 .64.534 1.037 1.186 1.037H5.06l5.058-5.078L6.617 9.15a.696.696 0 0 0-.957-.033L1.5 13.6V2.5h15v4.354a3.478 3.478 0 0 1 1.5.049V2.1c0-.63-.547-1.1-1.2-1.1H1.202Zm11.713 2.803a2.147 2.147 0 0 0-2.049 1.992 2.14 2.14 0 0 0 1.28 2.096 2.13 2.13 0 0 0 2.642-3.11 2.129 2.129 0 0 0-1.873-.978ZM8.089 17.635v2.388h2.389l7.046-7.046-2.39-2.39-7.045 7.048Zm11.282-6.507a.637.637 0 0 0 .139-.692.603.603 0 0 0-.139-.205l-1.49-1.488a.63.63 0 0 0-.899 0l-1.166 1.163 2.39 2.39 1.165-1.168Z\\\"/></svg>\";\n\n/**\n * The UI plugin of the CKBox image edit feature.\n *\n * It registers the `'ckboxImageEdit'` UI button in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}\n * that allows you to open the CKBox dialog and edit the image.\n */ class CKBoxImageEditUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxImageEditUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('ckboxImageEdit', (locale)=>{\n            const command = editor.commands.get('ckboxImageEdit');\n            const uploadImageCommand = editor.commands.get('uploadImage');\n            const view = new ButtonView(locale);\n            const t = locale.t;\n            view.set({\n                icon: ckboxImageEditIcon,\n                tooltip: true\n            });\n            view.bind('label').to(uploadImageCommand, 'isAccessAllowed', (isAccessAllowed)=>isAccessAllowed ? t('Edit image') : t('You have no image editing permissions.'));\n            view.bind('isOn').to(command, 'value', command, 'isEnabled', (value, isEnabled)=>value && isEnabled);\n            view.bind('isEnabled').to(command);\n            // Execute the command.\n            this.listenTo(view, 'execute', ()=>{\n                editor.execute('ckboxImageEdit');\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n\n/**\n * The CKBox image edit feature.\n */ class CKBoxImageEdit extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKBoxImageEdit';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CKBoxImageEditEditing,\n            CKBoxImageEditUI\n        ];\n    }\n}\n\nexport { CKBox, CKBoxEditing, CKBoxImageEdit, CKBoxImageEditEditing, CKBoxImageEditUI, CKBoxUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, icons, Command } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView, Notification } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { CKEditorError } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * Introduces UI components for `CKFinder` plugin.\n *\n * The plugin introduces two UI components to the {@link module:ui/componentfactory~ComponentFactory UI component factory}:\n *\n * * the `'ckfinder'` toolbar button,\n * * the `'menuBar:ckfinder'` menu bar component, which is by default added to the `'Insert'` menu.\n *\n * It also integrates with the `insertImage` toolbar component and `menuBar:insertImage` menu component.\n */ class CKFinderUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKFinderUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('ckfinder', ()=>this._createFileToolbarButton());\n        editor.ui.componentFactory.add('menuBar:ckfinder', ()=>this._createFileMenuBarButton());\n        if (editor.plugins.has('ImageInsertUI')) {\n            editor.plugins.get('ImageInsertUI').registerIntegration({\n                name: 'assetManager',\n                observable: ()=>editor.commands.get('ckfinder'),\n                buttonViewCreator: ()=>this._createImageToolbarButton(),\n                formViewCreator: ()=>this._createImageDropdownButton(),\n                menuBarButtonViewCreator: (isOnly)=>this._createImageMenuBarButton(isOnly ? 'insertOnly' : 'insertNested')\n            });\n        }\n    }\n    /**\n\t * Creates the base for various kinds of the button component provided by this feature.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const view = new ButtonClass(locale);\n        const command = editor.commands.get('ckfinder');\n        view.bind('isEnabled').to(command);\n        view.on('execute', ()=>{\n            editor.execute('ckfinder');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n    /**\n\t * Creates a simple toolbar button for files management, with an icon and a tooltip.\n\t */ _createFileToolbarButton() {\n        const t = this.editor.locale.t;\n        const button = this._createButton(ButtonView);\n        button.icon = icons.browseFiles;\n        button.label = t('Insert image or file');\n        button.tooltip = true;\n        return button;\n    }\n    /**\n\t * Creates a simple toolbar button for images management, with an icon and a tooltip.\n\t */ _createImageToolbarButton() {\n        const t = this.editor.locale.t;\n        const imageInsertUI = this.editor.plugins.get('ImageInsertUI');\n        const button = this._createButton(ButtonView);\n        button.icon = icons.imageAssetManager;\n        button.bind('label').to(imageInsertUI, 'isImageSelected', (isImageSelected)=>isImageSelected ? t('Replace image with file manager') : t('Insert image with file manager'));\n        button.tooltip = true;\n        return button;\n    }\n    /**\n\t * Creates a button for images management for the dropdown view, with an icon, text and no tooltip.\n\t */ _createImageDropdownButton() {\n        const t = this.editor.locale.t;\n        const imageInsertUI = this.editor.plugins.get('ImageInsertUI');\n        const button = this._createButton(ButtonView);\n        button.icon = icons.imageAssetManager;\n        button.withText = true;\n        button.bind('label').to(imageInsertUI, 'isImageSelected', (isImageSelected)=>isImageSelected ? t('Replace with file manager') : t('Insert with file manager'));\n        button.on('execute', ()=>{\n            imageInsertUI.dropdownView.isOpen = false;\n        });\n        return button;\n    }\n    /**\n\t * Creates a button for files management for the menu bar.\n\t */ _createFileMenuBarButton() {\n        const t = this.editor.locale.t;\n        const button = this._createButton(MenuBarMenuListItemButtonView);\n        button.icon = icons.browseFiles;\n        button.withText = true;\n        button.label = t('File');\n        return button;\n    }\n    /**\n\t * Creates a button for images management for the menu bar.\n\t */ _createImageMenuBarButton(type) {\n        // Use t() stored in a variable with a different name to reuse existing translations from another package.\n        const translateVariableKey = this.editor.locale.t;\n        const t = this.editor.locale.t;\n        const button = this._createButton(MenuBarMenuListItemButtonView);\n        button.icon = icons.imageAssetManager;\n        button.withText = true;\n        switch(type){\n            case 'insertOnly':\n                button.label = translateVariableKey('Image');\n                break;\n            case 'insertNested':\n                button.label = t('With file manager');\n                break;\n        }\n        return button;\n    }\n}\n\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing CKFinder editing feature}\n * to open the CKFinder file manager to insert an image or a link to a file into the editor content.\n *\n * ```ts\n * editor.execute( 'ckfinder' );\n * ```\n *\n * **Note:** This command uses other features to perform tasks:\n * - To insert images the {@link module:image/image/insertimagecommand~InsertImageCommand 'insertImage'} command\n * from the {@link module:image/image~Image Image feature}.\n * - To insert links to files the {@link module:link/linkcommand~LinkCommand 'link'} command\n * from the {@link module:link/link~Link Link feature}.\n */ class CKFinderCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // The CKFinder command does not affect data by itself.\n        this.affectsData = false;\n        // Remove default document listener to lower its priority.\n        this.stopListening(this.editor.model.document, 'change');\n        // Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n        this.listenTo(this.editor.model.document, 'change', ()=>this.refresh(), {\n            priority: 'low'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const imageCommand = this.editor.commands.get('insertImage');\n        const linkCommand = this.editor.commands.get('link');\n        // The CKFinder command is enabled when one of image or link command is enabled.\n        this.isEnabled = imageCommand.isEnabled || linkCommand.isEnabled;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const editor = this.editor;\n        const openerMethod = this.editor.config.get('ckfinder.openerMethod') || 'modal';\n        if (openerMethod != 'popup' && openerMethod != 'modal') {\n            /**\n\t\t\t * The `ckfinder.openerMethod` must be one of: \"popup\" or \"modal\".\n\t\t\t *\n\t\t\t * @error ckfinder-unknown-openermethod\n\t\t\t */ throw new CKEditorError('ckfinder-unknown-openermethod', editor);\n        }\n        const options = this.editor.config.get('ckfinder.options') || {};\n        options.chooseFiles = true;\n        // Cache the user-defined onInit method\n        const originalOnInit = options.onInit;\n        // Pass the lang code to the CKFinder if not defined by user.\n        if (!options.language) {\n            options.language = editor.locale.uiLanguage;\n        }\n        // The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n        options.onInit = (finder)=>{\n            // Call original options.onInit if it was defined by user.\n            if (originalOnInit) {\n                originalOnInit(finder);\n            }\n            finder.on('files:choose', (evt)=>{\n                const files = evt.data.files.toArray();\n                // Insert links\n                const links = files.filter((file)=>!file.isImage());\n                const images = files.filter((file)=>file.isImage());\n                for (const linkFile of links){\n                    editor.execute('link', linkFile.getUrl());\n                }\n                const imagesUrls = [];\n                for (const image of images){\n                    const url = image.getUrl();\n                    imagesUrls.push(url ? url : finder.request('file:getProxyUrl', {\n                        file: image\n                    }));\n                }\n                if (imagesUrls.length) {\n                    insertImages(editor, imagesUrls);\n                }\n            });\n            finder.on('file:choose:resizedImage', (evt)=>{\n                const resizedUrl = evt.data.resizedUrl;\n                if (!resizedUrl) {\n                    const notification = editor.plugins.get('Notification');\n                    const t = editor.locale.t;\n                    notification.showWarning(t('Could not obtain resized image URL.'), {\n                        title: t('Selecting resized image failed'),\n                        namespace: 'ckfinder'\n                    });\n                    return;\n                }\n                insertImages(editor, [\n                    resizedUrl\n                ]);\n            });\n        };\n        window.CKFinder[openerMethod](options);\n    }\n}\nfunction insertImages(editor, urls) {\n    const imageCommand = editor.commands.get('insertImage');\n    // Check if inserting an image is actually possible - it might be possible to only insert a link.\n    if (!imageCommand.isEnabled) {\n        const notification = editor.plugins.get('Notification');\n        const t = editor.locale.t;\n        notification.showWarning(t('Could not insert image at the current position.'), {\n            title: t('Inserting image failed'),\n            namespace: 'ckfinder'\n        });\n        return;\n    }\n    editor.execute('insertImage', {\n        source: urls\n    });\n}\n\n/**\n * The CKFinder editing feature. It introduces the {@link module:ckfinder/ckfindercommand~CKFinderCommand CKFinder command}.\n */ class CKFinderEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKFinderEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Notification,\n            'LinkEditing'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ImageBlockEditing') && !editor.plugins.has('ImageInlineEditing')) {\n            /**\n\t\t\t * CKFinder requires at least one plugin providing support for images loaded in the editor. Please\n\t\t\t * make sure either:\n\t\t\t *\n\t\t\t * * {@link module:image/image~Image} (which loads both types of images),\n\t\t\t * * or {@link module:image/imageblock~ImageBlock},\n\t\t\t * * or {@link module:image/imageinline~ImageInline}.\n\t\t\t *\n\t\t\t * is loaded in your editor configuration.\n\t\t\t *\n\t\t\t * @error ckfinder-missing-image-plugin\n\t\t\t */ throw new CKEditorError('ckfinder-missing-image-plugin', editor);\n        }\n        editor.commands.add('ckfinder', new CKFinderCommand(editor));\n    }\n}\n\n/**\n * The CKFinder feature, a bridge between the CKEditor 5 WYSIWYG editor and the\n * [CKFinder](https://ckeditor.com/ckfinder) file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckfinder/ckfinderediting~CKFinderEditing},\n * * {@link module:ckfinder/ckfinderui~CKFinderUI},\n * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}.\n *\n * See the {@glink features/file-management/ckfinder \"CKFinder integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n */ class CKFinder extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CKFinder';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'Link',\n            'CKFinderUploadAdapter',\n            CKFinderEditing,\n            CKFinderUI\n        ];\n    }\n}\n\nexport { CKFinder, CKFinderEditing, CKFinderUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ContextPlugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ObservableMixin, CKEditorError, logWarning, EmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\nconst DEFAULT_OPTIONS = {\n    autoRefresh: true\n};\nconst DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME = 3600000; // 1 hour\nconst TOKEN_FAILED_REFRESH_TIMEOUT_TIME = 5000; // 5 seconds\n/**\n * The class representing the token used for communication with CKEditor Cloud Services.\n * The value of the token is retrieved from the specified URL and refreshed every 1 hour by default.\n * If the token retrieval fails, the token will automatically retry in 5 seconds intervals.\n */ class Token extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Base refreshing function.\n\t */ _refresh;\n    /**\n\t * Cached token options.\n\t */ _options;\n    /**\n\t * `setTimeout()` id for a token refresh when {@link module:cloud-services/token/token~TokenOptions auto refresh} is enabled.\n\t */ _tokenRefreshTimeout;\n    /**\n\t * Creates `Token` instance.\n\t * Method `init` should be called after using the constructor or use `create` method instead.\n\t *\n\t * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n\t */ constructor(tokenUrlOrRefreshToken, options = {}){\n        super();\n        if (!tokenUrlOrRefreshToken) {\n            /**\n\t\t\t * A `tokenUrl` must be provided as the first constructor argument.\n\t\t\t *\n\t\t\t * @error token-missing-token-url\n\t\t\t */ throw new CKEditorError('token-missing-token-url', this);\n        }\n        if (options.initValue) {\n            this._validateTokenValue(options.initValue);\n        }\n        this.set('value', options.initValue);\n        if (typeof tokenUrlOrRefreshToken === 'function') {\n            this._refresh = tokenUrlOrRefreshToken;\n        } else {\n            this._refresh = ()=>defaultRefreshToken(tokenUrlOrRefreshToken);\n        }\n        this._options = {\n            ...DEFAULT_OPTIONS,\n            ...options\n        };\n    }\n    /**\n\t * Initializes the token.\n\t */ init() {\n        return new Promise((resolve, reject)=>{\n            if (!this.value) {\n                this.refreshToken().then(resolve).catch(reject);\n                return;\n            }\n            if (this._options.autoRefresh) {\n                this._registerRefreshTokenTimeout();\n            }\n            resolve(this);\n        });\n    }\n    /**\n\t * Refresh token method. Useful in a method form as it can be overridden in tests.\n\t *\n\t * This method will be invoked periodically based on the token expiry date after first call to keep the token up-to-date\n\t * (requires {@link module:cloud-services/token/token~TokenOptions auto refresh option} to be set).\n\t *\n\t * If the token refresh fails, the method will retry in 5 seconds intervals until success or the token gets\n\t * {@link #destroy destroyed}.\n\t */ refreshToken() {\n        const autoRefresh = this._options.autoRefresh;\n        return this._refresh().then((value)=>{\n            this._validateTokenValue(value);\n            this.set('value', value);\n            if (autoRefresh) {\n                this._registerRefreshTokenTimeout();\n            }\n            return this;\n        }).catch((err)=>{\n            /**\n\t\t\t\t * You will see this warning when the CKEditor {@link module:cloud-services/token/token~Token token} could not be refreshed.\n\t\t\t\t * This may be a result of a network error, a token endpoint (server) error, or an invalid\n\t\t\t\t * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl token URL configuration}.\n\t\t\t\t *\n\t\t\t\t * If this warning repeats, please make sure that the configuration is correct and that the token\n\t\t\t\t * endpoint is up and running. {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl Learn more}\n\t\t\t\t * about token configuration.\n\t\t\t\t *\n\t\t\t\t * **Note:** If the token's {@link module:cloud-services/token/token~TokenOptions auto refresh option} is enabled,\n\t\t\t\t * attempts to refresh will be made until success or token's\n\t\t\t\t * {@link module:cloud-services/token/token~Token#destroy destruction}.\n\t\t\t\t *\n\t\t\t\t * @error token-refresh-failed\n\t\t\t\t * @param autoRefresh Whether the token will keep auto refreshing.\n\t\t\t\t */ logWarning('token-refresh-failed', {\n                autoRefresh\n            });\n            // If the refresh failed, keep trying to refresh the token. Failing to do so will eventually\n            // lead to the disconnection from the RTC service and the editing session (and potential data loss\n            // if the user keeps editing).\n            if (autoRefresh) {\n                this._registerRefreshTokenTimeout(TOKEN_FAILED_REFRESH_TIMEOUT_TIME);\n            }\n            throw err;\n        });\n    }\n    /**\n\t * Destroys token instance. Stops refreshing.\n\t */ destroy() {\n        clearTimeout(this._tokenRefreshTimeout);\n    }\n    /**\n\t * Checks whether the provided token follows the JSON Web Tokens (JWT) format.\n\t *\n\t * @param tokenValue The token to validate.\n\t */ _validateTokenValue(tokenValue) {\n        // The token must be a string.\n        const isString = typeof tokenValue === 'string';\n        // The token must be a plain string without quotes (\"\").\n        const isPlainString = !/^\".*\"$/.test(tokenValue);\n        // JWT token contains 3 parts: header, payload, and signature.\n        // Each part is separated by a dot.\n        const isJWTFormat = isString && tokenValue.split('.').length === 3;\n        if (!(isPlainString && isJWTFormat)) {\n            /**\n\t\t\t * The provided token must follow the [JSON Web Tokens](https://jwt.io/introduction/) format.\n\t\t\t *\n\t\t\t * @error token-not-in-jwt-format\n\t\t\t */ throw new CKEditorError('token-not-in-jwt-format', this);\n        }\n    }\n    /**\n\t * Registers a refresh token timeout for the time taken from token.\n\t */ _registerRefreshTokenTimeout(timeoutTime) {\n        const tokenRefreshTimeoutTime = timeoutTime || this._getTokenRefreshTimeoutTime();\n        clearTimeout(this._tokenRefreshTimeout);\n        this._tokenRefreshTimeout = setTimeout(()=>{\n            this.refreshToken();\n        }, tokenRefreshTimeoutTime);\n    }\n    /**\n\t * Returns token refresh timeout time calculated from expire time in the token payload.\n\t *\n\t * If the token parse fails or the token payload doesn't contain, the default DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME is returned.\n\t */ _getTokenRefreshTimeoutTime() {\n        try {\n            const [, binaryTokenPayload] = this.value.split('.');\n            const { exp: tokenExpireTime } = JSON.parse(atob(binaryTokenPayload));\n            if (!tokenExpireTime) {\n                return DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME;\n            }\n            const tokenRefreshTimeoutTime = Math.floor((tokenExpireTime * 1000 - Date.now()) / 2);\n            return tokenRefreshTimeoutTime;\n        } catch (err) {\n            return DEFAULT_TOKEN_REFRESH_TIMEOUT_TIME;\n        }\n    }\n    /**\n\t * Creates a initialized {@link module:cloud-services/token/token~Token} instance.\n\t *\n\t * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n\t */ static create(tokenUrlOrRefreshToken, options = {}) {\n        const token = new Token(tokenUrlOrRefreshToken, options);\n        return token.init();\n    }\n}\n/**\n * This function is called in a defined interval by the {@link ~Token} class. It also can be invoked manually.\n * It should return a promise, which resolves with the new token value.\n * If any error occurs it should return a rejected promise with an error message.\n */ function defaultRefreshToken(tokenUrl) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', tokenUrl);\n        xhr.addEventListener('load', ()=>{\n            const statusCode = xhr.status;\n            const xhrResponse = xhr.response;\n            if (statusCode < 200 || statusCode > 299) {\n                /**\n\t\t\t\t * Cannot download new token from the provided url.\n\t\t\t\t *\n\t\t\t\t * @error token-cannot-download-new-token\n\t\t\t\t */ return reject(new CKEditorError('token-cannot-download-new-token', null));\n            }\n            return resolve(xhrResponse);\n        });\n        xhr.addEventListener('error', ()=>reject(new Error('Network Error')));\n        xhr.addEventListener('abort', ()=>reject(new Error('Abort')));\n        xhr.send();\n    });\n}\n\nconst BASE64_HEADER_REG_EXP = /^data:(\\S*?);base64,/;\n/**\n * FileUploader class used to upload single file.\n */ class FileUploader extends /* #__PURE__ */ EmitterMixin() {\n    /**\n\t * A file that is being uploaded.\n\t */ file;\n    xhr;\n    /**\n\t * CKEditor Cloud Services access token.\n\t */ _token;\n    /**\n\t * CKEditor Cloud Services API address.\n\t */ _apiAddress;\n    /**\n\t * Creates `FileUploader` instance.\n\t *\n\t * @param fileOrData A blob object or a data string encoded with Base64.\n\t * @param token Token used for authentication.\n\t * @param apiAddress API address.\n\t */ constructor(fileOrData, token, apiAddress){\n        super();\n        if (!fileOrData) {\n            /**\n\t\t\t * File must be provided as the first argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-file\n\t\t\t */ throw new CKEditorError('fileuploader-missing-file', null);\n        }\n        if (!token) {\n            /**\n\t\t\t * Token must be provided as the second argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-token\n\t\t\t */ throw new CKEditorError('fileuploader-missing-token', null);\n        }\n        if (!apiAddress) {\n            /**\n\t\t\t * Api address must be provided as the third argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-api-address\n\t\t\t */ throw new CKEditorError('fileuploader-missing-api-address', null);\n        }\n        this.file = _isBase64(fileOrData) ? _base64ToBlob(fileOrData) : fileOrData;\n        this._token = token;\n        this._apiAddress = apiAddress;\n    }\n    /**\n\t * Registers callback on `progress` event.\n\t */ onProgress(callback) {\n        this.on('progress', (event, data)=>callback(data));\n        return this;\n    }\n    /**\n\t * Registers callback on `error` event. Event is called once when error occurs.\n\t */ onError(callback) {\n        this.once('error', (event, data)=>callback(data));\n        return this;\n    }\n    /**\n\t * Aborts upload process.\n\t */ abort() {\n        this.xhr.abort();\n    }\n    /**\n\t * Sends XHR request to API.\n\t */ send() {\n        this._prepareRequest();\n        this._attachXHRListeners();\n        return this._sendRequest();\n    }\n    /**\n\t * Prepares XHR request.\n\t */ _prepareRequest() {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', this._apiAddress);\n        xhr.setRequestHeader('Authorization', this._token.value);\n        xhr.responseType = 'json';\n        this.xhr = xhr;\n    }\n    /**\n\t * Attaches listeners to the XHR.\n\t */ _attachXHRListeners() {\n        const xhr = this.xhr;\n        const onError = (message)=>{\n            return ()=>this.fire('error', message);\n        };\n        xhr.addEventListener('error', onError('Network Error'));\n        xhr.addEventListener('abort', onError('Abort'));\n        /* istanbul ignore else -- @preserve */ if (xhr.upload) {\n            xhr.upload.addEventListener('progress', (event)=>{\n                if (event.lengthComputable) {\n                    this.fire('progress', {\n                        total: event.total,\n                        uploaded: event.loaded\n                    });\n                }\n            });\n        }\n        xhr.addEventListener('load', ()=>{\n            const statusCode = xhr.status;\n            const xhrResponse = xhr.response;\n            if (statusCode < 200 || statusCode > 299) {\n                return this.fire('error', xhrResponse.message || xhrResponse.error);\n            }\n        });\n    }\n    /**\n\t * Sends XHR request.\n\t */ _sendRequest() {\n        const formData = new FormData();\n        const xhr = this.xhr;\n        formData.append('file', this.file);\n        return new Promise((resolve, reject)=>{\n            xhr.addEventListener('load', ()=>{\n                const statusCode = xhr.status;\n                const xhrResponse = xhr.response;\n                if (statusCode < 200 || statusCode > 299) {\n                    if (xhrResponse.message) {\n                        /**\n\t\t\t\t\t\t * Uploading file failed.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error fileuploader-uploading-data-failed\n\t\t\t\t\t\t */ return reject(new CKEditorError('fileuploader-uploading-data-failed', this, {\n                            message: xhrResponse.message\n                        }));\n                    }\n                    return reject(xhrResponse.error);\n                }\n                return resolve(xhrResponse);\n            });\n            xhr.addEventListener('error', ()=>reject(new Error('Network Error')));\n            xhr.addEventListener('abort', ()=>reject(new Error('Abort')));\n            xhr.send(formData);\n        });\n    }\n}\n/**\n * Transforms Base64 string data into file.\n *\n * @param base64 String data.\n */ function _base64ToBlob(base64, sliceSize = 512) {\n    try {\n        const contentType = base64.match(BASE64_HEADER_REG_EXP)[1];\n        const base64Data = atob(base64.replace(BASE64_HEADER_REG_EXP, ''));\n        const byteArrays = [];\n        for(let offset = 0; offset < base64Data.length; offset += sliceSize){\n            const slice = base64Data.slice(offset, offset + sliceSize);\n            const byteNumbers = new Array(slice.length);\n            for(let i = 0; i < slice.length; i++){\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n            byteArrays.push(new Uint8Array(byteNumbers));\n        }\n        return new Blob(byteArrays, {\n            type: contentType\n        });\n    } catch (error) {\n        /**\n\t\t * Problem with decoding Base64 image data.\n\t\t *\n\t\t * @error fileuploader-decoding-image-data-error\n\t\t */ throw new CKEditorError('fileuploader-decoding-image-data-error', null);\n    }\n}\n/**\n * Checks that string is Base64.\n */ function _isBase64(string) {\n    if (typeof string !== 'string') {\n        return false;\n    }\n    const match = string.match(BASE64_HEADER_REG_EXP);\n    return !!(match && match.length);\n}\n\n/**\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\n */ class UploadGateway {\n    /**\n\t * CKEditor Cloud Services access token.\n\t */ _token;\n    /**\n\t * CKEditor Cloud Services API address.\n\t */ _apiAddress;\n    /**\n\t * Creates `UploadGateway` instance.\n\t *\n\t * @param token Token used for authentication.\n\t * @param apiAddress API address.\n\t */ constructor(token, apiAddress){\n        if (!token) {\n            /**\n\t\t\t * Token must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-token\n\t\t\t */ throw new CKEditorError('uploadgateway-missing-token', null);\n        }\n        if (!apiAddress) {\n            /**\n\t\t\t * Api address must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-api-address\n\t\t\t */ throw new CKEditorError('uploadgateway-missing-api-address', null);\n        }\n        this._token = token;\n        this._apiAddress = apiAddress;\n    }\n    /**\n\t * Creates a {@link module:cloud-services/uploadgateway/fileuploader~FileUploader} instance that wraps\n\t * file upload process. The file is being sent at a time when the\n\t * {@link module:cloud-services/uploadgateway/fileuploader~FileUploader#send} method is called.\n\t *\n\t * ```ts\n\t * const token = await Token.create( 'https://token-endpoint' );\n\t * new UploadGateway( token, 'https://example.org' )\n\t * \t.upload( 'FILE' )\n\t * \t.onProgress( ( data ) => console.log( data ) )\n\t * \t.send()\n\t * \t.then( ( response ) => console.log( response ) );\n\t * ```\n\t *\n\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n\t * @returns {module:cloud-services/uploadgateway/fileuploader~FileUploader} Returns `FileUploader` instance.\n\t */ upload(fileOrData) {\n        return new FileUploader(fileOrData, this._token, this._apiAddress);\n    }\n}\n\n/**\n * The `CloudServicesCore` plugin exposes the base API for communication with CKEditor Cloud Services.\n */ class CloudServicesCore extends ContextPlugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CloudServicesCore';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Creates the {@link module:cloud-services/token/token~Token} instance.\n\t *\n\t * @param tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link module:cloud-services/token/token~Token#refreshToken} interface.\n\t * @param options.initValue Initial value of the token.\n\t * @param options.autoRefresh Specifies whether to start the refresh automatically.\n\t */ createToken(tokenUrlOrRefreshToken, options) {\n        return new Token(tokenUrlOrRefreshToken, options);\n    }\n    /**\n\t * Creates the {@link module:cloud-services/uploadgateway/uploadgateway~UploadGateway} instance.\n\t *\n\t * @param token Token used for authentication.\n\t * @param apiAddress API address.\n\t */ createUploadGateway(token, apiAddress) {\n        return new UploadGateway(token, apiAddress);\n    }\n}\n\n/**\n * Plugin introducing the integration between CKEditor 5 and CKEditor Cloud Services .\n *\n * It initializes the token provider based on\n * the {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig `config.cloudService`}.\n */ class CloudServices extends ContextPlugin {\n    /**\n\t * The authentication token URL for CKEditor Cloud Services or a callback to the token value promise. See the\n\t * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl} for more details.\n\t */ tokenUrl;\n    /**\n\t * The URL to which the files should be uploaded.\n\t */ uploadUrl;\n    /**\n\t * The URL for web socket communication, used by the `RealTimeCollaborativeEditing` plugin. Every customer (organization in the CKEditor\n\t * Ecosystem dashboard) has their own, unique URLs to communicate with CKEditor Cloud Services. The URL can be found in the\n\t * CKEditor Ecosystem customer dashboard.\n\t *\n\t * Note: Unlike most plugins, `RealTimeCollaborativeEditing` is not included in any CKEditor 5 build and needs to be installed manually.\n\t * Check [Collaboration overview](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/overview.html) for more details.\n\t */ webSocketUrl;\n    /**\n\t * An optional parameter used for integration with CKEditor Cloud Services when uploading the editor build to cloud services.\n\t *\n\t * Whenever the editor build or the configuration changes, this parameter should be set to a new, unique value to differentiate\n\t * the new bundle (build + configuration) from the old ones.\n\t */ bundleVersion;\n    /**\n\t * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\n\t * Its value is `null` when {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl} is not provided.\n\t *\n\t * @readonly\n\t */ token = null;\n    /**\n\t * A map of token object instances keyed by the token URLs.\n\t */ _tokens = new Map();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CloudServices';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CloudServicesCore\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ async init() {\n        const config = this.context.config;\n        const options = config.get('cloudServices') || {};\n        for (const [key, value] of Object.entries(options)){\n            this[key] = value;\n        }\n        if (!this.tokenUrl) {\n            this.token = null;\n            return;\n        }\n        const cloudServicesCore = this.context.plugins.get('CloudServicesCore');\n        this.token = await cloudServicesCore.createToken(this.tokenUrl).init();\n        this._tokens.set(this.tokenUrl, this.token);\n    }\n    /**\n\t * Registers an additional authentication token URL for CKEditor Cloud Services or a callback to the token value promise. See the\n\t * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig#tokenUrl} for more details.\n\t *\n\t * @param tokenUrl The authentication token URL for CKEditor Cloud Services or a callback to the token value promise.\n\t */ async registerTokenUrl(tokenUrl) {\n        // Reuse the token instance in case of multiple features using the same token URL.\n        if (this._tokens.has(tokenUrl)) {\n            return this.getTokenFor(tokenUrl);\n        }\n        const cloudServicesCore = this.context.plugins.get('CloudServicesCore');\n        const token = await cloudServicesCore.createToken(tokenUrl).init();\n        this._tokens.set(tokenUrl, token);\n        return token;\n    }\n    /**\n\t * Returns an authentication token provider previously registered by {@link #registerTokenUrl}.\n\t *\n\t * @param tokenUrl The authentication token URL for CKEditor Cloud Services or a callback to the token value promise.\n\t */ getTokenFor(tokenUrl) {\n        const token = this._tokens.get(tokenUrl);\n        if (!token) {\n            /**\n\t\t\t * The provided `tokenUrl` was not registered by {@link module:cloud-services/cloudservices~CloudServices#registerTokenUrl}.\n\t\t\t *\n\t\t\t * @error cloudservices-token-not-registered\n\t\t\t */ throw new CKEditorError('cloudservices-token-not-registered', this);\n        }\n        return token;\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        for (const token of this._tokens.values()){\n            token.destroy();\n        }\n    }\n}\n\nexport { CloudServices, CloudServicesCore, Token };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ShiftEnter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { UpcastWriter } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { first, Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { createDropdown, SplitButtonView, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ViewModel } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Returns code block languages as defined in `config.codeBlock.languages` but processed:\n *\n * * To consider the editor localization, i.e. to display {@link module:code-block/codeblockconfig~CodeBlockLanguageDefinition}\n * in the correct language. There is no way to use {@link module:utils/locale~Locale#t} when the user\n * configuration is defined because the editor does not exist yet.\n * * To make sure each definition has a CSS class associated with it even if not specified\n * in the original configuration.\n */ function getNormalizedAndLocalizedLanguageDefinitions(editor) {\n    const t = editor.t;\n    const languageDefs = editor.config.get('codeBlock.languages');\n    for (const def of languageDefs){\n        if (def.label === 'Plain text') {\n            def.label = t('Plain text');\n        }\n        if (def.class === undefined) {\n            def.class = `language-${def.language}`;\n        }\n    }\n    return languageDefs;\n}\n/**\n * Returns an object associating certain language definition properties with others. For instance:\n *\n * For:\n *\n * ```ts\n * const definitions = {\n * \t{ language: 'php', class: 'language-php', label: 'PHP' },\n * \t{ language: 'javascript', class: 'js', label: 'JavaScript' },\n * };\n *\n * getPropertyAssociation( definitions, 'class', 'language' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'language-php': 'php',\n * \t'js': 'javascript'\n * }\n * ```\n *\n * and\n *\n * ```ts\n * getPropertyAssociation( definitions, 'language', 'label' );\n * ```\n *\n * returns:\n *\n * ```ts\n * {\n * \t'php': 'PHP',\n * \t'javascript': 'JavaScript'\n * }\n * ```\n */ function getPropertyAssociation(languageDefs, key, value) {\n    const association = {};\n    for (const def of languageDefs){\n        if (key === 'class') {\n            // Only the first class is considered.\n            const newKey = def[key].split(' ').shift();\n            association[newKey] = def[value];\n        } else {\n            association[def[key]] = def[value];\n        }\n    }\n    return association;\n}\n/**\n * For a given model text node, it returns white spaces that precede other characters in that node.\n * This corresponds to the indentation part of the code block line.\n */ function getLeadingWhiteSpaces(textNode) {\n    return textNode.data.match(/^(\\s*)/)[0];\n}\n/**\n * For plain text containing the code (a snippet), it returns a document fragment containing\n * view text nodes separated by `<br>` elements (in place of new line characters \"\\n\"), for instance:\n *\n * Input:\n *\n * ```ts\n * \"foo()\\n\n * bar()\"\n * ```\n *\n * Output:\n *\n * ```html\n * <DocumentFragment>\n * \t\"foo()\"\n * \t<br/>\n * \t\"bar()\"\n * </DocumentFragment>\n * ```\n *\n * @param text The raw code text to be converted.\n */ function rawSnippetTextToViewDocumentFragment(writer, text) {\n    const fragment = writer.createDocumentFragment();\n    const textLines = text.split('\\n');\n    const items = textLines.reduce((nodes, line, lineIndex)=>{\n        nodes.push(line);\n        if (lineIndex < textLines.length - 1) {\n            nodes.push(writer.createElement('br'));\n        }\n        return nodes;\n    }, []);\n    writer.appendChild(items, fragment);\n    return fragment;\n}\n/**\n * Returns an array of all model positions within the selection that represent code block lines.\n *\n * If the selection is collapsed, it returns the exact selection anchor position:\n *\n * ```html\n * <codeBlock>[]foo</codeBlock>        ->     <codeBlock>^foo</codeBlock>\n * <codeBlock>foo[]bar</codeBlock>     ->     <codeBlock>foo^bar</codeBlock>\n * ```\n *\n * Otherwise, it returns positions **before** each text node belonging to all code blocks contained by the selection:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n *     <softBreak></softBreak>         ->        <softBreak></softBreak>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * It also works across other non–code blocks:\n *\n * ```html\n * <codeBlock>                                <codeBlock>\n *     foo[bar                                   ^foobar\n * </codeBlock>                               </codeBlock>\n * <paragraph>text</paragraph>         ->     <paragraph>text</paragraph>\n * <codeBlock>                                <codeBlock>\n *     baz]qux                                   ^bazqux\n * </codeBlock>                               </codeBlock>\n * ```\n *\n * **Note:** The positions are in reverse order so they do not get outdated when iterating over them and\n * the writer inserts or removes elements at the same time.\n *\n * **Note:** The position is located after the leading white spaces in the text node.\n */ function getIndentOutdentPositions(model) {\n    const selection = model.document.selection;\n    const positions = [];\n    // When the selection is collapsed, there's only one position we can indent or outdent.\n    if (selection.isCollapsed) {\n        return [\n            selection.anchor\n        ];\n    }\n    // When the selection is NOT collapsed, collect all positions starting before text nodes\n    // (code lines) in any <codeBlock> within the selection.\n    // Walk backward so positions we are about to collect here do not get outdated when\n    // inserting or deleting using the writer.\n    const walker = selection.getFirstRange().getWalker({\n        ignoreElementEnd: true,\n        direction: 'backward'\n    });\n    for (const { item } of walker){\n        let node = item.is('$textProxy') ? item.textNode : item;\n        const parent = node.parent;\n        if (!parent.is('element', 'codeBlock') || node.is('element', 'softBreak')) {\n            continue;\n        }\n        // For each item in code block, move backwards until the beginning of the line it is in is found.\n        while(node.previousSibling && !node.previousSibling.is('element', 'softBreak')){\n            node = node.previousSibling;\n        }\n        // Take the leading white spaces into account (only for text nodes).\n        const startOffset = !node.is('$text') ? node.startOffset : node.startOffset + getLeadingWhiteSpaces(node).length;\n        const position = model.createPositionAt(parent, startOffset);\n        // Do not add the same position twice. Unfortunately using set doesn't deduplicate positions because\n        // they are different objects.\n        if (positions.every((pos)=>!pos.isEqual(position))) {\n            positions.push(position);\n        }\n    }\n    return positions;\n}\n/**\n * Checks if any of the blocks within the model selection is a code block.\n */ function isModelSelectionInCodeBlock(selection) {\n    const firstBlock = first(selection.getSelectedBlocks());\n    return !!firstBlock && firstBlock.is('element', 'codeBlock');\n}\n/**\n * Checks if an {@link module:engine/model/element~Element Element} can become a code block.\n *\n * @param schema Model's schema.\n * @param element The element to be checked.\n * @returns Check result.\n */ function canBeCodeBlock(schema, element) {\n    if (element.is('rootElement') || schema.isLimit(element)) {\n        return false;\n    }\n    return schema.checkChild(element.parent, 'codeBlock');\n}\n/**\n * Get the translated message read by the screen reader when you enter or exit an element with your cursor.\n */ function getCodeBlockAriaAnnouncement(t, languageDefs, element, direction) {\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    const codeBlockLanguage = element.getAttribute('language');\n    if (codeBlockLanguage in languagesToLabels) {\n        const language = languagesToLabels[codeBlockLanguage];\n        if (direction === 'enter') {\n            return t('Entering %0 code snippet', language);\n        }\n        return t('Leaving %0 code snippet', language);\n    }\n    if (direction === 'enter') {\n        return t('Entering code snippet');\n    }\n    return t('Leaving code snippet');\n}\n/**\n * For given position, finds the closest position that is at the beginning of a line of code and returns a text node that is at the\n * beginning of the line (or `null` if there's no text node at the beginning of a given line).\n *\n * Line beings at the start of a code block element and after each `softBreak` element.\n *\n * Note: even though code block doesn't allow inline elements other than `<softBreak>` by default, some features may overwrite this rule,\n * so such inline elements are taken into account.\n *\n * Some examples of expected results:\n *\n * ```\n * <codeBlock>^</codeBlock>                                ->   null\n * <codeBlock>^foobar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foobar^</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^bar</codeBlock>                          ->   <codeBlock>[foobar]</codeBlock>\n * <codeBlock>foo^<softBreak />bar</codeBlock>             ->   <codeBlock>[foo]<softBreak />bar</codeBlock>\n * <codeBlock>foo<softBreak />bar^</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />b^ar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>foo<softBreak />^bar</codeBlock>             ->   <codeBlock>foo<softBreak />[bar]</codeBlock>\n * <codeBlock>^<element /></codeBlock>                     ->   null\n * <codeBlock><element />^</codeBlock>                     ->   null\n * <codeBlock>foo^<element /></codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />^</codeBlock>                  ->   <codeBlock>[foo]<element /></codeBlock>\n * <codeBlock>foo<element />bar^</codeBlock>               ->   <codeBlock>[foo]<element />bar</codeBlock>\n * <codeBlock><element />bar^</codeBlock>                  ->   null\n * <codeBlock>foo<softBreak />^<softBreak /></codeBlock>   ->   null\n * <codeBlock>foo<softBreak />^<element /></codeBlock>     ->   null\n * <codeBlock>foo<softBreak /><element />^</codeBlock>     ->   null\n * <codeBlock>foo<softBreak />bar<element />^</codeBlock>  ->   <codeBlock>foo<softBreak />[bar]<element /></codeBlock>\n * <codeBlock>foo<softBreak /><element />ba^r</codeBlock>  ->   null\n * ```\n */ function getTextNodeAtLineStart(position, model) {\n    // First, move position before a text node, if it is inside a text node.\n    if (position.textNode) {\n        position = model.createPositionBefore(position.textNode);\n    }\n    // Then, jump-back the position until it is before a `softBreak` or at the beginning of the `codeBlock`.\n    while(position.nodeBefore && !position.nodeBefore.is('element', 'softBreak')){\n        position = model.createPositionBefore(position.nodeBefore);\n    }\n    // Now, the position is at the beginning of a line.\n    // Return a text node after the position, if there is one.\n    const nodeAtStart = position.nodeAfter;\n    return nodeAtStart && nodeAtStart.is('$text') ? nodeAtStart : null;\n}\n\n/**\n * The code block command plugin.\n */ class CodeBlockCommand extends Command {\n    /**\n\t * Contains the last used language.\n\t */ _lastLanguage;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._lastLanguage = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.value = this._getValue();\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #value is on}, all topmost code blocks within\n\t * the selection will be removed. If it is off, all selected blocks will be flattened and\n\t * wrapped by a code block.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.language The code block language.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`, the command will apply a code block,\n\t * otherwise the command will remove the code block. If not set, the command will act basing on its current value.\n\t * @param options.usePreviousLanguageChoice If set on `true` and the `options.language` is not specified, the command\n\t * will apply the previous language (if the command was already executed) when inserting the `codeBlock` element.\n\t */ execute(options = {}) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const firstLanguageInConfig = normalizedLanguagesDefs[0];\n        const blocks = Array.from(selection.getSelectedBlocks());\n        const value = options.forceValue == undefined ? !this.value : options.forceValue;\n        const language = getLanguage(options, this._lastLanguage, firstLanguageInConfig.language);\n        model.change((writer)=>{\n            if (value) {\n                this._applyCodeBlock(writer, blocks, language);\n            } else {\n                this._removeCodeBlock(writer, blocks);\n            }\n        });\n    }\n    /**\n\t * Checks the command's {@link #value}.\n\t *\n\t * @returns The current value.\n\t */ _getValue() {\n        const selection = this.editor.model.document.selection;\n        const firstBlock = first(selection.getSelectedBlocks());\n        const isCodeBlock = !!(firstBlock && firstBlock.is('element', 'codeBlock'));\n        return isCodeBlock ? firstBlock.getAttribute('language') : false;\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (this.value) {\n            return true;\n        }\n        const selection = this.editor.model.document.selection;\n        const schema = this.editor.model.schema;\n        const firstBlock = first(selection.getSelectedBlocks());\n        if (!firstBlock) {\n            return false;\n        }\n        return canBeCodeBlock(schema, firstBlock);\n    }\n    _applyCodeBlock(writer, blocks, language) {\n        this._lastLanguage = language;\n        const schema = this.editor.model.schema;\n        const allowedBlocks = blocks.filter((block)=>canBeCodeBlock(schema, block));\n        for (const block of allowedBlocks){\n            writer.rename(block, 'codeBlock');\n            writer.setAttribute('language', language, block);\n            schema.removeDisallowedAttributes([\n                block\n            ], writer);\n            // Remove children of the  `codeBlock` element that are not allowed. See #9567.\n            Array.from(block.getChildren()).filter((child)=>!schema.checkChild(block, child)).forEach((child)=>writer.remove(child));\n        }\n        allowedBlocks.reverse().forEach((currentBlock, i)=>{\n            const nextBlock = allowedBlocks[i + 1];\n            if (currentBlock.previousSibling === nextBlock) {\n                writer.appendElement('softBreak', nextBlock);\n                writer.merge(writer.createPositionBefore(currentBlock));\n            }\n        });\n    }\n    _removeCodeBlock(writer, blocks) {\n        const codeBlocks = blocks.filter((block)=>block.is('element', 'codeBlock'));\n        for (const block of codeBlocks){\n            const range = writer.createRangeOn(block);\n            for (const item of Array.from(range.getItems()).reverse()){\n                if (item.is('element', 'softBreak') && item.parent.is('element', 'codeBlock')) {\n                    const { position } = writer.split(writer.createPositionBefore(item));\n                    const elementAfter = position.nodeAfter;\n                    writer.rename(elementAfter, 'paragraph');\n                    writer.removeAttribute('language', elementAfter);\n                    writer.remove(item);\n                }\n            }\n            writer.rename(block, 'paragraph');\n            writer.removeAttribute('language', block);\n        }\n    }\n}\n/**\n * Picks the language for the new code block. If any language is passed as an option,\n * it will be returned. Else, if option usePreviousLanguageChoice is true and some\n * code block was already created (lastLanguage is not null) then previously used\n * language will be returned. If not, it will return default language.\n */ function getLanguage(options, lastLanguage, defaultLanguage) {\n    if (options.language) {\n        return options.language;\n    }\n    if (options.usePreviousLanguageChoice && lastLanguage) {\n        return lastLanguage;\n    }\n    return defaultLanguage;\n}\n\n/**\n * The code block indentation increase command plugin.\n */ class IndentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters added to the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be increased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change((writer)=>{\n            const positions = getIndentOutdentPositions(model);\n            // Indent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>        ->       <codeBlock>    foo</codeBlock>\n            //\n            //\t\t<codeBlock>foo^bar</codeBlock>     ->       <codeBlock>foo    bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    bazqux\n            //\t\t</codeBlock>\n            //\n            for (const position of positions){\n                const indentSequenceTextElement = writer.createText(this._indentSequence);\n                // Previously insertion was done by writer.insertText(). It was changed to insertContent() to enable\n                // integration of code block with track changes. It's the easiest way of integration because insertContent()\n                // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                // some additional work will be required in track changes integration of code block.\n                model.insertContent(indentSequenceTextElement, position);\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        // Indent (forward) command is always enabled when there's any code block in the selection\n        // because you can always indent code lines.\n        return isModelSelectionInCodeBlock(this.editor.model.document.selection);\n    }\n}\n\n/**\n * The code block indentation decrease command plugin.\n */ class OutdentCodeBlockCommand extends Command {\n    /**\n\t * A sequence of characters removed from the line when the command is executed.\n\t */ _indentSequence;\n    constructor(editor){\n        super(editor);\n        this._indentSequence = editor.config.get('codeBlock.indentSequence');\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command. When the command {@link #isEnabled is enabled}, the indentation of the\n\t * code lines in the selection will be decreased.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = editor.model;\n        model.change(()=>{\n            const positions = getIndentOutdentPositions(model);\n            // Outdent all positions, for instance assuming the indent sequence is 4x space (\"    \"):\n            //\n            //\t\t<codeBlock>^foo</codeBlock>         ->       <codeBlock>foo</codeBlock>\n            //\n            //\t\t<codeBlock>    ^bar</codeBlock>     ->       <codeBlock>bar</codeBlock>\n            //\n            // Also, when there is more than one position:\n            //\n            //\t\t<codeBlock>\n            //\t\t\t    ^foobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\t    ^bazqux\n            //\t\t</codeBlock>\n            //\n            //\t\t->\n            //\n            //\t\t<codeBlock>\n            //\t\t\tfoobar\n            //\t\t\t<softBreak></softBreak>\n            //\t\t\tbazqux\n            //\t\t</codeBlock>\n            for (const position of positions){\n                const range = getLastOutdentableSequenceRange(model, position, this._indentSequence);\n                if (range) {\n                    // Previously deletion was done by writer.remove(). It was changed to deleteContent() to enable\n                    // integration of code block with track changes. It's the easiest way of integration because deleteContent()\n                    // is already integrated with track changes, but if it ever cause any troubles it can be reverted, however\n                    // some additional work will be required in track changes integration of code block.\n                    model.deleteContent(model.createSelection(range));\n                }\n            }\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @private\n\t * @returns {Boolean} Whether the command should be enabled.\n\t */ _checkEnabled() {\n        if (!this._indentSequence) {\n            return false;\n        }\n        const model = this.editor.model;\n        if (!isModelSelectionInCodeBlock(model.document.selection)) {\n            return false;\n        }\n        // Outdent command can execute only when there is an indent character sequence\n        // in some of the lines.\n        return getIndentOutdentPositions(model).some((position)=>{\n            return getLastOutdentableSequenceRange(model, position, this._indentSequence);\n        });\n    }\n}\n// For a position coming from `getIndentOutdentPositions()`, it returns the range representing\n// the last occurrence of the indent sequence among the leading whitespaces of the code line the\n// position represents.\n//\n// For instance, assuming the indent sequence is 4x space (\"    \"):\n//\n//\t\t<codeBlock>foo^</codeBlock>                                 ->          null\n//\t\t<codeBlock>foo^<softBreak></softBreak>bar</codeBlock>       ->          null\n//\t\t<codeBlock>  ^foo</codeBlock>                               ->          null\n//\t\t<codeBlock>        ^foo</codeBlock>                         ->          <codeBlock>    [    ]foo</codeBlock>\n//\t\t<codeBlock>    ^foo    bar</codeBlock>                      ->          <codeBlock>[    ]foo    bar</codeBlock>\n//\n// @param {<module:engine/model/model~Model>} model\n// @param {<module:engine/model/position~Position>} position\n// @param {String} sequence\n// @returns {<module:engine/model/range~Range>|null}\nfunction getLastOutdentableSequenceRange(model, position, sequence) {\n    // Positions start before each text node (code line). Get the node corresponding to the position.\n    const nodeAtPosition = getTextNodeAtLineStart(position, model);\n    if (!nodeAtPosition) {\n        return null;\n    }\n    const leadingWhiteSpaces = getLeadingWhiteSpaces(nodeAtPosition);\n    const lastIndexOfSequence = leadingWhiteSpaces.lastIndexOf(sequence);\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>    \t^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence + sequence.length !== leadingWhiteSpaces.length) {\n        return null;\n    }\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>  ^foo</codeBlock>           ->             null\n    //\n    if (lastIndexOfSequence === -1) {\n        return null;\n    }\n    const { parent, startOffset } = nodeAtPosition;\n    // Create a range that contains the **last** indent sequence among the leading whitespaces\n    // of the line.\n    //\n    // For instance, assuming the indent sequence is 4x space (\"    \"):\n    //\n    //\t\t<codeBlock>        ^foo</codeBlock>      ->     <codeBlock>    [    ]foo</codeBlock>\n    //\n    return model.createRange(model.createPositionAt(parent, startOffset + lastIndexOfSequence), model.createPositionAt(parent, startOffset + lastIndexOfSequence + sequence.length));\n}\n\n/**\n * A model-to-view (both editing and data) converter for the `codeBlock` element.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output (editing):\n *\n * ```html\n * <pre data-language=\"JavaScript\"><code class=\"language-javascript\">foo();<br />bar();</code></pre>\n * ```\n *\n * Sample output (data, see {@link module:code-block/converters~modelToDataViewSoftBreakInsertion}):\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @param useLabels When `true`, the `<pre>` element will get a `data-language` attribute with a\n * human–readable label of the language. Used only in the editing.\n * @returns Returns a conversion callback.\n */ function modelToViewCodeBlockInsertion(model, languageDefs, useLabels = false) {\n    // Language CSS classes:\n    //\n    //\t\t{\n    //\t\t\tphp: 'language-php',\n    //\t\t\tpython: 'language-python',\n    //\t\t\tjavascript: 'js',\n    //\t\t\t...\n    //\t\t}\n    const languagesToClasses = getPropertyAssociation(languageDefs, 'language', 'class');\n    // Language labels:\n    //\n    //\t\t{\n    //\t\t\tphp: 'PHP',\n    //\t\t\tpython: 'Python',\n    //\t\t\tjavascript: 'JavaScript',\n    //\t\t\t...\n    //\t\t}\n    const languagesToLabels = getPropertyAssociation(languageDefs, 'language', 'label');\n    return (evt, data, conversionApi)=>{\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const codeBlockLanguage = data.item.getAttribute('language');\n        const targetViewPosition = mapper.toViewPosition(model.createPositionBefore(data.item));\n        const preAttributes = {};\n        // Attributes added only in the editing view.\n        if (useLabels) {\n            preAttributes['data-language'] = languagesToLabels[codeBlockLanguage];\n            preAttributes.spellcheck = 'false';\n        }\n        const codeAttributes = languagesToClasses[codeBlockLanguage] ? {\n            class: languagesToClasses[codeBlockLanguage]\n        } : undefined;\n        const code = writer.createContainerElement('code', codeAttributes);\n        const pre = writer.createContainerElement('pre', preAttributes, code);\n        writer.insert(targetViewPosition, pre);\n        mapper.bindElements(data.item, code);\n    };\n}\n/**\n * A model-to-data view converter for the new line (`softBreak`) separator.\n *\n * Sample input:\n *\n * ```html\n * <codeBlock ...>foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <pre><code ...>foo();\\nbar();</code></pre>\n * ```\n *\n * @returns Returns a conversion callback.\n */ function modelToDataViewSoftBreakInsertion(model) {\n    return (evt, data, conversionApi)=>{\n        if (data.item.parent.name !== 'codeBlock') {\n            return;\n        }\n        const { writer, mapper, consumable } = conversionApi;\n        if (!consumable.consume(data.item, 'insert')) {\n            return;\n        }\n        const position = mapper.toViewPosition(model.createPositionBefore(data.item));\n        writer.insert(position, writer.createText('\\n'));\n    };\n}\n/**\n * A view-to-model converter for `<pre>` with the `<code>` HTML.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();bar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();bar();</codeBlock>\n * ```\n *\n * @param languageDefs The normalized language configuration passed to the feature.\n * @returns Returns a conversion callback.\n */ function dataViewToModelCodeBlockInsertion(editingView, languageDefs) {\n    // Language names associated with CSS classes:\n    //\n    //\t\t{\n    //\t\t\t'language-php': 'php',\n    //\t\t\t'language-python': 'python',\n    //\t\t\tjs: 'javascript',\n    //\t\t\t...\n    //\t\t}\n    const classesToLanguages = getPropertyAssociation(languageDefs, 'class', 'language');\n    const defaultLanguageName = languageDefs[0].language;\n    return (evt, data, conversionApi)=>{\n        const viewCodeElement = data.viewItem;\n        const viewPreElement = viewCodeElement.parent;\n        if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n            return;\n        }\n        // In case of nested code blocks we don't want to convert to another code block.\n        if (data.modelCursor.findAncestor('codeBlock')) {\n            return;\n        }\n        const { consumable, writer } = conversionApi;\n        if (!consumable.test(viewCodeElement, {\n            name: true\n        })) {\n            return;\n        }\n        const codeBlock = writer.createElement('codeBlock');\n        const viewChildClasses = [\n            ...viewCodeElement.getClassNames()\n        ];\n        // As we're to associate each class with a model language, a lack of class (empty class) can be\n        // also associated with a language if the language definition was configured so. Pushing an empty\n        // string to make sure the association will work.\n        if (!viewChildClasses.length) {\n            viewChildClasses.push('');\n        }\n        // Figure out if any of the <code> element's class names is a valid programming\n        // language class. If so, use it on the model element (becomes the language of the entire block).\n        for (const className of viewChildClasses){\n            const language = classesToLanguages[className];\n            if (language) {\n                writer.setAttribute('language', language, codeBlock);\n                break;\n            }\n        }\n        // If no language value was set, use the default language from the config.\n        if (!codeBlock.hasAttribute('language')) {\n            writer.setAttribute('language', defaultLanguageName, codeBlock);\n        }\n        conversionApi.convertChildren(viewCodeElement, codeBlock);\n        // Let's try to insert code block.\n        if (!conversionApi.safeInsert(codeBlock, data.modelCursor)) {\n            return;\n        }\n        consumable.consume(viewCodeElement, {\n            name: true\n        });\n        conversionApi.updateConversionResult(codeBlock, data);\n    };\n}\n/**\n * A view-to-model converter for new line characters in `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * <pre><code class=\"language-javascript\">foo();\\nbar();</code></pre>\n * ```\n *\n * Sample output:\n *\n * ```html\n * <codeBlock language=\"javascript\">foo();<softBreak></softBreak>bar();</codeBlock>\n * ```\n *\n * @returns {Function} Returns a conversion callback.\n */ function dataViewToModelTextNewlinesInsertion() {\n    return (evt, data, { consumable, writer })=>{\n        let position = data.modelCursor;\n        // When node is already converted then do nothing.\n        if (!consumable.test(data.viewItem)) {\n            return;\n        }\n        // When not inside `codeBlock` then do nothing.\n        if (!position.findAncestor('codeBlock')) {\n            return;\n        }\n        consumable.consume(data.viewItem);\n        const text = data.viewItem.data;\n        const textLines = text.split('\\n').map((data)=>writer.createText(data));\n        const lastLine = textLines[textLines.length - 1];\n        for (const node of textLines){\n            writer.insert(node, position);\n            position = position.getShiftedBy(node.offsetSize);\n            if (node !== lastLine) {\n                const softBreak = writer.createElement('softBreak');\n                writer.insert(softBreak, position);\n                position = writer.createPositionAfter(softBreak);\n            }\n        }\n        data.modelRange = writer.createRange(data.modelCursor, position);\n        data.modelCursor = position;\n    };\n}\n/**\n * A view-to-model converter that handles orphan text nodes (white spaces, new lines, etc.)\n * that surround `<code>` inside `<pre>`.\n *\n * Sample input:\n *\n * ```html\n * // White spaces\n * <pre> <code>foo()</code> </pre>\n *\n * // White spaces\n * <pre>      <code>foo()</code>      </pre>\n *\n * // White spaces\n * <pre>\t\t\t<code>foo()</code>\t\t\t</pre>\n *\n * // New lines\n * <pre>\n * \t<code>foo()</code>\n * </pre>\n *\n * // Redundant text\n * <pre>ABC<code>foo()</code>DEF</pre>\n * ```\n *\n * Unified output for each case:\n *\n * ```html\n * <codeBlock language=\"plaintext\">foo()</codeBlock>\n * ```\n *\n * @returns Returns a conversion callback.\n */ function dataViewToModelOrphanNodeConsumer() {\n    return (evt, data, { consumable })=>{\n        const preElement = data.viewItem;\n        // Don't clean up nested pre elements. Their content should stay as it is, they are not upcasted\n        // to code blocks.\n        if (preElement.findAncestor('pre')) {\n            return;\n        }\n        const preChildren = Array.from(preElement.getChildren());\n        const childCodeElement = preChildren.find((node)=>node.is('element', 'code'));\n        // <code>-less <pre>. It will not upcast to code block in the model, skipping.\n        if (!childCodeElement) {\n            return;\n        }\n        for (const child of preChildren){\n            if (child === childCodeElement || !child.is('$text')) {\n                continue;\n            }\n            // Consuming the orphan to remove it from the input data.\n            // Second argument in `consumable.consume` is discarded for text nodes.\n            consumable.consume(child, {\n                name: true\n            });\n        }\n    };\n}\n\nconst DEFAULT_ELEMENT = 'paragraph';\n/**\n * The editing part of the code block feature.\n *\n * Introduces the `'codeBlock'` command and the `'codeBlock'` model element.\n */ class CodeBlockEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ShiftEnter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('codeBlock', {\n            languages: [\n                {\n                    language: 'plaintext',\n                    label: 'Plain text'\n                },\n                {\n                    language: 'c',\n                    label: 'C'\n                },\n                {\n                    language: 'cs',\n                    label: 'C#'\n                },\n                {\n                    language: 'cpp',\n                    label: 'C++'\n                },\n                {\n                    language: 'css',\n                    label: 'CSS'\n                },\n                {\n                    language: 'diff',\n                    label: 'Diff'\n                },\n                {\n                    language: 'html',\n                    label: 'HTML'\n                },\n                {\n                    language: 'java',\n                    label: 'Java'\n                },\n                {\n                    language: 'javascript',\n                    label: 'JavaScript'\n                },\n                {\n                    language: 'php',\n                    label: 'PHP'\n                },\n                {\n                    language: 'python',\n                    label: 'Python'\n                },\n                {\n                    language: 'ruby',\n                    label: 'Ruby'\n                },\n                {\n                    language: 'typescript',\n                    label: 'TypeScript'\n                },\n                {\n                    language: 'xml',\n                    label: 'XML'\n                }\n            ],\n            // A single tab.\n            indentSequence: '\\t'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const model = editor.model;\n        const view = editor.editing.view;\n        const normalizedLanguagesDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        // The main command.\n        editor.commands.add('codeBlock', new CodeBlockCommand(editor));\n        // Commands that change the indentation.\n        editor.commands.add('indentCodeBlock', new IndentCodeBlockCommand(editor));\n        editor.commands.add('outdentCodeBlock', new OutdentCodeBlockCommand(editor));\n        this.listenTo(view.document, 'tab', (evt, data)=>{\n            const commandName = data.shiftKey ? 'outdentCodeBlock' : 'indentCodeBlock';\n            const command = editor.commands.get(commandName);\n            if (!command.isEnabled) {\n                return;\n            }\n            editor.execute(commandName);\n            data.stopPropagation();\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        schema.register('codeBlock', {\n            allowWhere: '$block',\n            allowChildren: '$text',\n            // Disallow `$inlineObject` and its derivatives like `inlineWidget` inside `codeBlock` to ensure that only text,\n            // not other inline elements like inline images, are allowed. This maintains the semantic integrity of code blocks.\n            disallowChildren: '$inlineObject',\n            allowAttributes: [\n                'language'\n            ],\n            allowAttributesOf: '$listItem',\n            isBlock: true\n        });\n        // Disallow formatting attributes on `codeBlock` children.\n        schema.addAttributeCheck((context, attributeName)=>{\n            const parent = context.getItem(context.length - 2);\n            const isFormatting = schema.getAttributeProperties(attributeName).isFormatting;\n            if (isFormatting && parent && parent.name == 'codeBlock') {\n                return false;\n            }\n        });\n        // Conversion.\n        editor.editing.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs, true));\n        editor.data.downcastDispatcher.on('insert:codeBlock', modelToViewCodeBlockInsertion(model, normalizedLanguagesDefs));\n        editor.data.downcastDispatcher.on('insert:softBreak', modelToDataViewSoftBreakInsertion(model), {\n            priority: 'high'\n        });\n        editor.data.upcastDispatcher.on('element:code', dataViewToModelCodeBlockInsertion(view, normalizedLanguagesDefs));\n        editor.data.upcastDispatcher.on('text', dataViewToModelTextNewlinesInsertion());\n        editor.data.upcastDispatcher.on('element:pre', dataViewToModelOrphanNodeConsumer(), {\n            priority: 'high'\n        });\n        // Intercept the clipboard input (paste) when the selection is anchored in the code block and force the clipboard\n        // data to be pasted as a single plain text. Otherwise, the code lines will split the code block and\n        // \"spill out\" as separate paragraphs.\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data)=>{\n            let insertionRange = model.createRange(model.document.selection.anchor);\n            // Use target ranges in case this is a drop.\n            if (data.targetRanges) {\n                insertionRange = editor.editing.mapper.toModelRange(data.targetRanges[0]);\n            }\n            if (!insertionRange.start.parent.is('element', 'codeBlock')) {\n                return;\n            }\n            const text = data.dataTransfer.getData('text/plain');\n            const writer = new UpcastWriter(editor.editing.view.document);\n            // Pass the view fragment to the default clipboardInput handler.\n            data.content = rawSnippetTextToViewDocumentFragment(writer, text);\n        });\n        if (editor.plugins.has('ClipboardPipeline')) {\n            // Elements may have a plain textual representation (hence be present in the 'text/plain' data transfer),\n            // but not be allowed in the code block.\n            // Filter them out before inserting the content to the model.\n            editor.plugins.get(ClipboardPipeline).on('contentInsertion', (evt, data)=>{\n                const model = editor.model;\n                const selection = model.document.selection;\n                if (!selection.anchor.parent.is('element', 'codeBlock')) {\n                    return;\n                }\n                model.change((writer)=>{\n                    const contentRange = writer.createRangeIn(data.content);\n                    for (const item of [\n                        ...contentRange.getItems()\n                    ]){\n                        // Remove all nodes disallowed in the code block.\n                        if (item.is('node') && !schema.checkChild(selection.anchor, item)) {\n                            writer.remove(item);\n                        }\n                    }\n                });\n            });\n        }\n        // Make sure multi–line selection is always wrapped in a code block when `getSelectedContent()`\n        // is used (e.g. clipboard copy). Otherwise, only the raw text will be copied to the clipboard and,\n        // upon next paste, this bare text will not be inserted as a code block, which is not the best UX.\n        // Similarly, when the selection in a single line, the selected content should be an inline code\n        // so it can be pasted later on and retain it's preformatted nature.\n        this.listenTo(model, 'getSelectedContent', (evt, [selection])=>{\n            const anchor = selection.anchor;\n            if (selection.isCollapsed || !anchor.parent.is('element', 'codeBlock') || !anchor.hasSameParentAs(selection.focus)) {\n                return;\n            }\n            model.change((writer)=>{\n                const docFragment = evt.return;\n                // fo[o<softBreak></softBreak>b]ar  ->   <codeBlock language=\"...\">[o<softBreak></softBreak>b]<codeBlock>\n                if (anchor.parent.is('element') && (docFragment.childCount > 1 || selection.containsEntireContent(anchor.parent))) {\n                    const codeBlock = writer.createElement('codeBlock', anchor.parent.getAttributes());\n                    writer.append(docFragment, codeBlock);\n                    const newDocumentFragment = writer.createDocumentFragment();\n                    writer.append(codeBlock, newDocumentFragment);\n                    evt.return = newDocumentFragment;\n                    return;\n                }\n                // \"f[oo]\"                          ->   <$text code=\"true\">oo</text>\n                const textNode = docFragment.getChild(0);\n                if (schema.checkAttribute(textNode, 'code')) {\n                    writer.setAttribute('code', true, textNode);\n                }\n            });\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const commands = editor.commands;\n        const indent = commands.get('indent');\n        const outdent = commands.get('outdent');\n        if (indent) {\n            // Priority is highest due to integration with `IndentList` command of `List` plugin.\n            // If selection is in a code block we give priority to it. This way list item cannot be indented\n            // but if we would give priority to indenting list item then user would have to indent list item\n            // as much as possible and only then he could indent code block.\n            indent.registerChildCommand(commands.get('indentCodeBlock'), {\n                priority: 'highest'\n            });\n        }\n        if (outdent) {\n            outdent.registerChildCommand(commands.get('outdentCodeBlock'));\n        }\n        // Customize the response to the <kbd>Enter</kbd> and <kbd>Shift</kbd>+<kbd>Enter</kbd>\n        // key press when the selection is in the code block. Upon enter key press we can either\n        // leave the block if it's \"two or three enters\" in a row or create a new code block line, preserving\n        // previous line's indentation.\n        this.listenTo(editor.editing.view.document, 'enter', (evt, data)=>{\n            const positionParent = editor.model.document.selection.getLastPosition().parent;\n            if (!positionParent.is('element', 'codeBlock')) {\n                return;\n            }\n            if (!leaveBlockStartOnEnter(editor, data.isSoft) && !leaveBlockEndOnEnter(editor, data.isSoft)) {\n                breakLineOnEnter(editor);\n            }\n            data.preventDefault();\n            evt.stop();\n        }, {\n            context: 'pre'\n        });\n        this._initAriaAnnouncements();\n    }\n    /**\n\t * Observe when user enters or leaves code block and set proper aria value in global live announcer.\n\t * This allows screen readers to indicate when the user has entered and left the specified code block.\n\t *\n\t * @internal\n\t */ _initAriaAnnouncements() {\n        const { model, ui, t } = this.editor;\n        const languageDefs = getNormalizedAndLocalizedLanguageDefinitions(this.editor);\n        let lastFocusedCodeBlock = null;\n        model.document.selection.on('change:range', ()=>{\n            const focusParent = model.document.selection.focus.parent;\n            if (!ui || lastFocusedCodeBlock === focusParent || !focusParent.is('element')) {\n                return;\n            }\n            if (lastFocusedCodeBlock && lastFocusedCodeBlock.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, lastFocusedCodeBlock, 'leave'));\n            }\n            if (focusParent.is('element', 'codeBlock')) {\n                ui.ariaLiveAnnouncer.announce(getCodeBlockAriaAnnouncement(t, languageDefs, focusParent, 'enter'));\n            }\n            lastFocusedCodeBlock = focusParent;\n        });\n    }\n}\n/**\n * Normally, when the Enter (or Shift+Enter) key is pressed, a soft line break is to be added to the\n * code block. Let's try to follow the indentation of the previous line when possible, for instance:\n *\n * ```html\n * // Before pressing enter (or shift enter)\n * <codeBlock>\n * \"    foo()\"[]                   // Indent of 4 spaces.\n * </codeBlock>\n *\n * // After pressing:\n * <codeBlock>\n * \"    foo()\"                 // Indent of 4 spaces.\n * <softBreak></softBreak>     // A new soft break created by pressing enter.\n * \"    \"[]                    // Retain the indent of 4 spaces.\n * </codeBlock>\n * ```\n */ function breakLineOnEnter(editor) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    // Use last position as other mechanisms (e.g. condition deciding whether this function should be called) also check that.\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    let leadingWhiteSpaces;\n    const node = getTextNodeAtLineStart(lastSelectionPosition, model);\n    // Figure out the indentation (white space chars) at the beginning of the line.\n    if (node && node.is('$text')) {\n        leadingWhiteSpaces = getLeadingWhiteSpaces(node);\n    }\n    // Keeping everything in a change block for a single undo step.\n    editor.model.change((writer)=>{\n        editor.execute('shiftEnter');\n        // If the line before being broken in two had some indentation, let's retain it\n        // in the new line.\n        if (leadingWhiteSpaces) {\n            writer.insertText(leadingWhiteSpaces, modelDoc.selection.anchor);\n        }\n    });\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the beginning\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>[]<softBreak></softBreak>foo</codeBlock>\n *\n * // After pressing:\n * <paragraph>[]</paragraph><codeBlock>foo</codeBlock>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockStartOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeAfter = lastSelectionPosition.nodeAfter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtStart) {\n        return false;\n    }\n    if (!isSoftBreakNode(nodeAfter)) {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        // The cloned block exists now before the original code block.\n        const newBlock = modelDoc.selection.anchor.parent.previousSibling;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        writer.setSelection(newBlock, 'in');\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n        // Remove the <softBreak> that originally followed the selection position.\n        writer.remove(nodeAfter);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\n/**\n * Leave the code block when Enter (but NOT Shift+Enter) has been pressed twice at the end\n * of the code block:\n *\n * ```html\n * // Before:\n * <codeBlock>foo[]</codeBlock>\n *\n * // After first press:\n * <codeBlock>foo<softBreak></softBreak>[]</codeBlock>\n *\n * // After second press:\n * <codeBlock>foo</codeBlock><paragraph>[]</paragraph>\n * ```\n *\n * @param isSoftEnter When `true`, enter was pressed along with <kbd>Shift</kbd>.\n * @returns `true` when selection left the block. `false` if stayed.\n */ function leaveBlockEndOnEnter(editor, isSoftEnter) {\n    const model = editor.model;\n    const modelDoc = model.document;\n    const view = editor.editing.view;\n    const lastSelectionPosition = modelDoc.selection.getLastPosition();\n    const nodeBefore = lastSelectionPosition.nodeBefore;\n    let emptyLineRangeToRemoveOnEnter;\n    if (isSoftEnter || !modelDoc.selection.isCollapsed || !lastSelectionPosition.isAtEnd || !nodeBefore || !nodeBefore.previousSibling) {\n        return false;\n    }\n    // When the position is directly preceded by two soft breaks\n    //\n    //\t\t<codeBlock>foo<softBreak></softBreak><softBreak></softBreak>[]</codeBlock>\n    //\n    // it creates the following range that will be cleaned up before leaving:\n    //\n    //\t\t<codeBlock>foo[<softBreak></softBreak><softBreak></softBreak>]</codeBlock>\n    //\n    if (isSoftBreakNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isSoftBreakNode(nodeBefore.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else if (isEmptyishTextNode(nodeBefore) && isSoftBreakNode(nodeBefore.previousSibling) && isEmptyishTextNode(nodeBefore.previousSibling.previousSibling) && nodeBefore.previousSibling.previousSibling && isSoftBreakNode(nodeBefore.previousSibling.previousSibling.previousSibling)) {\n        emptyLineRangeToRemoveOnEnter = model.createRange(model.createPositionBefore(nodeBefore.previousSibling.previousSibling.previousSibling), model.createPositionAfter(nodeBefore));\n    } else {\n        return false;\n    }\n    // We're doing everything in a single change block to have a single undo step.\n    editor.model.change((writer)=>{\n        // Remove the last <softBreak>s and all white space characters that followed them.\n        writer.remove(emptyLineRangeToRemoveOnEnter);\n        // \"Clone\" the <codeBlock> in the standard way.\n        editor.execute('enter');\n        const newBlock = modelDoc.selection.anchor.parent;\n        // Make the cloned <codeBlock> a regular <paragraph> (with clean attributes, so no language).\n        writer.rename(newBlock, DEFAULT_ELEMENT);\n        editor.model.schema.removeDisallowedAttributes([\n            newBlock\n        ], writer);\n    });\n    // Eye candy.\n    view.scrollToTheSelection();\n    return true;\n}\nfunction isEmptyishTextNode(node) {\n    return node && node.is('$text') && !node.data.match(/\\S/);\n}\nfunction isSoftBreakNode(node) {\n    return node && node.is('element', 'softBreak');\n}\n\n/**\n * The code block UI plugin.\n *\n * Introduces the `'codeBlock'` dropdown.\n */ class CodeBlockUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const normalizedLanguageDefs = getNormalizedAndLocalizedLanguageDefinitions(editor);\n        const itemDefinitions = this._getLanguageListItemDefinitions(normalizedLanguageDefs);\n        const command = editor.commands.get('codeBlock');\n        componentFactory.add('codeBlock', (locale)=>{\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            const accessibleLabel = t('Insert code block');\n            splitButtonView.set({\n                label: accessibleLabel,\n                tooltip: true,\n                icon: icons.codeBlock,\n                isToggleable: true\n            });\n            splitButtonView.bind('isOn').to(command, 'value', (value)=>!!value);\n            splitButtonView.on('execute', ()=>{\n                editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.on('execute', (evt)=>{\n                editor.execute('codeBlock', {\n                    language: evt.source._codeBlockLanguage,\n                    forceValue: true\n                });\n                editor.editing.view.focus();\n            });\n            dropdownView.class = 'ck-code-block-dropdown';\n            dropdownView.bind('isEnabled').to(command);\n            addListToDropdown(dropdownView, itemDefinitions, {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            return dropdownView;\n        });\n        componentFactory.add('menuBar:codeBlock', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                role: 'menuitem',\n                label: t('Code block'),\n                icon: icons.codeBlock\n            });\n            menuView.bind('isEnabled').to(command);\n            const listView = new MenuBarMenuListView(locale);\n            listView.set({\n                ariaLabel: t('Insert code block')\n            });\n            for (const definition of itemDefinitions){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.set({\n                    isToggleable: true,\n                    role: 'menuitemcheckbox'\n                });\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    editor.execute('codeBlock', {\n                        language: definition.model._codeBlockLanguage,\n                        forceValue: command.value == definition.model._codeBlockLanguage ? false : true\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n    /**\n\t * A helper returning a collection of the `codeBlock` dropdown items representing languages\n\t * available for the user to choose from.\n\t */ _getLanguageListItemDefinitions(normalizedLanguageDefs) {\n        const editor = this.editor;\n        const command = editor.commands.get('codeBlock');\n        const itemDefinitions = new Collection();\n        for (const languageDef of normalizedLanguageDefs){\n            const definition = {\n                type: 'button',\n                model: new ViewModel({\n                    _codeBlockLanguage: languageDef.language,\n                    label: languageDef.label,\n                    role: 'menuitemradio',\n                    withText: true\n                })\n            };\n            definition.model.bind('isOn').to(command, 'value', (value)=>{\n                return value === definition.model._codeBlockLanguage;\n            });\n            itemDefinitions.add(definition);\n        }\n        return itemDefinitions;\n    }\n}\n\n/**\n * The code block plugin.\n *\n * For more information about this feature check the {@glink api/code-block package page} and the\n * {@glink features/code-blocks code block} feature guide.\n *\n * This is a \"glue\" plugin that loads the {@link module:code-block/codeblockediting~CodeBlockEditing code block editing feature}\n * and the {@link module:code-block/codeblockui~CodeBlockUI code block UI feature}.\n */ class CodeBlock extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CodeBlockEditing,\n            CodeBlockUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlock';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { CodeBlock, CodeBlockEditing, CodeBlockUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { logWarning } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { FileRepository } from '@ckeditor/ckeditor5-upload/dist/index.js';\n\n/**\n * A plugin that enables upload to [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/).\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the CKEditor Cloud Services integration through\n * {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig `config.cloudServices`}.\n */ class CloudServicesUploadAdapter extends Plugin {\n    _uploadGateway;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CloudServicesUploadAdapter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'CloudServices',\n            FileRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const cloudServices = editor.plugins.get('CloudServices');\n        const token = cloudServices.token;\n        const uploadUrl = cloudServices.uploadUrl;\n        if (!token) {\n            return;\n        }\n        const cloudServicesCore = editor.plugins.get('CloudServicesCore');\n        this._uploadGateway = cloudServicesCore.createUploadGateway(token, uploadUrl);\n        editor.plugins.get(FileRepository).createUploadAdapter = (loader)=>{\n            return new Adapter(this._uploadGateway, loader);\n        };\n    }\n}\nclass Adapter {\n    uploadGateway;\n    loader;\n    fileUploader;\n    constructor(uploadGateway, loader){\n        this.uploadGateway = uploadGateway;\n        this.loader = loader;\n    }\n    upload() {\n        return this.loader.file.then((file)=>{\n            this.fileUploader = this.uploadGateway.upload(file);\n            this.fileUploader.on('progress', (evt, data)=>{\n                this.loader.uploadTotal = data.total;\n                this.loader.uploaded = data.uploaded;\n            });\n            return this.fileUploader.send();\n        });\n    }\n    abort() {\n        this.fileUploader.abort();\n    }\n}\n\n/**\n * The Easy Image feature, which makes the image upload in CKEditor 5 possible with virtually zero\n * server setup. A part of the [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * family.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}.\n *\n * This plugin requires plugin to be present in the editor configuration:\n *\n * * {@link module:image/image~Image},\n * * {@link module:image/imageupload~ImageUpload},\n *\n * See the {@glink features/images/image-upload/easy-image \"Easy Image integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/images/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * **Note**: After enabling the Easy Image plugin you need to configure the\n * [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * integration through {@link module:cloud-services/cloudservicesconfig~CloudServicesConfig `config.cloudServices`}.\n */ class EasyImage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'EasyImage';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CloudServicesUploadAdapter,\n            'ImageUpload'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ImageBlockEditing') && !editor.plugins.has('ImageInlineEditing')) {\n            /**\n\t\t\t * The Easy Image feature requires one of the following plugins to be loaded to work correctly:\n\t\t\t *\n\t\t\t * * {@link module:image/imageblock~ImageBlock},\n\t\t\t * * {@link module:image/imageinline~ImageInline},\n\t\t\t * * {@link module:image/image~Image} (loads both `ImageBlock` and `ImageInline`)\n\t\t\t *\n\t\t\t * Please make sure your editor configuration is correct.\n\t\t\t *\n\t\t\t * @error easy-image-image-feature-missing\n\t\t\t * @param {module:core/editor/editor~Editor} editor\n\t\t\t */ logWarning('easy-image-image-feature-missing', editor);\n        }\n    }\n}\n\nexport { CloudServicesUploadAdapter, EasyImage };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ElementApiMixin, Editor, secureSourceElement, attachToForm } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { EditorUI, EditorUIView, InlineEditableUIView, MenuBarView, BalloonToolbar } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { CKEditorError, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The balloon editor UI class.\n */ class BalloonEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * Creates an instance of the balloon editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n    }\n    /**\n\t * @inheritDoc\n\t */ get element() {\n        return this.view.editable.element;\n    }\n    /**\n\t * Initializes the UI.\n\t */ init() {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the balloon editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        this._initPlaceholder();\n        this._initMenuBar(this.view.menuBarView);\n        this.fire('ready');\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        if (editingView.getDomRoot(view.editable.name)) {\n            editingView.detachDomRoot(view.editable.name);\n        }\n        view.destroy();\n    }\n    /**\n\t * Enable the placeholder text on the editing root.\n\t */ _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            const placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[editingRoot.rootName];\n            if (placeholderText) {\n                editingRoot.placeholder = placeholderText;\n            }\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n}\n\n/**\n * Contextual editor UI view. Uses the {@link module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}.\n */ class BalloonEditorUIView extends EditorUIView {\n    /**\n\t * Editable UI view.\n\t */ editable;\n    /**\n\t * Menu bar view instance.\n\t */ menuBarView;\n    /**\n\t * Creates an instance of the balloon editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param editableElement The editable element. If not specified, it will be automatically created by\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n\t * @param label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n\t */ constructor(locale, editingView, editableElement, label){\n        super(locale);\n        this.editable = new InlineEditableUIView(locale, editingView, editableElement, {\n            label\n        });\n        this.menuBarView = new MenuBarView(locale);\n        this.menuBarView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-reset_all',\n                    'ck-rounded-corners'\n                ],\n                dir: locale.uiLanguageDirection\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.registerChild(this.editable);\n        this.registerChild(this.menuBarView);\n    }\n}\n\n/**\n * The balloon editor implementation (Medium-like editor).\n * It uses an inline editable and a toolbar based on the {@link module:ui/toolbar/balloon/balloontoolbar~BalloonToolbar}.\n * See the {@glink examples/builds/balloon-editor demo}.\n *\n * In order to create a balloon editor instance, use the static\n * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`} method.\n */ class BalloonEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * Creates an instance of the balloon editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`} method instead.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementOrData, config = {}){\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n            secureSourceElement(this, sourceElementOrData);\n        }\n        const plugins = this.config.get('plugins');\n        plugins.push(BalloonToolbar);\n        this.config.set('plugins', plugins);\n        this.config.define('balloonToolbar', this.config.get('toolbar'));\n        this.model.document.createRoot();\n        const view = new BalloonEditorUIView(this.locale, this.editing.view, this.sourceElement, this.config.get('label'));\n        this.ui = new BalloonEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t */ destroy() {\n        // Cache the data, then destroy.\n        // It's safe to assume that the model->view conversion will not work after super.destroy().\n        const data = this.getData();\n        this.ui.destroy();\n        return super.destroy().then(()=>{\n            if (this.sourceElement) {\n                this.updateSourceElement(data);\n            }\n        });\n    }\n    /**\n\t * Creates a new balloon editor instance.\n\t *\n\t * There are three general ways how the editor can be initialized.\n\t *\n\t * # Using an existing DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t * ```ts\n\t * BalloonEditor\n\t * \t.create( document.querySelector( '#editor' ) )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * The element's content will be used as the editor data and the element will become the editable element.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM for the editor to work properly:\n\t *\n\t * ```ts\n\t * BalloonEditor\n\t * \t.create( '<p>Hello world!</p>' )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t * \t\tdocument.body.appendChild( editor.ui.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * BalloonEditor\n\t * \t.create( document.querySelector( '#editor' ), {\n\t * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * # Using the editor from source\n\t *\n\t * If you want to use the balloon editor,\n\t * you need to define the list of\n\t * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n\t * The editor data will be set back to the original element once the editor is destroyed only if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n\t * option is set to `true`.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-balloon/ballooneditorui~BalloonEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementOrData, config = {}) {\n        return new Promise((resolve)=>{\n            if (isElement(sourceElementOrData) && sourceElementOrData.tagName === 'TEXTAREA') {\n                // Documented in core/editor/editor.js\n                // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n                throw new CKEditorError('editor-wrong-element', null);\n            }\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init()).then(()=>editor.data.init(editor.config.get('initialData'))).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { BalloonEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { EditorUI, normalizeToolbarConfig, DialogView, BoxedEditorUIView, StickyPanelView, ToolbarView, MenuBarView, InlineEditableUIView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ElementReplacer, Rect, CKEditorError, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ElementApiMixin, Editor, attachToForm } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The classic editor UI class.\n */ class ClassicEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * A normalized `config.toolbar` object.\n\t */ _toolbarConfig;\n    /**\n\t * The element replacer instance used to hide the editor's source element.\n\t */ _elementReplacer;\n    /**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n        this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n        this._elementReplacer = new ElementReplacer();\n        this.listenTo(editor.editing.view, 'scrollToTheSelection', this._handleScrollToTheSelectionWithStickyPanel.bind(this));\n    }\n    /**\n\t * @inheritDoc\n\t */ get element() {\n        return this.view.element;\n    }\n    /**\n\t * Initializes the UI.\n\t *\n\t * @param replacementElement The DOM element that will be the source for the created editor.\n\t */ init(replacementElement) {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the classic editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        view.editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        // If an element containing the initial data of the editor was provided, replace it with\n        // an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n        // can be such element.\n        if (replacementElement) {\n            this._elementReplacer.replace(replacementElement, this.element);\n        }\n        this._initPlaceholder();\n        this._initToolbar();\n        if (view.menuBarView) {\n            this._initMenuBar(view.menuBarView);\n        }\n        this._initDialogPluginIntegration();\n        this._initContextualBalloonIntegration();\n        this.fire('ready');\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        this._elementReplacer.restore();\n        if (editingView.getDomRoot(view.editable.name)) {\n            editingView.detachDomRoot(view.editable.name);\n        }\n        view.destroy();\n    }\n    /**\n\t * Initializes the editor toolbar.\n\t */ _initToolbar() {\n        const view = this.view;\n        // Set–up the sticky panel with toolbar.\n        view.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused');\n        view.stickyPanel.limiterElement = view.element;\n        view.stickyPanel.bind('viewportTopOffset').to(this, 'viewportOffset', ({ top })=>top || 0);\n        view.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n\t * Enable the placeholder text on the editing root.\n\t */ _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const sourceElement = editor.sourceElement;\n        let placeholderText;\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[this.view.editable.name];\n        }\n        if (!placeholderText && sourceElement && sourceElement.tagName.toLowerCase() === 'textarea') {\n            placeholderText = sourceElement.getAttribute('placeholder');\n        }\n        if (placeholderText) {\n            editingRoot.placeholder = placeholderText;\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:ui/panel/balloon/contextualballoon contextual balloon plugin}.\n\t * It allows the contextual balloon to consider the height of the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel}. It prevents the balloon from overlapping\n\t * the sticky toolbar by adjusting the balloon's position using viewport offset configuration.\n\t */ _initContextualBalloonIntegration() {\n        if (!this.editor.plugins.has('ContextualBalloon')) {\n            return;\n        }\n        const { stickyPanel } = this.view;\n        const contextualBalloon = this.editor.plugins.get('ContextualBalloon');\n        contextualBalloon.on('getPositionOptions', (evt)=>{\n            const position = evt.return;\n            if (!position || !stickyPanel.isSticky || !stickyPanel.element) {\n                return;\n            }\n            // Measure toolbar (and menu bar) height.\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            // Handle edge case when the target element is larger than the limiter.\n            // It's an issue because the contextual balloon can overlap top table cells when the table is larger than the viewport\n            // and it's placed at the top of the editor. It's better to overlap toolbar in that situation.\n            // Check this issue: https://github.com/ckeditor/ckeditor5/issues/15744\n            const target = typeof position.target === 'function' ? position.target() : position.target;\n            const limiter = typeof position.limiter === 'function' ? position.limiter() : position.limiter;\n            if (target && limiter && new Rect(target).height >= new Rect(limiter).height - stickyPanelHeight) {\n                return;\n            }\n            // Ensure that viewport offset is present, it can be undefined according to the typing.\n            const viewportOffsetConfig = {\n                ...position.viewportOffsetConfig\n            };\n            const newTopViewportOffset = (viewportOffsetConfig.top || 0) + stickyPanelHeight;\n            evt.return = {\n                ...position,\n                viewportOffsetConfig: {\n                    ...viewportOffsetConfig,\n                    top: newTopViewportOffset\n                }\n            };\n        }, {\n            priority: 'low'\n        });\n        // Update balloon position when the toolbar becomes sticky or when ui viewportOffset changes.\n        const updateBalloonPosition = ()=>{\n            if (contextualBalloon.visibleView) {\n                contextualBalloon.updatePosition();\n            }\n        };\n        this.listenTo(stickyPanel, 'change:isSticky', updateBalloonPosition);\n        this.listenTo(this.editor.ui, 'change:viewportOffset', updateBalloonPosition);\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n\t * It allows the UI-agnostic engine method to consider the geometry of the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel} that pins to the\n\t * edge of the viewport and can obscure the user caret after scrolling the window.\n\t *\n\t * @param evt The `scrollToTheSelection` event info.\n\t * @param data The payload carried by the `scrollToTheSelection` event.\n\t * @param originalArgs The original arguments passed to `scrollViewportToShowTarget()` method (see implementation to learn more).\n\t */ _handleScrollToTheSelectionWithStickyPanel(evt, data, originalArgs) {\n        const stickyPanel = this.view.stickyPanel;\n        if (stickyPanel.isSticky) {\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            data.viewportOffset.top += stickyPanelHeight;\n        } else {\n            const scrollViewportOnPanelGettingSticky = ()=>{\n                this.editor.editing.view.scrollToTheSelection(originalArgs);\n            };\n            this.listenTo(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            // This works as a post-scroll-fixer because it's impossible predict whether the panel will be sticky after scrolling or not.\n            // Listen for a short period of time only and if the toolbar does not become sticky very soon, cancel the listener.\n            setTimeout(()=>{\n                this.stopListening(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            }, 20);\n        }\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:ui/dialog/dialog the Dialog plugin}.\n\t *\n\t * It moves the dialog down to ensure that the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel sticky panel}\n\t * used by the editor UI will not get obscured by the dialog when the dialog uses one of its automatic positions.\n\t */ _initDialogPluginIntegration() {\n        if (!this.editor.plugins.has('Dialog')) {\n            return;\n        }\n        const stickyPanel = this.view.stickyPanel;\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        dialogPlugin.on('show', ()=>{\n            const dialogView = dialogPlugin.view;\n            dialogView.on('moveTo', (evt, data)=>{\n                // Engage only when the panel is sticky, and the dialog is using one of default positions.\n                if (!stickyPanel.isSticky || dialogView.wasMoved) {\n                    return;\n                }\n                const stickyPanelContentRect = new Rect(stickyPanel.contentPanelElement);\n                if (data[1] < stickyPanelContentRect.bottom + DialogView.defaultOffset) {\n                    data[1] = stickyPanelContentRect.bottom + DialogView.defaultOffset;\n                }\n            }, {\n                priority: 'high'\n            });\n        }, {\n            priority: 'low'\n        });\n    }\n}\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n */ class ClassicEditorUIView extends BoxedEditorUIView {\n    /**\n\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t * that makes toolbar sticky.\n\t */ stickyPanel;\n    /**\n\t * Toolbar view instance.\n\t */ toolbar;\n    /**\n\t * Editable UI view.\n\t */ editable;\n    /**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param options Configuration options for the view instance.\n\t * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n\t * in the main {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t * @param options.label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n\t */ constructor(locale, editingView, options = {}){\n        super(locale);\n        this.stickyPanel = new StickyPanelView(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        if (options.useMenuBar) {\n            this.menuBarView = new MenuBarView(locale);\n        }\n        this.editable = new InlineEditableUIView(locale, editingView, undefined, {\n            label: options.label\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        if (this.menuBarView) {\n            // Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n            this.stickyPanel.content.addMany([\n                this.menuBarView,\n                this.toolbar\n            ]);\n        } else {\n            this.stickyPanel.content.add(this.toolbar);\n        }\n        this.top.add(this.stickyPanel);\n        this.main.add(this.editable);\n    }\n}\n\n/**\n * The classic editor implementation. It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n */ class ClassicEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementOrData, config = {}){\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        this.config.define('menuBar.isVisible', false);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n        }\n        this.model.document.createRoot();\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const menuBarConfig = this.config.get('menuBar');\n        const view = new ClassicEditorUIView(this.locale, this.editing.view, {\n            shouldToolbarGroupWhenFull,\n            useMenuBar: menuBarConfig.isVisible,\n            label: this.config.get('label')\n        });\n        this.ui = new ClassicEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t */ destroy() {\n        if (this.sourceElement) {\n            this.updateSourceElement();\n        }\n        this.ui.destroy();\n        return super.destroy();\n    }\n    /**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( document.querySelector( '#editor' ) )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( '<p>Hello world!</p>' )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t * \t\tdocument.body.appendChild( editor.ui.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( document.querySelector( '#editor' ), {\n\t * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * If the {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n\t * option is set to `true`, the editor data will be set back to the original element once the editor is destroyed and when a form,\n\t * in which this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration\n\t * with native web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementOrData, config = {}) {\n        return new Promise((resolve)=>{\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init(isElement(sourceElementOrData) ? sourceElementOrData : null)).then(()=>editor.data.init(editor.config.get('initialData'))).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { ClassicEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ElementApiMixin, Editor, secureSourceElement } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { CKEditorError, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { EditorUI, EditorUIView, ToolbarView, MenuBarView, InlineEditableUIView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The decoupled editor UI class.\n */ class DecoupledEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * Creates an instance of the decoupled editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n    }\n    /**\n\t * Initializes the UI.\n\t */ init() {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to DecoupledEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the decoupled editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        view.editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        this._initPlaceholder();\n        this._initToolbar();\n        this._initMenuBar(this.view.menuBarView);\n        this.fire('ready');\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        if (editingView.getDomRoot(view.editable.name)) {\n            editingView.detachDomRoot(view.editable.name);\n        }\n        view.destroy();\n    }\n    /**\n\t * Initializes the inline editor toolbar and its panel.\n\t */ _initToolbar() {\n        const editor = this.editor;\n        const view = this.view;\n        const toolbar = view.toolbar;\n        toolbar.fillFromConfig(editor.config.get('toolbar'), this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n\t * Enable the placeholder text on the editing root.\n\t */ _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            const placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[editingRoot.rootName];\n            if (placeholderText) {\n                editingRoot.placeholder = placeholderText;\n            }\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n}\n\n/**\n * The decoupled editor UI view. It is a virtual view providing an inline\n * {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#editable},\n * {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#toolbar}, and a\n * {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#menuBarView} but without any\n * specific arrangement of the components in the DOM.\n *\n * See {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n * to learn more about this view.\n */ class DecoupledEditorUIView extends EditorUIView {\n    /**\n\t * The main toolbar of the decoupled editor UI.\n\t */ toolbar;\n    /**\n\t * The editable of the decoupled editor UI.\n\t */ editable;\n    /**\n\t * Menu bar view instance.\n\t */ menuBarView;\n    /**\n\t * Creates an instance of the decoupled editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param options Configuration options for the view instance.\n\t * @param options.editableElement The editable element. If not specified, it will be automatically created by\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n\t * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n\t * in the main {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t * @param options.label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n\t */ constructor(locale, editingView, options = {}){\n        super(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        this.menuBarView = new MenuBarView(locale);\n        this.editable = new InlineEditableUIView(locale, editingView, options.editableElement, {\n            label: options.label\n        });\n        // This toolbar may be placed anywhere in the page so things like font size need to be reset in it.\n        // Because of the above, make sure the toolbar supports rounded corners.\n        // Also, make sure the toolbar has the proper dir attribute because its ancestor may not have one\n        // and some toolbar item styles depend on this attribute.\n        this.toolbar.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-reset_all',\n                    'ck-rounded-corners'\n                ],\n                dir: locale.uiLanguageDirection\n            }\n        });\n        this.menuBarView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-reset_all',\n                    'ck-rounded-corners'\n                ],\n                dir: locale.uiLanguageDirection\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.registerChild([\n            this.menuBarView,\n            this.toolbar,\n            this.editable\n        ]);\n    }\n}\n\n/**\n * The decoupled editor implementation. It provides an inline editable and a toolbar. However, unlike other editors,\n * it does not render these components anywhere in the DOM unless configured.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * See the document editor {@glink examples/builds/document-editor demo} to learn about possible use cases\n * for the decoupled editor.\n *\n * In order to create a decoupled editor instance, use the static\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method.\n *\n * Note that you will need to attach the editor toolbar and menu bar to your web page manually, in a desired place,\n * after the editor is initialized.\n */ class DecoupledEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * Creates an instance of the decoupled editor.\n\t *\n\t * **Note:** Do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method instead.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementOrData, config = {}){\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n            secureSourceElement(this, sourceElementOrData);\n        }\n        this.model.document.createRoot();\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const view = new DecoupledEditorUIView(this.locale, this.editing.view, {\n            editableElement: this.sourceElement,\n            shouldToolbarGroupWhenFull,\n            label: this.config.get('label')\n        });\n        this.ui = new DecoupledEditorUI(this, view);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t *\n\t * **Note**: The decoupled editor does not remove the toolbar and editable when destroyed. You can\n\t * do that yourself in the destruction chain:\n\t *\n\t * ```ts\n\t * editor.destroy()\n\t * \t.then( () => {\n\t * \t\t// Remove the toolbar from DOM.\n\t * \t\teditor.ui.view.toolbar.element.remove();\n\t *\n\t * \t\t// Remove the editable from DOM.\n\t * \t\teditor.ui.view.editable.element.remove();\n\t *\n\t * \t\tconsole.log( 'Editor was destroyed' );\n\t * \t} );\n\t * ```\n\t */ destroy() {\n        // Cache the data, then destroy.\n        // It's safe to assume that the model->view conversion will not work after super.destroy().\n        const data = this.getData();\n        this.ui.destroy();\n        return super.destroy().then(()=>{\n            if (this.sourceElement) {\n                this.updateSourceElement(data);\n            }\n        });\n    }\n    /**\n\t * Creates a new decoupled editor instance.\n\t *\n\t * **Note:** remember that `DecoupledEditor` does not append the toolbar element to your web page, so you have to do it manually\n\t * after the editor has been initialized.\n\t *\n\t * There are two ways how the editor can be initialized.\n\t *\n\t * # Using an existing DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t * ```ts\n\t * DecoupledEditor\n\t * \t.create( document.querySelector( '#editor' ) )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Append the toolbar to the <body> element.\n\t * \t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * The element's content will be used as the editor data and the element will become the editable element.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, you will have to manually append both the toolbar element and the editable element to your web page.\n\t *\n\t * ```ts\n\t * DecoupledEditor\n\t * \t.create( '<p>Hello world!</p>' )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Append the toolbar to the <body> element.\n\t * \t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t *\n\t * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t * \t\tdocument.body.appendChild( editor.ui.getEditableElement() );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * DecoupledEditor\n\t * \t.create( document.querySelector( '#editor' ), {\n\t * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Append the toolbar to the <body> element.\n\t * \t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n\t * The editor data will be set back to the original element once the editor is destroyed only if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n\t * option is set to `true`.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available via\n\t * {@link module:editor-decoupled/decouplededitorui~DecoupledEditorUI#getEditableElement `editor.ui.getEditableElement()`}.\n\t *\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementOrData, config = {}) {\n        return new Promise((resolve)=>{\n            if (isElement(sourceElementOrData) && sourceElementOrData.tagName === 'TEXTAREA') {\n                // Documented in core/editor/editor.js\n                // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n                throw new CKEditorError('editor-wrong-element', null);\n            }\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init()).then(()=>editor.data.init(editor.config.get('initialData'))).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { DecoupledEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { ElementApiMixin, Editor, secureSourceElement, attachToForm } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ResizeObserver, Rect, toUnit, CKEditorError, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { EditorUI, normalizeToolbarConfig, EditorUIView, ToolbarView, MenuBarView, BalloonPanelView, InlineEditableUIView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The inline editor UI class.\n *\n * @extends module:ui/editorui/editorui~EditorUI\n */ class InlineEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * A normalized `config.toolbar` object.\n\t */ _toolbarConfig;\n    /**\n\t * Creates an instance of the inline editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n        this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n    }\n    /**\n\t * @inheritDoc\n\t */ get element() {\n        return this.view.editable.element;\n    }\n    /**\n\t * Initializes the UI.\n\t */ init() {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to InlineEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the inline editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        this._initPlaceholder();\n        this._initToolbar();\n        if (view.menuBarView) {\n            this._initMenuBar(view.menuBarView);\n        }\n        this.fire('ready');\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        editingView.detachDomRoot(view.editable.name);\n        view.destroy();\n    }\n    /**\n\t * Initializes the inline editor toolbar and its panel.\n\t */ _initToolbar() {\n        const editor = this.editor;\n        const view = this.view;\n        const editableElement = view.editable.element;\n        const toolbar = view.toolbar;\n        // Set–up the view#panel.\n        view.panel.bind('isVisible').to(this.focusTracker, 'isFocused');\n        view.bind('viewportTopOffset').to(this, 'viewportOffset', ({ top })=>top || 0);\n        // https://github.com/ckeditor/ckeditor5-editor-inline/issues/4\n        view.listenTo(editor.ui, 'update', ()=>{\n            // Don't pin if the panel is not already visible. It prevents the panel\n            // showing up when there's no focus in the UI.\n            if (view.panel.isVisible) {\n                view.panel.pin({\n                    target: editableElement,\n                    positions: view.panelPositions\n                });\n            }\n        });\n        toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(toolbar);\n    }\n    /**\n\t * Enable the placeholder text on the editing root.\n\t */ _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            const placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[editingRoot.rootName];\n            if (placeholderText) {\n                editingRoot.placeholder = placeholderText;\n            }\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n}\n\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * Inline editor UI view. Uses an nline editable and a floating toolbar.\n */ class InlineEditorUIView extends EditorUIView {\n    /**\n\t * A floating toolbar view instance.\n\t */ toolbar;\n    /**\n\t * A balloon panel view instance.\n\t */ panel;\n    /**\n\t * A set of positioning functions used by the {@link #panel} to float around\n\t * {@link #element editableElement}.\n\t *\n\t * The positioning functions are as follows:\n\t *\n\t * * West:\n\t *\n\t * ```\n\t * [ Panel ]\n\t * +------------------+\n\t * | #editableElement |\n\t * +------------------+\n\t *\n\t * +------------------+\n\t * | #editableElement |\n\t * |[ Panel ]         |\n\t * |                  |\n\t * +------------------+\n\t *\n\t * +------------------+\n\t * | #editableElement |\n\t * +------------------+\n\t * [ Panel ]\n\t * ```\n\t *\n\t * * East:\n\t *\n\t * ```\n\t *            [ Panel ]\n\t * +------------------+\n\t * | #editableElement |\n\t * +------------------+\n\t *\n\t * +------------------+\n\t * | #editableElement |\n\t * |         [ Panel ]|\n\t * |                  |\n\t * +------------------+\n\t *\n\t * +------------------+\n\t * | #editableElement |\n\t * +------------------+\n\t *            [ Panel ]\n\t * ```\n\t *\n\t * See: {@link module:utils/dom/position~Options#positions}.\n\t */ panelPositions;\n    /**\n\t * Editable UI view.\n\t */ editable;\n    /**\n\t * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n\t * and manage items that do not fit into a single row.\n\t *\n\t * **Note:** Created in {@link #render}.\n\t */ _resizeObserver;\n    /**\n\t * Creates an instance of the inline editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param editableElement The editable element. If not specified, it will be automatically created by\n\t * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n\t * @param options Configuration options for the view instance.\n\t * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n\t * in the main {@link module:editor-inline/inlineeditoruiview~InlineEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t * @param options.label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n\t */ constructor(locale, editingView, editableElement, options = {}){\n        super(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull,\n            isFloating: true\n        });\n        if (options.useMenuBar) {\n            this.menuBarView = new MenuBarView(locale);\n        }\n        this.set('viewportTopOffset', 0);\n        this.panel = new BalloonPanelView(locale);\n        this.panelPositions = this._getPanelPositions();\n        this.panel.extendTemplate({\n            attributes: {\n                class: 'ck-toolbar-container'\n            }\n        });\n        this.editable = new InlineEditableUIView(locale, editingView, editableElement, {\n            label: options.label\n        });\n        this._resizeObserver = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.body.add(this.panel);\n        this.registerChild(this.editable);\n        if (this.menuBarView) {\n            // Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n            this.panel.content.addMany([\n                this.menuBarView,\n                this.toolbar\n            ]);\n        } else {\n            this.panel.content.add(this.toolbar);\n        }\n        const options = this.toolbar.options;\n        // Set toolbar's max-width on the initialization and update it on the editable resize,\n        // if 'shouldToolbarGroupWhenFull' in config is set to 'true'.\n        if (options.shouldGroupWhenFull) {\n            const editableElement = this.editable.element;\n            this._resizeObserver = new ResizeObserver(editableElement, ()=>{\n                this.toolbar.maxWidth = toPx(new Rect(editableElement).width);\n            });\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        if (this._resizeObserver) {\n            this._resizeObserver.destroy();\n        }\n    }\n    /**\n\t * Determines the panel top position of the {@link #panel} in {@link #panelPositions}.\n\t *\n\t * @param editableRect Rect of the {@link #element}.\n\t * @param panelRect Rect of the {@link #panel}.\n\t */ _getPanelPositionTop(editableRect, panelRect) {\n        let top;\n        if (editableRect.top > panelRect.height + this.viewportTopOffset) {\n            top = editableRect.top - panelRect.height;\n        } else if (editableRect.bottom > panelRect.height + this.viewportTopOffset + 50) {\n            top = this.viewportTopOffset;\n        } else {\n            top = editableRect.bottom;\n        }\n        return top;\n    }\n    /**\n\t * Returns the positions for {@link #panelPositions}.\n\t *\n\t * See: {@link module:utils/dom/position~Options#positions}.\n\t */ _getPanelPositions() {\n        const positions = [\n            (editableRect, panelRect)=>{\n                return {\n                    top: this._getPanelPositionTop(editableRect, panelRect),\n                    left: editableRect.left,\n                    name: 'toolbar_west',\n                    config: {\n                        withArrow: false\n                    }\n                };\n            },\n            (editableRect, panelRect)=>{\n                return {\n                    top: this._getPanelPositionTop(editableRect, panelRect),\n                    left: editableRect.left + editableRect.width - panelRect.width,\n                    name: 'toolbar_east',\n                    config: {\n                        withArrow: false\n                    }\n                };\n            }\n        ];\n        if (this.locale.uiLanguageDirection === 'ltr') {\n            return positions;\n        } else {\n            return positions.reverse();\n        }\n    }\n}\n\n/**\n * The inline editor implementation. It uses an inline editable and a floating toolbar.\n * See the {@glink examples/builds/inline-editor demo}.\n *\n * In order to create a inline editor instance, use the static\n * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`} method.\n */ class InlineEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * Creates an instance of the inline editor.\n\t *\n\t * **Note:** Do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`} method instead.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * (on which the editor will be initialized) or initial data for the editor. For more information see\n\t * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementOrData, config = {}){\n        // If both `config.initialData` and initial data parameter in `create()` are set, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        this.config.define('menuBar.isVisible', false);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        this.model.document.createRoot();\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n            secureSourceElement(this, sourceElementOrData);\n        }\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const menuBarConfig = this.config.get('menuBar');\n        const view = new InlineEditorUIView(this.locale, this.editing.view, this.sourceElement, {\n            shouldToolbarGroupWhenFull,\n            useMenuBar: menuBarConfig.isVisible,\n            label: this.config.get('label')\n        });\n        this.ui = new InlineEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t */ destroy() {\n        // Cache the data, then destroy.\n        // It's safe to assume that the model->view conversion will not work after super.destroy().\n        const data = this.getData();\n        this.ui.destroy();\n        return super.destroy().then(()=>{\n            if (this.sourceElement) {\n                this.updateSourceElement(data);\n            }\n        });\n    }\n    /**\n\t * Creates a new inline editor instance.\n\t *\n\t * There are three general ways how the editor can be initialized.\n\t *\n\t * # Using an existing DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t * ```ts\n\t * InlineEditor\n\t * \t.create( document.querySelector( '#editor' ) )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * The element's content will be used as the editor data and the element will become the editable element.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a `String`.\n\t * In this case, the editor will render an element that must be inserted into the DOM for the editor to work properly:\n\t *\n\t * ```ts\n\t * InlineEditor\n\t * \t.create( '<p>Hello world!</p>' )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t * \t\tdocument.body.appendChild( editor.ui.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * InlineEditor\n\t * \t.create( document.querySelector( '#editor' ), {\n\t * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n\t * The editor data will be set back to the original element once the editor is destroyed only if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n\t * option is set to `true`.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-inline/inlineeditorui~InlineEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementOrData, config = {}) {\n        return new Promise((resolve)=>{\n            if (isElement(sourceElementOrData) && sourceElementOrData.tagName === 'TEXTAREA') {\n                // Documented in core/editor/editor.js\n                // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n                throw new CKEditorError('editor-wrong-element', null);\n            }\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init()).then(()=>editor.data.init(editor.config.get('initialData'))).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { InlineEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Editor, secureSourceElement } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { CKEditorError, logWarning, setDataInElement, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { EditorUI, EditorUIView, ToolbarView, MenuBarView, InlineEditableUIView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The multi-root editor UI class.\n */ class MultiRootEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * The editable element that was focused the last time when any of the editables had focus.\n\t */ _lastFocusedEditableElement;\n    /**\n\t * Creates an instance of the multi-root editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n        this._lastFocusedEditableElement = null;\n    }\n    /**\n\t * Initializes the UI.\n\t */ init() {\n        const view = this.view;\n        view.render();\n        // Keep track of the last focused editable element. Knowing which one was focused\n        // is useful when the focus moves from editable to other UI components like balloons\n        // (especially inputs) but the editable remains the \"focus context\" (e.g. link balloon\n        // attached to a link in an editable). In this case, the editable should preserve visual\n        // focus styles.\n        this.focusTracker.on('change:focusedElement', (evt, name, focusedElement)=>{\n            for (const editable of Object.values(this.view.editables)){\n                if (focusedElement === editable.element) {\n                    this._lastFocusedEditableElement = editable.element;\n                }\n            }\n        });\n        // If the focus tracker loses focus, stop tracking the last focused editable element.\n        // Wherever the focus is restored, it will no longer be in the context of that editable\n        // because the focus \"came from the outside\", as opposed to the focus moving from one element\n        // to another within the editor UI.\n        this.focusTracker.on('change:isFocused', (evt, name, isFocused)=>{\n            if (!isFocused) {\n                this._lastFocusedEditableElement = null;\n            }\n        });\n        for (const editable of Object.values(this.view.editables)){\n            this.addEditable(editable);\n        }\n        this._initToolbar();\n        this._initMenuBar(this.view.menuBarView);\n        this.fire('ready');\n    }\n    /**\n\t * Adds the editable to the editor UI.\n\t *\n\t * After the editable is added to the editor UI it can be considered \"active\".\n\t *\n\t * The editable is attached to the editor editing pipeline, which means that it will be updated as the editor model updates and\n\t * changing its content will be reflected in the editor model. Keystrokes, focus handling and placeholder are initialized.\n\t *\n\t * @param editable The editable instance to add.\n\t * @param placeholder Placeholder for the editable element. If not set, placeholder value from the\n\t * {@link module:core/editor/editorconfig~EditorConfig#placeholder editor configuration} will be used (if it was provided).\n\t */ addEditable(editable, placeholder) {\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to `MultiRootEditor.create()`.\n        const editableElement = editable.element;\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        this.editor.editing.view.attachDomRoot(editableElement, editable.name);\n        // Register each editable UI view in the editor.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        editable.bind('isFocused').to(this.focusTracker, 'isFocused', this.focusTracker, 'focusedElement', (isFocused, focusedElement)=>{\n            // When the focus tracker is blurred, it means the focus moved out of the editor UI.\n            // No editable will maintain focus then.\n            if (!isFocused) {\n                return false;\n            }\n            // If the focus tracker says the editor UI is focused and currently focused element\n            // is the editable, then the editable should be visually marked as focused too.\n            if (focusedElement === editableElement) {\n                return true;\n            } else {\n                return this._lastFocusedEditableElement === editableElement;\n            }\n        });\n        this._initPlaceholder(editable, placeholder);\n    }\n    /**\n\t * Removes the editable instance from the editor UI.\n\t *\n\t * Removed editable can be considered \"deactivated\".\n\t *\n\t * The editable is detached from the editing pipeline, so model changes are no longer reflected in it. All handling added in\n\t * {@link #addEditable} is removed.\n\t *\n\t * @param editable Editable to remove from the editor UI.\n\t */ removeEditable(editable) {\n        this.editor.editing.view.detachDomRoot(editable.name);\n        editable.unbind('isFocused');\n        this.removeEditableElement(editable.name);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        for (const editable of Object.values(this.view.editables)){\n            this.removeEditable(editable);\n        }\n        this.view.destroy();\n    }\n    /**\n\t * Initializes the editor main toolbar and its panel.\n\t */ _initToolbar() {\n        const editor = this.editor;\n        const view = this.view;\n        const toolbar = view.toolbar;\n        toolbar.fillFromConfig(editor.config.get('toolbar'), this.componentFactory);\n        // Register the toolbar, so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n\t * Enables the placeholder text on a given editable.\n\t *\n\t * @param editable Editable on which the placeholder should be set.\n\t * @param placeholder Placeholder for the editable element. If not set, placeholder value from the\n\t * {@link module:core/editor/editorconfig~EditorConfig#placeholder editor configuration} will be used (if it was provided).\n\t */ _initPlaceholder(editable, placeholder) {\n        if (!placeholder) {\n            const configPlaceholder = this.editor.config.get('placeholder');\n            if (configPlaceholder) {\n                placeholder = typeof configPlaceholder === 'string' ? configPlaceholder : configPlaceholder[editable.name];\n            }\n        }\n        const editingView = this.editor.editing.view;\n        const editingRoot = editingView.document.getRoot(editable.name);\n        if (placeholder) {\n            editingRoot.placeholder = placeholder;\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n}\n\n/**\n * The multi-root editor UI view. It is a virtual view providing an inline\n * {@link module:editor-multi-root/multirooteditoruiview~MultiRootEditorUIView#editable} and a\n * {@link module:editor-multi-root/multirooteditoruiview~MultiRootEditorUIView#toolbar}, but without any\n * specific arrangement of the components in the DOM.\n *\n * See {@link module:editor-multi-root/multirooteditor~MultiRootEditor.create `MultiRootEditor.create()`}\n * to learn more about this view.\n */ class MultiRootEditorUIView extends EditorUIView {\n    /**\n\t * The main toolbar of the multi-root editor UI.\n\t */ toolbar;\n    /**\n\t * Editable elements used by the multi-root editor UI.\n\t */ editables;\n    editable;\n    /**\n\t * Menu bar view instance.\n\t */ menuBarView;\n    /**\n\t * The editing view instance this view is related to.\n\t */ _editingView;\n    /**\n\t * Creates an instance of the multi-root editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param editableNames Names for all editable views. For each name, one\n\t * {@link module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView `InlineEditableUIView`} instance will be initialized.\n\t * @param options Configuration options for the view instance.\n\t * @param options.editableElements The editable elements to be used, assigned to their names. If not specified, they will be\n\t * automatically created by {@link module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView `InlineEditableUIView`}\n\t * instances.\n\t * @param options.shouldToolbarGroupWhenFull When set to `true` enables automatic items grouping\n\t * in the main {@link module:editor-multi-root/multirooteditoruiview~MultiRootEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t * @param options.label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view} elements.\n\t */ constructor(locale, editingView, editableNames, options = {}){\n        super(locale);\n        this._editingView = editingView;\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        this.menuBarView = new MenuBarView(locale);\n        this.editables = {};\n        // Create `InlineEditableUIView` instance for each editable.\n        for (const editableName of editableNames){\n            const editableElement = options.editableElements ? options.editableElements[editableName] : undefined;\n            let { label } = options;\n            if (typeof label === 'object') {\n                label = label[editableName];\n            }\n            this.createEditable(editableName, editableElement, label);\n        }\n        this.editable = Object.values(this.editables)[0];\n        // This toolbar may be placed anywhere in the page so things like font size need to be reset in it.\n        // Because of the above, make sure the toolbar supports rounded corners.\n        // Also, make sure the toolbar has the proper dir attribute because its ancestor may not have one\n        // and some toolbar item styles depend on this attribute.\n        this.toolbar.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-reset_all',\n                    'ck-rounded-corners'\n                ],\n                dir: locale.uiLanguageDirection\n            }\n        });\n        this.menuBarView.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-reset_all',\n                    'ck-rounded-corners'\n                ],\n                dir: locale.uiLanguageDirection\n            }\n        });\n    }\n    /**\n\t * Creates an editable instance with given name and registers it in the editor UI view.\n\t *\n\t * If `editableElement` is provided, the editable instance will be created on top of it. Otherwise, the editor will create a new\n\t * DOM element and use it instead.\n\t *\n\t * @param editableName The name for the editable.\n\t * @param editableElement DOM element for which the editable should be created.\n\t * @param label The accessible editable label used by assistive technologies.\n\t * @returns The created editable instance.\n\t */ createEditable(editableName, editableElement, label) {\n        const editable = new InlineEditableUIView(this.locale, this._editingView, editableElement, {\n            label\n        });\n        this.editables[editableName] = editable;\n        editable.name = editableName;\n        if (this.isRendered) {\n            this.registerChild(editable);\n        }\n        return editable;\n    }\n    /**\n\t * Destroys and removes the editable from the editor UI view.\n\t *\n\t * @param editableName The name of the editable that should be removed.\n\t */ removeEditable(editableName) {\n        const editable = this.editables[editableName];\n        if (this.isRendered) {\n            this.deregisterChild(editable);\n        }\n        delete this.editables[editableName];\n        editable.destroy();\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.registerChild(Object.values(this.editables));\n        this.registerChild(this.toolbar);\n        this.registerChild(this.menuBarView);\n    }\n}\n\n/**\n * The multi-root editor implementation.\n *\n * The multi-root editor provides multiple inline editable elements and a toolbar. All editable areas are controlled by one editor\n * instance, which means that they share common configuration, document ID, or undo stack.\n *\n * This type of editor is dedicated to integrations which require a customized UI with an open structure, featuring multiple editable areas,\n * allowing developers to have a control over the exact location of these editable areas.\n *\n * In order to create a multi-root editor instance, use the static\n * {@link module:editor-multi-root/multirooteditor~MultiRootEditor.create `MultiRootEditor.create()`} method.\n *\n * Note that you will need to attach the editor toolbar to your web page manually, in a desired place, after the editor is initialized.\n */ class MultiRootEditor extends Editor {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * The elements on which the editor has been initialized.\n\t */ sourceElements;\n    /**\n\t * Holds attributes keys that were passed in {@link module:core/editor/editorconfig~EditorConfig#rootsAttributes `rootsAttributes`}\n\t * config property and should be returned by {@link #getRootsAttributes}.\n\t */ _registeredRootsAttributesKeys = new Set();\n    /**\n\t * A set of lock IDs for enabling or disabling particular root.\n\t */ _readOnlyRootLocks = new Map();\n    /**\n\t * Creates an instance of the multi-root editor.\n\t *\n\t * **Note:** Do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-multi-root/multirooteditor~MultiRootEditor.create `MultiRootEditor.create()`} method instead.\n\t *\n\t * @param sourceElementsOrData The DOM elements that will be the source for the created editor\n\t * or the editor's initial data. The editor will initialize multiple roots with names according to the keys in the passed object.\n\t * For more information see {@link module:editor-multi-root/multirooteditor~MultiRootEditor.create `MultiRootEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementsOrData, config = {}){\n        const rootNames = Object.keys(sourceElementsOrData);\n        const sourceIsData = rootNames.length === 0 || typeof sourceElementsOrData[rootNames[0]] === 'string';\n        if (sourceIsData && config.initialData !== undefined && Object.keys(config.initialData).length > 0) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        if (!sourceIsData) {\n            this.sourceElements = sourceElementsOrData;\n        } else {\n            this.sourceElements = {};\n        }\n        if (this.config.get('initialData') === undefined) {\n            // Create initial data object containing data from all roots.\n            const initialData = {};\n            for (const rootName of rootNames){\n                initialData[rootName] = getInitialData(sourceElementsOrData[rootName]);\n            }\n            this.config.set('initialData', initialData);\n        }\n        if (!sourceIsData) {\n            for (const rootName of rootNames){\n                secureSourceElement(this, sourceElementsOrData[rootName]);\n            }\n        }\n        this.editing.view.document.roots.on('add', (evt, viewRoot)=>{\n            // Here we change the standard binding of readOnly flag by adding\n            // additional constraint that multi-root has (enabling / disabling particular root).\n            viewRoot.unbind('isReadOnly');\n            viewRoot.bind('isReadOnly').to(this.editing.view.document, 'isReadOnly', (isReadOnly)=>{\n                return isReadOnly || this._readOnlyRootLocks.has(viewRoot.rootName);\n            });\n            // Hacky solution to nested editables.\n            // Nested editables should be managed each separately and do not base on view document or view root.\n            viewRoot.on('change:isReadOnly', (evt, prop, value)=>{\n                const viewRange = this.editing.view.createRangeIn(viewRoot);\n                for (const viewItem of viewRange.getItems()){\n                    if (viewItem.is('editableElement')) {\n                        viewItem.unbind('isReadOnly');\n                        viewItem.isReadOnly = value;\n                    }\n                }\n            });\n        });\n        for (const rootName of rootNames){\n            // Create root and `UIView` element for each editable container.\n            this.model.document.createRoot('$root', rootName);\n        }\n        if (this.config.get('lazyRoots')) {\n            for (const rootName of this.config.get('lazyRoots')){\n                const root = this.model.document.createRoot('$root', rootName);\n                root._isLoaded = false;\n            }\n        }\n        if (this.config.get('rootsAttributes')) {\n            const rootsAttributes = this.config.get('rootsAttributes');\n            for (const [rootName, attributes] of Object.entries(rootsAttributes)){\n                if (!this.model.document.getRoot(rootName)) {\n                    /**\n\t\t\t\t\t * Trying to set attributes on a non-existing root.\n\t\t\t\t\t *\n\t\t\t\t\t * Roots specified in {@link module:core/editor/editorconfig~EditorConfig#rootsAttributes} do not match initial\n\t\t\t\t\t * editor roots.\n\t\t\t\t\t *\n\t\t\t\t\t * @error multi-root-editor-root-attributes-no-root\n\t\t\t\t\t */ throw new CKEditorError('multi-root-editor-root-attributes-no-root', null);\n                }\n                for (const key of Object.keys(attributes)){\n                    this.registerRootAttribute(key);\n                }\n            }\n            this.data.on('init', ()=>{\n                this.model.enqueueChange({\n                    isUndoable: false\n                }, (writer)=>{\n                    for (const [name, attributes] of Object.entries(rootsAttributes)){\n                        const root = this.model.document.getRoot(name);\n                        for (const [key, value] of Object.entries(attributes)){\n                            if (value !== null) {\n                                writer.setAttribute(key, value, root);\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        const options = {\n            shouldToolbarGroupWhenFull: !this.config.get('toolbar.shouldNotGroupWhenFull'),\n            editableElements: sourceIsData ? undefined : sourceElementsOrData,\n            label: this.config.get('label')\n        };\n        const view = new MultiRootEditorUIView(this.locale, this.editing.view, rootNames, options);\n        this.ui = new MultiRootEditorUI(this, view);\n        this.model.document.on('change:data', ()=>{\n            const changedRoots = this.model.document.differ.getChangedRoots();\n            // Fire detaches first. If there are multiple roots removed and added in one batch, it should be easier to handle if\n            // changes aren't mixed. Detaching will usually lead to just removing DOM elements. Detaching first will lead to a clean DOM\n            // when new editables are added in `addRoot` event.\n            for (const changes of changedRoots){\n                const root = this.model.document.getRoot(changes.name);\n                if (changes.state == 'detached') {\n                    this.fire('detachRoot', root);\n                }\n            }\n            for (const changes of changedRoots){\n                const root = this.model.document.getRoot(changes.name);\n                if (changes.state == 'attached') {\n                    this.fire('addRoot', root);\n                }\n            }\n        });\n        // Overwrite `Model#canEditAt()` decorated method.\n        // Check if the provided selection is inside a read-only root. If so, return `false`.\n        this.listenTo(this.model, 'canEditAt', (evt, [selection])=>{\n            // Skip empty selections.\n            if (!selection) {\n                return;\n            }\n            let selectionInReadOnlyRoot = false;\n            for (const range of selection.getRanges()){\n                const root = range.root;\n                if (this._readOnlyRootLocks.has(root.rootName)) {\n                    selectionInReadOnlyRoot = true;\n                    break;\n                }\n            }\n            // If selection is in read-only root, return `false` and prevent further processing.\n            // Otherwise, allow for other callbacks (or default callback) to evaluate.\n            if (selectionInReadOnlyRoot) {\n                evt.return = false;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.decorate('loadRoot');\n        this.on('loadRoot', (evt, [rootName])=>{\n            const root = this.model.document.getRoot(rootName);\n            if (!root) {\n                /**\n\t\t\t\t * The root to load does not exist.\n\t\t\t\t *\n\t\t\t\t * @error multi-root-editor-load-root-no-root\n\t\t\t\t */ throw new CKEditorError('multi-root-editor-load-root-no-root', this, {\n                    rootName\n                });\n            }\n            if (root._isLoaded) {\n                /**\n\t\t\t\t * The root to load was already loaded before. The `loadRoot()` call has no effect.\n\t\t\t\t *\n\t\t\t\t * @error multi-root-editor-load-root-already-loaded\n\t\t\t\t */ logWarning('multi-root-editor-load-root-already-loaded');\n                evt.stop();\n            }\n        }, {\n            priority: 'highest'\n        });\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t *\n\t * **Note**: The multi-root editor does not remove the toolbar and editable when destroyed. You can\n\t * do that yourself in the destruction chain, if you need to:\n\t *\n\t * ```ts\n\t * editor.destroy().then( () => {\n\t * \t// Remove the toolbar from DOM.\n\t * \teditor.ui.view.toolbar.element.remove();\n\t *\n\t * \t// Remove editable elements from DOM.\n\t * \tfor ( const editable of Object.values( editor.ui.view.editables ) ) {\n\t * \t    editable.element.remove();\n\t * \t}\n\t *\n\t * \tconsole.log( 'Editor was destroyed' );\n\t * } );\n\t * ```\n\t */ destroy() {\n        const shouldUpdateSourceElement = this.config.get('updateSourceElementOnDestroy');\n        // Cache the data and editable DOM elements, then destroy.\n        // It's safe to assume that the model->view conversion will not work after `super.destroy()`,\n        // same as `ui.getEditableElement()` method will not return editables.\n        const data = {};\n        for (const rootName of Object.keys(this.sourceElements)){\n            data[rootName] = shouldUpdateSourceElement ? this.getData({\n                rootName\n            }) : '';\n        }\n        this.ui.destroy();\n        return super.destroy().then(()=>{\n            for (const rootName of Object.keys(this.sourceElements)){\n                setDataInElement(this.sourceElements[rootName], data[rootName]);\n            }\n        });\n    }\n    /**\n\t * Adds a new root to the editor.\n\t *\n\t * ```ts\n\t * editor.addRoot( 'myRoot', { data: '<p>Initial root data.</p>' } );\n\t * ```\n\t *\n\t * After a root is added, you will be able to modify and retrieve its data.\n\t *\n\t * All root names must be unique. An error will be thrown if you will try to create a root with the name same as\n\t * an already existing, attached root. However, you can call this method for a detached root. See also {@link #detachRoot}.\n\t *\n\t * Whenever a root is added, the editor instance will fire {@link #event:addRoot `addRoot` event}. The event is also called when\n\t * the root is added indirectly, e.g. by the undo feature or on a remote client during real-time collaboration.\n\t *\n\t * Note, that this method only adds a root to the editor model. It **does not** create a DOM editable element for the new root.\n\t * Until such element is created (and attached to the root), the root is \"virtual\": it is not displayed anywhere and its data can\n\t * be changed only using the editor API.\n\t *\n\t * To create a DOM editable element for the root, listen to {@link #event:addRoot `addRoot` event} and call {@link #createEditable}.\n\t * Then, insert the DOM element in a desired place, that will depend on the integration with your application and your requirements.\n\t *\n\t * ```ts\n\t * editor.on( 'addRoot', ( evt, root ) => {\n\t * \tconst editableElement = editor.createEditable( root );\n\t *\n\t * \t// You may want to create a more complex DOM structure here.\n\t * \t//\n\t * \t// Alternatively, you may want to create a DOM structure before\n\t * \t// calling `editor.addRoot()` and only append `editableElement` at\n\t * \t// a proper place.\n\t *\n\t * \tdocument.querySelector( '#editors' ).appendChild( editableElement );\n\t * } );\n\t *\n\t * // ...\n\t *\n\t * editor.addRoot( 'myRoot' ); // Will create a root, a DOM editable element and append it to `#editors` container element.\n\t * ```\n\t *\n\t * You can set root attributes on the new root while you add it:\n\t *\n\t * ```ts\n\t * // Add a collapsed root at fourth position from top.\n\t * // Keep in mind that these are just examples of attributes. You need to provide your own features that will handle the attributes.\n\t * editor.addRoot( 'myRoot', { attributes: { isCollapsed: true, index: 4 } } );\n\t * ```\n\t *\n\t * Note that attributes added together with a root are automatically registered.\n\t *\n\t * See also {@link ~MultiRootEditor#registerRootAttribute `MultiRootEditor#registerRootAttribute()`} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#rootsAttributes `config.rootsAttributes` configuration option}.\n\t *\n\t * By setting `isUndoable` flag to `true`, you can allow for detaching the root using the undo feature.\n\t *\n\t * Additionally, you can group adding multiple roots in one undo step. This can be useful if you add multiple roots that are\n\t * combined into one, bigger UI element, and want them all to be undone together.\n\t *\n\t * ```ts\n\t * let rowId = 0;\n\t *\n\t * editor.model.change( () => {\n\t * \teditor.addRoot( 'left-row-' + rowId, { isUndoable: true } );\n\t * \teditor.addRoot( 'center-row-' + rowId, { isUndoable: true } );\n\t * \teditor.addRoot( 'right-row-' + rowId, { isUndoable: true } );\n\t *\n\t * \trowId++;\n\t * } );\n\t * ```\n\t *\n\t * @param rootName Name of the root to add.\n\t * @param options Additional options for the added root.\n\t */ addRoot(rootName, { data = '', attributes = {}, elementName = '$root', isUndoable = false } = {}) {\n        const _addRoot = (writer)=>{\n            const root = writer.addRoot(rootName, elementName);\n            if (data) {\n                writer.insert(this.data.parse(data, root), root, 0);\n            }\n            for (const key of Object.keys(attributes)){\n                this.registerRootAttribute(key);\n                writer.setAttribute(key, attributes[key], root);\n            }\n        };\n        if (isUndoable) {\n            this.model.change(_addRoot);\n        } else {\n            this.model.enqueueChange({\n                isUndoable: false\n            }, _addRoot);\n        }\n    }\n    /**\n\t * Detaches a root from the editor.\n\t *\n\t * ```ts\n\t * editor.detachRoot( 'myRoot' );\n\t * ```\n\t *\n\t * A detached root is not entirely removed from the editor model, however it can be considered removed.\n\t *\n\t * After a root is detached all its children are removed, all markers inside it are removed, and whenever something is inserted to it,\n\t * it is automatically removed as well. Finally, a detached root is not returned by\n\t * {@link module:engine/model/document~Document#getRootNames} by default.\n\t *\n\t * It is possible to re-add a previously detached root calling {@link #addRoot}.\n\t *\n\t * Whenever a root is detached, the editor instance will fire {@link #event:detachRoot `detachRoot` event}. The event is also\n\t * called when the root is detached indirectly, e.g. by the undo feature or on a remote client during real-time collaboration.\n\t *\n\t * Note, that this method only detached a root in the editor model. It **does not** destroy the DOM editable element linked with\n\t * the root and it **does not** remove the DOM element from the DOM structure of your application.\n\t *\n\t * To properly remove a DOM editable element after a root was detached, listen to {@link #event:detachRoot `detachRoot` event}\n\t * and call {@link #detachEditable}. Then, remove the DOM element from your application.\n\t *\n\t * ```ts\n\t * editor.on( 'detachRoot', ( evt, root ) => {\n\t * \tconst editableElement = editor.detachEditable( root );\n\t *\n\t * \t// You may want to do an additional DOM clean-up here.\n\t *\n\t * \teditableElement.remove();\n\t * } );\n\t *\n\t * // ...\n\t *\n\t * editor.detachRoot( 'myRoot' ); // Will detach the root, and remove the DOM editable element.\n\t * ```\n\t *\n\t * By setting `isUndoable` flag to `true`, you can allow for re-adding the root using the undo feature.\n\t *\n\t * Additionally, you can group detaching multiple roots in one undo step. This can be useful if the roots are combined into one,\n\t * bigger UI element, and you want them all to be re-added together.\n\t *\n\t * ```ts\n\t * editor.model.change( () => {\n\t * \teditor.detachRoot( 'left-row-3', true );\n\t * \teditor.detachRoot( 'center-row-3', true );\n\t * \teditor.detachRoot( 'right-row-3', true );\n\t * } );\n\t * ```\n\t *\n\t * @param rootName Name of the root to detach.\n\t * @param isUndoable Whether detaching the root can be undone (using the undo feature) or not.\n\t */ detachRoot(rootName, isUndoable = false) {\n        if (isUndoable) {\n            this.model.change((writer)=>writer.detachRoot(rootName));\n        } else {\n            this.model.enqueueChange({\n                isUndoable: false\n            }, (writer)=>writer.detachRoot(rootName));\n        }\n    }\n    /**\n\t * Creates and returns a new DOM editable element for the given root element.\n\t *\n\t * The new DOM editable is attached to the model root and can be used to modify the root content.\n\t *\n\t * @param root Root for which the editable element should be created.\n\t * @param placeholder Placeholder for the editable element. If not set, placeholder value from the\n\t * {@link module:core/editor/editorconfig~EditorConfig#placeholder editor configuration} will be used (if it was provided).\n\t * @param label The accessible label text describing the editable to the assistive technologies.\n\t * @returns The created DOM element. Append it in a desired place in your application.\n\t */ createEditable(root, placeholder, label) {\n        const editable = this.ui.view.createEditable(root.rootName, undefined, label);\n        this.ui.addEditable(editable, placeholder);\n        this.editing.view.forceRender();\n        return editable.element;\n    }\n    /**\n\t * Detaches the DOM editable element that was attached to the given root.\n\t *\n\t * @param root Root for which the editable element should be detached.\n\t * @returns The DOM element that was detached. You may want to remove it from your application DOM structure.\n\t */ detachEditable(root) {\n        const rootName = root.rootName;\n        const editable = this.ui.view.editables[rootName];\n        this.ui.removeEditable(editable);\n        this.ui.view.removeEditable(rootName);\n        return editable.element;\n    }\n    /**\n\t * Loads a root that has previously been declared in {@link module:core/editor/editorconfig~EditorConfig#lazyRoots `lazyRoots`}\n\t * configuration option.\n\t *\n\t * Only roots specified in the editor config can be loaded. A root cannot be loaded multiple times. A root cannot be unloaded and\n\t * loading a root cannot be reverted using the undo feature.\n\t *\n\t * When a root becomes loaded, it will be treated by the editor as though it was just added. This, among others, means that all\n\t * related events and mechanisms will be fired, including {@link ~MultiRootEditor#event:addRoot `addRoot` event},\n\t * {@link module:engine/model/document~Document#event:change `model.Document` `change` event}, model post-fixers and conversion.\n\t *\n\t * Until the root becomes loaded, all above mechanisms are suppressed.\n\t *\n\t * This method is {@link module:utils/observablemixin~Observable#decorate decorated}.\n\t *\n\t * Note that attributes loaded together with a root are automatically registered.\n\t *\n\t * See also {@link ~MultiRootEditor#registerRootAttribute `MultiRootEditor#registerRootAttribute()`} and\n\t * {@link module:core/editor/editorconfig~EditorConfig#rootsAttributes `config.rootsAttributes` configuration option}.\n\t *\n\t * When this method is used in real-time collaboration environment, its effects become asynchronous as the editor will first synchronize\n\t * with the remote editing session, before the root is added to the editor.\n\t *\n\t * If the root has been already loaded by any other client, the additional data passed in `loadRoot()` parameters will be ignored.\n\t *\n\t * @param rootName Name of the root to load.\n\t * @param options Additional options for the loaded root.\n\t * @fires loadRoot\n\t */ loadRoot(rootName, { data = '', attributes = {} } = {}) {\n        // `root` will be defined as it is guaranteed by a check in a higher priority callback.\n        const root = this.model.document.getRoot(rootName);\n        this.model.enqueueChange({\n            isUndoable: false\n        }, (writer)=>{\n            if (data) {\n                writer.insert(this.data.parse(data, root), root, 0);\n            }\n            for (const key of Object.keys(attributes)){\n                this.registerRootAttribute(key);\n                writer.setAttribute(key, attributes[key], root);\n            }\n            root._isLoaded = true;\n            this.model.document.differ._bufferRootLoad(root);\n        });\n    }\n    /**\n\t * Returns the document data for all attached roots.\n\t *\n\t * @param options Additional configuration for the retrieved data.\n\t * Editor features may introduce more configuration options that can be set through this parameter.\n\t * @param options.trim Whether returned data should be trimmed. This option is set to `'empty'` by default,\n\t * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n\t * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n\t * @returns The full document data.\n\t */ getFullData(options) {\n        const data = {};\n        for (const rootName of this.model.document.getRootNames()){\n            data[rootName] = this.data.get({\n                ...options,\n                rootName\n            });\n        }\n        return data;\n    }\n    /**\n\t * Returns attributes for all attached roots.\n\t *\n\t * Note: all and only {@link ~MultiRootEditor#registerRootAttribute registered} roots attributes will be returned.\n\t * If a registered root attribute is not set for a given root, `null` will be returned.\n\t *\n\t * @returns Object with roots attributes. Keys are roots names, while values are attributes set on given root.\n\t */ getRootsAttributes() {\n        const rootsAttributes = {};\n        for (const rootName of this.model.document.getRootNames()){\n            rootsAttributes[rootName] = this.getRootAttributes(rootName);\n        }\n        return rootsAttributes;\n    }\n    /**\n\t * Returns attributes for the specified root.\n\t *\n\t * Note: all and only {@link ~MultiRootEditor#registerRootAttribute registered} roots attributes will be returned.\n\t * If a registered root attribute is not set for a given root, `null` will be returned.\n\t */ getRootAttributes(rootName) {\n        const rootAttributes = {};\n        const root = this.model.document.getRoot(rootName);\n        for (const key of this._registeredRootsAttributesKeys){\n            rootAttributes[key] = root.hasAttribute(key) ? root.getAttribute(key) : null;\n        }\n        return rootAttributes;\n    }\n    /**\n\t * Registers given string as a root attribute key. Registered root attributes are added to\n\t * {@link module:engine/model/schema~Schema schema}, and also returned by\n\t * {@link ~MultiRootEditor#getRootAttributes `getRootAttributes()`} and\n\t * {@link ~MultiRootEditor#getRootsAttributes `getRootsAttributes()`}.\n\t *\n\t * Note: attributes passed in {@link module:core/editor/editorconfig~EditorConfig#rootsAttributes `config.rootsAttributes`} are\n\t * automatically registered as the editor is initialized. However, registering the same attribute twice does not have any negative\n\t * impact, so it is recommended to use this method in any feature that uses roots attributes.\n\t */ registerRootAttribute(key) {\n        if (this._registeredRootsAttributesKeys.has(key)) {\n            return;\n        }\n        this._registeredRootsAttributesKeys.add(key);\n        this.editing.model.schema.extend('$root', {\n            allowAttributes: key\n        });\n    }\n    /**\n\t * Switches given editor root to the read-only mode.\n\t *\n\t * In contrary to {@link module:core/editor/editor~Editor#enableReadOnlyMode `enableReadOnlyMode()`}, which switches the whole editor\n\t * to the read-only mode, this method turns only a particular root to the read-only mode. This can be useful when you want to prevent\n\t * editing only a part of the editor content.\n\t *\n\t * When you switch a root to the read-only mode, you need provide a unique identifier (`lockId`) that will identify this request. You\n\t * will need to provide the same `lockId` when you will want to\n\t * {@link module:editor-multi-root/multirooteditor~MultiRootEditor#enableRoot re-enable} the root.\n\t *\n\t * ```ts\n\t * const model = editor.model;\n\t * const myRoot = model.document.getRoot( 'myRoot' );\n\t *\n\t * editor.disableRoot( 'myRoot', 'my-lock' );\n\t * model.canEditAt( myRoot ); // `false`\n\t *\n\t * editor.disableRoot( 'myRoot', 'other-lock' );\n\t * editor.disableRoot( 'myRoot', 'other-lock' ); // Multiple locks with the same ID have no effect.\n\t * model.canEditAt( myRoot ); // `false`\n\t *\n\t * editor.enableRoot( 'myRoot', 'my-lock' );\n\t * model.canEditAt( myRoot ); // `false`\n\t *\n\t * editor.enableRoot( 'myRoot', 'other-lock' );\n\t * model.canEditAt( myRoot ); // `true`\n\t * ```\n\t *\n\t * See also {@link module:core/editor/editor~Editor#enableReadOnlyMode `Editor#enableReadOnlyMode()`} and\n\t * {@link module:editor-multi-root/multirooteditor~MultiRootEditor#enableRoot `MultiRootEditor#enableRoot()`}.\n\t *\n\t * @param rootName Name of the root to switch to read-only mode.\n\t * @param lockId A unique ID for setting the editor to the read-only state.\n\t */ disableRoot(rootName, lockId) {\n        if (rootName == '$graveyard') {\n            /**\n\t\t\t * You cannot disable the `$graveyard` root.\n\t\t\t *\n\t\t\t * @error multi-root-editor-cannot-disable-graveyard-root\n\t\t\t */ throw new CKEditorError('multi-root-editor-cannot-disable-graveyard-root', this);\n        }\n        const locksForGivenRoot = this._readOnlyRootLocks.get(rootName);\n        if (locksForGivenRoot) {\n            locksForGivenRoot.add(lockId);\n        } else {\n            this._readOnlyRootLocks.set(rootName, new Set([\n                lockId\n            ]));\n            const editableRootElement = this.editing.view.document.getRoot(rootName);\n            editableRootElement.isReadOnly = true;\n            // Since one of the roots has changed read-only state, we need to refresh all commands that affect data.\n            Array.from(this.commands.commands()).forEach((command)=>command.affectsData && command.refresh());\n        }\n    }\n    /**\n\t * Removes given read-only lock from the given root.\n\t *\n\t * See {@link module:editor-multi-root/multirooteditor~MultiRootEditor#disableRoot `disableRoot()`}.\n\t *\n\t * @param rootName Name of the root to switch back from the read-only mode.\n\t * @param lockId A unique ID for setting the editor to the read-only state.\n\t */ enableRoot(rootName, lockId) {\n        const locksForGivenRoot = this._readOnlyRootLocks.get(rootName);\n        if (!locksForGivenRoot || !locksForGivenRoot.has(lockId)) {\n            return;\n        }\n        if (locksForGivenRoot.size === 1) {\n            this._readOnlyRootLocks.delete(rootName);\n            const editableRootElement = this.editing.view.document.getRoot(rootName);\n            editableRootElement.isReadOnly = this.isReadOnly;\n            // Since one of the roots has changed read-only state, we need to refresh all commands that affect data.\n            Array.from(this.commands.commands()).forEach((command)=>command.affectsData && command.refresh());\n        } else {\n            locksForGivenRoot.delete(lockId);\n        }\n    }\n    /**\n\t * Creates a new multi-root editor instance.\n\t *\n\t * **Note:** remember that `MultiRootEditor` does not append the toolbar element to your web page, so you have to do it manually\n\t * after the editor has been initialized.\n\t *\n\t * There are a few different ways to initialize the multi-root editor.\n\t *\n\t * # Using existing DOM elements:\n\t *\n\t * ```ts\n\t * MultiRootEditor.create( {\n\t * \tintro: document.querySelector( '#editor-intro' ),\n\t * \tcontent: document.querySelector( '#editor-content' ),\n\t * \tsidePanelLeft: document.querySelector( '#editor-side-left' ),\n\t * \tsidePanelRight: document.querySelector( '#editor-side-right' ),\n\t * \toutro: document.querySelector( '#editor-outro' )\n\t * } )\n\t * .then( editor => {\n\t * \tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t// Append the toolbar inside a provided DOM element.\n\t * \tdocument.querySelector( '#toolbar-container' ).appendChild( editor.ui.view.toolbar.element );\n\t * } )\n\t * .catch( err => {\n\t * \tconsole.error( err.stack );\n\t * } );\n\t * ```\n\t *\n\t * The elements' content will be used as the editor data and elements will become editable elements.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as strings.\n\t * In this case, you will have to manually append both the toolbar element and the editable elements to your web page.\n\t *\n\t * ```ts\n\t * MultiRootEditor.create( {\n\t * \tintro: '<p><strong>Exciting</strong> intro text to an article.</p>',\n\t * \tcontent: '<p>Lorem ipsum dolor sit amet.</p>',\n\t * \tsidePanelLeft: '<blockquote>Strong quotation from article.</blockquote>',\n\t * \tsidePanelRight: '<p>List of similar articles...</p>',\n\t * \toutro: '<p>Closing text.</p>'\n\t * } )\n\t * .then( editor => {\n\t * \tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t// Append the toolbar inside a provided DOM element.\n\t * \tdocument.querySelector( '#toolbar-container' ).appendChild( editor.ui.view.toolbar.element );\n\t *\n\t * \t// Append DOM editable elements created by the editor.\n\t * \tconst editables = editor.ui.view.editables;\n\t * \tconst container = document.querySelector( '#editable-container' );\n\t *\n\t * \tcontainer.appendChild( editables.intro.element );\n\t * \tcontainer.appendChild( editables.content.element );\n\t * \tcontainer.appendChild( editables.outro.element );\n\t * } )\n\t * .catch( err => {\n\t * \tconsole.error( err.stack );\n\t * } );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Using an existing DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * MultiRootEditor.create( {\n\t * \tintro: document.querySelector( '#editor-intro' ),\n\t * \tcontent: document.querySelector( '#editor-content' ),\n\t * \tsidePanelLeft: document.querySelector( '#editor-side-left' ),\n\t * \tsidePanelRight: document.querySelector( '#editor-side-right' ),\n\t * \toutro: document.querySelector( '#editor-outro' )\n\t * }, {\n\t * \tinitialData: {\n\t * \t\tintro: '<p><strong>Exciting</strong> intro text to an article.</p>',\n\t * \t\tcontent: '<p>Lorem ipsum dolor sit amet.</p>',\n\t * \t\tsidePanelLeft '<blockquote>Strong quotation from article.</blockquote>':\n\t * \t\tsidePanelRight '<p>List of similar articles...</p>':\n\t * \t\toutro: '<p>Closing text.</p>'\n\t * \t}\n\t * } )\n\t * .then( editor => {\n\t * \tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t// Append the toolbar inside a provided DOM element.\n\t * \tdocument.querySelector( '#toolbar-container' ).appendChild( editor.ui.view.toolbar.element );\n\t * } )\n\t * .catch( err => {\n\t * \tconsole.error( err.stack );\n\t * } );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * @param sourceElementsOrData The DOM elements that will be the source for the created editor\n\t * or the editor's initial data. The editor will initialize multiple roots with names according to the keys in the passed object.\n\t *\n\t * If DOM elements are passed, their content will be automatically loaded to the editor upon initialization and the elements will be\n\t * used as the editor's editable areas. The editor data will be set back to the original element once the editor is destroyed if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy} option\n\t * is set to `true`.\n\t *\n\t * If the initial data is passed, a detached editor will be created. For each entry in the passed object, one editor root and one\n\t * editable DOM element will be created. You will need to attach the editable elements into the DOM manually. The elements are available\n\t * through the {@link module:editor-multi-root/multirooteditorui~MultiRootEditorUI#getEditableElement `editor.ui.getEditableElement()`}\n\t * method.\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementsOrData, config = {}) {\n        return new Promise((resolve)=>{\n            for (const sourceItem of Object.values(sourceElementsOrData)){\n                if (isElement(sourceItem) && sourceItem.tagName === 'TEXTAREA') {\n                    // Documented in core/editor/editor.js\n                    // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n                    throw new CKEditorError('editor-wrong-element', null);\n                }\n            }\n            const editor = new this(sourceElementsOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init()).then(()=>{\n                // This is checked directly before setting the initial data,\n                // as plugins may change `EditorConfig#initialData` value.\n                editor._verifyRootsWithInitialData();\n                return editor.data.init(editor.config.get('initialData'));\n            }).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n    /**\n\t * @internal\n\t */ _verifyRootsWithInitialData() {\n        const initialData = this.config.get('initialData');\n        // Roots that are not in the initial data.\n        for (const rootName of this.model.document.getRootNames()){\n            if (!(rootName in initialData)) {\n                /**\n\t\t\t\t * Editor roots do not match the\n\t\t\t\t * {@link module:core/editor/editorconfig~EditorConfig#initialData `initialData` configuration}.\n\t\t\t\t *\n\t\t\t\t * This may happen for one of the two reasons:\n\t\t\t\t *\n\t\t\t\t * * Configuration error. The `sourceElementsOrData` parameter in\n\t\t\t\t * {@link module:editor-multi-root/multirooteditor~MultiRootEditor.create `MultiRootEditor.create()`} contains different\n\t\t\t\t * roots than {@link module:core/editor/editorconfig~EditorConfig#initialData `initialData` configuration}.\n\t\t\t\t * * As the editor was initialized, the {@link module:core/editor/editorconfig~EditorConfig#initialData `initialData`}\n\t\t\t\t * configuration value or the state of the editor roots has been changed.\n\t\t\t\t *\n\t\t\t\t * @error multi-root-editor-root-initial-data-mismatch\n\t\t\t\t */ throw new CKEditorError('multi-root-editor-root-initial-data-mismatch', null);\n            }\n        }\n        // Roots that are not in the editor.\n        for (const rootName of Object.keys(initialData)){\n            const root = this.model.document.getRoot(rootName);\n            if (!root || !root.isAttached()) {\n                // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n                throw new CKEditorError('multi-root-editor-root-initial-data-mismatch', null);\n            }\n        }\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { MultiRootEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/tutorials/widgets/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n */ class SelectAllCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        let scopeElement = model.schema.getLimitElement(selection);\n        // If an entire scope is selected, or the selection's ancestor is not a scope yet,\n        // browse through ancestors to find the enclosing parent scope.\n        if (selection.containsEntireContent(scopeElement) || !isSelectAllScope(model.schema, scopeElement)) {\n            do {\n                scopeElement = scopeElement.parent;\n                // Do nothing, if the entire `root` is already selected.\n                if (!scopeElement) {\n                    return;\n                }\n            }while (!isSelectAllScope(model.schema, scopeElement))\n        }\n        model.change((writer)=>{\n            writer.setSelection(scopeElement, 'in');\n        });\n    }\n}\n/**\n * Checks whether the element is a valid select-all scope. Returns true, if the element is a\n * {@link module:engine/model/schema~Schema#isLimit limit}, and can contain any text or paragraph.\n *\n * @param schema Schema to check against.\n * @param element Model element.\n */ function isSelectAllScope(schema, element) {\n    return schema.isLimit(element) && (schema.checkChild(element, '$text') || schema.checkChild(element, 'paragraph'));\n}\n\nconst SELECT_ALL_KEYSTROKE = /* #__PURE__ */ parseKeystroke('Ctrl+A');\n/**\n * The select all editing feature.\n *\n * It registers the `'selectAll'` {@link module:select-all/selectallcommand~SelectAllCommand command}\n * and the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke listener which executes it.\n */ class SelectAllEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAllEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        editor.commands.add('selectAll', new SelectAllCommand(editor));\n        this.listenTo(viewDocument, 'keydown', (eventInfo, domEventData)=>{\n            if (getCode(domEventData) === SELECT_ALL_KEYSTROKE) {\n                editor.execute('selectAll');\n                domEventData.preventDefault();\n            }\n        });\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Select all'),\n                    keystroke: 'CTRL+A'\n                }\n            ]\n        });\n    }\n}\n\nvar selectAllIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z\\\"/></svg>\";\n\n/**\n * The select all UI feature.\n *\n * It registers the `'selectAll'` UI button in the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}. When clicked, the button\n * executes the {@link module:select-all/selectallcommand~SelectAllCommand select all command}.\n */ class SelectAllUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAllUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('selectAll', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:selectAll', ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Creates a button for select all command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('selectAll');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Select all'),\n            icon: selectAllIcon,\n            keystroke: 'Ctrl+A'\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('selectAll');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The select all feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature}\n * and the {@link module:select-all/selectallui~SelectAllUI select all UI feature}.\n *\n * Please refer to the documentation of individual features to learn more.\n */ class SelectAll extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SelectAllEditing,\n            SelectAllUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAll';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { SelectAll, SelectAllEditing, SelectAllUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Clipboard } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { Enter, ShiftEnter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { SelectAll } from '@ckeditor/ckeditor5-select-all/dist/index.js';\nimport { Typing } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Undo } from '@ckeditor/ckeditor5-undo/dist/index.js';\nimport { AccessibilityHelp } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:select-all/selectall~SelectAll},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n */ class Essentials extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            AccessibilityHelp,\n            Clipboard,\n            Enter,\n            SelectAll,\n            ShiftEnter,\n            Typing,\n            Undo\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Essentials';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Essentials };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { icons, Plugin, Command } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { View, ViewCollection, FocusCycler, submitHandler, CollapsibleView, SwitchButtonView, ButtonView, LabeledFieldView, createLabeledInputText, Dialog, DropdownView, createDropdown, FormHeaderView, MenuBarMenuListItemButtonView, DialogViewPosition, CssTransitionDisablerMixin } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { FocusTracker, KeystrokeHandler, isVisible, Rect, Collection, ObservableMixin, uid, scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { escapeRegExp, debounce } from 'lodash-es';\n\n/**\n * The find and replace form view class.\n *\n * See {@link module:find-and-replace/ui/findandreplaceformview~FindAndReplaceFormView}.\n */ class FindAndReplaceFormView extends View {\n    /**\n\t * A collection of child views.\n\t */ children;\n    /**\n\t * The find in text input view that stores the searched string.\n\t *\n\t * @internal\n\t */ _findInputView;\n    /**\n\t * The replace input view.\n\t */ _replaceInputView;\n    /**\n\t * The find button view that initializes the search process.\n\t */ _findButtonView;\n    /**\n\t * The find previous button view.\n\t */ _findPrevButtonView;\n    /**\n\t * The find next button view.\n\t */ _findNextButtonView;\n    /**\n\t * A collapsible view aggregating the advanced search options.\n\t */ _advancedOptionsCollapsibleView;\n    /**\n\t * A switch button view controlling the \"Match case\" option.\n\t */ _matchCaseSwitchView;\n    /**\n\t * A switch button view controlling the \"Whole words only\" option.\n\t */ _wholeWordsOnlySwitchView;\n    /**\n\t * The replace button view.\n\t */ _replaceButtonView;\n    /**\n\t * The replace all button view.\n\t */ _replaceAllButtonView;\n    /**\n\t * The `div` aggregating the inputs.\n\t */ _inputsDivView;\n    /**\n\t * The `div` aggregating the action buttons.\n\t */ _actionButtonsDivView;\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ _focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ _keystrokes;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ focusCycler;\n    /**\n\t * Creates a view of find and replace form.\n\t *\n\t * @param locale The localization services instance.\n\t */ constructor(locale){\n        super(locale);\n        const t = locale.t;\n        this.children = this.createCollection();\n        this.set('matchCount', 0);\n        this.set('highlightOffset', 0);\n        this.set('isDirty', false);\n        this.set('_areCommandsEnabled', {});\n        this.set('_resultsCounterText', '');\n        this.set('_matchCase', false);\n        this.set('_wholeWordsOnly', false);\n        this.bind('_searchResultsFound').to(this, 'matchCount', this, 'isDirty', (matchCount, isDirty)=>{\n            return matchCount > 0 && !isDirty;\n        });\n        this._findInputView = this._createInputField(t('Find in text…'));\n        this._findPrevButtonView = this._createButton({\n            label: t('Previous result'),\n            class: 'ck-button-prev',\n            icon: icons.previousArrow,\n            keystroke: 'Shift+F3',\n            tooltip: true\n        });\n        this._findNextButtonView = this._createButton({\n            label: t('Next result'),\n            class: 'ck-button-next',\n            icon: icons.previousArrow,\n            keystroke: 'F3',\n            tooltip: true\n        });\n        this._replaceInputView = this._createInputField(t('Replace with…'), 'ck-labeled-field-replace');\n        this._inputsDivView = this._createInputsDiv();\n        this._matchCaseSwitchView = this._createMatchCaseSwitch();\n        this._wholeWordsOnlySwitchView = this._createWholeWordsOnlySwitch();\n        this._advancedOptionsCollapsibleView = this._createAdvancedOptionsCollapsible();\n        this._replaceAllButtonView = this._createButton({\n            label: t('Replace all'),\n            class: 'ck-button-replaceall',\n            withText: true\n        });\n        this._replaceButtonView = this._createButton({\n            label: t('Replace'),\n            class: 'ck-button-replace',\n            withText: true\n        });\n        this._findButtonView = this._createButton({\n            label: t('Find'),\n            class: 'ck-button-find ck-button-action',\n            withText: true\n        });\n        this._actionButtonsDivView = this._createActionButtonsDiv();\n        this._focusTracker = new FocusTracker();\n        this._keystrokes = new KeystrokeHandler();\n        this._focusables = new ViewCollection();\n        this.focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this._focusTracker,\n            keystrokeHandler: this._keystrokes,\n            actions: {\n                // Navigate form fields backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the <kbd>Tab</kbd> key.\n                focusNext: 'tab'\n            }\n        });\n        this.children.addMany([\n            this._inputsDivView,\n            this._advancedOptionsCollapsibleView,\n            this._actionButtonsDivView\n        ]);\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-find-and-replace-form'\n                ],\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        submitHandler({\n            view: this\n        });\n        this._initFocusCycling();\n        this._initKeystrokeHandling();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._focusTracker.destroy();\n        this._keystrokes.destroy();\n    }\n    /**\n\t * @inheritDoc\n\t */ focus(direction) {\n        if (direction === -1) {\n            this.focusCycler.focusLast();\n        } else {\n            this.focusCycler.focusFirst();\n        }\n    }\n    /**\n\t * Resets the form before re-appearing.\n\t *\n\t * It clears error messages, hides the match counter and disables the replace feature\n\t * until the next hit of the \"Find\" button.\n\t *\n\t * **Note**: It does not reset inputs and options, though. This way the form works better in editors with\n\t * disappearing toolbar (e.g. BalloonEditor): hiding the toolbar by accident (together with the find and replace UI)\n\t * does not require filling the entire form again.\n\t */ reset() {\n        this._findInputView.errorText = null;\n        this.isDirty = true;\n    }\n    /**\n\t * Returns the value of the find input.\n\t */ get _textToFind() {\n        return this._findInputView.fieldView.element.value;\n    }\n    /**\n\t * Returns the value of the replace input.\n\t */ get _textToReplace() {\n        return this._replaceInputView.fieldView.element.value;\n    }\n    /**\n\t * Configures and returns the `<div>` aggregating all form inputs.\n\t */ _createInputsDiv() {\n        const locale = this.locale;\n        const t = locale.t;\n        const inputsDivView = new View(locale);\n        // Typing in the find field invalidates all previous results (the form is \"dirty\").\n        this._findInputView.fieldView.on('input', ()=>{\n            this.isDirty = true;\n        });\n        // Pressing prev/next buttons fires related event on the form.\n        this._findPrevButtonView.delegate('execute').to(this, 'findPrevious');\n        this._findNextButtonView.delegate('execute').to(this, 'findNext');\n        // Prev/next buttons will be disabled when related editor command gets disabled.\n        this._findPrevButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', ({ findPrevious })=>findPrevious);\n        this._findNextButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', ({ findNext })=>findNext);\n        this._injectFindResultsCounter();\n        this._replaceInputView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', ({ replace }, resultsFound)=>replace && resultsFound);\n        this._replaceInputView.bind('infoText').to(this._replaceInputView, 'isEnabled', this._replaceInputView, 'isFocused', (isEnabled, isFocused)=>{\n            if (isEnabled || !isFocused) {\n                return '';\n            }\n            return t('Tip: Find some text first in order to replace it.');\n        });\n        inputsDivView.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-find-and-replace-form__inputs'\n                ]\n            },\n            children: [\n                this._findInputView,\n                this._findPrevButtonView,\n                this._findNextButtonView,\n                this._replaceInputView\n            ]\n        });\n        return inputsDivView;\n    }\n    /**\n\t * The action performed when the {@link #_findButtonView} is pressed.\n\t */ _onFindButtonExecute() {\n        // When hitting \"Find\" in an empty input, an error should be displayed.\n        // Also, if the form was \"dirty\", it should remain so.\n        if (!this._textToFind) {\n            const t = this.t;\n            this._findInputView.errorText = t('Text to find must not be empty.');\n            return;\n        }\n        // Hitting \"Find\" automatically clears the dirty state.\n        this.isDirty = false;\n        this.fire('findNext', {\n            searchText: this._textToFind,\n            matchCase: this._matchCase,\n            wholeWords: this._wholeWordsOnly\n        });\n    }\n    /**\n\t * Configures an injects the find results counter displaying a \"N of M\" label of the {@link #_findInputView}.\n\t */ _injectFindResultsCounter() {\n        const locale = this.locale;\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        const resultsCounterView = new View(this.locale);\n        this.bind('_resultsCounterText').to(this, 'highlightOffset', this, 'matchCount', (highlightOffset, matchCount)=>t('%0 of %1', [\n                highlightOffset,\n                matchCount\n            ]));\n        resultsCounterView.setTemplate({\n            tag: 'span',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-results-counter',\n                    // The counter only makes sense when the field text corresponds to search results in the editing.\n                    bind.if('isDirty', 'ck-hidden')\n                ]\n            },\n            children: [\n                {\n                    text: bind.to('_resultsCounterText')\n                }\n            ]\n        });\n        // The whole idea is that when the text of the counter changes, its width also increases/decreases and\n        // it consumes more or less space over the input. The input, on the other hand, should adjust it's right\n        // padding so its *entire* text always remains visible and available to the user.\n        const updateFindInputPadding = ()=>{\n            const inputElement = this._findInputView.fieldView.element;\n            // Don't adjust the padding if the input (also: counter) were not rendered or not inserted into DOM yet.\n            if (!inputElement || !isVisible(inputElement)) {\n                return;\n            }\n            const counterWidth = new Rect(resultsCounterView.element).width;\n            const paddingPropertyName = locale.uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            if (!counterWidth) {\n                inputElement.style[paddingPropertyName] = '';\n            } else {\n                inputElement.style[paddingPropertyName] = `calc( 2 * var(--ck-spacing-standard) + ${counterWidth}px )`;\n            }\n        };\n        // Adjust the input padding when the text of the counter changes, for instance \"1 of 200\" is narrower than \"123 of 200\".\n        // Using \"low\" priority to let the text be set by the template binding first.\n        this.on('change:_resultsCounterText', updateFindInputPadding, {\n            priority: 'low'\n        });\n        // Adjust the input padding when the counter shows or hides. When hidden, there should be no padding. When it shows, the\n        // padding should be set according to the text of the counter.\n        // Using \"low\" priority to let the text be set by the template binding first.\n        this.on('change:isDirty', updateFindInputPadding, {\n            priority: 'low'\n        });\n        // Put the counter element next to the <input> in the find field.\n        this._findInputView.template.children[0].children.push(resultsCounterView);\n    }\n    /**\n\t * Creates the collapsible view aggregating the advanced search options.\n\t */ _createAdvancedOptionsCollapsible() {\n        const t = this.locale.t;\n        const collapsible = new CollapsibleView(this.locale, [\n            this._matchCaseSwitchView,\n            this._wholeWordsOnlySwitchView\n        ]);\n        collapsible.set({\n            label: t('Advanced options'),\n            isCollapsed: true\n        });\n        return collapsible;\n    }\n    /**\n\t * Configures and returns the `<div>` element aggregating all form action buttons.\n\t */ _createActionButtonsDiv() {\n        const actionsDivView = new View(this.locale);\n        this._replaceButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', ({ replace }, resultsFound)=>replace && resultsFound);\n        this._replaceAllButtonView.bind('isEnabled').to(this, '_areCommandsEnabled', this, '_searchResultsFound', ({ replaceAll }, resultsFound)=>replaceAll && resultsFound);\n        this._replaceButtonView.on('execute', ()=>{\n            this.fire('replace', {\n                searchText: this._textToFind,\n                replaceText: this._textToReplace\n            });\n        });\n        this._replaceAllButtonView.on('execute', ()=>{\n            this.fire('replaceAll', {\n                searchText: this._textToFind,\n                replaceText: this._textToReplace\n            });\n            this.focus();\n        });\n        this._findButtonView.on('execute', this._onFindButtonExecute.bind(this));\n        actionsDivView.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-find-and-replace-form__actions'\n                ]\n            },\n            children: [\n                this._replaceAllButtonView,\n                this._replaceButtonView,\n                this._findButtonView\n            ]\n        });\n        return actionsDivView;\n    }\n    /**\n\t * Creates, configures and returns and instance of a dropdown allowing users to narrow\n\t * the search criteria down. The dropdown has a list with switch buttons for each option.\n\t */ _createMatchCaseSwitch() {\n        const t = this.locale.t;\n        const matchCaseSwitchButton = new SwitchButtonView(this.locale);\n        matchCaseSwitchButton.set({\n            label: t('Match case'),\n            withText: true\n        });\n        // Let the switch be controlled by form's observable property.\n        matchCaseSwitchButton.bind('isOn').to(this, '_matchCase');\n        // // Update the state of the form when a switch is toggled.\n        matchCaseSwitchButton.on('execute', ()=>{\n            this._matchCase = !this._matchCase;\n            // Toggling a switch makes the form dirty because this changes search criteria\n            // just like typing text of the find input.\n            this.isDirty = true;\n        });\n        return matchCaseSwitchButton;\n    }\n    /**\n\t * Creates, configures and returns and instance of a dropdown allowing users to narrow\n\t * the search criteria down. The dropdown has a list with switch buttons for each option.\n\t */ _createWholeWordsOnlySwitch() {\n        const t = this.locale.t;\n        const wholeWordsOnlySwitchButton = new SwitchButtonView(this.locale);\n        wholeWordsOnlySwitchButton.set({\n            label: t('Whole words only'),\n            withText: true\n        });\n        // Let the switch be controlled by form's observable property.\n        wholeWordsOnlySwitchButton.bind('isOn').to(this, '_wholeWordsOnly');\n        // // Update the state of the form when a switch is toggled.\n        wholeWordsOnlySwitchButton.on('execute', ()=>{\n            this._wholeWordsOnly = !this._wholeWordsOnly;\n            // Toggling a switch makes the form dirty because this changes search criteria\n            // just like typing text of the find input.\n            this.isDirty = true;\n        });\n        return wholeWordsOnlySwitchButton;\n    }\n    /**\n\t * Initializes the {@link #_focusables} and {@link #_focusTracker} to allow navigation\n\t * using <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keystrokes in the right order.\n\t */ _initFocusCycling() {\n        const childViews = [\n            this._findInputView,\n            this._findPrevButtonView,\n            this._findNextButtonView,\n            this._replaceInputView,\n            this._advancedOptionsCollapsibleView.buttonView,\n            this._matchCaseSwitchView,\n            this._wholeWordsOnlySwitchView,\n            this._replaceAllButtonView,\n            this._replaceButtonView,\n            this._findButtonView\n        ];\n        childViews.forEach((v)=>{\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this._focusTracker.add(v.element);\n        });\n    }\n    /**\n\t * Initializes the keystroke handling in the form.\n\t */ _initKeystrokeHandling() {\n        const stopPropagation = (data)=>data.stopPropagation();\n        const stopPropagationAndPreventDefault = (data)=>{\n            data.stopPropagation();\n            data.preventDefault();\n        };\n        // Start listening for the keystrokes coming from #element.\n        this._keystrokes.listenTo(this.element);\n        // Find the next result upon F3.\n        this._keystrokes.set('f3', (event)=>{\n            stopPropagationAndPreventDefault(event);\n            this._findNextButtonView.fire('execute');\n        });\n        // Find the previous result upon F3.\n        this._keystrokes.set('shift+f3', (event)=>{\n            stopPropagationAndPreventDefault(event);\n            this._findPrevButtonView.fire('execute');\n        });\n        // Find or replace upon pressing Enter in the find and replace fields.\n        this._keystrokes.set('enter', (event)=>{\n            const target = event.target;\n            if (target === this._findInputView.fieldView.element) {\n                if (this._areCommandsEnabled.findNext) {\n                    this._findNextButtonView.fire('execute');\n                } else {\n                    this._findButtonView.fire('execute');\n                }\n                stopPropagationAndPreventDefault(event);\n            } else if (target === this._replaceInputView.fieldView.element && !this.isDirty) {\n                this._replaceButtonView.fire('execute');\n                stopPropagationAndPreventDefault(event);\n            }\n        });\n        // Find previous upon pressing Shift+Enter in the find field.\n        this._keystrokes.set('shift+enter', (event)=>{\n            const target = event.target;\n            if (target !== this._findInputView.fieldView.element) {\n                return;\n            }\n            if (this._areCommandsEnabled.findPrevious) {\n                this._findPrevButtonView.fire('execute');\n            } else {\n                this._findButtonView.fire('execute');\n            }\n            stopPropagationAndPreventDefault(event);\n        });\n        // Since the form is in the dropdown panel which is a child of the toolbar, the toolbar's\n        // keystroke handler would take over the key management in the URL input.\n        // We need to prevent this ASAP. Otherwise, the basic caret movement using the arrow keys will be impossible.\n        this._keystrokes.set('arrowright', stopPropagation);\n        this._keystrokes.set('arrowleft', stopPropagation);\n        this._keystrokes.set('arrowup', stopPropagation);\n        this._keystrokes.set('arrowdown', stopPropagation);\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @param options The properties of the `ButtonView`.\n\t * @returns The button view instance.\n\t */ _createButton(options) {\n        const button = new ButtonView(this.locale);\n        button.set(options);\n        return button;\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @param label The input label.\n\t * @returns The labeled input view instance.\n\t */ _createInputField(label, className) {\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        labeledInput.label = label;\n        labeledInput.class = className;\n        return labeledInput;\n    }\n}\n\nvar loupeIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.87 13.786 1.532-1.286 3.857 4.596a1 1 0 1 1-1.532 1.286l-3.857-4.596z\\\"/><path d=\\\"M16.004 8.5a6.5 6.5 0 0 1-9.216 5.905c-1.154-.53-.863-1.415-.663-1.615.194-.194.564-.592 1.635-.141a4.5 4.5 0 0 0 5.89-5.904l-.104-.227 1.332-1.331c.045-.046.196-.041.224.007a6.47 6.47 0 0 1 .902 3.306zm-3.4-5.715c.562.305.742 1.106.354 1.494-.388.388-.995.414-1.476.178a4.5 4.5 0 0 0-6.086 5.882l.114.236-1.348 1.349c-.038.037-.17.022-.198-.023a6.5 6.5 0 0 1 5.54-9.9 6.469 6.469 0 0 1 3.1.784z\\\"/><path d=\\\"M4.001 11.93.948 8.877a.2.2 0 0 1 .141-.341h6.106a.2.2 0 0 1 .141.341L4.283 11.93a.2.2 0 0 1-.282 0zm11.083-6.789 3.053 3.053a.2.2 0 0 1-.14.342H11.89a.2.2 0 0 1-.14-.342l3.052-3.053a.2.2 0 0 1 .282 0z\\\"/></svg>\";\n\n/**\n * The default find and replace UI.\n *\n * It registers the `'findAndReplace'` UI button in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}.\n * that uses the {@link module:find-and-replace/findandreplace~FindAndReplace FindAndReplace} plugin API.\n */ class FindAndReplaceUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Dialog\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FindAndReplaceUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * A reference to the find and replace form view.\n\t */ formView;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('findAndReplace.uiType', 'dialog');\n        this.formView = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const isUiUsingDropdown = editor.config.get('findAndReplace.uiType') === 'dropdown';\n        const findCommand = editor.commands.get('find');\n        const t = this.editor.t;\n        // Register the toolbar component: dropdown or button (that opens a dialog).\n        editor.ui.componentFactory.add('findAndReplace', ()=>{\n            let view;\n            if (isUiUsingDropdown) {\n                view = this._createDropdown();\n                // Button should be disabled when in source editing mode. See #10001.\n                view.bind('isEnabled').to(findCommand);\n            } else {\n                view = this._createDialogButtonForToolbar();\n            }\n            editor.keystrokes.set('Ctrl+F', (data, cancelEvent)=>{\n                if (!findCommand.isEnabled) {\n                    return;\n                }\n                if (view instanceof DropdownView) {\n                    const dropdownButtonView = view.buttonView;\n                    if (!dropdownButtonView.isOn) {\n                        dropdownButtonView.fire('execute');\n                    }\n                } else {\n                    if (view.isOn) {\n                        // If the dialog is open, do not close it. Instead focus it.\n                        // Unfortunately we can't simply use:\n                        // \tthis.formView!.focus();\n                        // because it would always move focus to the first input field, which we don't want.\n                        editor.plugins.get('Dialog').view.focus();\n                    } else {\n                        view.fire('execute');\n                    }\n                }\n                cancelEvent();\n            });\n            return view;\n        });\n        if (!isUiUsingDropdown) {\n            editor.ui.componentFactory.add('menuBar:findAndReplace', ()=>{\n                return this._createDialogButtonForMenuBar();\n            });\n        }\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Find in the document'),\n                    keystroke: 'CTRL+F'\n                }\n            ]\n        });\n    }\n    /**\n\t * Creates a dropdown containing the find and replace form.\n\t */ _createDropdown() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const dropdownView = createDropdown(editor.locale);\n        dropdownView.once('change:isOpen', ()=>{\n            this.formView = this._createFormView();\n            this.formView.children.add(new FormHeaderView(editor.locale, {\n                label: t('Find and replace')\n            }), 0);\n            dropdownView.panelView.children.add(this.formView);\n        });\n        // Every time a dropdown is opened, the search text field should get focused and selected for better UX.\n        // Note: Using the low priority here to make sure the following listener starts working after\n        // the default action of the drop-down is executed (i.e. the panel showed up). Otherwise,\n        // the invisible form/input cannot be focused/selected.\n        //\n        // Each time a dropdown is closed, move the focus back to the find and replace toolbar button\n        // and let the find and replace editing feature know that all search results can be invalidated\n        // and no longer should be marked in the content.\n        dropdownView.on('change:isOpen', (event, name, isOpen)=>{\n            if (isOpen) {\n                this._setupFormView();\n            } else {\n                this.fire('searchReseted');\n            }\n        }, {\n            priority: 'low'\n        });\n        dropdownView.buttonView.set({\n            icon: loupeIcon,\n            label: t('Find and replace'),\n            keystroke: 'CTRL+F',\n            tooltip: true\n        });\n        return dropdownView;\n    }\n    /**\n\t * Creates a button that opens a dialog with the find and replace form.\n\t */ _createDialogButtonForToolbar() {\n        const editor = this.editor;\n        const buttonView = this._createButton(ButtonView);\n        const dialog = editor.plugins.get('Dialog');\n        buttonView.set({\n            tooltip: true\n        });\n        // Button should be on when the find and replace dialog is opened.\n        buttonView.bind('isOn').to(dialog, 'id', (id)=>id === 'findAndReplace');\n        // Every time a dialog is opened, the search text field should get focused and selected for better UX.\n        // Each time a dialog is closed, move the focus back to the find and replace toolbar button\n        // and let the find and replace editing feature know that all search results can be invalidated\n        // and no longer should be marked in the content.\n        buttonView.on('execute', ()=>{\n            if (buttonView.isOn) {\n                dialog.hide();\n            } else {\n                this._showDialog();\n            }\n        });\n        return buttonView;\n    }\n    /**\n\t * Creates a button for for menu bar that will show find and replace dialog.\n\t */ _createDialogButtonForMenuBar() {\n        const buttonView = this._createButton(MenuBarMenuListItemButtonView);\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        const dialog = this.editor.plugins.get('Dialog');\n        buttonView.set({\n            role: 'menuitemcheckbox',\n            isToggleable: true\n        });\n        // Button should be on when the find and replace dialog is opened.\n        buttonView.bind('isOn').to(dialog, 'id', (id)=>id === 'findAndReplace');\n        buttonView.on('execute', ()=>{\n            if (dialogPlugin.id === 'findAndReplace') {\n                dialogPlugin.hide();\n                return;\n            }\n            this._showDialog();\n        });\n        return buttonView;\n    }\n    /**\n\t * Creates a button for find and replace command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const findCommand = editor.commands.get('find');\n        const buttonView = new ButtonClass(editor.locale);\n        const t = editor.locale.t;\n        // Button should be disabled when in source editing mode. See #10001.\n        buttonView.bind('isEnabled').to(findCommand);\n        buttonView.set({\n            icon: loupeIcon,\n            label: t('Find and replace'),\n            keystroke: 'CTRL+F'\n        });\n        return buttonView;\n    }\n    /**\n\t * Shows the find and replace dialog.\n\t */ _showDialog() {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        const t = editor.locale.t;\n        if (!this.formView) {\n            this.formView = this._createFormView();\n        }\n        dialog.show({\n            id: 'findAndReplace',\n            title: t('Find and replace'),\n            content: this.formView,\n            position: DialogViewPosition.EDITOR_TOP_SIDE,\n            onShow: ()=>{\n                this._setupFormView();\n            },\n            onHide: ()=>{\n                this.fire('searchReseted');\n            }\n        });\n    }\n    /**\n\t * Sets up the form view for the find and replace.\n\t *\n\t * @param formView A related form view.\n\t */ _createFormView() {\n        const editor = this.editor;\n        const formView = new (CssTransitionDisablerMixin(FindAndReplaceFormView))(editor.locale);\n        const commands = editor.commands;\n        const findAndReplaceEditing = this.editor.plugins.get('FindAndReplaceEditing');\n        const editingState = findAndReplaceEditing.state;\n        formView.bind('highlightOffset').to(editingState, 'highlightedOffset');\n        // Let the form know how many results were found in total.\n        formView.listenTo(editingState.results, 'change', ()=>{\n            formView.matchCount = editingState.results.length;\n        });\n        // Command states are used to enable/disable individual form controls.\n        // To keep things simple, instead of binding 4 individual observables, there's only one that combines every\n        // commands' isEnabled state. Yes, it will change more often but this simplifies the structure of the form.\n        const findNextCommand = commands.get('findNext');\n        const findPreviousCommand = commands.get('findPrevious');\n        const replaceCommand = commands.get('replace');\n        const replaceAllCommand = commands.get('replaceAll');\n        formView.bind('_areCommandsEnabled').to(findNextCommand, 'isEnabled', findPreviousCommand, 'isEnabled', replaceCommand, 'isEnabled', replaceAllCommand, 'isEnabled', (findNext, findPrevious, replace, replaceAll)=>({\n                findNext,\n                findPrevious,\n                replace,\n                replaceAll\n            }));\n        // The UI plugin works as an interface between the form and the editing part of the feature.\n        formView.delegate('findNext', 'findPrevious', 'replace', 'replaceAll').to(this);\n        // Let the feature know that search results are no longer relevant because the user changed the searched phrase\n        // (or options) but didn't hit the \"Find\" button yet (e.g. still typing).\n        formView.on('change:isDirty', (evt, data, isDirty)=>{\n            if (isDirty) {\n                this.fire('searchReseted');\n            }\n        });\n        return formView;\n    }\n    /**\n\t * Clears the find and replace form and focuses the search text field.\n\t */ _setupFormView() {\n        this.formView.disableCssTransitions();\n        this.formView.reset();\n        this.formView._findInputView.fieldView.select();\n        this.formView.enableCssTransitions();\n    }\n}\n\n/**\n * The find command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n */ class FindCommand extends Command {\n    /**\n\t * The find and replace state object used for command operations.\n\t */ _state;\n    /**\n\t * Creates a new `FindCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param state An object to hold plugin state.\n\t */ constructor(editor, state){\n        super(editor);\n        // The find command is always enabled.\n        this.isEnabled = true;\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n        this._state = state;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param callbackOrText\n\t * @param options Options object.\n\t * @param options.matchCase If set to `true`, the letter case will be matched.\n\t * @param options.wholeWords If set to `true`, only whole words that match `callbackOrText` will be matched.\n\t *\n\t * @fires execute\n\t */ execute(callbackOrText, { matchCase, wholeWords } = {}) {\n        const { editor } = this;\n        const { model } = editor;\n        const findAndReplaceUtils = editor.plugins.get('FindAndReplaceUtils');\n        let findCallback;\n        let callbackSearchText = '';\n        // Allow to execute `find()` on a plugin with a keyword only.\n        if (typeof callbackOrText === 'string') {\n            findCallback = (...args)=>({\n                    results: findAndReplaceUtils.findByTextCallback(callbackOrText, {\n                        matchCase,\n                        wholeWords\n                    })(...args),\n                    searchText: callbackOrText\n                });\n        } else {\n            findCallback = callbackOrText;\n        }\n        // Wrap the callback to get the search text that will be assigned to the state.\n        const oldCallback = findCallback;\n        findCallback = (...args)=>{\n            const result = oldCallback(...args);\n            if (result && 'searchText' in result) {\n                callbackSearchText = result.searchText;\n            }\n            return result;\n        };\n        // Initial search is done on all nodes in all roots inside the content.\n        const results = model.document.getRootNames().reduce((currentResults, rootName)=>findAndReplaceUtils.updateFindResultFromRange(model.createRangeIn(model.document.getRoot(rootName)), model, findCallback, currentResults), null);\n        this._state.clear(model);\n        this._state.results.addMany(results);\n        this._state.highlightedResult = results.get(0);\n        this._state.searchText = callbackSearchText;\n        if (findCallback) {\n            this._state.lastSearchCallback = findCallback;\n        }\n        this._state.matchCase = !!matchCase;\n        this._state.matchWholeWords = !!wholeWords;\n        return {\n            results,\n            findCallback\n        };\n    }\n}\n\nclass ReplaceCommandBase extends Command {\n    /**\n\t * The find and replace state object used for command operations.\n\t */ _state;\n    /**\n\t * Creates a new `ReplaceCommand` instance.\n\t *\n\t * @param editor Editor on which this command will be used.\n\t * @param state An object to hold plugin state.\n\t */ constructor(editor, state){\n        super(editor);\n        // The replace command is always enabled.\n        this.isEnabled = true;\n        this._state = state;\n        // Since this command executes on particular result independent of selection, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * Common logic for both `replace` commands.\n\t * Replace a given find result by a string or a callback.\n\t *\n\t * @param result A single result from the find command.\n\t */ _replace(replacementText, result) {\n        const { model } = this.editor;\n        const range = result.marker.getRange();\n        // Don't replace a result that is in non-editable place.\n        if (!model.canEditAt(range)) {\n            return;\n        }\n        model.change((writer)=>{\n            // Don't replace a result (marker) that found its way into the $graveyard (e.g. removed by collaborators).\n            if (range.root.rootName === '$graveyard') {\n                this._state.results.remove(result);\n                return;\n            }\n            let textAttributes = {};\n            for (const item of range.getItems()){\n                if (item.is('$text') || item.is('$textProxy')) {\n                    textAttributes = item.getAttributes();\n                    break;\n                }\n            }\n            model.insertContent(writer.createText(replacementText, textAttributes), range);\n            if (this._state.results.has(result)) {\n                this._state.results.remove(result);\n            }\n        });\n    }\n}\n\n/**\n * The replace command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n */ class ReplaceCommand extends ReplaceCommandBase {\n    /**\n\t * Replace a given find result by a string or a callback.\n\t *\n\t * @param result A single result from the find command.\n\t *\n\t * @fires execute\n\t */ execute(replacementText, result) {\n        this._replace(replacementText, result);\n    }\n}\n\n/**\n * The replace all command. It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n */ class ReplaceAllCommand extends ReplaceCommandBase {\n    /**\n\t * Replaces all the occurrences of `textToReplace` with a given `newText` string.\n\t *\n\t * ```ts\n\t *\treplaceAllCommand.execute( 'replaceAll', 'new text replacement', 'text to replace' );\n\t * ```\n\t *\n\t * Alternatively you can call it from editor instance:\n\t *\n\t * ```ts\n\t *\teditor.execute( 'replaceAll', 'new text', 'old text' );\n\t * ```\n\t *\n\t * @param newText Text that will be inserted to the editor for each match.\n\t * @param textToReplace Text to be replaced or a collection of matches\n\t * as returned by the find command.\n\t *\n\t * @fires module:core/command~Command#event:execute\n\t */ execute(newText, textToReplace) {\n        const { editor } = this;\n        const { model } = editor;\n        const findAndReplaceUtils = editor.plugins.get('FindAndReplaceUtils');\n        const results = textToReplace instanceof Collection ? textToReplace : model.document.getRootNames().reduce((currentResults, rootName)=>findAndReplaceUtils.updateFindResultFromRange(model.createRangeIn(model.document.getRoot(rootName)), model, findAndReplaceUtils.findByTextCallback(textToReplace, this._state), currentResults), null);\n        if (results.length) {\n            // Wrapped in single change will batch it into one transaction.\n            model.change(()=>{\n                [\n                    ...results\n                ].forEach((searchResult)=>{\n                    // Just reuse logic from the replace command to replace a single match.\n                    this._replace(newText, searchResult);\n                });\n            });\n        }\n    }\n}\n\n/**\n * The find next command. Moves the highlight to the next search result.\n *\n * It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n */ class FindNextCommand extends Command {\n    /**\n\t * The find and replace state object used for command operations.\n\t */ _state;\n    /**\n\t * Creates a new `FindNextCommand` instance.\n\t *\n\t * @param editor The editor on which this command will be used.\n\t * @param state An object to hold plugin state.\n\t */ constructor(editor, state){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n        this._state = state;\n        this.isEnabled = false;\n        this.listenTo(this._state.results, 'change', ()=>{\n            this.isEnabled = this._state.results.length > 1;\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._state.results.length > 1;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const results = this._state.results;\n        const currentIndex = results.getIndex(this._state.highlightedResult);\n        const nextIndex = currentIndex + 1 >= results.length ? 0 : currentIndex + 1;\n        this._state.highlightedResult = this._state.results.get(nextIndex);\n    }\n}\n\n/**\n * The find previous command. Moves the highlight to the previous search result.\n *\n * It is used by the {@link module:find-and-replace/findandreplace~FindAndReplace find and replace feature}.\n */ class FindPreviousCommand extends FindNextCommand {\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const results = this._state.results;\n        const currentIndex = results.getIndex(this._state.highlightedResult);\n        const previousIndex = currentIndex - 1 < 0 ? this._state.results.length - 1 : currentIndex - 1;\n        this._state.highlightedResult = this._state.results.get(previousIndex);\n    }\n}\n\n/**\n * The object storing find and replace plugin state for a given editor instance.\n */ class FindAndReplaceState extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * Creates an instance of the state.\n\t */ constructor(model){\n        super();\n        this.set('results', new Collection());\n        this.set('highlightedResult', null);\n        this.set('highlightedOffset', 0);\n        this.set('searchText', '');\n        this.set('replaceText', '');\n        this.set('lastSearchCallback', null);\n        this.set('matchCase', false);\n        this.set('matchWholeWords', false);\n        this.results.on('change', (eventInfo, { removed, index })=>{\n            if (Array.from(removed).length) {\n                let highlightedResultRemoved = false;\n                model.change((writer)=>{\n                    for (const removedResult of removed){\n                        if (this.highlightedResult === removedResult) {\n                            highlightedResultRemoved = true;\n                        }\n                        if (model.markers.has(removedResult.marker.name)) {\n                            writer.removeMarker(removedResult.marker);\n                        }\n                    }\n                });\n                if (highlightedResultRemoved) {\n                    const nextHighlightedIndex = index >= this.results.length ? 0 : index;\n                    this.highlightedResult = this.results.get(nextHighlightedIndex);\n                }\n            }\n        });\n        this.on('change:highlightedResult', ()=>{\n            this.refreshHighlightOffset();\n        });\n    }\n    /**\n\t * Cleans the state up and removes markers from the model.\n\t */ clear(model) {\n        this.searchText = '';\n        model.change((writer)=>{\n            if (this.highlightedResult) {\n                const oldMatchId = this.highlightedResult.marker.name.split(':')[1];\n                const oldMarker = model.markers.get(`findResultHighlighted:${oldMatchId}`);\n                if (oldMarker) {\n                    writer.removeMarker(oldMarker);\n                }\n            }\n            [\n                ...this.results\n            ].forEach(({ marker })=>{\n                writer.removeMarker(marker);\n            });\n        });\n        this.results.clear();\n    }\n    /**\n\t * Refreshes the highlight result offset based on it's index within the result list.\n\t */ refreshHighlightOffset() {\n        const { highlightedResult, results } = this;\n        const sortMapping = {\n            before: -1,\n            same: 0,\n            after: 1,\n            different: 1\n        };\n        if (highlightedResult) {\n            this.highlightedOffset = Array.from(results).sort((a, b)=>sortMapping[a.marker.getStart().compareWith(b.marker.getStart())]).indexOf(highlightedResult) + 1;\n        } else {\n            this.highlightedOffset = 0;\n        }\n    }\n}\n\n/**\n * A set of helpers related to find and replace.\n */ class FindAndReplaceUtils extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FindAndReplaceUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Executes findCallback and updates search results list.\n\t *\n\t * @param range The model range to scan for matches.\n\t * @param model The model.\n\t * @param findCallback The callback that should return `true` if provided text matches the search term.\n\t * @param startResults An optional collection of find matches that the function should\n\t * start with. This would be a collection returned by a previous `updateFindResultFromRange()` call.\n\t * @returns A collection of objects describing find match.\n\t *\n\t * An example structure:\n\t *\n\t * ```js\n\t * {\n\t *\tid: resultId,\n\t *\tlabel: foundItem.label,\n\t *\tmarker\n\t *\t}\n\t * ```\n\t */ updateFindResultFromRange(range, model, findCallback, startResults) {\n        const results = startResults || new Collection();\n        const checkIfResultAlreadyOnList = (marker)=>results.find((markerItem)=>{\n                const { marker: resultsMarker } = markerItem;\n                const resultRange = resultsMarker.getRange();\n                const markerRange = marker.getRange();\n                return resultRange.isEqual(markerRange);\n            });\n        model.change((writer)=>{\n            [\n                ...range\n            ].forEach(({ type, item })=>{\n                if (type === 'elementStart') {\n                    if (model.schema.checkChild(item, '$text')) {\n                        let foundItems = findCallback({\n                            item,\n                            text: this.rangeToText(model.createRangeIn(item))\n                        });\n                        if (!foundItems) {\n                            return;\n                        }\n                        if ('results' in foundItems) {\n                            foundItems = foundItems.results;\n                        }\n                        foundItems.forEach((foundItem)=>{\n                            const resultId = `findResult:${uid()}`;\n                            const marker = writer.addMarker(resultId, {\n                                usingOperation: false,\n                                affectsData: false,\n                                range: writer.createRange(writer.createPositionAt(item, foundItem.start), writer.createPositionAt(item, foundItem.end))\n                            });\n                            const index = findInsertIndex(results, marker);\n                            if (!checkIfResultAlreadyOnList(marker)) {\n                                results.add({\n                                    id: resultId,\n                                    label: foundItem.label,\n                                    marker\n                                }, index);\n                            }\n                        });\n                    }\n                }\n            });\n        });\n        return results;\n    }\n    /**\n\t * Returns text representation of a range. The returned text length should be the same as range length.\n\t * In order to achieve this, this function will replace inline elements (text-line) as new line character (\"\\n\").\n\t *\n\t * @param range The model range.\n\t * @returns The text content of the provided range.\n\t */ rangeToText(range) {\n        return Array.from(range.getItems()).reduce((rangeText, node)=>{\n            // Trim text to a last occurrence of an inline element and update range start.\n            if (!(node.is('$text') || node.is('$textProxy'))) {\n                // Editor has only one inline element defined in schema: `<softBreak>` which is treated as new line character in blocks.\n                // Special handling might be needed for other inline elements (inline widgets).\n                return `${rangeText}\\n`;\n            }\n            return rangeText + node.data;\n        }, '');\n    }\n    /**\n\t * Creates a text matching callback for a specified search term and matching options.\n\t *\n\t * @param searchTerm The search term.\n\t * @param options Matching options.\n\t * \t- options.matchCase=false If set to `true` letter casing will be ignored.\n\t * \t- options.wholeWords=false If set to `true` only whole words that match `callbackOrText` will be matched.\n\t */ findByTextCallback(searchTerm, options) {\n        let flags = 'gu';\n        if (!options.matchCase) {\n            flags += 'i';\n        }\n        let regExpQuery = `(${escapeRegExp(searchTerm)})`;\n        if (options.wholeWords) {\n            const nonLetterGroup = '[^a-zA-Z\\u00C0-\\u024F\\u1E00-\\u1EFF]';\n            if (!new RegExp('^' + nonLetterGroup).test(searchTerm)) {\n                regExpQuery = `(^|${nonLetterGroup}|_)${regExpQuery}`;\n            }\n            if (!new RegExp(nonLetterGroup + '$').test(searchTerm)) {\n                regExpQuery = `${regExpQuery}(?=_|${nonLetterGroup}|$)`;\n            }\n        }\n        const regExp = new RegExp(regExpQuery, flags);\n        function findCallback({ text }) {\n            const matches = [\n                ...text.matchAll(regExp)\n            ];\n            return matches.map(regexpMatchToFindResult);\n        }\n        return findCallback;\n    }\n}\n// Finds the appropriate index in the resultsList Collection.\nfunction findInsertIndex(resultsList, markerToInsert) {\n    const result = resultsList.find(({ marker })=>{\n        return markerToInsert.getStart().isBefore(marker.getStart());\n    });\n    return result ? resultsList.getIndex(result) : resultsList.length;\n}\n/**\n *  Maps RegExp match result to find result.\n */ function regexpMatchToFindResult(matchResult) {\n    const lastGroupIndex = matchResult.length - 1;\n    let startOffset = matchResult.index;\n    // Searches with match all flag have an extra matching group with empty string or white space matched before the word.\n    // If the search term starts with the space already, there is no extra group even with match all flag on.\n    if (matchResult.length === 3) {\n        startOffset += matchResult[1].length;\n    }\n    return {\n        label: matchResult[lastGroupIndex],\n        start: startOffset,\n        end: startOffset + matchResult[lastGroupIndex].length\n    };\n}\n\nconst HIGHLIGHT_CLASS = 'ck-find-result_selected';\n/**\n * Implements the editing part for find and replace plugin. For example conversion, commands etc.\n */ class FindAndReplaceEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FindAndReplaceUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FindAndReplaceEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * An object storing the find and replace state within a given editor instance.\n\t */ state;\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this.state = new FindAndReplaceState(this.editor.model);\n        this.set('_isSearchActive', false);\n        this._defineConverters();\n        this._defineCommands();\n        this.listenTo(this.state, 'change:highlightedResult', (eventInfo, name, newValue, oldValue)=>{\n            const { model } = this.editor;\n            model.change((writer)=>{\n                if (oldValue) {\n                    const oldMatchId = oldValue.marker.name.split(':')[1];\n                    const oldMarker = model.markers.get(`findResultHighlighted:${oldMatchId}`);\n                    if (oldMarker) {\n                        writer.removeMarker(oldMarker);\n                    }\n                }\n                if (newValue) {\n                    const newMatchId = newValue.marker.name.split(':')[1];\n                    writer.addMarker(`findResultHighlighted:${newMatchId}`, {\n                        usingOperation: false,\n                        affectsData: false,\n                        range: newValue.marker.getRange()\n                    });\n                }\n            });\n        });\n        /* istanbul ignore next -- @preserve */ const scrollToHighlightedResult = (eventInfo, name, newValue)=>{\n            if (newValue) {\n                const domConverter = this.editor.editing.view.domConverter;\n                const viewRange = this.editor.editing.mapper.toViewRange(newValue.marker.getRange());\n                scrollViewportToShowTarget({\n                    target: domConverter.viewRangeToDom(viewRange),\n                    viewportOffset: 40\n                });\n            }\n        };\n        const debouncedScrollListener = debounce(scrollToHighlightedResult.bind(this), 32);\n        // Debounce scroll as highlight might be changed very frequently, e.g. when there's a replace all command.\n        this.listenTo(this.state, 'change:highlightedResult', debouncedScrollListener, {\n            priority: 'low'\n        });\n        // It's possible that the editor will get destroyed before debounced call kicks in.\n        // This would result with accessing a view three that is no longer in DOM.\n        this.listenTo(this.editor, 'destroy', debouncedScrollListener.cancel);\n        this.on('change:_isSearchActive', (evt, name, isSearchActive)=>{\n            if (isSearchActive) {\n                this.listenTo(this.editor.model.document, 'change:data', this._onDocumentChange);\n            } else {\n                this.stopListening(this.editor.model.document, 'change:data', this._onDocumentChange);\n            }\n        });\n    }\n    /**\n\t * Initiate a search.\n\t */ find(callbackOrText, findAttributes) {\n        this._isSearchActive = true;\n        this.editor.execute('find', callbackOrText, findAttributes);\n        return this.state.results;\n    }\n    /**\n\t * Stops active results from updating, and clears out the results.\n\t */ stop() {\n        this.state.clear(this.editor.model);\n        this._isSearchActive = false;\n    }\n    /**\n\t * Sets up the commands.\n\t */ _defineCommands() {\n        this.editor.commands.add('find', new FindCommand(this.editor, this.state));\n        this.editor.commands.add('findNext', new FindNextCommand(this.editor, this.state));\n        this.editor.commands.add('findPrevious', new FindPreviousCommand(this.editor, this.state));\n        this.editor.commands.add('replace', new ReplaceCommand(this.editor, this.state));\n        this.editor.commands.add('replaceAll', new ReplaceAllCommand(this.editor, this.state));\n    }\n    /**\n\t * Sets up the marker downcast converters for search results highlighting.\n\t */ _defineConverters() {\n        const { editor } = this;\n        // Setup the marker highlighting conversion.\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: 'findResult',\n            view: ({ markerName })=>{\n                const [, id] = markerName.split(':');\n                // Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n                // A minimal option is to return a new object for each converted marker...\n                return {\n                    name: 'span',\n                    classes: [\n                        'ck-find-result'\n                    ],\n                    attributes: {\n                        // ...however, adding a unique attribute should be future-proof..\n                        'data-find-result': id\n                    }\n                };\n            }\n        });\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: 'findResultHighlighted',\n            view: ({ markerName })=>{\n                const [, id] = markerName.split(':');\n                // Marker removal from the view has a bug: https://github.com/ckeditor/ckeditor5/issues/7499\n                // A minimal option is to return a new object for each converted marker...\n                return {\n                    name: 'span',\n                    classes: [\n                        HIGHLIGHT_CLASS\n                    ],\n                    attributes: {\n                        // ...however, adding a unique attribute should be future-proof..\n                        'data-find-result': id\n                    }\n                };\n            }\n        });\n    }\n    /**\n\t * Reacts to document changes in order to update search list.\n\t */ _onDocumentChange = ()=>{\n        const changedNodes = new Set();\n        const removedMarkers = new Set();\n        const model = this.editor.model;\n        const { results } = this.state;\n        const changes = model.document.differ.getChanges();\n        const changedMarkers = model.document.differ.getChangedMarkers();\n        // Get nodes in which changes happened to re-run a search callback on them.\n        changes.forEach((change)=>{\n            if (!change.position) {\n                return;\n            }\n            if (change.name === '$text' || change.position.nodeAfter && model.schema.isInline(change.position.nodeAfter)) {\n                changedNodes.add(change.position.parent);\n                [\n                    ...model.markers.getMarkersAtPosition(change.position)\n                ].forEach((markerAtChange)=>{\n                    removedMarkers.add(markerAtChange.name);\n                });\n            } else if (change.type === 'insert' && change.position.nodeAfter) {\n                changedNodes.add(change.position.nodeAfter);\n            }\n        });\n        // Get markers from removed nodes also.\n        changedMarkers.forEach(({ name, data: { newRange } })=>{\n            if (newRange && newRange.start.root.rootName === '$graveyard') {\n                removedMarkers.add(name);\n            }\n        });\n        // Get markers from the updated nodes and remove all (search will be re-run on these nodes).\n        changedNodes.forEach((node)=>{\n            const markersInNode = [\n                ...model.markers.getMarkersIntersectingRange(model.createRangeIn(node))\n            ];\n            markersInNode.forEach((marker)=>removedMarkers.add(marker.name));\n        });\n        // Remove results from the changed part of content.\n        removedMarkers.forEach((markerName)=>{\n            if (!results.has(markerName)) {\n                return;\n            }\n            if (results.get(markerName) === this.state.highlightedResult) {\n                this.state.highlightedResult = null;\n            }\n            results.remove(markerName);\n        });\n        // Run search callback again on updated nodes.\n        const changedSearchResults = [];\n        const findAndReplaceUtils = this.editor.plugins.get('FindAndReplaceUtils');\n        changedNodes.forEach((nodeToCheck)=>{\n            const changedNodeSearchResults = findAndReplaceUtils.updateFindResultFromRange(model.createRangeOn(nodeToCheck), model, this.state.lastSearchCallback, results);\n            changedSearchResults.push(...changedNodeSearchResults);\n        });\n        changedMarkers.forEach((markerToCheck)=>{\n            // Handle search result highlight update when T&C plugin is active.\n            // Lookup is performed only on newly inserted markers.\n            if (markerToCheck.data.newRange) {\n                const changedNodeSearchResults = findAndReplaceUtils.updateFindResultFromRange(markerToCheck.data.newRange, model, this.state.lastSearchCallback, results);\n                changedSearchResults.push(...changedNodeSearchResults);\n            }\n        });\n        if (!this.state.highlightedResult && changedSearchResults.length) {\n            // If there are found phrases but none is selected, select the first one.\n            this.state.highlightedResult = changedSearchResults[0];\n        } else {\n            // If there is already highlight item then refresh highlight offset after appending new items.\n            this.state.refreshHighlightOffset();\n        }\n    };\n}\n\n/**\n * The find and replace plugin.\n *\n * For a detailed overview, check the {@glink features/find-and-replace Find and replace feature documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:find-and-replace/findandreplaceediting~FindAndReplaceEditing find and replace editing feature},\n * * The {@link module:find-and-replace/findandreplaceui~FindAndReplaceUI find and replace UI feature}\n */ class FindAndReplace extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FindAndReplaceEditing,\n            FindAndReplaceUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FindAndReplace';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const ui = this.editor.plugins.get('FindAndReplaceUI');\n        const findAndReplaceEditing = this.editor.plugins.get('FindAndReplaceEditing');\n        const state = findAndReplaceEditing.state;\n        ui.on('findNext', (event, data)=>{\n            // Data is contained only for the \"find\" button.\n            if (data) {\n                state.searchText = data.searchText;\n                findAndReplaceEditing.find(data.searchText, data);\n            } else {\n                // Find next arrow button press.\n                this.editor.execute('findNext');\n            }\n        });\n        ui.on('findPrevious', (event, data)=>{\n            if (data && state.searchText !== data.searchText) {\n                findAndReplaceEditing.find(data.searchText);\n            } else {\n                // Subsequent calls.\n                this.editor.execute('findPrevious');\n            }\n        });\n        ui.on('replace', (event, data)=>{\n            if (state.searchText !== data.searchText) {\n                findAndReplaceEditing.find(data.searchText);\n            }\n            const highlightedResult = state.highlightedResult;\n            if (highlightedResult) {\n                this.editor.execute('replace', data.replaceText, highlightedResult);\n            }\n        });\n        ui.on('replaceAll', (event, data)=>{\n            // The state hadn't been yet built for this search text.\n            if (state.searchText !== data.searchText) {\n                findAndReplaceEditing.find(data.searchText);\n            }\n            this.editor.execute('replaceAll', data.replaceText, state.results);\n        });\n        // Reset the state when the user invalidated last search results, for instance,\n        // by starting typing another search query or changing options.\n        ui.on('searchReseted', ()=>{\n            state.clear(this.editor.model);\n            findAndReplaceEditing.stop();\n        });\n    }\n}\n\nexport { FindAndReplace, FindAndReplaceEditing, FindAndReplaceUI, FindAndReplaceUtils, FindCommand, FindNextCommand, FindPreviousCommand, ReplaceAllCommand, ReplaceCommand };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ColorSelectorView, createDropdown, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ViewModel, normalizeColorOptions, getLocalizedColorOptions, focusChildOnDropdownOpen } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Collection, CKEditorError } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { isLength, isPercentage, addBackgroundRules } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\n/**\n * The base font command.\n */ class FontCommand extends Command {\n    /**\n\t * A model attribute on which this command operates.\n\t */ attributeKey;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor Editor instance.\n\t * @param attributeKey The name of a model attribute on which this command operates.\n\t */ constructor(editor, attributeKey){\n        super(editor);\n        this.attributeKey = attributeKey;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = doc.selection.getAttribute(this.attributeKey);\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n    }\n    /**\n\t * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\n\t * If no `value` is passed, it removes the attribute from the selection.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.value The value to apply.\n\t * @fires execute\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const value = options.value;\n        const batch = options.batch;\n        const updateAttribute = (writer)=>{\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute(this.attributeKey, value);\n                } else {\n                    writer.removeSelectionAttribute(this.attributeKey);\n                }\n            } else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n                for (const range of ranges){\n                    if (value) {\n                        writer.setAttribute(this.attributeKey, value, range);\n                    } else {\n                        writer.removeAttribute(this.attributeKey, range);\n                    }\n                }\n            }\n        };\n        // In some scenarios, you may want to use a single undo step for multiple changes (e.g. in color picker).\n        if (batch) {\n            model.enqueueChange(batch, (writer)=>{\n                updateAttribute(writer);\n            });\n        } else {\n            model.change((writer)=>{\n                updateAttribute(writer);\n            });\n        }\n    }\n}\n\n/**\n * The name of the font size plugin.\n */ const FONT_SIZE = 'fontSize';\n/**\n * The name of the font family plugin.\n */ const FONT_FAMILY = 'fontFamily';\n/**\n * The name of the font color plugin.\n */ const FONT_COLOR = 'fontColor';\n/**\n * The name of the font background color plugin.\n */ const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n/**\n * Builds a proper converter definition out of input data.\n */ function buildDefinition(modelAttributeKey, options) {\n    const definition = {\n        model: {\n            key: modelAttributeKey,\n            values: []\n        },\n        view: {},\n        upcastAlso: {}\n    };\n    for (const option of options){\n        definition.model.values.push(option.model);\n        definition.view[option.model] = option.view;\n        if (option.upcastAlso) {\n            definition.upcastAlso[option.model] = option.upcastAlso;\n        }\n    }\n    return definition;\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n */ function renderUpcastAttribute(styleAttr) {\n    return (viewElement)=>normalizeColorCode(viewElement.getStyle(styleAttr));\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n */ function renderDowncastElement(styleAttr) {\n    return (modelAttributeValue, { writer })=>writer.createAttributeElement('span', {\n            style: `${styleAttr}:${modelAttributeValue}`\n        }, {\n            priority: 7\n        });\n}\n/**\n * A helper that adds {@link module:ui/colorselector/colorselectorview~ColorSelectorView} to the color dropdown with proper initial values.\n *\n * @param config.dropdownView The dropdown view to which a {@link module:ui/colorselector/colorselectorview~ColorSelectorView}\n * will be added.\n * @param config.colors An array with definitions representing colors to be displayed in the color selector.\n * @param config.removeButtonLabel The label for the button responsible for removing the color.\n * @param config.documentColorsLabel The label for the section with document colors.\n * @param config.documentColorsCount The number of document colors inside the dropdown.\n * @param config.colorPickerViewConfig Configuration of the color picker view.\n * @returns The new color selector view.\n */ function addColorSelectorToDropdown({ dropdownView, colors, columns, removeButtonLabel, colorPickerLabel, documentColorsLabel, documentColorsCount, colorPickerViewConfig }) {\n    const locale = dropdownView.locale;\n    const colorSelectorView = new ColorSelectorView(locale, {\n        colors,\n        columns,\n        removeButtonLabel,\n        colorPickerLabel,\n        documentColorsLabel,\n        documentColorsCount,\n        colorPickerViewConfig\n    });\n    dropdownView.colorSelectorView = colorSelectorView;\n    dropdownView.panelView.children.add(colorSelectorView);\n    return colorSelectorView;\n}\n/**\n * Fixes the color value string.\n */ function normalizeColorCode(value) {\n    return value.replace(/\\s/g, '');\n}\n\n/**\n * The font family command. It is used by {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing}\n * to apply the font family.\n *\n * ```ts\n * editor.execute( 'fontFamily', { value: 'Arial' } );\n * ```\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n */ class FontFamilyCommand extends FontCommand {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor, FONT_FAMILY);\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module font/fontfamily/utils\n */ /**\n * Normalizes the {@link module:font/fontconfig~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontconfig~FontFamilyOption} format.\n *\n * @param configuredOptions An array of options taken from the configuration.\n */ function normalizeOptions$1(configuredOptions) {\n    // Convert options to objects.\n    return configuredOptions.map(getOptionDefinition$1)// Filter out undefined values that `getOptionDefinition` might return.\n    .filter((option)=>option !== undefined);\n}\n/**\n * Returns an option definition either created from string shortcut.\n * If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n *\n */ function getOptionDefinition$1(option) {\n    // Treat any object as full item definition provided by user in configuration.\n    if (typeof option === 'object') {\n        return option;\n    }\n    // Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n    if (option === 'default') {\n        return {\n            title: 'Default',\n            model: undefined\n        };\n    }\n    // Ignore values that we cannot parse to a definition.\n    if (typeof option !== 'string') {\n        return undefined;\n    }\n    // Return font family definition from font string.\n    return generateFontPreset(option);\n}\n/**\n * Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n * A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n *\n * @param fontDefinition A font definition form configuration.\n */ function generateFontPreset(fontDefinition) {\n    // Remove quotes from font names. They will be normalized later.\n    const fontNames = fontDefinition.replace(/\"|'/g, '').split(',');\n    // The first matched font name will be used as dropdown list item title and as model value.\n    const firstFontName = fontNames[0];\n    // CSS-compatible font names.\n    const cssFontNames = fontNames.map(normalizeFontNameForCSS).join(', ');\n    return {\n        title: firstFontName,\n        model: cssFontNames,\n        view: {\n            name: 'span',\n            styles: {\n                'font-family': cssFontNames\n            },\n            priority: 7\n        }\n    };\n}\n/**\n * Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n */ function normalizeFontNameForCSS(fontName) {\n    fontName = fontName.trim();\n    // Compound font names should be quoted.\n    if (fontName.indexOf(' ') > 0) {\n        fontName = `'${fontName}'`;\n    }\n    return fontName;\n}\n\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontconfig~FontFamilyConfig configuration}.\n */ class FontFamilyEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontFamilyEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Define default configuration using font families shortcuts.\n        editor.config.define(FONT_FAMILY, {\n            options: [\n                'default',\n                'Arial, Helvetica, sans-serif',\n                'Courier New, Courier, monospace',\n                'Georgia, serif',\n                'Lucida Sans Unicode, Lucida Grande, sans-serif',\n                'Tahoma, Geneva, sans-serif',\n                'Times New Roman, Times, serif',\n                'Trebuchet MS, Helvetica, sans-serif',\n                'Verdana, Geneva, sans-serif'\n            ],\n            supportAllValues: false\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow fontFamily attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: FONT_FAMILY\n        });\n        editor.model.schema.setAttributeProperties(FONT_FAMILY, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Get configured font family options without \"default\" option.\n        const options = normalizeOptions$1(editor.config.get('fontFamily.options')).filter((item)=>item.model);\n        const definition = buildDefinition(FONT_FAMILY, options);\n        // Set-up the two-way conversion.\n        if (editor.config.get('fontFamily.supportAllValues')) {\n            this._prepareAnyValueConverters();\n            this._prepareCompatibilityConverter();\n        } else {\n            editor.conversion.attributeToElement(definition);\n        }\n        editor.commands.add(FONT_FAMILY, new FontFamilyCommand(editor));\n    }\n    /**\n\t * These converters enable keeping any value found as `style=\"font-family: *\"` as a value of an attribute on a text even\n\t * if it is not defined in the plugin configuration.\n\t */ _prepareAnyValueConverters() {\n        const editor = this.editor;\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_FAMILY,\n            view: (attributeValue, { writer })=>{\n                return writer.createAttributeElement('span', {\n                    style: 'font-family:' + attributeValue\n                }, {\n                    priority: 7\n                });\n            }\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: FONT_FAMILY,\n                value: (viewElement)=>viewElement.getStyle('font-family')\n            },\n            view: {\n                name: 'span',\n                styles: {\n                    'font-family': /.*/\n                }\n            }\n        });\n    }\n    /**\n\t * Adds support for legacy `<font face=\"..\">` formatting.\n\t */ _prepareCompatibilityConverter() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    'face': /.*/\n                }\n            },\n            model: {\n                key: FONT_FAMILY,\n                value: (viewElement)=>viewElement.getAttribute('face')\n            }\n        });\n    }\n}\n\nvar fontFamilyIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zm-2.754 2.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z\\\"/></svg>\";\n\n/**\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\n */ class FontFamilyUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontFamilyUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_FAMILY);\n        const accessibleLabel = t('Font Family');\n        const listOptions = _prepareListOptions$1(options, command);\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_FAMILY, (locale)=>{\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, listOptions, {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            dropdownView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontFamilyIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-font-family-dropdown'\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', (evt)=>{\n                editor.execute(evt.source.commandName, {\n                    value: evt.source.commandParam\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add(`menuBar:${FONT_FAMILY}`, (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontFamilyIcon\n            });\n            menuView.bind('isEnabled').to(command);\n            const listView = new MenuBarMenuListView(locale);\n            for (const definition of listOptions){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.set({\n                    role: 'menuitemradio',\n                    isToggleable: true\n                });\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    editor.execute(definition.model.commandName, {\n                        value: definition.model.commandParam\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n    /**\n\t * Returns options as defined in `config.fontFamily.options` but processed to account for\n\t * editor localization, i.e. to display {@link module:font/fontconfig~FontFamilyOption}\n\t * in the correct language.\n\t *\n\t * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n\t * when the user configuration is defined because the editor does not exist yet.\n\t */ _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = normalizeOptions$1(editor.config.get(FONT_FAMILY).options);\n        return options.map((option)=>{\n            // The only title to localize is \"Default\" others are font names.\n            if (option.title === 'Default') {\n                option.title = t('Default');\n            }\n            return option;\n        });\n    }\n}\n/**\n * Prepares FontFamily dropdown items.\n */ function _prepareListOptions$1(options, command) {\n    const itemDefinitions = new Collection();\n    // Create dropdown items.\n    for (const option of options){\n        const def = {\n            type: 'button',\n            model: new ViewModel({\n                commandName: FONT_FAMILY,\n                commandParam: option.model,\n                label: option.title,\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        def.model.bind('isOn').to(command, 'value', (value)=>{\n            // \"Default\" or check in strict font-family converters mode.\n            if (value === option.model) {\n                return true;\n            }\n            if (!value || !option.model) {\n                return false;\n            }\n            return value.split(',')[0].replace(/'/g, '').toLowerCase() === option.model.toLowerCase();\n        });\n        // Try to set a dropdown list item style.\n        if (option.view && typeof option.view !== 'string' && option.view.styles) {\n            def.model.set('labelStyle', `font-family: ${option.view.styles['font-family']}`);\n        }\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}\n\n/**\n * The font family plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentatiom\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} and\n * {@link module:font/fontfamily/fontfamilyui~FontFamilyUI} features in the editor.\n */ class FontFamily extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FontFamilyEditing,\n            FontFamilyUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontFamily';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The font size command. It is used by {@link module:font/fontsize/fontsizeediting~FontSizeEditing}\n * to apply the font size.\n *\n * ```ts\n * editor.execute( 'fontSize', { value: 'small' } );\n * ```\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n */ class FontSizeCommand extends FontCommand {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor, FONT_SIZE);\n    }\n}\n\n/**\n * Normalizes and translates the {@link module:font/fontconfig~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontconfig~FontSizeOption} format.\n *\n * @param configuredOptions An array of options taken from the configuration.\n */ function normalizeOptions(configuredOptions) {\n    // Convert options to objects.\n    return configuredOptions.map((item)=>getOptionDefinition(item))// Filter out undefined values that `getOptionDefinition` might return.\n    .filter((option)=>option !== undefined);\n}\n// Default named presets map. Always create a new instance of the preset object in order to avoid modifying references.\nconst namedPresets = {\n    get tiny () {\n        return {\n            title: 'Tiny',\n            model: 'tiny',\n            view: {\n                name: 'span',\n                classes: 'text-tiny',\n                priority: 7\n            }\n        };\n    },\n    get small () {\n        return {\n            title: 'Small',\n            model: 'small',\n            view: {\n                name: 'span',\n                classes: 'text-small',\n                priority: 7\n            }\n        };\n    },\n    get big () {\n        return {\n            title: 'Big',\n            model: 'big',\n            view: {\n                name: 'span',\n                classes: 'text-big',\n                priority: 7\n            }\n        };\n    },\n    get huge () {\n        return {\n            title: 'Huge',\n            model: 'huge',\n            view: {\n                name: 'span',\n                classes: 'text-huge',\n                priority: 7\n            }\n        };\n    }\n};\n/**\n * Returns an option definition either from preset or creates one from number shortcut.\n * If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n */ function getOptionDefinition(option) {\n    if (typeof option === 'number') {\n        option = String(option);\n    }\n    // Check whether passed option is a full item definition provided by user in configuration.\n    if (typeof option === 'object' && isFullItemDefinition(option)) {\n        return attachPriority(option);\n    }\n    const preset = findPreset(option);\n    // Item is a named preset.\n    if (preset) {\n        return attachPriority(preset);\n    }\n    // 'Default' font size. It will be used to remove the fontSize attribute.\n    if (option === 'default') {\n        return {\n            model: undefined,\n            title: 'Default'\n        };\n    }\n    // At this stage we probably have numerical value to generate a preset so parse it's value.\n    // Discard any faulty values.\n    if (isNumericalDefinition(option)) {\n        return undefined;\n    }\n    // Return font size definition from size value.\n    return generatePixelPreset(option);\n}\n/**\n * Creates a predefined preset for pixel size.\n * @param definition Font size in pixels.\n * @returns\n */ function generatePixelPreset(definition) {\n    // Extend a short (numeric value) definition.\n    if (typeof definition === 'string') {\n        definition = {\n            title: definition,\n            model: `${parseFloat(definition)}px`\n        };\n    }\n    definition.view = {\n        name: 'span',\n        styles: {\n            'font-size': definition.model\n        }\n    };\n    return attachPriority(definition);\n}\n/**\n * Adds the priority to the view element definition if missing. It's required due to ckeditor/ckeditor5#2291\n */ function attachPriority(definition) {\n    if (definition.view && typeof definition.view !== 'string' && !definition.view.priority) {\n        definition.view.priority = 7;\n    }\n    return definition;\n}\n/**\n * Returns a prepared preset definition. If passed an object, a name of preset should be defined as `model` value.\n *\n * @param definition.model A preset name.\n */ function findPreset(definition) {\n    return typeof definition === 'string' ? namedPresets[definition] : namedPresets[definition.model];\n}\n/**\n * We treat `definition` as completed if it is an object that contains `title`, `model` and `view` values.\n */ function isFullItemDefinition(definition) {\n    return definition.title && definition.model && definition.view;\n}\nfunction isNumericalDefinition(definition) {\n    let numberValue;\n    if (typeof definition === 'object') {\n        if (!definition.model) {\n            /**\n\t\t\t * Provided value as an option for {@link module:font/fontsize~FontSize} seems to invalid.\n\t\t\t *\n\t\t\t * See valid examples described in the {@link module:font/fontconfig~FontSizeConfig#options plugin configuration}.\n\t\t\t *\n\t\t\t * @error font-size-invalid-definition\n\t\t\t */ throw new CKEditorError('font-size-invalid-definition', null, definition);\n        } else {\n            numberValue = parseFloat(definition.model);\n        }\n    } else {\n        numberValue = parseFloat(definition);\n    }\n    return isNaN(numberValue);\n}\n\n// Mapping of `<font size=\"..\">` styling to CSS's `font-size` values.\nconst styleFontSize = [\n    'x-small',\n    'x-small',\n    'small',\n    'medium',\n    'large',\n    'x-large',\n    'xx-large',\n    'xxx-large'\n];\n/**\n * The font size editing feature.\n *\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span>` element with either:\n * * a style attribute (`<span style=\"font-size:12px\">...</span>`),\n * * or a class attribute (`<span class=\"text-small\">...</span>`)\n *\n * depending on the {@link module:font/fontconfig~FontSizeConfig configuration}.\n */ class FontSizeEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontSizeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Define default configuration using named presets.\n        editor.config.define(FONT_SIZE, {\n            options: [\n                'tiny',\n                'small',\n                'default',\n                'big',\n                'huge'\n            ],\n            supportAllValues: false\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow fontSize attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: FONT_SIZE\n        });\n        editor.model.schema.setAttributeProperties(FONT_SIZE, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        const supportAllValues = editor.config.get('fontSize.supportAllValues');\n        // Define view to model conversion.\n        const options = normalizeOptions(this.editor.config.get('fontSize.options')).filter((item)=>item.model);\n        const definition = buildDefinition(FONT_SIZE, options);\n        // Set-up the two-way conversion.\n        if (supportAllValues) {\n            this._prepareAnyValueConverters(definition);\n            this._prepareCompatibilityConverter();\n        } else {\n            editor.conversion.attributeToElement(definition);\n        }\n        // Add FontSize command.\n        editor.commands.add(FONT_SIZE, new FontSizeCommand(editor));\n    }\n    /**\n\t * These converters enable keeping any value found as `style=\"font-size: *\"` as a value of an attribute on a text even\n\t * if it is not defined in the plugin configuration.\n\t *\n\t * @param definition Converter definition out of input data.\n\t */ _prepareAnyValueConverters(definition) {\n        const editor = this.editor;\n        // If `fontSize.supportAllValues=true`, we do not allow to use named presets in the plugin's configuration.\n        const presets = definition.model.values.filter((value)=>{\n            return !isLength(String(value)) && !isPercentage(String(value));\n        });\n        if (presets.length) {\n            /**\n\t\t\t * If {@link module:font/fontconfig~FontSizeConfig#supportAllValues `config.fontSize.supportAllValues`} is `true`,\n\t\t\t * you need to use numerical values as font size options.\n\t\t\t *\n\t\t\t * See valid examples described in the {@link module:font/fontconfig~FontSizeConfig#options plugin configuration}.\n\t\t\t *\n\t\t\t * @error font-size-invalid-use-of-named-presets\n\t\t\t * @param {Array.<String>} presets Invalid values.\n\t\t\t */ throw new CKEditorError('font-size-invalid-use-of-named-presets', null, {\n                presets\n            });\n        }\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_SIZE,\n            view: (attributeValue, { writer })=>{\n                if (!attributeValue) {\n                    return;\n                }\n                return writer.createAttributeElement('span', {\n                    style: 'font-size:' + attributeValue\n                }, {\n                    priority: 7\n                });\n            }\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: {\n                key: FONT_SIZE,\n                value: (viewElement)=>viewElement.getStyle('font-size')\n            },\n            view: {\n                name: 'span',\n                styles: {\n                    'font-size': /.*/\n                }\n            }\n        });\n    }\n    /**\n\t * Adds support for legacy `<font size=\"..\">` formatting.\n\t */ _prepareCompatibilityConverter() {\n        const editor = this.editor;\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    // Documentation mentions sizes from 1 to 7. To handle old content we support all values\n                    // up to 999 but clamp it to the valid range. Why 999? It should cover accidental values\n                    // similar to percentage, e.g. 100%, 200% which could be the usual mistake for font size.\n                    'size': /^[+-]?\\d{1,3}$/\n                }\n            },\n            model: {\n                key: FONT_SIZE,\n                value: (viewElement)=>{\n                    const value = viewElement.getAttribute('size');\n                    const isRelative = value[0] === '-' || value[0] === '+';\n                    let size = parseInt(value, 10);\n                    if (isRelative) {\n                        // Add relative size (which can be negative) to the default size = 3.\n                        size = 3 + size;\n                    }\n                    const maxSize = styleFontSize.length - 1;\n                    const clampedSize = Math.min(Math.max(size, 0), maxSize);\n                    return styleFontSize[clampedSize];\n                }\n            }\n        });\n    }\n}\n\nvar fontSizeIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.816 11.5 7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zm7.55 2.279.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z\\\"/></svg>\";\n\n/**\n * The font size UI plugin. It introduces the `'fontSize'` dropdown.\n */ class FontSizeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontSizeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_SIZE);\n        const accessibleLabel = t('Font Size');\n        const listOptions = _prepareListOptions(options, command);\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_SIZE, (locale)=>{\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, listOptions, {\n                role: 'menu',\n                ariaLabel: accessibleLabel\n            });\n            // Create dropdown model.\n            dropdownView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontSizeIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck-font-size-dropdown'\n                    ]\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', (evt)=>{\n                editor.execute(evt.source.commandName, {\n                    value: evt.source.commandParam\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add(`menuBar:${FONT_SIZE}`, (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                label: accessibleLabel,\n                icon: fontSizeIcon\n            });\n            menuView.bind('isEnabled').to(command);\n            const listView = new MenuBarMenuListView(locale);\n            for (const definition of listOptions){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.set({\n                    role: 'menuitemradio',\n                    isToggleable: true\n                });\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    editor.execute(definition.model.commandName, {\n                        value: definition.model.commandParam\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n    /**\n\t * Returns options as defined in `config.fontSize.options` but processed to account for\n\t * editor localization, i.e. to display {@link module:font/fontconfig~FontSizeOption}\n\t * in the correct language.\n\t *\n\t * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n\t * when the user configuration is defined because the editor does not exist yet.\n\t */ _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const localizedTitles = {\n            Default: t('Default'),\n            Tiny: t('Tiny'),\n            Small: t('Small'),\n            Big: t('Big'),\n            Huge: t('Huge')\n        };\n        const options = normalizeOptions(editor.config.get(FONT_SIZE).options);\n        return options.map((option)=>{\n            const title = localizedTitles[option.title];\n            if (title && title != option.title) {\n                // Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\n                option = Object.assign({}, option, {\n                    title\n                });\n            }\n            return option;\n        });\n    }\n}\n/**\n * Prepares FontSize dropdown items.\n */ function _prepareListOptions(options, command) {\n    const itemDefinitions = new Collection();\n    for (const option of options){\n        const def = {\n            type: 'button',\n            model: new ViewModel({\n                commandName: FONT_SIZE,\n                commandParam: option.model,\n                label: option.title,\n                class: 'ck-fontsize-option',\n                role: 'menuitemradio',\n                withText: true\n            })\n        };\n        if (option.view && typeof option.view !== 'string') {\n            if (option.view.styles) {\n                def.model.set('labelStyle', `font-size:${option.view.styles['font-size']}`);\n            }\n            if (option.view.classes) {\n                def.model.set('class', `${def.model.class} ${option.view.classes}`);\n            }\n        }\n        def.model.bind('isOn').to(command, 'value', (value)=>value === option.model);\n        // Add the option to the collection.\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}\n\n/**\n * The font size plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} and\n * {@link module:font/fontsize/fontsizeui~FontSizeUI} features in the editor.\n */ class FontSize extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FontSizeEditing,\n            FontSizeUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontSize';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * Normalizes and translates the {@link module:font/fontconfig~FontSizeConfig#options configuration options}\n\t * to the {@link module:font/fontconfig~FontSizeOption} format.\n\t *\n\t * @param configuredOptions An array of options taken from the configuration.\n\t */ normalizeSizeOptions(options) {\n        return normalizeOptions(options);\n    }\n}\n\n/**\n * The font color command. It is used by {@link module:font/fontcolor/fontcolorediting~FontColorEditing}\n * to apply the font color.\n *\n * ```ts\n * editor.execute( 'fontColor', { value: 'rgb(250, 20, 20)' } );\n * ```\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n */ class FontColorCommand extends FontCommand {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor, FONT_COLOR);\n    }\n}\n\n/**\n * The font color editing feature.\n *\n * It introduces the {@link module:font/fontcolor/fontcolorcommand~FontColorCommand command} and\n * the `fontColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"color: ...\">`),\n * depending on the {@link module:font/fontconfig~FontColorConfig configuration}.\n */ class FontColorEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontColorEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define(FONT_COLOR, {\n            colors: [\n                {\n                    color: 'hsl(0, 0%, 0%)',\n                    label: 'Black'\n                },\n                {\n                    color: 'hsl(0, 0%, 30%)',\n                    label: 'Dim grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 60%)',\n                    label: 'Grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 90%)',\n                    label: 'Light grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 100%)',\n                    label: 'White',\n                    hasBorder: true\n                },\n                {\n                    color: 'hsl(0, 75%, 60%)',\n                    label: 'Red'\n                },\n                {\n                    color: 'hsl(30, 75%, 60%)',\n                    label: 'Orange'\n                },\n                {\n                    color: 'hsl(60, 75%, 60%)',\n                    label: 'Yellow'\n                },\n                {\n                    color: 'hsl(90, 75%, 60%)',\n                    label: 'Light green'\n                },\n                {\n                    color: 'hsl(120, 75%, 60%)',\n                    label: 'Green'\n                },\n                {\n                    color: 'hsl(150, 75%, 60%)',\n                    label: 'Aquamarine'\n                },\n                {\n                    color: 'hsl(180, 75%, 60%)',\n                    label: 'Turquoise'\n                },\n                {\n                    color: 'hsl(210, 75%, 60%)',\n                    label: 'Light blue'\n                },\n                {\n                    color: 'hsl(240, 75%, 60%)',\n                    label: 'Blue'\n                },\n                {\n                    color: 'hsl(270, 75%, 60%)',\n                    label: 'Purple'\n                }\n            ],\n            columns: 5\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'span',\n                styles: {\n                    'color': /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: FONT_COLOR,\n                value: renderUpcastAttribute('color')\n            }\n        });\n        // Support legacy `<font color=\"..\">` formatting.\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'font',\n                attributes: {\n                    'color': /^#?\\w+$/\n                }\n            },\n            model: {\n                key: FONT_COLOR,\n                value: (viewElement)=>viewElement.getAttribute('color')\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_COLOR,\n            view: renderDowncastElement('color')\n        });\n        editor.commands.add(FONT_COLOR, new FontColorCommand(editor));\n        // Allow the font color attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: FONT_COLOR\n        });\n        editor.model.schema.setAttributeProperties(FONT_COLOR, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n    }\n}\n\n/**\n * The color UI plugin which isolates the common logic responsible for displaying dropdowns with color grids.\n *\n * It is used to create the `'fontBackgroundColor'` and `'fontColor'` dropdowns, each hosting\n * a {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n */ class ColorUI extends Plugin {\n    /**\n\t * The name of the command which will be executed when a color tile is clicked.\n\t */ commandName;\n    /**\n\t * The name of this component in the {@link module:ui/componentfactory~ComponentFactory}.\n\t * Also the configuration scope name in `editor.config`.\n\t */ componentName;\n    /**\n\t * The SVG icon used by the dropdown.\n\t */ icon;\n    /**\n\t * The label used by the dropdown.\n\t */ dropdownLabel;\n    /**\n\t * The number of columns in the color grid.\n\t */ columns;\n    /**\n\t * Creates a plugin which introduces a dropdown with a pre–configured\n\t * {@link module:ui/colorselector/colorselectorview~ColorSelectorView}.\n\t *\n\t * @param config The configuration object.\n\t * @param config.commandName The name of the command which will be executed when a color tile is clicked.\n\t * @param config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}\n\t * and the configuration scope name in `editor.config`.\n\t * @param config.icon The SVG icon used by the dropdown.\n\t * @param config.dropdownLabel The label used by the dropdown.\n\t */ constructor(editor, { commandName, componentName, icon, dropdownLabel }){\n        super(editor);\n        this.commandName = commandName;\n        this.componentName = componentName;\n        this.icon = icon;\n        this.dropdownLabel = dropdownLabel;\n        this.columns = editor.config.get(`${this.componentName}.columns`);\n    }\n    /**\n\t* @inheritDoc\n\t*/ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = locale.t;\n        const command = editor.commands.get(this.commandName);\n        const componentConfig = editor.config.get(this.componentName);\n        const colorsConfig = normalizeColorOptions(componentConfig.colors);\n        const localizedColors = getLocalizedColorOptions(locale, colorsConfig);\n        const documentColorsCount = componentConfig.documentColors;\n        const hasColorPicker = componentConfig.colorPicker !== false;\n        // Register the UI component.\n        editor.ui.componentFactory.add(this.componentName, (locale)=>{\n            const dropdownView = createDropdown(locale);\n            // Font color dropdown rendering is deferred once it gets open to improve performance (#6192).\n            let dropdownContentRendered = false;\n            const colorSelectorView = addColorSelectorToDropdown({\n                dropdownView,\n                colors: localizedColors.map((option)=>({\n                        label: option.label,\n                        color: option.model,\n                        options: {\n                            hasBorder: option.hasBorder\n                        }\n                    })),\n                columns: this.columns,\n                removeButtonLabel: t('Remove color'),\n                colorPickerLabel: t('Color picker'),\n                documentColorsLabel: documentColorsCount !== 0 ? t('Document colors') : '',\n                documentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount,\n                colorPickerViewConfig: hasColorPicker ? componentConfig.colorPicker || {} : false\n            });\n            colorSelectorView.bind('selectedColor').to(command, 'value');\n            dropdownView.buttonView.set({\n                label: this.dropdownLabel,\n                icon: this.icon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: 'ck-color-ui-dropdown'\n                }\n            });\n            dropdownView.bind('isEnabled').to(command);\n            colorSelectorView.on('execute', (evt, data)=>{\n                if (dropdownView.isOpen) {\n                    editor.execute(this.commandName, {\n                        value: data.value,\n                        batch: this._undoStepBatch\n                    });\n                }\n                if (data.source !== 'colorPicker') {\n                    editor.editing.view.focus();\n                }\n                if (data.source === 'colorPickerSaveButton') {\n                    dropdownView.isOpen = false;\n                }\n            });\n            colorSelectorView.on('colorPicker:show', ()=>{\n                this._undoStepBatch = editor.model.createBatch();\n            });\n            colorSelectorView.on('colorPicker:cancel', ()=>{\n                if (this._undoStepBatch.operations.length) {\n                    // We need to close the dropdown before the undo batch.\n                    // Otherwise, ColorUI treats undo as a selected color change,\n                    // propagating the update to the whole selection.\n                    // That's an issue if spans with various colors were selected.\n                    dropdownView.isOpen = false;\n                    editor.execute('undo', this._undoStepBatch);\n                }\n                editor.editing.view.focus();\n            });\n            dropdownView.on('change:isOpen', (evt, name, isVisible)=>{\n                if (!dropdownContentRendered) {\n                    dropdownContentRendered = true;\n                    dropdownView.colorSelectorView.appendUI();\n                }\n                if (isVisible) {\n                    if (documentColorsCount !== 0) {\n                        colorSelectorView.updateDocumentColors(editor.model, this.componentName);\n                    }\n                    colorSelectorView.updateSelectedColors();\n                    colorSelectorView.showColorGridsFragment();\n                }\n            });\n            // Accessibility: focus the first active color when opening the dropdown.\n            focusChildOnDropdownOpen(dropdownView, ()=>dropdownView.colorSelectorView.colorGridsFragmentView.staticColorsGrid.items.find((item)=>item.isOn));\n            return dropdownView;\n        });\n        // Register menu bar button..\n        editor.ui.componentFactory.add(`menuBar:${this.componentName}`, (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                label: this.dropdownLabel,\n                icon: this.icon\n            });\n            menuView.bind('isEnabled').to(command);\n            // Font color sub-menu rendering is deferred once it gets open to improve performance (#6192).\n            let contentRendered = false;\n            const colorSelectorView = new ColorSelectorView(locale, {\n                colors: localizedColors.map((option)=>({\n                        label: option.label,\n                        color: option.model,\n                        options: {\n                            hasBorder: option.hasBorder\n                        }\n                    })),\n                columns: this.columns,\n                removeButtonLabel: t('Remove color'),\n                colorPickerLabel: t('Color picker'),\n                documentColorsLabel: documentColorsCount !== 0 ? t('Document colors') : '',\n                documentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount,\n                colorPickerViewConfig: false\n            });\n            colorSelectorView.bind('selectedColor').to(command, 'value');\n            colorSelectorView.delegate('execute').to(menuView);\n            colorSelectorView.on('execute', (evt, data)=>{\n                editor.execute(this.commandName, {\n                    value: data.value,\n                    batch: this._undoStepBatch\n                });\n                editor.editing.view.focus();\n            });\n            menuView.on('change:isOpen', (evt, name, isVisible)=>{\n                if (!contentRendered) {\n                    contentRendered = true;\n                    colorSelectorView.appendUI();\n                }\n                if (isVisible) {\n                    if (documentColorsCount !== 0) {\n                        colorSelectorView.updateDocumentColors(editor.model, this.componentName);\n                    }\n                    colorSelectorView.updateSelectedColors();\n                    colorSelectorView.showColorGridsFragment();\n                }\n            });\n            menuView.panelView.children.add(colorSelectorView);\n            return menuView;\n        });\n    }\n}\n\nvar fontColorIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.4 10.3 10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zm3.1 7H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z\\\"/></svg>\";\n\n/**\n * The font color UI plugin. It introduces the `'fontColor'` dropdown.\n */ class FontColorUI extends ColorUI {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_COLOR,\n            componentName: FONT_COLOR,\n            icon: fontColorIcon,\n            dropdownLabel: t('Font Color')\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontColorUI';\n    }\n}\n\n/**\n * The font color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontcolor/fontcolorediting~FontColorEditing} and\n * {@link module:font/fontcolor/fontcolorui~FontColorUI} features in the editor.\n */ class FontColor extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FontColorEditing,\n            FontColorUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontColor';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The font background color command. It is used by\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing}\n * to apply the font background color.\n *\n * ```ts\n * editor.execute( 'fontBackgroundColor', { value: 'rgb(250, 20, 20)' } );\n * ```\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n */ class FontBackgroundColorCommand extends FontCommand {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor, FONT_BACKGROUND_COLOR);\n    }\n}\n\n/**\n * The font background color editing feature.\n *\n * It introduces the {@link module:font/fontbackgroundcolor/fontbackgroundcolorcommand~FontBackgroundColorCommand command} and\n * the `fontBackgroundColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"background-color: ...\">`),\n * depending on the {@link module:font/fontconfig~FontColorConfig configuration}.\n */ class FontBackgroundColorEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontBackgroundColorEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define(FONT_BACKGROUND_COLOR, {\n            colors: [\n                {\n                    color: 'hsl(0, 0%, 0%)',\n                    label: 'Black'\n                },\n                {\n                    color: 'hsl(0, 0%, 30%)',\n                    label: 'Dim grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 60%)',\n                    label: 'Grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 90%)',\n                    label: 'Light grey'\n                },\n                {\n                    color: 'hsl(0, 0%, 100%)',\n                    label: 'White',\n                    hasBorder: true\n                },\n                {\n                    color: 'hsl(0, 75%, 60%)',\n                    label: 'Red'\n                },\n                {\n                    color: 'hsl(30, 75%, 60%)',\n                    label: 'Orange'\n                },\n                {\n                    color: 'hsl(60, 75%, 60%)',\n                    label: 'Yellow'\n                },\n                {\n                    color: 'hsl(90, 75%, 60%)',\n                    label: 'Light green'\n                },\n                {\n                    color: 'hsl(120, 75%, 60%)',\n                    label: 'Green'\n                },\n                {\n                    color: 'hsl(150, 75%, 60%)',\n                    label: 'Aquamarine'\n                },\n                {\n                    color: 'hsl(180, 75%, 60%)',\n                    label: 'Turquoise'\n                },\n                {\n                    color: 'hsl(210, 75%, 60%)',\n                    label: 'Light blue'\n                },\n                {\n                    color: 'hsl(240, 75%, 60%)',\n                    label: 'Blue'\n                },\n                {\n                    color: 'hsl(270, 75%, 60%)',\n                    label: 'Purple'\n                }\n            ],\n            columns: 5\n        });\n        editor.data.addStyleProcessorRules(addBackgroundRules);\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'span',\n                styles: {\n                    'background-color': /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: FONT_BACKGROUND_COLOR,\n                value: renderUpcastAttribute('background-color')\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: FONT_BACKGROUND_COLOR,\n            view: renderDowncastElement('background-color')\n        });\n        editor.commands.add(FONT_BACKGROUND_COLOR, new FontBackgroundColorCommand(editor));\n        // Allow the font backgroundColor attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: FONT_BACKGROUND_COLOR\n        });\n        editor.model.schema.setAttributeProperties(FONT_BACKGROUND_COLOR, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n    }\n}\n\nvar fontBackgroundColorIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm8.38 9.262H7.62L10 5.506l2.38 5.756zm.532 1.285L14.34 16h1.426L10.804 4H9.196L4.234 16H5.66l1.428-3.453h5.824z\\\"/></svg>\";\n\n/**\n * The font background color UI plugin. It introduces the `'fontBackgroundColor'` dropdown.\n */ class FontBackgroundColorUI extends ColorUI {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_BACKGROUND_COLOR,\n            componentName: FONT_BACKGROUND_COLOR,\n            icon: fontBackgroundColorIcon,\n            dropdownLabel: t('Font Background Color')\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontBackgroundColorUI';\n    }\n}\n\n/**\n * The font background color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads\n * the {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing} and\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorui~FontBackgroundColorUI} features in the editor.\n */ class FontBackgroundColor extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FontBackgroundColorEditing,\n            FontBackgroundColorUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FontBackgroundColor';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * A plugin that enables a set of text styling features:\n *\n * * {@link module:font/fontsize~FontSize},\n * * {@link module:font/fontfamily~FontFamily}.\n * * {@link module:font/fontcolor~FontColor},\n * * {@link module:font/fontbackgroundcolor~FontBackgroundColor}.\n *\n * For a detailed overview, check the {@glink features/font Font feature} documentation\n * and the {@glink api/font package page}.\n */ class Font extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            FontFamily,\n            FontSize,\n            FontColor,\n            FontBackgroundColor\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Font';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Font, FontBackgroundColor, FontBackgroundColorEditing, FontBackgroundColorUI, FontColor, FontColorEditing, FontColorUI, FontFamily, FontFamilyEditing, FontFamilyUI, FontSize, FontSizeEditing, FontSizeUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The paragraph command.\n */ class ParagraphCommand extends Command {\n    constructor(editor){\n        super(editor);\n        // Since this command may pass selection in execution block, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        this.value = !!block && block.is('element', 'paragraph');\n        this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n    }\n    /**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param options Options for the executed command.\n\t * @param options.selection The selection that the command should be applied to. By default,\n\t * if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = options.selection || document.selection;\n        // Don't execute command if selection is in non-editable place.\n        if (!model.canEditAt(selection)) {\n            return;\n        }\n        model.change((writer)=>{\n            const blocks = selection.getSelectedBlocks();\n            for (const block of blocks){\n                if (!block.is('element', 'paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n                    writer.rename(block, 'paragraph');\n                }\n            }\n        });\n    }\n}\n/**\n * Checks whether the given block can be replaced by a paragraph.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */ function checkCanBecomeParagraph(block, schema) {\n    return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}\n\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n * ```ts\n * // Insert a new paragraph before an element in the document.\n * editor.execute( 'insertParagraph', {\n *   position: editor.model.createPositionBefore( element )\n * } );\n * ```\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n */ class InsertParagraphCommand extends Command {\n    constructor(editor){\n        super(editor);\n        // Since this command passes position in execution block instead of selection, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.position The model position at which the new paragraph will be inserted.\n\t * @param options.attributes Attributes keys and values to set on a inserted paragraph.\n\t * @fires execute\n\t */ execute(options) {\n        const model = this.editor.model;\n        const attributes = options.attributes;\n        let position = options.position;\n        // Don't execute command if position is in non-editable place.\n        if (!model.canEditAt(position)) {\n            return;\n        }\n        model.change((writer)=>{\n            position = this._findPositionToInsertParagraph(position, writer);\n            if (!position) {\n                return;\n            }\n            const paragraph = writer.createElement('paragraph');\n            if (attributes) {\n                model.schema.setAllowedAttributes(paragraph, attributes, writer);\n            }\n            model.insertContent(paragraph, position);\n            writer.setSelection(paragraph, 'in');\n        });\n    }\n    /**\n\t * Returns the best position to insert a new paragraph.\n\t */ _findPositionToInsertParagraph(position, writer) {\n        const model = this.editor.model;\n        if (model.schema.checkChild(position, 'paragraph')) {\n            return position;\n        }\n        const allowedParent = model.schema.findAllowedParent(position, 'paragraph');\n        // It could be there's no ancestor limit that would allow paragraph.\n        // In theory, \"paragraph\" could be disallowed even in the \"$root\".\n        if (!allowedParent) {\n            return null;\n        }\n        const positionParent = position.parent;\n        const isTextAllowed = model.schema.checkChild(positionParent, '$text');\n        // At empty $block or at the end of $block.\n        // <paragraph>[]</paragraph> ---> <paragraph></paragraph><paragraph>[]</paragraph>\n        // <paragraph>foo[]</paragraph> ---> <paragraph>foo</paragraph><paragraph>[]</paragraph>\n        if (positionParent.isEmpty || isTextAllowed && position.isAtEnd) {\n            return model.createPositionAfter(positionParent);\n        }\n        // At the start of $block with text.\n        // <paragraph>[]foo</paragraph> ---> <paragraph>[]</paragraph><paragraph>foo</paragraph>\n        if (!positionParent.isEmpty && isTextAllowed && position.isAtStart) {\n            return model.createPositionBefore(positionParent);\n        }\n        return writer.split(position, allowedParent).position;\n    }\n}\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * It also brings two editors commands:\n *\n * * The {@link module:paragraph/paragraphcommand~ParagraphCommand `'paragraph'`} command that converts all\n * blocks in the model selection into paragraphs.\n * * The {@link module:paragraph/insertparagraphcommand~InsertParagraphCommand `'insertParagraph'`} command\n * that inserts a new paragraph at a specified location in the model.\n */ class Paragraph extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Paragraph';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        editor.commands.add('paragraph', new ParagraphCommand(editor));\n        editor.commands.add('insertParagraph', new InsertParagraphCommand(editor));\n        // Schema.\n        model.schema.register('paragraph', {\n            inheritAllFrom: '$block'\n        });\n        editor.conversion.elementToElement({\n            model: 'paragraph',\n            view: 'p'\n        });\n        // Conversion for paragraph-like elements which has not been converted by any plugin.\n        editor.conversion.for('upcast').elementToElement({\n            model: (viewElement, { writer })=>{\n                if (!Paragraph.paragraphLikeElements.has(viewElement.name)) {\n                    return null;\n                }\n                // Do not auto-paragraph empty elements.\n                if (viewElement.isEmpty) {\n                    return null;\n                }\n                return writer.createElement('paragraph');\n            },\n            view: /.+/,\n            converterPriority: 'low'\n        });\n    }\n    /**\n\t * A list of element names which should be treated by the autoparagraphing algorithms as\n\t * paragraph-like. This means that e.g. the following content:\n\t *\n\t * ```html\n\t * <h1>Foo</h1>\n\t * <table>\n\t *   <tr>\n\t *     <td>X</td>\n\t *     <td>\n\t *       <ul>\n\t *         <li>Y</li>\n\t *         <li>Z</li>\n\t *       </ul>\n\t *     </td>\n\t *   </tr>\n\t * </table>\n\t * ```\n\t *\n\t * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n\t * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n\t * by the paragraph feature and converted to:\n\t *\n\t * ```html\n\t * <p>Foo</p>\n\t * <p>X</p>\n\t * <p>Y</p>\n\t * <p>Z</p>\n\t * ```\n\t *\n\t * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n\t * have a priority upon conversion.\n\t */ static paragraphLikeElements = new Set([\n        'blockquote',\n        'dd',\n        'div',\n        'dt',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'li',\n        'p',\n        'td',\n        'th'\n    ]);\n}\n\n/**\n * This plugin defines the `'paragraph'` button. It can be used together with\n * {@link module:heading/headingbuttonsui~HeadingButtonsUI} to replace the standard heading dropdown.\n *\n * This plugin is not loaded automatically by the {@link module:paragraph/paragraph~Paragraph} plugin. It must\n * be added manually.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., Heading, Paragraph, HeadingButtonsUI, ParagraphButtonUI ]\n *     toolbar: [ 'paragraph', 'heading1', 'heading2', 'heading3' ]\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class ParagraphButtonUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Paragraph\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('paragraph', (locale)=>{\n            const view = new ButtonView(locale);\n            const command = editor.commands.get('paragraph');\n            view.label = t('Paragraph');\n            view.icon = icons.paragraph;\n            view.tooltip = true;\n            view.isToggleable = true;\n            view.bind('isEnabled').to(command);\n            view.bind('isOn').to(command, 'value');\n            view.on('execute', ()=>{\n                editor.execute('paragraph');\n            });\n            return view;\n        });\n    }\n}\n\nexport { Paragraph, ParagraphButtonUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph/dist/index.js';\nimport { first, priorities, Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ViewModel, createDropdown, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { DowncastWriter, enablePlaceholder, hidePlaceholder, needsPlaceholder, showPlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n */ class HeadingCommand extends Command {\n    /**\n\t * Set of defined model's elements names that this command support.\n\t * See {@link module:heading/headingconfig~HeadingOption}.\n\t */ modelElements;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor Editor instance.\n\t * @param modelElements Names of the element which this command can apply in the model.\n\t */ constructor(editor, modelElements){\n        super(editor);\n        this.modelElements = modelElements;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const block = first(this.editor.model.document.selection.getSelectedBlocks());\n        this.value = !!block && this.modelElements.includes(block.name) && block.name;\n        this.isEnabled = !!block && this.modelElements.some((heading)=>checkCanBecomeHeading(block, heading, this.editor.model.schema));\n    }\n    /**\n\t * Executes the command. Applies the heading to the selected blocks or, if the first selected\n\t * block is a heading already, turns selected headings (of this level only) to paragraphs.\n\t *\n\t * @param options.value Name of the element which this command will apply in the model.\n\t * @fires execute\n\t */ execute(options) {\n        const model = this.editor.model;\n        const document = model.document;\n        const modelElement = options.value;\n        model.change((writer)=>{\n            const blocks = Array.from(document.selection.getSelectedBlocks()).filter((block)=>{\n                return checkCanBecomeHeading(block, modelElement, model.schema);\n            });\n            for (const block of blocks){\n                if (!block.is('element', modelElement)) {\n                    writer.rename(block, modelElement);\n                }\n            }\n        });\n    }\n}\n/**\n * Checks whether the given block can be replaced by a specific heading.\n *\n * @param block A block to be tested.\n * @param heading Command element name in the model.\n * @param schema The schema of the document.\n */ function checkCanBecomeHeading(block, heading, schema) {\n    return schema.checkChild(block.parent, heading) && !schema.isObject(block);\n}\n\nconst defaultModelElement = 'paragraph';\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n */ class HeadingEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HeadingEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('heading', {\n            options: [\n                {\n                    model: 'paragraph',\n                    title: 'Paragraph',\n                    class: 'ck-heading_paragraph'\n                },\n                {\n                    model: 'heading1',\n                    view: 'h2',\n                    title: 'Heading 1',\n                    class: 'ck-heading_heading1'\n                },\n                {\n                    model: 'heading2',\n                    view: 'h3',\n                    title: 'Heading 2',\n                    class: 'ck-heading_heading2'\n                },\n                {\n                    model: 'heading3',\n                    view: 'h4',\n                    title: 'Heading 3',\n                    class: 'ck-heading_heading3'\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Paragraph\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const options = editor.config.get('heading.options');\n        const modelElements = [];\n        for (const option of options){\n            // Skip paragraph - it is defined in required Paragraph feature.\n            if (option.model === 'paragraph') {\n                continue;\n            }\n            // Schema.\n            editor.model.schema.register(option.model, {\n                inheritAllFrom: '$block'\n            });\n            editor.conversion.elementToElement(option);\n            modelElements.push(option.model);\n        }\n        this._addDefaultH1Conversion(editor);\n        // Register the heading command for this option.\n        editor.commands.add('heading', new HeadingCommand(editor, modelElements));\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        // If the enter command is added to the editor, alter its behavior.\n        // Enter at the end of a heading element should create a paragraph.\n        const editor = this.editor;\n        const enterCommand = editor.commands.get('enter');\n        const options = editor.config.get('heading.options');\n        if (enterCommand) {\n            this.listenTo(enterCommand, 'afterExecute', (evt, data)=>{\n                const positionParent = editor.model.document.selection.getFirstPosition().parent;\n                const isHeading = options.some((option)=>positionParent.is('element', option.model));\n                if (isHeading && !positionParent.is('element', defaultModelElement) && positionParent.childCount === 0) {\n                    data.writer.rename(positionParent, defaultModelElement);\n                }\n            });\n        }\n    }\n    /**\n\t * Adds default conversion for `h1` -> `heading1` with a low priority.\n\t *\n\t * @param editor Editor instance on which to add the `h1` conversion.\n\t */ _addDefaultH1Conversion(editor) {\n        editor.conversion.for('upcast').elementToElement({\n            model: 'heading1',\n            view: 'h1',\n            // With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, `h1` will be transformed into a paragraph.\n            converterPriority: priorities.low + 1\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module heading/utils\n */ /**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * the editor localization, i.e. to display {@link module:heading/headingconfig~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n */ function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        'Paragraph': t('Paragraph'),\n        'Heading 1': t('Heading 1'),\n        'Heading 2': t('Heading 2'),\n        'Heading 3': t('Heading 3'),\n        'Heading 4': t('Heading 4'),\n        'Heading 5': t('Heading 5'),\n        'Heading 6': t('Heading 6')\n    };\n    return editor.config.get('heading.options').map((option)=>{\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}\n\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n */ class HeadingUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HeadingUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('Choose heading');\n        const accessibleLabel = t('Heading');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', (locale)=>{\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [\n                headingCommand\n            ];\n            for (const option of options){\n                const def = {\n                    type: 'button',\n                    model: new ViewModel({\n                        label: option.title,\n                        class: option.class,\n                        role: 'menuitemradio',\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', (value)=>value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions, {\n                ariaLabel: accessibleLabel,\n                role: 'menu'\n            });\n            dropdownView.buttonView.set({\n                ariaLabel: accessibleLabel,\n                ariaLabelledBy: undefined,\n                isOn: false,\n                withText: true,\n                tooltip: accessibleLabel\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck-heading-dropdown'\n                    ]\n                }\n            });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>{\n                return areEnabled.some((isEnabled)=>isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (heading, paragraph)=>{\n                const whichModel = paragraph ? 'paragraph' : heading;\n                if (typeof whichModel === 'boolean') {\n                    return defaultTitle;\n                }\n                // If none of the commands is active, display default title.\n                if (!titles[whichModel]) {\n                    return defaultTitle;\n                }\n                return titles[whichModel];\n            });\n            dropdownView.buttonView.bind('ariaLabel').to(headingCommand, 'value', paragraphCommand, 'value', (heading, paragraph)=>{\n                const whichModel = paragraph ? 'paragraph' : heading;\n                if (typeof whichModel === 'boolean') {\n                    return accessibleLabel;\n                }\n                // If none of the commands is active, display default title.\n                if (!titles[whichModel]) {\n                    return accessibleLabel;\n                }\n                return `${titles[whichModel]}, ${accessibleLabel}`;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', (evt)=>{\n                const { commandName, commandValue } = evt.source;\n                editor.execute(commandName, commandValue ? {\n                    value: commandValue\n                } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('menuBar:heading', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [\n                headingCommand\n            ];\n            const listView = new MenuBarMenuListView(locale);\n            menuView.set({\n                class: 'ck-heading-dropdown'\n            });\n            listView.set({\n                ariaLabel: t('Heading'),\n                role: 'menu'\n            });\n            menuView.buttonView.set({\n                label: t('Heading')\n            });\n            menuView.panelView.children.add(listView);\n            for (const option of options){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n                buttonView.set({\n                    isToggleable: true,\n                    label: option.title,\n                    role: 'menuitemradio',\n                    class: option.class\n                });\n                buttonView.delegate('execute').to(menuView);\n                buttonView.on('execute', ()=>{\n                    const commandName = option.model === 'paragraph' ? 'paragraph' : 'heading';\n                    editor.execute(commandName, {\n                        value: option.model\n                    });\n                    editor.editing.view.focus();\n                });\n                if (option.model === 'paragraph') {\n                    buttonView.bind('isOn').to(paragraphCommand, 'value');\n                    commands.push(paragraphCommand);\n                } else {\n                    buttonView.bind('isOn').to(headingCommand, 'value', (value)=>value === option.model);\n                }\n            }\n            menuView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled)=>{\n                return areEnabled.some((isEnabled)=>isEnabled);\n            });\n            return menuView;\n        });\n    }\n}\n\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature} guide\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */ class Heading extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            HeadingEditing,\n            HeadingUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Heading';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst defaultIcons = /* #__PURE__ */ (()=>({\n        heading1: icons.heading1,\n        heading2: icons.heading2,\n        heading3: icons.heading3,\n        heading4: icons.heading4,\n        heading5: icons.heading5,\n        heading6: icons.heading6\n    }))();\n/**\n * The `HeadingButtonsUI` plugin defines a set of UI buttons that can be used instead of the\n * standard drop down component.\n *\n * This feature is not enabled by default by the {@link module:heading/heading~Heading} plugin and needs to be\n * installed manually to the editor configuration.\n *\n * Plugin introduces button UI elements, which names are same as `model` property from {@link module:heading/headingconfig~HeadingOption}.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., Heading, Paragraph, HeadingButtonsUI, ParagraphButtonUI ]\n *     heading: {\n *       options: [\n *         { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *         { model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *         { model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *         { model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *       ]\n *      },\n *      toolbar: [ 'paragraph', 'heading1', 'heading2', 'heading3' ]\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n *\n * NOTE: The `'paragraph'` button is defined in by the {@link module:paragraph/paragraphbuttonui~ParagraphButtonUI} plugin\n * which needs to be loaded manually as well.\n *\n * It is possible to use custom icons by providing `icon` config option in {@link module:heading/headingconfig~HeadingOption}.\n * For the default configuration standard icons are used.\n */ class HeadingButtonsUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const options = getLocalizedOptions(this.editor);\n        options.filter((item)=>item.model !== 'paragraph').map((item)=>this._createButton(item));\n    }\n    /**\n\t * Creates single button view from provided configuration option.\n\t */ _createButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(option.model, (locale)=>{\n            const view = new ButtonView(locale);\n            const command = editor.commands.get('heading');\n            view.label = option.title;\n            view.icon = option.icon || defaultIcons[option.model];\n            view.tooltip = true;\n            view.isToggleable = true;\n            view.bind('isEnabled').to(command);\n            view.bind('isOn').to(command, 'value', (value)=>value == option.model);\n            view.on('execute', ()=>{\n                editor.execute('heading', {\n                    value: option.model\n                });\n                editor.editing.view.focus();\n            });\n            return view;\n        });\n    }\n}\n\n// A list of element names that should be treated by the Title plugin as title-like.\n// This means that an element of a type from this list will be changed to a title element\n// when it is the first element in the root.\nconst titleLikeElements = new Set([\n    'paragraph',\n    'heading1',\n    'heading2',\n    'heading3',\n    'heading4',\n    'heading5',\n    'heading6'\n]);\n/**\n * The Title plugin.\n *\n * It splits the document into `Title` and `Body` sections.\n */ class Title extends Plugin {\n    /**\n\t * A reference to an empty paragraph in the body\n\t * created when there is no element in the body for the placeholder purposes.\n\t */ _bodyPlaceholder = new Map();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Title';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'Paragraph'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        // To use the schema for disabling some features when the selection is inside the title element\n        // it is needed to create the following structure:\n        //\n        // <title>\n        //     <title-content>The title text</title-content>\n        // </title>\n        //\n        // See: https://github.com/ckeditor/ckeditor5/issues/2005.\n        model.schema.register('title', {\n            isBlock: true,\n            allowIn: '$root'\n        });\n        model.schema.register('title-content', {\n            isBlock: true,\n            allowIn: 'title',\n            allowAttributes: [\n                'alignment'\n            ]\n        });\n        model.schema.extend('$text', {\n            allowIn: 'title-content'\n        });\n        // Disallow all attributes in `title-content`.\n        model.schema.addAttributeCheck((context)=>{\n            if (context.endsWith('title-content $text')) {\n                return false;\n            }\n        });\n        // Because `title` is represented by two elements in the model\n        // but only one in the view, it is needed to adjust Mapper.\n        editor.editing.mapper.on('modelToViewPosition', mapModelPositionToView(editor.editing.view));\n        editor.data.mapper.on('modelToViewPosition', mapModelPositionToView(editor.editing.view));\n        // Conversion.\n        editor.conversion.for('downcast').elementToElement({\n            model: 'title-content',\n            view: 'h1'\n        });\n        editor.conversion.for('downcast').add((dispatcher)=>dispatcher.on('insert:title', (evt, data, conversionApi)=>{\n                conversionApi.consumable.consume(data.item, evt.name);\n            }));\n        // Custom converter is used for data v -> m conversion to avoid calling post-fixer when setting data.\n        // See https://github.com/ckeditor/ckeditor5/issues/2036.\n        editor.data.upcastDispatcher.on('element:h1', dataViewModelH1Insertion, {\n            priority: 'high'\n        });\n        editor.data.upcastDispatcher.on('element:h2', dataViewModelH1Insertion, {\n            priority: 'high'\n        });\n        editor.data.upcastDispatcher.on('element:h3', dataViewModelH1Insertion, {\n            priority: 'high'\n        });\n        // Take care about correct `title` element structure.\n        model.document.registerPostFixer((writer)=>this._fixTitleContent(writer));\n        // Create and take care of correct position of a `title` element.\n        model.document.registerPostFixer((writer)=>this._fixTitleElement(writer));\n        // Create element for `Body` placeholder if it is missing.\n        model.document.registerPostFixer((writer)=>this._fixBodyElement(writer));\n        // Prevent from adding extra at the end of the document.\n        model.document.registerPostFixer((writer)=>this._fixExtraParagraph(writer));\n        // Attach `Title` and `Body` placeholders to the empty title and/or content.\n        this._attachPlaceholders();\n        // Attach Tab handling.\n        this._attachTabPressHandling();\n    }\n    /**\n\t * Returns the title of the document. Note that because this plugin does not allow any formatting inside\n\t * the title element, the output of this method will be a plain text, with no HTML tags.\n\t *\n\t * It is not recommended to use this method together with features that insert markers to the\n\t * data output, like comments or track changes features. If such markers start in the title and end in the\n\t * body, the result of this method might be incorrect.\n\t *\n\t * @param options Additional configuration passed to the conversion process.\n\t * See {@link module:engine/controller/datacontroller~DataController#get `DataController#get`}.\n\t * @returns The title of the document.\n\t */ getTitle(options = {}) {\n        const rootName = options.rootName ? options.rootName : undefined;\n        const titleElement = this._getTitleElement(rootName);\n        const titleContentElement = titleElement.getChild(0);\n        return this.editor.data.stringify(titleContentElement, options);\n    }\n    /**\n\t * Returns the body of the document.\n\t *\n\t * Note that it is not recommended to use this method together with features that insert markers to the\n\t * data output, like comments or track changes features. If such markers start in the title and end in the\n\t * body, the result of this method might be incorrect.\n\t *\n\t * @param options Additional configuration passed to the conversion process.\n\t * See {@link module:engine/controller/datacontroller~DataController#get `DataController#get`}.\n\t * @returns The body of the document.\n\t */ getBody(options = {}) {\n        const editor = this.editor;\n        const data = editor.data;\n        const model = editor.model;\n        const rootName = options.rootName ? options.rootName : undefined;\n        const root = editor.model.document.getRoot(rootName);\n        const view = editor.editing.view;\n        const viewWriter = new DowncastWriter(view.document);\n        const rootRange = model.createRangeIn(root);\n        const viewDocumentFragment = viewWriter.createDocumentFragment();\n        // Find all markers that intersects with body.\n        const bodyStartPosition = model.createPositionAfter(root.getChild(0));\n        const bodyRange = model.createRange(bodyStartPosition, model.createPositionAt(root, 'end'));\n        const markers = new Map();\n        for (const marker of model.markers){\n            const intersection = bodyRange.getIntersection(marker.getRange());\n            if (intersection) {\n                markers.set(marker.name, intersection);\n            }\n        }\n        // Convert the entire root to view.\n        data.mapper.clearBindings();\n        data.mapper.bindElements(root, viewDocumentFragment);\n        data.downcastDispatcher.convert(rootRange, markers, viewWriter, options);\n        // Remove title element from view.\n        viewWriter.remove(viewWriter.createRangeOn(viewDocumentFragment.getChild(0)));\n        // view -> data\n        return editor.data.processor.toData(viewDocumentFragment);\n    }\n    /**\n\t * Returns the `title` element when it is in the document. Returns `undefined` otherwise.\n\t */ _getTitleElement(rootName) {\n        const root = this.editor.model.document.getRoot(rootName);\n        for (const child of root.getChildren()){\n            if (isTitle(child)) {\n                return child;\n            }\n        }\n    }\n    /**\n\t * Model post-fixer callback that ensures that `title` has only one `title-content` child.\n\t * All additional children should be moved after the `title` element and renamed to a paragraph.\n\t */ _fixTitleContent(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()){\n            const title = this._getTitleElement(rootName);\n            // If there is no title in the content it will be created by `_fixTitleElement` post-fixer.\n            // If the title has just one element, then it is correct. No fixing.\n            if (!title || title.maxOffset === 1) {\n                continue;\n            }\n            const titleChildren = Array.from(title.getChildren());\n            // Skip first child because it is an allowed element.\n            titleChildren.shift();\n            for (const titleChild of titleChildren){\n                writer.move(writer.createRangeOn(titleChild), title, 'after');\n                writer.rename(titleChild, 'paragraph');\n            }\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n\t * Model post-fixer callback that creates a title element when it is missing,\n\t * takes care of the correct position of it and removes additional title elements.\n\t */ _fixTitleElement(writer) {\n        let changed = false;\n        const model = this.editor.model;\n        for (const modelRoot of this.editor.model.document.getRoots()){\n            const titleElements = Array.from(modelRoot.getChildren()).filter(isTitle);\n            const firstTitleElement = titleElements[0];\n            const firstRootChild = modelRoot.getChild(0);\n            // When title element is at the beginning of the document then try to fix additional title elements (if there are any).\n            if (firstRootChild.is('element', 'title')) {\n                if (titleElements.length > 1) {\n                    fixAdditionalTitleElements(titleElements, writer, model);\n                    changed = true;\n                }\n                continue;\n            }\n            // When there is no title in the document and first element in the document cannot be changed\n            // to the title then create an empty title element at the beginning of the document.\n            if (!firstTitleElement && !titleLikeElements.has(firstRootChild.name)) {\n                const title = writer.createElement('title');\n                writer.insert(title, modelRoot);\n                writer.insertElement('title-content', title);\n                changed = true;\n                continue;\n            }\n            if (titleLikeElements.has(firstRootChild.name)) {\n                // Change the first element in the document to the title if it can be changed (is title-like).\n                changeElementToTitle(firstRootChild, writer, model);\n            } else {\n                // Otherwise, move the first occurrence of the title element to the beginning of the document.\n                writer.move(writer.createRangeOn(firstTitleElement), modelRoot, 0);\n            }\n            fixAdditionalTitleElements(titleElements, writer, model);\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n\t * Model post-fixer callback that adds an empty paragraph at the end of the document\n\t * when it is needed for the placeholder purposes.\n\t */ _fixBodyElement(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()){\n            const modelRoot = this.editor.model.document.getRoot(rootName);\n            if (modelRoot.childCount < 2) {\n                const placeholder = writer.createElement('paragraph');\n                writer.insert(placeholder, modelRoot, 1);\n                this._bodyPlaceholder.set(rootName, placeholder);\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n\t * Model post-fixer callback that removes a paragraph from the end of the document\n\t * if it was created for the placeholder purposes and is not needed anymore.\n\t */ _fixExtraParagraph(writer) {\n        let changed = false;\n        for (const rootName of this.editor.model.document.getRootNames()){\n            const root = this.editor.model.document.getRoot(rootName);\n            const placeholder = this._bodyPlaceholder.get(rootName);\n            if (shouldRemoveLastParagraph(placeholder, root)) {\n                this._bodyPlaceholder.delete(rootName);\n                writer.remove(placeholder);\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    /**\n\t * Attaches the `Title` and `Body` placeholders to the title and/or content.\n\t */ _attachPlaceholders() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const sourceElement = editor.sourceElement;\n        const titlePlaceholder = editor.config.get('title.placeholder') || t('Type your title');\n        const bodyPlaceholder = editor.config.get('placeholder') || sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute('placeholder') || t('Type or paste your content here.');\n        // Attach placeholder to the view title element.\n        editor.editing.downcastDispatcher.on('insert:title-content', (evt, data, conversionApi)=>{\n            const element = conversionApi.mapper.toViewElement(data.item);\n            element.placeholder = titlePlaceholder;\n            enablePlaceholder({\n                view,\n                element,\n                keepOnFocus: true\n            });\n        });\n        // Attach placeholder to first element after a title element and remove it if it's not needed anymore.\n        // First element after title can change, so we need to observe all changes keep placeholder in sync.\n        const bodyViewElements = new Map();\n        // This post-fixer runs after the model post-fixer, so we can assume that the second child in view root will always exist.\n        view.document.registerPostFixer((writer)=>{\n            let hasChanged = false;\n            for (const viewRoot of view.document.roots){\n                // `viewRoot` can be empty despite the model post-fixers if the model root was detached.\n                if (viewRoot.isEmpty) {\n                    continue;\n                }\n                // If `viewRoot` is not empty, then we can expect at least two elements in it.\n                const body = viewRoot.getChild(1);\n                const oldBody = bodyViewElements.get(viewRoot.rootName);\n                // If body element has changed we need to disable placeholder on the previous element and enable on the new one.\n                if (body !== oldBody) {\n                    if (oldBody) {\n                        hidePlaceholder(writer, oldBody);\n                        writer.removeAttribute('data-placeholder', oldBody);\n                    }\n                    writer.setAttribute('data-placeholder', bodyPlaceholder, body);\n                    bodyViewElements.set(viewRoot.rootName, body);\n                    hasChanged = true;\n                }\n                // Then we need to display placeholder if it is needed.\n                // See: https://github.com/ckeditor/ckeditor5/issues/8689.\n                if (needsPlaceholder(body, true) && viewRoot.childCount === 2 && body.name === 'p') {\n                    hasChanged = showPlaceholder(writer, body) ? true : hasChanged;\n                } else {\n                    // Or hide if it is not needed.\n                    hasChanged = hidePlaceholder(writer, body) ? true : hasChanged;\n                }\n            }\n            return hasChanged;\n        });\n    }\n    /**\n\t * Creates navigation between the title and body sections using <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keys.\n\t */ _attachTabPressHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        // Pressing <kbd>Tab</kbd> inside the title should move the caret to the body.\n        editor.keystrokes.set('TAB', (data, cancel)=>{\n            model.change((writer)=>{\n                const selection = model.document.selection;\n                const selectedElements = Array.from(selection.getSelectedBlocks());\n                if (selectedElements.length === 1 && selectedElements[0].is('element', 'title-content')) {\n                    const root = selection.getFirstPosition().root;\n                    const firstBodyElement = root.getChild(1);\n                    writer.setSelection(firstBodyElement, 0);\n                    cancel();\n                }\n            });\n        });\n        // Pressing <kbd>Shift</kbd>+<kbd>Tab</kbd> at the beginning of the body should move the caret to the title.\n        editor.keystrokes.set('SHIFT + TAB', (data, cancel)=>{\n            model.change((writer)=>{\n                const selection = model.document.selection;\n                if (!selection.isCollapsed) {\n                    return;\n                }\n                const selectedElement = first(selection.getSelectedBlocks());\n                const selectionPosition = selection.getFirstPosition();\n                const root = editor.model.document.getRoot(selectionPosition.root.rootName);\n                const title = root.getChild(0);\n                const body = root.getChild(1);\n                if (selectedElement === body && selectionPosition.isAtStart) {\n                    writer.setSelection(title.getChild(0), 0);\n                    cancel();\n                }\n            });\n        });\n    }\n}\n/**\n * A view-to-model converter for the h1 that appears at the beginning of the document (a title element).\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param evt An object containing information about the fired event.\n * @param data An object containing conversion input, a placeholder for conversion output and possibly other values.\n * @param conversionApi Conversion interface to be used by the callback.\n */ function dataViewModelH1Insertion(evt, data, conversionApi) {\n    const modelCursor = data.modelCursor;\n    const viewItem = data.viewItem;\n    if (!modelCursor.isAtStart || !modelCursor.parent.is('element', '$root')) {\n        return;\n    }\n    if (!conversionApi.consumable.consume(viewItem, {\n        name: true\n    })) {\n        return;\n    }\n    const modelWriter = conversionApi.writer;\n    const title = modelWriter.createElement('title');\n    const titleContent = modelWriter.createElement('title-content');\n    modelWriter.append(titleContent, title);\n    modelWriter.insert(title, modelCursor);\n    conversionApi.convertChildren(viewItem, titleContent);\n    conversionApi.updateConversionResult(title, data);\n}\n/**\n * Maps position from the beginning of the model `title` element to the beginning of the view `h1` element.\n *\n * ```html\n * <title>^<title-content>Foo</title-content></title> -> <h1>^Foo</h1>\n * ```\n */ function mapModelPositionToView(editingView) {\n    return (evt, data)=>{\n        const positionParent = data.modelPosition.parent;\n        if (!positionParent.is('element', 'title')) {\n            return;\n        }\n        const modelTitleElement = positionParent.parent;\n        const viewElement = data.mapper.toViewElement(modelTitleElement);\n        data.viewPosition = editingView.createPositionAt(viewElement, 0);\n        evt.stop();\n    };\n}\n/**\n * @returns Returns true when given element is a title. Returns false otherwise.\n */ function isTitle(element) {\n    return element.is('element', 'title');\n}\n/**\n * Changes the given element to the title element.\n */ function changeElementToTitle(element, writer, model) {\n    const title = writer.createElement('title');\n    writer.insert(title, element, 'before');\n    writer.insert(element, title, 0);\n    writer.rename(element, 'title-content');\n    model.schema.removeDisallowedAttributes([\n        element\n    ], writer);\n}\n/**\n * Loops over the list of title elements and fixes additional ones.\n *\n * @returns Returns true when there was any change. Returns false otherwise.\n */ function fixAdditionalTitleElements(titleElements, writer, model) {\n    let hasChanged = false;\n    for (const title of titleElements){\n        if (title.index !== 0) {\n            fixTitleElement(title, writer, model);\n            hasChanged = true;\n        }\n    }\n    return hasChanged;\n}\n/**\n * Changes given title element to a paragraph or removes it when it is empty.\n */ function fixTitleElement(title, writer, model) {\n    const child = title.getChild(0);\n    // Empty title should be removed.\n    // It is created as a result of pasting to the title element.\n    if (child.isEmpty) {\n        writer.remove(title);\n        return;\n    }\n    writer.move(writer.createRangeOn(child), title, 'before');\n    writer.rename(child, 'paragraph');\n    writer.remove(title);\n    model.schema.removeDisallowedAttributes([\n        child\n    ], writer);\n}\n/**\n * Returns true when the last paragraph in the document was created only for the placeholder\n * purpose and it's not needed anymore. Returns false otherwise.\n */ function shouldRemoveLastParagraph(placeholder, root) {\n    if (!placeholder || !placeholder.is('element', 'paragraph') || placeholder.childCount) {\n        return false;\n    }\n    if (root.childCount <= 2 || root.getChild(root.childCount - 1) !== placeholder) {\n        return false;\n    }\n    return true;\n}\n\nexport { Heading, HeadingButtonsUI, HeadingEditing, HeadingUI, Title };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, createDropdown, SplitButtonView, addToolbarToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ListSeparatorView, ToolbarSeparatorView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The highlight command. It is used by the {@link module:highlight/highlightediting~HighlightEditing highlight feature}\n * to apply the text highlighting.\n *\n * ```ts\n * editor.execute( 'highlight', { value: 'greenMarker' } );\n * ```\n *\n * **Note**: Executing the command without a value removes the attribute from the model. If the selection is collapsed\n * inside a text with the highlight attribute, the command will remove the attribute from the entire range\n * of that text.\n */ class HighlightCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = doc.selection.getAttribute('highlight');\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'highlight');\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.value The value to apply.\n\t *\n\t * @fires execute\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const highlighter = options.value;\n        model.change((writer)=>{\n            if (selection.isCollapsed) {\n                const position = selection.getFirstPosition();\n                // When selection is inside text with `highlight` attribute.\n                if (selection.hasAttribute('highlight')) {\n                    // Find the full highlighted range.\n                    const isSameHighlight = (value)=>{\n                        return value.item.hasAttribute('highlight') && value.item.getAttribute('highlight') === this.value;\n                    };\n                    const highlightStart = position.getLastMatchingPosition(isSameHighlight, {\n                        direction: 'backward'\n                    });\n                    const highlightEnd = position.getLastMatchingPosition(isSameHighlight);\n                    const highlightRange = writer.createRange(highlightStart, highlightEnd);\n                    // Then depending on current value...\n                    if (!highlighter || this.value === highlighter) {\n                        // ...remove attribute when passing highlighter different then current or executing \"eraser\".\n                        // If we're at the end of the highlighted range, we don't want to remove highlight of the range.\n                        if (!position.isEqual(highlightEnd)) {\n                            writer.removeAttribute('highlight', highlightRange);\n                        }\n                        writer.removeSelectionAttribute('highlight');\n                    } else {\n                        // ...update `highlight` value.\n                        // If we're at the end of the highlighted range, we don't want to change the highlight of the range.\n                        if (!position.isEqual(highlightEnd)) {\n                            writer.setAttribute('highlight', highlighter, highlightRange);\n                        }\n                        writer.setSelectionAttribute('highlight', highlighter);\n                    }\n                } else if (highlighter) {\n                    writer.setSelectionAttribute('highlight', highlighter);\n                }\n            } else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), 'highlight');\n                for (const range of ranges){\n                    if (highlighter) {\n                        writer.setAttribute('highlight', highlighter, range);\n                    } else {\n                        writer.removeAttribute('highlight', range);\n                    }\n                }\n            }\n        });\n    }\n}\n\n/**\n * The highlight editing feature. It introduces the {@link module:highlight/highlightcommand~HighlightCommand command} and the `highlight`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<mark>` element with a `class` attribute (`<mark class=\"marker-green\">...</mark>`) depending\n * on the {@link module:highlight/highlightconfig~HighlightConfig configuration}.\n */ class HighlightEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HighlightEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('highlight', {\n            options: [\n                {\n                    model: 'yellowMarker',\n                    class: 'marker-yellow',\n                    title: 'Yellow marker',\n                    color: 'var(--ck-highlight-marker-yellow)',\n                    type: 'marker'\n                },\n                {\n                    model: 'greenMarker',\n                    class: 'marker-green',\n                    title: 'Green marker',\n                    color: 'var(--ck-highlight-marker-green)',\n                    type: 'marker'\n                },\n                {\n                    model: 'pinkMarker',\n                    class: 'marker-pink',\n                    title: 'Pink marker',\n                    color: 'var(--ck-highlight-marker-pink)',\n                    type: 'marker'\n                },\n                {\n                    model: 'blueMarker',\n                    class: 'marker-blue',\n                    title: 'Blue marker',\n                    color: 'var(--ck-highlight-marker-blue)',\n                    type: 'marker'\n                },\n                {\n                    model: 'redPen',\n                    class: 'pen-red',\n                    title: 'Red pen',\n                    color: 'var(--ck-highlight-pen-red)',\n                    type: 'pen'\n                },\n                {\n                    model: 'greenPen',\n                    class: 'pen-green',\n                    title: 'Green pen',\n                    color: 'var(--ck-highlight-pen-green)',\n                    type: 'pen'\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow highlight attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: 'highlight'\n        });\n        const options = editor.config.get('highlight.options');\n        // Set-up the two-way conversion.\n        editor.conversion.attributeToElement(_buildDefinition(options));\n        editor.commands.add('highlight', new HighlightCommand(editor));\n    }\n}\n/**\n * Converts the options array to a converter definition.\n *\n * @param options An array with configured options.\n */ function _buildDefinition(options) {\n    const definition = {\n        model: {\n            key: 'highlight',\n            values: []\n        },\n        view: {}\n    };\n    for (const option of options){\n        definition.model.values.push(option.model);\n        definition.view[option.model] = {\n            name: 'mark',\n            classes: option.class\n        };\n    }\n    return definition;\n}\n\nvar markerIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path class=\\\"ck-icon__fill\\\" d=\\\"M10.798 1.59 3.002 12.875l1.895 1.852 2.521 1.402 6.997-12.194z\\\"/><path d=\\\"m2.556 16.727.234-.348c-.297-.151-.462-.293-.498-.426-.036-.137.002-.416.115-.837.094-.25.15-.449.169-.595a4.495 4.495 0 0 0 0-.725c-.209-.621-.303-1.041-.284-1.26.02-.218.178-.506.475-.862l6.77-9.414c.539-.91 1.605-.85 3.199.18 1.594 1.032 2.188 1.928 1.784 2.686l-5.877 10.36c-.158.412-.333.673-.526.782-.193.108-.604.179-1.232.21-.362.131-.608.237-.738.318-.13.081-.305.238-.526.47-.293.265-.504.397-.632.397-.096 0-.27-.075-.524-.226l-.31.41-1.6-1.12zm-.279.415 1.575 1.103-.392.515H1.19l1.087-1.618zm8.1-13.656-4.953 6.9L8.75 12.57l4.247-7.574c.175-.25-.188-.647-1.092-1.192-.903-.546-1.412-.652-1.528-.32zM8.244 18.5 9.59 17h9.406v1.5H8.245z\\\"/></svg>\";\n\nvar penIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path class=\\\"ck-icon__fill\\\" d=\\\"M10.126 2.268 2.002 13.874l1.895 1.852 2.521 1.402L14.47 5.481l-1.543-2.568-2.801-.645z\\\"/><path d=\\\"m4.5 18.088-2.645-1.852-.04-2.95-.006-.005.006-.008v-.025l.011.008L8.73 2.97c.165-.233.356-.417.567-.557l-1.212.308L4.604 7.9l-.83-.558 3.694-5.495 2.708-.69 1.65 1.145.046.018.85-1.216 2.16 1.512-.856 1.222c.828.967 1.144 2.141.432 3.158L7.55 17.286l.006.005-3.055.797H4.5zm-.634.166-1.976.516-.026-1.918 2.002 1.402zM9.968 3.817l-.006-.004-6.123 9.184 3.277 2.294 6.108-9.162.005.003c.317-.452-.16-1.332-1.064-1.966-.891-.624-1.865-.776-2.197-.349zM8.245 18.5 9.59 17h9.406v1.5H8.245z\\\"/></svg>\";\n\n/**\n * The default highlight UI plugin. It introduces:\n *\n * * The `'highlight'` dropdown,\n * * The `'removeHighlight'` and `'highlight:*'` buttons.\n *\n * The default configuration includes the following buttons:\n *\n * * `'highlight:yellowMarker'`\n * * `'highlight:greenMarker'`\n * * `'highlight:pinkMarker'`\n * * `'highlight:blueMarker'`\n * * `'highlight:redPen'`\n * * `'highlight:greenPen'`\n *\n * See the {@link module:highlight/highlightconfig~HighlightConfig#options configuration} to learn more\n * about the defaults.\n */ class HighlightUI extends Plugin {\n    /**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with default\n\t * {@link module:highlight/highlightconfig~HighlightConfig#options} are available:\n\t *\n\t * * `'Yellow marker'`,\n\t * * `'Green marker'`,\n\t * * `'Pink marker'`,\n\t * * `'Blue marker'`,\n\t * * `'Red pen'`,\n\t * * `'Green pen'`.\n\t */ get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'Yellow marker': t('Yellow marker'),\n            'Green marker': t('Green marker'),\n            'Pink marker': t('Pink marker'),\n            'Blue marker': t('Blue marker'),\n            'Red pen': t('Red pen'),\n            'Green pen': t('Green pen')\n        };\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HighlightUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const options = this.editor.config.get('highlight.options');\n        for (const option of options){\n            this._addHighlighterButton(option);\n        }\n        this._addRemoveHighlightButton();\n        this._addDropdown(options);\n        this._addMenuBarButton(options);\n    }\n    /**\n\t * Creates the \"Remove highlight\" button.\n\t */ _addRemoveHighlightButton() {\n        const t = this.editor.t;\n        const command = this.editor.commands.get('highlight');\n        this._addButton('removeHighlight', t('Remove highlight'), icons.eraser, null, (button)=>{\n            button.bind('isEnabled').to(command, 'isEnabled');\n        });\n    }\n    /**\n\t * Creates a toolbar button from the provided highlight option.\n\t */ _addHighlighterButton(option) {\n        const command = this.editor.commands.get('highlight');\n        // TODO: change naming\n        this._addButton('highlight:' + option.model, option.title, getIconForType(option.type), option.model, decorateHighlightButton);\n        function decorateHighlightButton(button) {\n            button.bind('isEnabled').to(command, 'isEnabled');\n            button.bind('isOn').to(command, 'value', (value)=>value === option.model);\n            button.iconView.fillColor = option.color;\n            button.isToggleable = true;\n        }\n    }\n    /**\n\t * Internal method for creating highlight buttons.\n\t *\n\t * @param name The name of the button.\n\t * @param label The label for the button.\n\t * @param icon The button icon.\n\t * @param value The `value` property passed to the executed command.\n\t * @param decorateButton A callback getting ButtonView instance so that it can be further customized.\n\t */ _addButton(name, label, icon, value, decorateButton) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, (locale)=>{\n            const buttonView = new ButtonView(locale);\n            const localized = this.localizedOptionTitles[label] ? this.localizedOptionTitles[label] : label;\n            buttonView.set({\n                label: localized,\n                icon,\n                tooltip: true\n            });\n            buttonView.on('execute', ()=>{\n                editor.execute('highlight', {\n                    value\n                });\n                editor.editing.view.focus();\n            });\n            // Add additional behavior for buttonView.\n            decorateButton(buttonView);\n            return buttonView;\n        });\n    }\n    /**\n\t * Creates the split button dropdown UI from the provided highlight options.\n\t */ _addDropdown(options) {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const startingHighlighter = options[0];\n        const optionsMap = options.reduce((retVal, option)=>{\n            retVal[option.model] = option;\n            return retVal;\n        }, {});\n        componentFactory.add('highlight', (locale)=>{\n            const command = editor.commands.get('highlight');\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            splitButtonView.set({\n                label: t('Highlight'),\n                tooltip: true,\n                // Holds last executed highlighter.\n                lastExecuted: startingHighlighter.model,\n                // Holds current highlighter to execute (might be different then last used).\n                commandValue: startingHighlighter.model,\n                isToggleable: true\n            });\n            // Dropdown button changes to selection (command.value):\n            // - If selection is in highlight it get active highlight appearance (icon, color) and is activated.\n            // - Otherwise it gets appearance (icon, color) of last executed highlight.\n            splitButtonView.bind('icon').to(command, 'value', (value)=>getIconForType(getActiveOption(value, 'type')));\n            splitButtonView.bind('color').to(command, 'value', (value)=>getActiveOption(value, 'color'));\n            splitButtonView.bind('commandValue').to(command, 'value', (value)=>getActiveOption(value, 'model'));\n            splitButtonView.bind('isOn').to(command, 'value', (value)=>!!value);\n            splitButtonView.delegate('execute').to(dropdownView);\n            // Create buttons array.\n            const buttonsCreator = ()=>{\n                const buttons = options.map((option)=>{\n                    // Get existing highlighter button.\n                    const buttonView = componentFactory.create('highlight:' + option.model);\n                    // Update lastExecutedHighlight on execute.\n                    this.listenTo(buttonView, 'execute', ()=>{\n                        dropdownView.buttonView.set({\n                            lastExecuted: option.model\n                        });\n                    });\n                    return buttonView;\n                });\n                // Add separator and eraser buttons to dropdown.\n                buttons.push(new ToolbarSeparatorView());\n                buttons.push(componentFactory.create('removeHighlight'));\n                return buttons;\n            };\n            // Make toolbar button enabled when any button in dropdown is enabled before adding separator and eraser.\n            dropdownView.bind('isEnabled').to(command, 'isEnabled');\n            addToolbarToDropdown(dropdownView, buttonsCreator, {\n                enableActiveItemFocusOnDropdownOpen: true,\n                ariaLabel: t('Text highlight toolbar')\n            });\n            bindToolbarIconStyleToActiveColor(dropdownView);\n            // Execute current action from dropdown's split button action button.\n            splitButtonView.on('execute', ()=>{\n                editor.execute('highlight', {\n                    value: splitButtonView.commandValue\n                });\n            });\n            // Focus the editable after executing the command.\n            // It overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            this.listenTo(dropdownView, 'execute', ()=>{\n                editor.editing.view.focus();\n            });\n            /**\n\t\t\t * Returns active highlighter option depending on current command value.\n\t\t\t * If current is not set or it is the same as last execute this method will return the option key (like icon or color)\n\t\t\t * of last executed highlighter. Otherwise it will return option key for current one.\n\t\t\t */ function getActiveOption(current, key) {\n                const whichHighlighter = !current || current === splitButtonView.lastExecuted ? splitButtonView.lastExecuted : current;\n                return optionsMap[whichHighlighter][key];\n            }\n            return dropdownView;\n        });\n    }\n    /**\n\t * Creates the menu bar button for highlight including submenu with available options.\n\t */ _addMenuBarButton(options) {\n        const editor = this.editor;\n        const t = editor.t;\n        const command = editor.commands.get('highlight');\n        editor.ui.componentFactory.add('menuBar:highlight', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                label: t('Highlight'),\n                icon: getIconForType('marker')\n            });\n            menuView.bind('isEnabled').to(command);\n            menuView.buttonView.iconView.fillColor = 'transparent';\n            const listView = new MenuBarMenuListView(locale);\n            for (const option of options){\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.set({\n                    label: option.title,\n                    icon: getIconForType(option.type),\n                    role: 'menuitemradio',\n                    isToggleable: true\n                });\n                buttonView.iconView.fillColor = option.color;\n                buttonView.delegate('execute').to(menuView);\n                buttonView.bind('isOn').to(command, 'value', (value)=>value === option.model);\n                buttonView.on('execute', ()=>{\n                    editor.execute('highlight', {\n                        value: option.model\n                    });\n                    editor.editing.view.focus();\n                });\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            // Add remove highlight button\n            listView.items.add(new ListSeparatorView(locale));\n            const listItemView = new MenuBarMenuListItemView(locale, menuView);\n            const buttonView = new MenuBarMenuListItemButtonView(locale);\n            buttonView.set({\n                label: t('Remove highlight'),\n                icon: icons.eraser\n            });\n            buttonView.delegate('execute').to(menuView);\n            buttonView.on('execute', ()=>{\n                editor.execute('highlight', {\n                    value: null\n                });\n                editor.editing.view.focus();\n            });\n            listItemView.children.add(buttonView);\n            listView.items.add(listItemView);\n            menuView.panelView.children.add(listView);\n            return menuView;\n        });\n    }\n}\n/**\n * Extends split button icon style to reflect last used button style.\n */ function bindToolbarIconStyleToActiveColor(dropdownView) {\n    const actionView = dropdownView.buttonView.actionView;\n    actionView.iconView.bind('fillColor').to(dropdownView.buttonView, 'color');\n}\n/**\n * Returns icon for given highlighter type.\n */ function getIconForType(type) {\n    return type === 'marker' ? markerIcon : penIcon;\n}\n\n/**\n * The highlight plugin.\n *\n * For a detailed overview, check the {@glink features/highlight Highlight feature} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:highlight/highlightediting~HighlightEditing} and\n * {@link module:highlight/highlightui~HighlightUI} plugins.\n */ class Highlight extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            HighlightEditing,\n            HighlightUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Highlight';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { Highlight, HighlightEditing, HighlightUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { findOptimalInsertionRange, toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The horizontal line command.\n *\n * The command is registered by {@link module:horizontal-line/horizontallineediting~HorizontalLineEditing} as `'horizontalLine'`.\n *\n * To insert a horizontal line at the current selection, execute the command:\n *\n * ```ts\n * editor.execute( 'horizontalLine' );\n * ```\n */ class HorizontalLineCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        this.isEnabled = isHorizontalLineAllowedInParent(selection, schema, model);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        model.change((writer)=>{\n            const horizontalElement = writer.createElement('horizontalLine');\n            model.insertObject(horizontalElement, null, null, {\n                setSelection: 'after'\n            });\n        });\n    }\n}\n/**\n * Checks if a horizontal line is allowed by the schema in the optimal insertion parent.\n *\n * @param model Model instance.\n */ function isHorizontalLineAllowedInParent(selection, schema, model) {\n    const parent = getInsertHorizontalLineParent(selection, model);\n    return schema.checkChild(parent, 'horizontalLine');\n}\n/**\n * Returns a node that will be used to insert a horizontal line with `model.insertContent` to check if the horizontal line can be\n * placed there.\n *\n * @param model Model instance.\n */ function getInsertHorizontalLineParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    const parent = insertionRange.start.parent;\n    if (parent.isEmpty && !parent.is('element', '$root')) {\n        return parent.parent;\n    }\n    return parent;\n}\n\n/**\n * The horizontal line editing feature.\n */ class HorizontalLineEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HorizontalLineEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        schema.register('horizontalLine', {\n            inheritAllFrom: '$blockObject'\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'horizontalLine',\n            view: (modelElement, { writer })=>{\n                return writer.createEmptyElement('hr');\n            }\n        });\n        conversion.for('editingDowncast').elementToStructure({\n            model: 'horizontalLine',\n            view: (modelElement, { writer })=>{\n                const label = t('Horizontal line');\n                const viewWrapper = writer.createContainerElement('div', null, writer.createEmptyElement('hr'));\n                writer.addClass('ck-horizontal-line', viewWrapper);\n                writer.setCustomProperty('hr', true, viewWrapper);\n                return toHorizontalLineWidget(viewWrapper, writer, label);\n            }\n        });\n        conversion.for('upcast').elementToElement({\n            view: 'hr',\n            model: 'horizontalLine'\n        });\n        editor.commands.add('horizontalLine', new HorizontalLineCommand(editor));\n    }\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a horizontal line widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to\n *   recognize the horizontal line widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n */ function toHorizontalLineWidget(viewElement, writer, label) {\n    writer.setCustomProperty('horizontalLine', true, viewElement);\n    return toWidget(viewElement, writer, {\n        label\n    });\n}\n\n/**\n * The horizontal line UI plugin.\n */ class HorizontalLineUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HorizontalLineUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Add the `horizontalLine` button to feature components.\n        editor.ui.componentFactory.add('horizontalLine', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:horizontalLine', ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Creates a button for horizontal line command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('horizontalLine');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Horizontal line'),\n            icon: icons.horizontalLine\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('horizontalLine');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The horizontal line feature.\n *\n * It provides the possibility to insert a horizontal line into the rich-text editor.\n *\n * For a detailed overview, check the {@glink features/horizontal-line Horizontal line feature} documentation.\n */ class HorizontalLine extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            HorizontalLineEditing,\n            HorizontalLineUI,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HorizontalLine';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { HorizontalLine, HorizontalLineEditing, HorizontalLineUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { findOptimalInsertionRange, toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { logWarning, createElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * The insert HTML embed element command.\n *\n * The command is registered by {@link module:html-embed/htmlembedediting~HtmlEmbedEditing} as `'htmlEmbed'`.\n *\n * To insert an empty HTML embed element at the current selection, execute the command:\n *\n * ```ts\n * editor.execute( 'htmlEmbed' );\n * ```\n *\n * You can specify the initial content of a new HTML embed in the argument:\n *\n * ```ts\n * editor.execute( 'htmlEmbed', '<b>Initial content.</b>' );\n * ```\n *\n * To update the content of the HTML embed, select it in the model and pass the content in the argument:\n *\n * ```ts\n * editor.execute( 'htmlEmbed', '<b>New content of an existing embed.</b>' );\n * ```\n */ class HtmlEmbedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        const selectedRawHtmlElement = getSelectedRawHtmlModelWidget(selection);\n        this.isEnabled = isHtmlEmbedAllowedInParent(selection, schema, model);\n        this.value = selectedRawHtmlElement ? selectedRawHtmlElement.getAttribute('value') || '' : null;\n    }\n    /**\n\t * Executes the command, which either:\n\t *\n\t * * creates and inserts a new HTML embed element if none was selected,\n\t * * updates the content of the HTML embed if one was selected.\n\t *\n\t * @fires execute\n\t * @param value When passed, the value (content) will be set on a new embed or a selected one.\n\t */ execute(value) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.change((writer)=>{\n            let htmlEmbedElement;\n            // If the command has a non-null value, there must be some HTML embed selected in the model.\n            if (this.value !== null) {\n                htmlEmbedElement = getSelectedRawHtmlModelWidget(selection);\n            } else {\n                htmlEmbedElement = writer.createElement('rawHtml');\n                model.insertObject(htmlEmbedElement, null, null, {\n                    setSelection: 'on'\n                });\n            }\n            writer.setAttribute('value', value, htmlEmbedElement);\n        });\n    }\n}\n/**\n * Checks if an HTML embed is allowed by the schema in the optimal insertion parent.\n */ function isHtmlEmbedAllowedInParent(selection, schema, model) {\n    const parent = getInsertHtmlEmbedParent(selection, model);\n    return schema.checkChild(parent, 'rawHtml');\n}\n/**\n * Returns a node that will be used to insert a html embed with `model.insertContent` to check if a html embed element can be placed there.\n */ function getInsertHtmlEmbedParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    const parent = insertionRange.start.parent;\n    if (parent.isEmpty && !parent.is('rootElement')) {\n        return parent.parent;\n    }\n    return parent;\n}\n/**\n * Returns the selected HTML embed element in the model, if any.\n */ function getSelectedRawHtmlModelWidget(selection) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement && selectedElement.is('element', 'rawHtml')) {\n        return selectedElement;\n    }\n    return null;\n}\n\n/**\n * The HTML embed editing feature.\n */ class HtmlEmbedEditing extends Plugin {\n    /**\n\t * Keeps references to {@link module:ui/button/buttonview~ButtonView edit, save, and cancel} button instances created for\n\t * each widget so they can be destroyed if they are no longer in DOM after the editing view was re-rendered.\n\t */ _widgetButtonViewReferences = new Set();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlEmbedEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('htmlEmbed', {\n            showPreviews: false,\n            sanitizeHtml: (rawHtml)=>{\n                /**\n\t\t\t\t * When using the HTML embed feature with the `config.htmlEmbed.showPreviews` set to `true`, it is strongly recommended to\n\t\t\t\t * define a sanitize function that will clean up the input HTML in order to avoid XSS vulnerability.\n\t\t\t\t *\n\t\t\t\t * For a detailed overview, check the {@glink features/html/html-embed HTML embed feature} documentation.\n\t\t\t\t *\n\t\t\t\t * @error html-embed-provide-sanitize-function\n\t\t\t\t */ logWarning('html-embed-provide-sanitize-function');\n                return {\n                    html: rawHtml,\n                    hasChanged: false\n                };\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        schema.register('rawHtml', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: [\n                'value'\n            ]\n        });\n        editor.commands.add('htmlEmbed', new HtmlEmbedCommand(editor));\n        this._setupConversion();\n    }\n    /**\n\t * Prepares converters for the feature.\n\t */ _setupConversion() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const widgetButtonViewReferences = this._widgetButtonViewReferences;\n        const htmlEmbedConfig = editor.config.get('htmlEmbed');\n        // Destroy UI buttons created for widgets that have been removed from the view document (e.g. in the previous conversion).\n        // This prevents unexpected memory leaks from UI views.\n        this.editor.editing.view.on('render', ()=>{\n            for (const buttonView of widgetButtonViewReferences){\n                if (buttonView.element && buttonView.element.isConnected) {\n                    return;\n                }\n                buttonView.destroy();\n                widgetButtonViewReferences.delete(buttonView);\n            }\n        }, {\n            priority: 'lowest'\n        });\n        // Register div.raw-html-embed as a raw content element so all of it's content will be provided\n        // as a view element's custom property while data upcasting.\n        editor.data.registerRawContentMatcher({\n            name: 'div',\n            classes: 'raw-html-embed'\n        });\n        editor.conversion.for('upcast').elementToElement({\n            view: {\n                name: 'div',\n                classes: 'raw-html-embed'\n            },\n            model: (viewElement, { writer })=>{\n                // The div.raw-html-embed is registered as a raw content element,\n                // so all it's content is available in a custom property.\n                return writer.createElement('rawHtml', {\n                    value: viewElement.getCustomProperty('$rawContent')\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').elementToElement({\n            model: 'rawHtml',\n            view: (modelElement, { writer })=>{\n                return writer.createRawElement('div', {\n                    class: 'raw-html-embed'\n                }, function(domElement) {\n                    domElement.innerHTML = modelElement.getAttribute('value') || '';\n                });\n            }\n        });\n        editor.conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: 'rawHtml',\n                attributes: [\n                    'value'\n                ]\n            },\n            view: (modelElement, { writer })=>{\n                let domContentWrapper;\n                let state;\n                let props;\n                const viewContentWrapper = writer.createRawElement('div', {\n                    class: 'raw-html-embed__content-wrapper'\n                }, function(domElement) {\n                    domContentWrapper = domElement;\n                    renderContent({\n                        editor,\n                        domElement,\n                        state,\n                        props\n                    });\n                    // Since there is a `data-cke-ignore-events` attribute set on the wrapper element in the editable mode,\n                    // the explicit `mousedown` handler on the `capture` phase is needed to move the selection onto the whole\n                    // HTML embed widget.\n                    domContentWrapper.addEventListener('mousedown', ()=>{\n                        if (state.isEditable) {\n                            const model = editor.model;\n                            const selectedElement = model.document.selection.getSelectedElement();\n                            // Move the selection onto the whole HTML embed widget if it's currently not selected.\n                            if (selectedElement !== modelElement) {\n                                model.change((writer)=>writer.setSelection(modelElement, 'on'));\n                            }\n                        }\n                    }, true);\n                });\n                // API exposed on each raw HTML embed widget so other features can control a particular widget.\n                const rawHtmlApi = {\n                    makeEditable () {\n                        state = Object.assign({}, state, {\n                            isEditable: true\n                        });\n                        renderContent({\n                            domElement: domContentWrapper,\n                            editor,\n                            state,\n                            props\n                        });\n                        view.change((writer)=>{\n                            writer.setAttribute('data-cke-ignore-events', 'true', viewContentWrapper);\n                        });\n                        // This could be potentially pulled to a separate method called focusTextarea().\n                        domContentWrapper.querySelector('textarea').focus();\n                    },\n                    save (newValue) {\n                        // If the value didn't change, we just cancel. If it changed,\n                        // it's enough to update the model – the entire widget will be reconverted.\n                        if (newValue !== state.getRawHtmlValue()) {\n                            editor.execute('htmlEmbed', newValue);\n                            editor.editing.view.focus();\n                        } else {\n                            this.cancel();\n                        }\n                    },\n                    cancel () {\n                        state = Object.assign({}, state, {\n                            isEditable: false\n                        });\n                        renderContent({\n                            domElement: domContentWrapper,\n                            editor,\n                            state,\n                            props\n                        });\n                        editor.editing.view.focus();\n                        view.change((writer)=>{\n                            writer.removeAttribute('data-cke-ignore-events', viewContentWrapper);\n                        });\n                    }\n                };\n                state = {\n                    showPreviews: htmlEmbedConfig.showPreviews,\n                    isEditable: false,\n                    getRawHtmlValue: ()=>modelElement.getAttribute('value') || ''\n                };\n                props = {\n                    sanitizeHtml: htmlEmbedConfig.sanitizeHtml,\n                    textareaPlaceholder: t('Paste raw HTML here...'),\n                    onEditClick () {\n                        rawHtmlApi.makeEditable();\n                    },\n                    onSaveClick (newValue) {\n                        rawHtmlApi.save(newValue);\n                    },\n                    onCancelClick () {\n                        rawHtmlApi.cancel();\n                    }\n                };\n                const viewContainer = writer.createContainerElement('div', {\n                    class: 'raw-html-embed',\n                    'data-html-embed-label': t('HTML snippet'),\n                    dir: editor.locale.uiLanguageDirection\n                }, viewContentWrapper);\n                writer.setCustomProperty('rawHtmlApi', rawHtmlApi, viewContainer);\n                writer.setCustomProperty('rawHtml', true, viewContainer);\n                return toWidget(viewContainer, writer, {\n                    label: t('HTML snippet'),\n                    hasSelectionHandle: true\n                });\n            }\n        });\n        function renderContent({ editor, domElement, state, props }) {\n            // Remove all children;\n            domElement.textContent = '';\n            const domDocument = domElement.ownerDocument;\n            let domTextarea;\n            if (state.isEditable) {\n                const textareaProps = {\n                    isDisabled: false,\n                    placeholder: props.textareaPlaceholder\n                };\n                domTextarea = createDomTextarea({\n                    domDocument,\n                    state,\n                    props: textareaProps\n                });\n                domElement.append(domTextarea);\n            } else if (state.showPreviews) {\n                const previewContainerProps = {\n                    sanitizeHtml: props.sanitizeHtml\n                };\n                domElement.append(createPreviewContainer({\n                    domDocument,\n                    state,\n                    props: previewContainerProps,\n                    editor\n                }));\n            } else {\n                const textareaProps = {\n                    isDisabled: true,\n                    placeholder: props.textareaPlaceholder\n                };\n                domElement.append(createDomTextarea({\n                    domDocument,\n                    state,\n                    props: textareaProps\n                }));\n            }\n            const buttonsWrapperProps = {\n                onEditClick: props.onEditClick,\n                onSaveClick: ()=>{\n                    props.onSaveClick(domTextarea.value);\n                },\n                onCancelClick: props.onCancelClick\n            };\n            domElement.prepend(createDomButtonsWrapper({\n                editor,\n                domDocument,\n                state,\n                props: buttonsWrapperProps\n            }));\n        }\n        function createDomButtonsWrapper({ editor, domDocument, state, props }) {\n            const domButtonsWrapper = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__buttons-wrapper'\n            });\n            if (state.isEditable) {\n                const saveButtonView = createUIButton(editor, 'save', props.onSaveClick);\n                const cancelButtonView = createUIButton(editor, 'cancel', props.onCancelClick);\n                domButtonsWrapper.append(saveButtonView.element, cancelButtonView.element);\n                widgetButtonViewReferences.add(saveButtonView).add(cancelButtonView);\n            } else {\n                const editButtonView = createUIButton(editor, 'edit', props.onEditClick);\n                domButtonsWrapper.append(editButtonView.element);\n                widgetButtonViewReferences.add(editButtonView);\n            }\n            return domButtonsWrapper;\n        }\n        function createDomTextarea({ domDocument, state, props }) {\n            const domTextarea = createElement(domDocument, 'textarea', {\n                placeholder: props.placeholder,\n                class: 'ck ck-reset ck-input ck-input-text raw-html-embed__source'\n            });\n            domTextarea.disabled = props.isDisabled;\n            domTextarea.value = state.getRawHtmlValue();\n            return domTextarea;\n        }\n        function createPreviewContainer({ editor, domDocument, state, props }) {\n            const sanitizedOutput = props.sanitizeHtml(state.getRawHtmlValue());\n            const placeholderText = state.getRawHtmlValue().length > 0 ? t('No preview available') : t('Empty snippet content');\n            const domPreviewPlaceholder = createElement(domDocument, 'div', {\n                class: 'ck ck-reset_all raw-html-embed__preview-placeholder'\n            }, placeholderText);\n            const domPreviewContent = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__preview-content',\n                dir: editor.locale.contentLanguageDirection\n            });\n            // Creating a contextual document fragment allows executing scripts when inserting into the preview element.\n            // See: #8326.\n            const domRange = domDocument.createRange();\n            const domDocumentFragment = domRange.createContextualFragment(sanitizedOutput.html);\n            domPreviewContent.appendChild(domDocumentFragment);\n            const domPreviewContainer = createElement(domDocument, 'div', {\n                class: 'raw-html-embed__preview'\n            }, [\n                domPreviewPlaceholder,\n                domPreviewContent\n            ]);\n            return domPreviewContainer;\n        }\n    }\n}\n/**\n * Returns a UI button view that can be used in conversion.\n */ function createUIButton(editor, type, onClick) {\n    const { t } = editor.locale;\n    const buttonView = new ButtonView(editor.locale);\n    const command = editor.commands.get('htmlEmbed');\n    buttonView.set({\n        class: `raw-html-embed__${type}-button`,\n        icon: icons.pencil,\n        tooltip: true,\n        tooltipPosition: editor.locale.uiLanguageDirection === 'rtl' ? 'e' : 'w'\n    });\n    buttonView.render();\n    if (type === 'edit') {\n        buttonView.set({\n            icon: icons.pencil,\n            label: t('Edit source')\n        });\n        buttonView.bind('isEnabled').to(command);\n    } else if (type === 'save') {\n        buttonView.set({\n            icon: icons.check,\n            label: t('Save changes')\n        });\n        buttonView.bind('isEnabled').to(command);\n    } else {\n        buttonView.set({\n            icon: icons.cancel,\n            label: t('Cancel')\n        });\n    }\n    buttonView.on('execute', onClick);\n    return buttonView;\n}\n\n/**\n * The HTML embed UI plugin.\n */ class HtmlEmbedUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlEmbedUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = locale.t;\n        // Add the `htmlEmbed` button to feature components.\n        editor.ui.componentFactory.add('htmlEmbed', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true,\n                label: t('Insert HTML')\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:htmlEmbed', ()=>{\n            const buttonView = this._createButton(MenuBarMenuListItemButtonView);\n            buttonView.set({\n                label: t('HTML snippet')\n            });\n            return buttonView;\n        });\n    }\n    /**\n\t * Creates a button for html embed command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const command = editor.commands.get('htmlEmbed');\n        const view = new ButtonClass(editor.locale);\n        view.set({\n            icon: icons.html\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('htmlEmbed');\n            editor.editing.view.focus();\n            const rawHtmlApi = editor.editing.view.document.selection.getSelectedElement().getCustomProperty('rawHtmlApi');\n            rawHtmlApi.makeEditable();\n        });\n        return view;\n    }\n}\n\n/**\n * The HTML embed feature.\n *\n * It allows inserting HTML snippets directly into the editor.\n *\n * For a detailed overview, check the {@glink features/html/html-embed HTML embed feature} documentation.\n */ class HtmlEmbed extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            HtmlEmbedEditing,\n            HtmlEmbedUI,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlEmbed';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { HtmlEmbed, HtmlEmbedEditing, HtmlEmbedUI };\n//# sourceMappingURL=index.js.map\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nexport default arrayReduce;\n","import basePropertyOf from './_basePropertyOf.js';\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 's'\n};\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\nexport default deburrLetter;\n","import deburrLetter from './_deburrLetter.js';\nimport toString from './toString.js';\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n\n/** Used to compose unicode capture groups. */\nvar rsCombo = '[' + rsComboRange + ']';\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\nexport default deburr;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nexport default asciiWords;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nexport default hasUnicodeWord;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nexport default unicodeWords;\n","import asciiWords from './_asciiWords.js';\nimport hasUnicodeWord from './_hasUnicodeWord.js';\nimport toString from './toString.js';\nimport unicodeWords from './_unicodeWords.js';\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nexport default words;\n","import arrayReduce from './_arrayReduce.js';\nimport deburr from './deburr.js';\nimport words from './words.js';\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nexport default createCompounder;\n","import baseSlice from './_baseSlice.js';\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nexport default castSlice;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nexport default asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nexport default unicodeToArray;\n","import asciiToArray from './_asciiToArray.js';\nimport hasUnicode from './_hasUnicode.js';\nimport unicodeToArray from './_unicodeToArray.js';\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nexport default stringToArray;\n","import castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nexport default createCaseFirst;\n","import createCaseFirst from './_createCaseFirst.js';\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nexport default upperFirst;\n","import createCompounder from './_createCompounder.js';\nimport upperFirst from './upperFirst.js';\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nexport default startCase;\n","import baseMerge from './_baseMerge.js';\nimport createAssigner from './_createAssigner.js';\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nexport default mergeWith;\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toArray, priorities, CKEditorError, isValidAttributeName, uid } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { Matcher, StylesMap, UpcastWriter, HtmlDataProcessor } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { cloneDeep, startCase, mergeWith, isPlainObject, isEqual } from 'lodash-es';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\n\n/**\n* Helper function for the downcast converter. Updates attributes on the given view element.\n*\n* @param writer The view writer.\n* @param oldViewAttributes The previous GHS attribute value.\n* @param newViewAttributes The current GHS attribute value.\n* @param viewElement The view element to update.\n*/ function updateViewAttributes(writer, oldViewAttributes, newViewAttributes, viewElement) {\n    if (oldViewAttributes) {\n        removeViewAttributes(writer, oldViewAttributes, viewElement);\n    }\n    if (newViewAttributes) {\n        setViewAttributes(writer, newViewAttributes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Sets attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */ function setViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key, value] of Object.entries(viewAttributes.attributes)){\n            writer.setAttribute(key, value, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        writer.setStyle(viewAttributes.styles, viewElement);\n    }\n    if (viewAttributes.classes) {\n        writer.addClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Removes attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */ function removeViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key] of Object.entries(viewAttributes.attributes)){\n            writer.removeAttribute(key, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        for (const style of Object.keys(viewAttributes.styles)){\n            writer.removeStyle(style, viewElement);\n        }\n    }\n    if (viewAttributes.classes) {\n        writer.removeClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n* Merges view element attribute objects.\n*/ function mergeViewElementAttributes(target, source) {\n    const result = cloneDeep(target);\n    let key = 'attributes';\n    for(key in source){\n        // Merge classes.\n        if (key == 'classes') {\n            result[key] = Array.from(new Set([\n                ...target[key] || [],\n                ...source[key]\n            ]));\n        } else {\n            result[key] = {\n                ...target[key],\n                ...source[key]\n            };\n        }\n    }\n    return result;\n}\nfunction modifyGhsAttribute(writer, item, ghsAttributeName, subject, callback) {\n    const oldValue = item.getAttribute(ghsAttributeName);\n    const newValue = {};\n    for (const kind of [\n        'attributes',\n        'styles',\n        'classes'\n    ]){\n        // Properties other than `subject` should be assigned from `oldValue`.\n        if (kind != subject) {\n            if (oldValue && oldValue[kind]) {\n                newValue[kind] = oldValue[kind];\n            }\n            continue;\n        }\n        // `callback` should be applied on property [`subject`].\n        if (subject == 'classes') {\n            const values = new Set(oldValue && oldValue.classes || []);\n            callback(values);\n            if (values.size) {\n                newValue[kind] = Array.from(values);\n            }\n            continue;\n        }\n        const values = new Map(Object.entries(oldValue && oldValue[kind] || {}));\n        callback(values);\n        if (values.size) {\n            newValue[kind] = Object.fromEntries(values);\n        }\n    }\n    if (Object.keys(newValue).length) {\n        if (item.is('documentSelection')) {\n            writer.setSelectionAttribute(ghsAttributeName, newValue);\n        } else {\n            writer.setAttribute(ghsAttributeName, newValue, item);\n        }\n    } else if (oldValue) {\n        if (item.is('documentSelection')) {\n            writer.removeSelectionAttribute(ghsAttributeName);\n        } else {\n            writer.removeAttribute(ghsAttributeName, item);\n        }\n    }\n}\n/**\n * Transforms passed string to PascalCase format. Examples:\n * * `div` => `Div`\n * * `h1` => `H1`\n * * `table` => `Table`\n */ function toPascalCase(data) {\n    return startCase(data).replace(/ /g, '');\n}\n/**\n * Returns the attribute name of the model element that holds raw HTML attributes.\n */ function getHtmlAttributeName(viewElementName) {\n    return `html${toPascalCase(viewElementName)}Attributes`;\n}\n\n/**\n * View-to-model conversion helper for object elements.\n *\n * Preserves object element content in `htmlContent` attribute.\n *\n * @returns Returns a conversion callback.\n*/ function viewToModelObjectConverter({ model: modelName }) {\n    return (viewElement, conversionApi)=>{\n        // Let's keep element HTML and its attributes, so we can rebuild element in downcast conversions.\n        return conversionApi.writer.createElement(modelName, {\n            htmlContent: viewElement.getCustomProperty('$rawContent')\n        });\n    };\n}\n/**\n * Conversion helper converting an object element to an HTML object widget.\n *\n * @returns Returns a conversion callback.\n*/ function toObjectWidgetConverter(editor, { view: viewName, isInline }) {\n    const t = editor.t;\n    return (modelElement, { writer })=>{\n        const widgetLabel = t('HTML object');\n        const viewElement = createObjectView(viewName, modelElement, writer);\n        const viewAttributes = modelElement.getAttribute(getHtmlAttributeName(viewName));\n        writer.addClass('html-object-embed__content', viewElement);\n        if (viewAttributes) {\n            setViewAttributes(writer, viewAttributes, viewElement);\n        }\n        // Widget cannot be a raw element because the widget system would not be able\n        // to add its UI to it. Thus, we need separate view container.\n        const viewContainer = writer.createContainerElement(isInline ? 'span' : 'div', {\n            class: 'html-object-embed',\n            'data-html-object-embed-label': widgetLabel\n        }, viewElement);\n        return toWidget(viewContainer, writer, {\n            label: widgetLabel\n        });\n    };\n}\n/**\n* Creates object view element from the given model element.\n*/ function createObjectView(viewName, modelElement, writer) {\n    return writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n        domConverter.setContentOf(domElement, modelElement.getAttribute('htmlContent'));\n    });\n}\n/**\n * View-to-attribute conversion helper preserving inline element attributes on `$text`.\n *\n * @returns Returns a conversion callback.\n*/ function viewToAttributeInlineConverter({ view: viewName, model: attributeKey, allowEmpty }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            let viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            // Do not apply the attribute if the element itself is already consumed and there are no view attributes to store.\n            if (!viewAttributes && !conversionApi.consumable.test(data.viewItem, {\n                name: true\n            })) {\n                return;\n            }\n            // Otherwise, we might need to convert it to an empty object just to preserve element itself,\n            // for example `<cite>` => <$text htmlCite=\"{}\">.\n            viewAttributes = viewAttributes || {};\n            // Consume the element itself if it wasn't consumed by any other converter.\n            conversionApi.consumable.consume(data.viewItem, {\n                name: true\n            });\n            // Since we are converting to attribute we need a range on which we will set the attribute.\n            // If the range is not created yet, we will create it.\n            if (!data.modelRange) {\n                data = Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n            }\n            // Convert empty inline element if allowed and has any attributes.\n            if (allowEmpty && data.modelRange.isCollapsed && Object.keys(viewAttributes).length) {\n                const modelElement = conversionApi.writer.createElement('htmlEmptyElement');\n                if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n                    return;\n                }\n                const parts = conversionApi.getSplitParts(modelElement);\n                data.modelRange = conversionApi.writer.createRange(data.modelRange.start, conversionApi.writer.createPositionAfter(parts[parts.length - 1]));\n                conversionApi.updateConversionResult(modelElement, data);\n                setAttributeOnItem(modelElement, viewAttributes, conversionApi);\n                return;\n            }\n            // Set attribute on each item in range according to the schema.\n            for (const node of data.modelRange.getItems()){\n                setAttributeOnItem(node, viewAttributes, conversionApi);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n    function setAttributeOnItem(node, viewAttributes, conversionApi) {\n        if (conversionApi.schema.checkAttribute(node, attributeKey)) {\n            // Node's children are converted recursively, so node can already include model attribute.\n            // We want to extend it, not replace.\n            const nodeAttributes = node.getAttribute(attributeKey);\n            const attributesToAdd = mergeViewElementAttributes(viewAttributes, nodeAttributes || {});\n            conversionApi.writer.setAttribute(attributeKey, attributesToAdd, node);\n        }\n    }\n}\n/**\n * Conversion helper converting an empty inline model element to an HTML element or widget.\n */ function emptyInlineModelElementToViewConverter({ model: attributeKey, view: viewName }, asWidget) {\n    return (item, { writer, consumable })=>{\n        if (!item.hasAttribute(attributeKey)) {\n            return null;\n        }\n        const viewElement = writer.createContainerElement(viewName);\n        const attributeValue = item.getAttribute(attributeKey);\n        consumable.consume(item, `attribute:${attributeKey}`);\n        setViewAttributes(writer, attributeValue, viewElement);\n        viewElement.getFillerOffset = ()=>null;\n        return asWidget ? toWidget(viewElement, writer) : viewElement;\n    };\n}\n/**\n * Attribute-to-view conversion helper applying attributes to view element preserved on `$text`.\n *\n * @returns Returns a conversion callback.\n*/ function attributeToViewInlineConverter({ priority, view: viewName }) {\n    return (attributeValue, conversionApi)=>{\n        if (!attributeValue) {\n            return;\n        }\n        const { writer } = conversionApi;\n        const viewElement = writer.createAttributeElement(viewName, null, {\n            priority\n        });\n        setViewAttributes(writer, attributeValue, viewElement);\n        return viewElement;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on block element.\n *\n * All matched attributes will be preserved on `html*Attributes` attribute.\n *\n * @returns Returns a conversion callback.\n*/ function viewToModelBlockAttributeConverter({ view: viewName }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            // Converting an attribute of an element that has not been converted to anything does not make sense\n            // because there will be nowhere to set that attribute on. At this stage, the element should've already\n            // been converted. A collapsed range can show up in to-do lists (<input>) or complex widgets (e.g. table).\n            // (https://github.com/ckeditor/ckeditor5/issues/11000).\n            if (!data.modelRange || data.modelRange.isCollapsed) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            if (!viewAttributes) {\n                return;\n            }\n            conversionApi.writer.setAttribute(getHtmlAttributeName(data.viewItem.name), viewAttributes, data.modelRange);\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes preserved in `html*Attributes` attribute\n * for block elements.\n *\n * @returns Returns a conversion callback.\n*/ function modelToViewBlockAttributeConverter({ view: viewName, model: modelName }) {\n    return (dispatcher)=>{\n        dispatcher.on(`attribute:${getHtmlAttributeName(viewName)}:${modelName}`, (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewWriter = conversionApi.writer;\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(viewWriter, attributeOldValue, attributeNewValue, viewElement);\n        });\n    };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module html-support/schemadefinitions\n */ // Skipped elements due to HTML deprecation:\n// * noframes (not sure if we should provide support for this element. CKE4 is not supporting frameset and frame,\n//   but it will unpack <frameset><noframes>foobar</noframes></frameset> to <noframes>foobar</noframes>, so there\n//   may be some content loss. Although using noframes as a standalone element seems invalid)\n// * keygen (this one is also empty)\n// * applet (support is limited mostly to old IE)\n// * basefont (this one is also empty)\n// * isindex (basically no support for modern browsers at all)\n//\n// Skipped elements due to lack empty element support:\n// * hr\n// * area\n// * br\n// * command\n// * map\n// * wbr\n// * colgroup -> col\n//\n// Skipped elements due to complexity:\n// * datalist with option elements used as a data source for input[list] element\n//\n// Skipped elements as they are handled as an object content:\n// * track\n// * source\n// * option\n// * param\n// * optgroup\n//\n// Skipped full page HTML elements:\n// * body\n// * html\n// * title\n// * head\n// * meta\n// * link\n// * etc...\n//\n// Skipped hidden elements:\n// noscript\nvar defaultConfig = {\n    block: [\n        // Existing features.\n        {\n            model: 'codeBlock',\n            view: 'pre'\n        },\n        {\n            model: 'paragraph',\n            view: 'p'\n        },\n        {\n            model: 'blockQuote',\n            view: 'blockquote'\n        },\n        {\n            model: 'listItem',\n            view: 'li'\n        },\n        {\n            model: 'pageBreak',\n            view: 'div'\n        },\n        {\n            model: 'rawHtml',\n            view: 'div'\n        },\n        {\n            model: 'table',\n            view: 'table'\n        },\n        {\n            model: 'tableRow',\n            view: 'tr'\n        },\n        {\n            model: 'tableCell',\n            view: 'td'\n        },\n        {\n            model: 'tableCell',\n            view: 'th'\n        },\n        {\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        },\n        {\n            model: 'tableColumn',\n            view: 'col'\n        },\n        {\n            model: 'caption',\n            view: 'caption'\n        },\n        {\n            model: 'caption',\n            view: 'figcaption'\n        },\n        {\n            model: 'imageBlock',\n            view: 'img'\n        },\n        {\n            model: 'imageInline',\n            view: 'img'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlP',\n            view: 'p',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlBlockquote',\n            view: 'blockquote',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        {\n            model: 'htmlTable',\n            view: 'table',\n            modelSchema: {\n                allowWhere: '$block',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlTbody',\n            view: 'tbody',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlThead',\n            view: 'thead',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTfoot',\n            view: 'tfoot',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCaption',\n            view: 'caption',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlColgroup',\n            view: 'colgroup',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: 'col',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCol',\n            view: 'col',\n            modelSchema: {\n                allowIn: 'htmlColgroup',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTr',\n            view: 'tr',\n            modelSchema: {\n                allowIn: [\n                    'htmlTable',\n                    'htmlThead',\n                    'htmlTbody'\n                ],\n                isLimit: true\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTd',\n            view: 'td',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTh',\n            view: 'th',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFigure',\n            view: 'figure',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlFigcaption',\n            view: 'figcaption',\n            modelSchema: {\n                allowIn: 'htmlFigure',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAddress',\n            view: 'address',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAside',\n            view: 'aside',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlMain',\n            view: 'main',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlDetails',\n            view: 'details',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSummary',\n            view: 'summary',\n            modelSchema: {\n                allowChildren: [\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6',\n                    '$text'\n                ],\n                allowIn: 'htmlDetails',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDiv',\n            view: 'div',\n            paragraphLikeModel: 'htmlDivParagraph',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFieldset',\n            view: 'fieldset',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include h1-h6.\n        {\n            model: 'htmlLegend',\n            view: 'legend',\n            modelSchema: {\n                allowIn: 'htmlFieldset',\n                allowChildren: '$text'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlHeader',\n            view: 'header',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFooter',\n            view: 'footer',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlForm',\n            view: 'form',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlHgroup',\n            view: 'hgroup',\n            modelSchema: {\n                allowIn: [\n                    '$root',\n                    '$container'\n                ],\n                allowChildren: [\n                    'paragraph',\n                    'htmlP',\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlH1',\n            view: 'h1',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH2',\n            view: 'h2',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH3',\n            view: 'h3',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH4',\n            view: 'h4',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH5',\n            view: 'h5',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH6',\n            view: 'h6',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: '$htmlList',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    '$htmlList',\n                    'htmlLi'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDir',\n            view: 'dir',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlMenu',\n            view: 'menu',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlUl',\n            view: 'ul',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlOl',\n            view: 'ol',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlLi',\n            view: 'li',\n            modelSchema: {\n                allowIn: '$htmlList',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlPre',\n            view: 'pre',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlArticle',\n            view: 'article',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSection',\n            view: 'section',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlNav',\n            view: 'nav',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDivDl',\n            view: 'div',\n            modelSchema: {\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd'\n                ],\n                allowIn: 'htmlDl'\n            }\n        },\n        {\n            model: 'htmlDl',\n            view: 'dl',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd',\n                    'htmlDivDl'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDt',\n            view: 'dt',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDd',\n            view: 'dd',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCenter',\n            view: 'center',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        }\n    ],\n    inline: [\n        // Existing features (attribute set on an existing model element).\n        {\n            model: 'htmlLiAttributes',\n            view: 'li',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlOlAttributes',\n            view: 'ol',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlUlAttributes',\n            view: 'ul',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTheadAttributes',\n            view: 'thead',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTbodyAttributes',\n            view: 'tbody',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'imageBlock'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlAcronym',\n            view: 'acronym',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTt',\n            view: 'tt',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlFont',\n            view: 'font',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTime',\n            view: 'time',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlVar',\n            view: 'var',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBig',\n            view: 'big',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSmall',\n            view: 'small',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSamp',\n            view: 'samp',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlQ',\n            view: 'q',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlOutput',\n            view: 'output',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlKbd',\n            view: 'kbd',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdi',\n            view: 'bdi',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdo',\n            view: 'bdo',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlAbbr',\n            view: 'abbr',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlA',\n            view: 'a',\n            priority: 5,\n            coupledAttribute: 'linkHref'\n        },\n        {\n            model: 'htmlStrong',\n            view: 'strong',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlB',\n            view: 'b',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlI',\n            view: 'i',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlEm',\n            view: 'em',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlS',\n            view: 's',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlDel',\n            view: 'del',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlIns',\n            view: 'ins',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlU',\n            view: 'u',\n            coupledAttribute: 'underline',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSub',\n            view: 'sub',\n            coupledAttribute: 'subscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSup',\n            view: 'sup',\n            coupledAttribute: 'superscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCode',\n            view: 'code',\n            coupledAttribute: 'code',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlMark',\n            view: 'mark',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSpan',\n            view: 'span',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCite',\n            view: 'cite',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlLabel',\n            view: 'label',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlDfn',\n            view: 'dfn',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // Objects.\n        {\n            model: 'htmlObject',\n            view: 'object',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlIframe',\n            view: 'iframe',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlInput',\n            view: 'input',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlButton',\n            view: 'button',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlTextarea',\n            view: 'textarea',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlSelect',\n            view: 'select',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlVideo',\n            view: 'video',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlEmbed',\n            view: 'embed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlOembed',\n            view: 'oembed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlAudio',\n            view: 'audio',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlImg',\n            view: 'img',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlCanvas',\n            view: 'canvas',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlMeter',\n            view: 'meter',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlProgress',\n            view: 'progress',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlScript',\n            view: 'script',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlStyle',\n            view: 'style',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlCustomElement',\n            view: '$customElement',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                allowAttributesOf: '$inlineObject',\n                isInline: true\n            }\n        }\n    ]\n};\n\n/**\n * Holds representation of the extended HTML document type definitions to be used by the\n * editor in HTML support.\n *\n * Data schema is represented by data schema definitions.\n *\n * To add new definition for block element,\n * use {@link module:html-support/dataschema~DataSchema#registerBlockElement} method:\n *\n * ```ts\n * dataSchema.registerBlockElement( {\n * \tview: 'section',\n * \tmodel: 'my-section',\n * \tmodelSchema: {\n * \t\tinheritAllFrom: '$block'\n * \t}\n * } );\n * ```\n *\n * To add new definition for inline element,\n * use {@link module:html-support/dataschema~DataSchema#registerInlineElement} method:\n *\n * ```\n * dataSchema.registerInlineElement( {\n * \tview: 'span',\n * \tmodel: 'my-span',\n * \tattributeProperties: {\n * \t\tcopyOnEnter: true\n * \t}\n * } );\n * ```\n */ class DataSchema extends Plugin {\n    /**\n\t * A map of registered data schema definitions.\n\t */ _definitions = [];\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataSchema';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        for (const definition of defaultConfig.block){\n            this.registerBlockElement(definition);\n        }\n        for (const definition of defaultConfig.inline){\n            this.registerInlineElement(definition);\n        }\n    }\n    /**\n\t * Add new data schema definition describing block element.\n\t */ registerBlockElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Add new data schema definition describing inline element.\n\t */ registerInlineElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Updates schema definition describing block element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendBlockElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Updates schema definition describing inline element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendInlineElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Returns all definitions matching the given view name.\n\t *\n\t * @param includeReferences Indicates if this method should also include definitions of referenced models.\n\t */ getDefinitionsForView(viewName, includeReferences = false) {\n        const definitions = new Set();\n        for (const definition of this._getMatchingViewDefinitions(viewName)){\n            if (includeReferences) {\n                for (const reference of this._getReferences(definition.model)){\n                    definitions.add(reference);\n                }\n            }\n            definitions.add(definition);\n        }\n        return definitions;\n    }\n    /**\n\t * Returns definitions matching the given model name.\n\t */ getDefinitionsForModel(modelName) {\n        return this._definitions.filter((definition)=>definition.model == modelName);\n    }\n    /**\n\t * Returns definitions matching the given view name.\n\t */ _getMatchingViewDefinitions(viewName) {\n        return this._definitions.filter((def)=>def.view && testViewName(viewName, def.view));\n    }\n    /**\n\t * Resolves all definition references registered for the given data schema definition.\n\t *\n\t * @param modelName Data schema model name.\n\t */ *_getReferences(modelName) {\n        const inheritProperties = [\n            'inheritAllFrom',\n            'inheritTypesFrom',\n            'allowWhere',\n            'allowContentOf',\n            'allowAttributesOf'\n        ];\n        const definitions = this._definitions.filter((definition)=>definition.model == modelName);\n        for (const { modelSchema } of definitions){\n            if (!modelSchema) {\n                continue;\n            }\n            for (const property of inheritProperties){\n                for (const referenceName of toArray(modelSchema[property] || [])){\n                    const definitions = this._definitions.filter((definition)=>definition.model == referenceName);\n                    for (const definition of definitions){\n                        if (referenceName !== modelName) {\n                            yield* this._getReferences(definition.model);\n                            yield definition;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n\t * Updates schema definition with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ _extendDefinition(definition) {\n        const currentDefinitions = Array.from(this._definitions.entries()).filter(([, currentDefinition])=>currentDefinition.model == definition.model);\n        if (currentDefinitions.length == 0) {\n            this._definitions.push(definition);\n            return;\n        }\n        for (const [idx, currentDefinition] of currentDefinitions){\n            this._definitions[idx] = mergeWith({}, currentDefinition, definition, (target, source)=>{\n                return Array.isArray(target) ? target.concat(source) : undefined;\n            });\n        }\n    }\n}\n/**\n * Test view name against the given pattern.\n */ function testViewName(pattern, viewName) {\n    if (typeof pattern === 'string') {\n        return pattern === viewName;\n    }\n    if (pattern instanceof RegExp) {\n        return pattern.test(viewName);\n    }\n    return false;\n}\n\n/**\n * Allows to validate elements and element attributes registered by {@link module:html-support/dataschema~DataSchema}.\n *\n * To enable registered element in the editor, use {@link module:html-support/datafilter~DataFilter#allowElement} method:\n *\n * ```ts\n * dataFilter.allowElement( 'section' );\n * ```\n *\n * You can also allow or disallow specific element attributes:\n *\n * ```ts\n * // Allow `data-foo` attribute on `section` element.\n * dataFilter.allowAttributes( {\n * \tname: 'section',\n * \tattributes: {\n * \t\t'data-foo': true\n * \t}\n * } );\n *\n * // Disallow `color` style attribute on 'section' element.\n * dataFilter.disallowAttributes( {\n * \tname: 'section',\n * \tstyles: {\n * \t\tcolor: /[\\s\\S]+/\n * \t}\n * } );\n * ```\n *\n * To apply the information about allowed and disallowed attributes in custom integration plugin,\n * use the {@link module:html-support/datafilter~DataFilter#processViewAttributes `processViewAttributes()`} method.\n */ class DataFilter extends Plugin {\n    /**\n\t * An instance of the {@link module:html-support/dataschema~DataSchema}.\n\t */ _dataSchema;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be allowed.\n\t */ _allowedAttributes;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be disallowed.\n\t */ _disallowedAttributes;\n    /**\n\t * Allowed element definitions by {@link module:html-support/datafilter~DataFilter#allowElement} method.\n\t*/ _allowedElements;\n    /**\n\t * Disallowed element names by {@link module:html-support/datafilter~DataFilter#disallowElement} method.\n\t */ _disallowedElements;\n    /**\n\t * Indicates if {@link module:engine/controller/datacontroller~DataController editor's data controller}\n\t * data has been already initialized.\n\t*/ _dataInitialized;\n    /**\n\t * Cached map of coupled attributes. Keys are the feature attributes names\n\t * and values are arrays with coupled GHS attributes names.\n\t */ _coupledAttributes;\n    constructor(editor){\n        super(editor);\n        this._dataSchema = editor.plugins.get('DataSchema');\n        this._allowedAttributes = new Matcher();\n        this._disallowedAttributes = new Matcher();\n        this._allowedElements = new Set();\n        this._disallowedElements = new Set();\n        this._dataInitialized = false;\n        this._coupledAttributes = null;\n        this._registerElementsAfterInit();\n        this._registerElementHandlers();\n        this._registerCoupledAttributesPostFixer();\n        this._registerAssociatedHtmlAttributesPostFixer();\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataFilter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Widget\n        ];\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be allowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes accepted in the editor.\n\t */ loadAllowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            this.allowElement(elementName);\n            rules.forEach((pattern)=>this.allowAttributes(pattern));\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be disallowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes rejected from the editor.\n\t */ loadDisallowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            // Disallow element itself if there is no other rules.\n            if (rules.length == 0) {\n                this.disallowElement(elementName);\n            } else {\n                rules.forEach((pattern)=>this.disallowAttributes(pattern));\n            }\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where when empty should be allowed.\n\t *\n\t * **Note**: It modifies DataSchema so must be loaded before registering filtering rules.\n\t *\n\t * @param config Configuration of elements that should be preserved even if empty.\n\t */ loadAllowedEmptyElementsConfig(config) {\n        for (const elementName of config){\n            this.allowEmptyElement(elementName);\n        }\n    }\n    /**\n\t * Allow the given element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            this._addAllowedElement(definition);\n            // Reset cached map to recalculate it on the next usage.\n            this._coupledAttributes = null;\n        }\n    }\n    /**\n\t * Disallow the given element in the editor context.\n\t *\n\t * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ disallowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, false)){\n            this._disallowedElements.add(definition.view);\n        }\n    }\n    /**\n\t * Allow the given empty element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: It modifies DataSchema so must be called before registering filtering rules.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowEmptyElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            if (definition.isInline) {\n                this._dataSchema.extendInlineElement({\n                    ...definition,\n                    allowEmpty: true\n                });\n            }\n        }\n    }\n    /**\n\t * Allow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be allowed.\n\t */ allowAttributes(config) {\n        this._allowedAttributes.add(config);\n    }\n    /**\n\t * Disallow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be disallowed.\n\t */ disallowAttributes(config) {\n        this._disallowedAttributes.add(config);\n    }\n    /**\n\t * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.\n\t *\n\t * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}\n\t * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.\n\t * It returns the allowed attributes that were found on the given view element for further processing by integration code.\n\t *\n\t * ```ts\n\t * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {\n\t * \t// Get rid of disallowed and extract all allowed attributes from a viewElement.\n\t * \tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\t * \t// Do something with them, i.e. store inside a model as a dictionary.\n\t * \tif ( viewAttributes ) {\n\t * \t\tconversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );\n\t * \t}\n\t * } );\n\t * ```\n\t *\n\t * @see module:engine/conversion/viewconsumable~ViewConsumable#consume\n\t *\n\t * @returns Object with following properties:\n\t * - attributes Set with matched attribute names.\n\t * - styles Set with matched style names.\n\t * - classes Set with matched class names.\n\t */ processViewAttributes(viewElement, conversionApi) {\n        const { consumable } = conversionApi;\n        // Make sure that the disabled attributes are handled before the allowed attributes are called.\n        // For example, for block images the <figure> converter triggers conversion for <img> first and then for other elements, i.e. <a>.\n        matchAndConsumeAttributes(viewElement, this._disallowedAttributes, consumable);\n        return prepareGHSAttribute(viewElement, matchAndConsumeAttributes(viewElement, this._allowedAttributes, consumable));\n    }\n    /**\n\t * Adds allowed element definition and fires registration event.\n\t */ _addAllowedElement(definition) {\n        if (this._allowedElements.has(definition)) {\n            return;\n        }\n        this._allowedElements.add(definition);\n        // For attribute based integrations (table figure, document lists, etc.) register related element definitions.\n        if ('appliesToBlock' in definition && typeof definition.appliesToBlock == 'string') {\n            for (const relatedDefinition of this._dataSchema.getDefinitionsForModel(definition.appliesToBlock)){\n                if (relatedDefinition.isBlock) {\n                    this._addAllowedElement(relatedDefinition);\n                }\n            }\n        }\n        // We need to wait for all features to be initialized before we can register\n        // element, so we can access existing features model schemas.\n        // If the data has not been initialized yet, _registerElementsAfterInit() method will take care of\n        // registering elements.\n        if (this._dataInitialized) {\n            // Defer registration to the next data pipeline data set so any disallow rules could be applied\n            // even if added after allow rule (disallowElement).\n            this.editor.data.once('set', ()=>{\n                this._fireRegisterEvent(definition);\n            }, {\n                // With the highest priority listener we are able to register elements right before\n                // running data conversion.\n                priority: priorities.highest + 1\n            });\n        }\n    }\n    /**\n\t * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method\n\t * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.\n\t*/ _registerElementsAfterInit() {\n        this.editor.data.on('init', ()=>{\n            this._dataInitialized = true;\n            for (const definition of this._allowedElements){\n                this._fireRegisterEvent(definition);\n            }\n        }, {\n            // With highest priority listener we are able to register elements right before\n            // running data conversion. Also:\n            // * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,\n            // as RTC is stopping event propagation.\n            // * Make sure no other features hook into this event before GHS because otherwise the\n            // downcast conversion (for these features) could run before GHS registered its converters\n            // (https://github.com/ckeditor/ckeditor5/issues/11356).\n            priority: priorities.highest + 1\n        });\n    }\n    /**\n\t * Registers default element handlers.\n\t */ _registerElementHandlers() {\n        this.on('register', (evt, definition)=>{\n            const schema = this.editor.model.schema;\n            // Object element should be only registered for new features.\n            // If the model schema is already registered, it should be handled by\n            // #_registerBlockElement() or #_registerObjectElement() attribute handlers.\n            if (definition.isObject && !schema.isRegistered(definition.model)) {\n                this._registerObjectElement(definition);\n            } else if (definition.isBlock) {\n                this._registerBlockElement(definition);\n            } else if (definition.isInline) {\n                this._registerInlineElement(definition);\n            } else {\n                /**\n\t\t\t\t * The definition cannot be handled by the data filter.\n\t\t\t\t *\n\t\t\t\t * Make sure that the registered definition is correct.\n\t\t\t\t *\n\t\t\t\t * @error data-filter-invalid-definition\n\t\t\t\t */ throw new CKEditorError('data-filter-invalid-definition', null, definition);\n            }\n            evt.stop();\n        }, {\n            priority: 'lowest'\n        });\n    }\n    /**\n\t * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes\n\t * are removed if a coupled feature attribute is removed.\n\t *\n\t * For example, consider following HTML:\n\t *\n\t * ```html\n\t * <a href=\"foo.html\" id=\"myId\">bar</a>\n\t * ```\n\t *\n\t * Which would be upcasted to following text node in the model:\n\t *\n\t * ```html\n\t * <$text linkHref=\"foo.html\" htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:\n\t *\n\t * ```html\n\t * <$text htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.\n\t * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).\n\t */ _registerCoupledAttributesPostFixer() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const change of changes){\n                // Handle only attribute removals.\n                if (change.type != 'attribute' || change.attributeNewValue !== null) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const attributeKeys = coupledAttributes.get(change.attributeKey);\n                if (!attributeKeys) {\n                    continue;\n                }\n                // Remove the coupled GHS attributes on the same range as the feature attribute was removed.\n                for (const { item } of change.range.getWalker()){\n                    for (const attributeKey of attributeKeys){\n                        if (item.hasAttribute(attributeKey)) {\n                            writer.removeAttribute(attributeKey, item);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n            return changed;\n        });\n        this.listenTo(selection, 'change:attribute', (evt, { attributeKeys })=>{\n            const removeAttributes = new Set();\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const attributeKey of attributeKeys){\n                // Handle only attribute removals.\n                if (selection.hasAttribute(attributeKey)) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const coupledAttributeKeys = coupledAttributes.get(attributeKey);\n                if (!coupledAttributeKeys) {\n                    continue;\n                }\n                for (const coupledAttributeKey of coupledAttributeKeys){\n                    if (selection.hasAttribute(coupledAttributeKey)) {\n                        removeAttributes.add(coupledAttributeKey);\n                    }\n                }\n            }\n            if (removeAttributes.size == 0) {\n                return;\n            }\n            model.change((writer)=>{\n                for (const attributeKey of removeAttributes){\n                    writer.removeSelectionAttribute(attributeKey);\n                }\n            });\n        });\n    }\n    /**\n\t * Removes `html*Attributes` attributes from incompatible elements.\n\t *\n\t * For example, consider the following HTML:\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar[]</heading2>\n\t * ```\n\t *\n\t * Pressing `enter` creates a new `paragraph` element that inherits\n\t * the `htmlH2Attributes` attribute from `heading2`.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph htmlH2Attributes=\"...\">[]</paragraph>\n\t * ```\n\t *\n\t * This postfixer ensures that this doesn't happen, and that elements can\n\t * only have `html*Attributes` associated with them,\n\t * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.\n\t *\n\t * With it enabled, pressing `enter` at the end of `<heading2>` will create\n\t * a new paragraph without the `htmlH2Attributes` attribute.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph>[]</paragraph>\n\t * ```\n\t */ _registerAssociatedHtmlAttributesPostFixer() {\n        const model = this.editor.model;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            for (const change of changes){\n                if (change.type !== 'insert' || change.name === '$text') {\n                    continue;\n                }\n                for (const attr of change.attributes.keys()){\n                    if (!attr.startsWith('html') || !attr.endsWith('Attributes')) {\n                        continue;\n                    }\n                    if (!model.schema.checkAttribute(change.name, attr)) {\n                        writer.removeAttribute(attr, change.position.nodeAfter);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n    }\n    /**\n\t * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name\n\t * and coupled GHS attribute names are stored in the value array.\n\t */ _getCoupledAttributesMap() {\n        if (this._coupledAttributes) {\n            return this._coupledAttributes;\n        }\n        this._coupledAttributes = new Map();\n        for (const definition of this._allowedElements){\n            if (definition.coupledAttribute && definition.model) {\n                const attributeNames = this._coupledAttributes.get(definition.coupledAttribute);\n                if (attributeNames) {\n                    attributeNames.push(definition.model);\n                } else {\n                    this._coupledAttributes.set(definition.coupledAttribute, [\n                        definition.model\n                    ]);\n                }\n            }\n        }\n        return this._coupledAttributes;\n    }\n    /**\n\t * Fires `register` event for the given element definition.\n\t */ _fireRegisterEvent(definition) {\n        if (definition.view && this._disallowedElements.has(definition.view)) {\n            return;\n        }\n        this.fire(definition.view ? `register:${definition.view}` : 'register', definition);\n    }\n    /**\n\t * Registers object element and attribute converters for the given data schema definition.\n\t */ _registerObjectElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        schema.register(modelName, definition.modelSchema);\n        /* istanbul ignore next: paranoid check -- @preserve */ if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: [\n                getHtmlAttributeName(viewName),\n                'htmlContent'\n            ]\n        });\n        // Store element content in special `$rawContent` custom property to\n        // avoid editor's data filtering mechanism.\n        editor.data.registerRawContentMatcher({\n            name: viewName\n        });\n        conversion.for('upcast').elementToElement({\n            view: viewName,\n            model: viewToModelObjectConverter(definition),\n            // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, some elements will be transformed into a paragraph.\n            // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n            converterPriority: priorities.low + 2\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: modelName,\n                attributes: [\n                    getHtmlAttributeName(viewName)\n                ]\n            },\n            view: toObjectWidgetConverter(editor, definition)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: modelName,\n            view: (modelElement, { writer })=>{\n                return createObjectView(viewName, modelElement, writer);\n            }\n        });\n        conversion.for('dataDowncast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers block element and attribute converters for the given data schema definition.\n\t */ _registerBlockElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        if (!schema.isRegistered(definition.model)) {\n            schema.register(definition.model, definition.modelSchema);\n            if (!viewName) {\n                return;\n            }\n            conversion.for('upcast').elementToElement({\n                model: modelName,\n                view: viewName,\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n                converterPriority: priorities.low + 2\n            });\n            conversion.for('downcast').elementToElement({\n                model: modelName,\n                view: viewName\n            });\n        }\n        if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(viewName)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers inline element and attribute converters for the given data schema definition.\n\t *\n\t * Extends `$text` model schema to allow the given definition model attribute and its properties.\n\t */ _registerInlineElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const attributeKey = definition.model;\n        // This element is stored in the model as an attribute on a block element, for example DocumentLists.\n        if (definition.appliesToBlock) {\n            return;\n        }\n        schema.extend('$text', {\n            allowAttributes: attributeKey\n        });\n        if (definition.attributeProperties) {\n            schema.setAttributeProperties(attributeKey, definition.attributeProperties);\n        }\n        conversion.for('upcast').add(viewToAttributeInlineConverter(definition, this));\n        conversion.for('downcast').attributeToElement({\n            model: attributeKey,\n            view: attributeToViewInlineConverter(definition)\n        });\n        if (!definition.allowEmpty) {\n            return;\n        }\n        schema.setAttributeProperties(attributeKey, {\n            copyFromObject: false\n        });\n        if (!schema.isRegistered('htmlEmptyElement')) {\n            schema.register('htmlEmptyElement', {\n                inheritAllFrom: '$inlineObject'\n            });\n        }\n        editor.data.htmlProcessor.domConverter.registerInlineObjectMatcher((element)=>{\n            // Element must be empty and have any attribute.\n            if (element.name == definition.view && element.isEmpty && Array.from(element.getAttributeKeys()).length) {\n                return {\n                    name: true\n                };\n            }\n            return null;\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition, true)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition)\n        });\n    }\n}\n/**\n * Matches and consumes matched attributes.\n *\n * @returns Object with following properties:\n * - attributes Array with matched attribute names.\n * - classes Array with matched class names.\n * - styles Array with matched style names.\n */ function matchAndConsumeAttributes(viewElement, matcher, consumable) {\n    const matches = matcher.matchAll(viewElement) || [];\n    const stylesProcessor = viewElement.document.stylesProcessor;\n    return matches.reduce((result, { match })=>{\n        // Verify and consume styles.\n        for (const style of match.styles || []){\n            // Check longer forms of the same style as those could be matched\n            // but not present in the element directly.\n            // Consider only longhand (or longer than current notation) so that\n            // we do not include all sides of the box if only one side is allowed.\n            const sortedRelatedStyles = stylesProcessor.getRelatedStyles(style).filter((relatedStyle)=>relatedStyle.split('-').length > style.split('-').length).sort((a, b)=>b.split('-').length - a.split('-').length);\n            for (const relatedStyle of sortedRelatedStyles){\n                if (consumable.consume(viewElement, {\n                    styles: [\n                        relatedStyle\n                    ]\n                })) {\n                    result.styles.push(relatedStyle);\n                }\n            }\n            // Verify and consume style as specified in the matcher.\n            if (consumable.consume(viewElement, {\n                styles: [\n                    style\n                ]\n            })) {\n                result.styles.push(style);\n            }\n        }\n        // Verify and consume class names.\n        for (const className of match.classes || []){\n            if (consumable.consume(viewElement, {\n                classes: [\n                    className\n                ]\n            })) {\n                result.classes.push(className);\n            }\n        }\n        // Verify and consume other attributes.\n        for (const attributeName of match.attributes || []){\n            if (consumable.consume(viewElement, {\n                attributes: [\n                    attributeName\n                ]\n            })) {\n                result.attributes.push(attributeName);\n            }\n        }\n        return result;\n    }, {\n        attributes: [],\n        classes: [],\n        styles: []\n    });\n}\n/**\n * Prepares the GHS attribute value as an object with element attributes' values.\n */ function prepareGHSAttribute(viewElement, { attributes, classes, styles }) {\n    if (!attributes.length && !classes.length && !styles.length) {\n        return null;\n    }\n    return {\n        ...attributes.length && {\n            attributes: getAttributes(viewElement, attributes)\n        },\n        ...styles.length && {\n            styles: getReducedStyles(viewElement, styles)\n        },\n        ...classes.length && {\n            classes\n        }\n    };\n}\n/**\n * Returns attributes as an object with names and values.\n */ function getAttributes(viewElement, attributes) {\n    const attributesObject = {};\n    for (const key of attributes){\n        const value = viewElement.getAttribute(key);\n        if (value !== undefined && isValidAttributeName(key)) {\n            attributesObject[key] = value;\n        }\n    }\n    return attributesObject;\n}\n/**\n * Returns styles as an object reduced to shorthand notation without redundant entries.\n */ function getReducedStyles(viewElement, styles) {\n    // Use StyleMap to reduce style value to the minimal form (without shorthand and long-hand notation and duplication).\n    const stylesMap = new StylesMap(viewElement.document.stylesProcessor);\n    for (const key of styles){\n        const styleValue = viewElement.getStyle(key);\n        if (styleValue !== undefined) {\n            stylesMap.set(key, styleValue);\n        }\n    }\n    return Object.fromEntries(stylesMap.getStylesEntries());\n}\n/**\n * Matcher by default has to match **all** patterns to count it as an actual match. Splitting the pattern\n * into separate patterns means that any matched pattern will be count as a match.\n *\n * @param pattern Pattern to split.\n * @param attributeName Name of the attribute to split (e.g. 'attributes', 'classes', 'styles').\n */ function splitPattern(pattern, attributeName) {\n    const { name } = pattern;\n    const attributeValue = pattern[attributeName];\n    if (isPlainObject(attributeValue)) {\n        return Object.entries(attributeValue).map(([key, value])=>({\n                name,\n                [attributeName]: {\n                    [key]: value\n                }\n            }));\n    }\n    if (Array.isArray(attributeValue)) {\n        return attributeValue.map((value)=>({\n                name,\n                [attributeName]: [\n                    value\n                ]\n            }));\n    }\n    return [\n        pattern\n    ];\n}\n/**\n * Rules are matched in conjunction (AND operation), but we want to have a match if *any* of the rules is matched (OR operation).\n * By splitting the rules we force the latter effect.\n */ function splitRules(rules) {\n    const { name, attributes, classes, styles } = rules;\n    const splitRules = [];\n    if (attributes) {\n        splitRules.push(...splitPattern({\n            name,\n            attributes\n        }, 'attributes'));\n    }\n    if (classes) {\n        splitRules.push(...splitPattern({\n            name,\n            classes\n        }, 'classes'));\n    }\n    if (styles) {\n        splitRules.push(...splitPattern({\n            name,\n            styles\n        }, 'styles'));\n    }\n    return splitRules;\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:code-block/codeblock~CodeBlock Code Block} feature.\n */ class CodeBlockElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        if (!this.editor.plugins.has('CodeBlockEditing')) {\n            return;\n        }\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:pre', (evt, definition)=>{\n            if (definition.model !== 'codeBlock') {\n                return;\n            }\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            // Extend codeBlock to allow attributes required by attribute filtration.\n            schema.extend('codeBlock', {\n                allowAttributes: [\n                    'htmlPreAttributes',\n                    'htmlContentAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelCodeBlockAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewCodeBlockAttributeConverter());\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n *\n * Attributes are preserved as a value of `html*Attributes` model attribute.\n * @param dataFilter\n * @returns Returns a conversion callback.\n */ function viewToModelCodeBlockAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:code', (evt, data, conversionApi)=>{\n            const viewCodeElement = data.viewItem;\n            const viewPreElement = viewCodeElement.parent;\n            if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n                return;\n            }\n            preserveElementAttributes(viewPreElement, 'htmlPreAttributes');\n            preserveElementAttributes(viewCodeElement, 'htmlContentAttributes');\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n * @returns Returns a conversion callback.\n */ function modelToViewCodeBlockAttributeConverter() {\n    return (dispatcher)=>{\n        dispatcher.on('attribute:htmlPreAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            const viewPreElement = viewCodeElement.parent;\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewPreElement);\n        });\n        dispatcher.on('attribute:htmlContentAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewCodeElement);\n        });\n    };\n}\n\n/**\n * Provides the General HTML Support integration for elements which can behave like sectioning element (e.g. article) or\n * element accepting only inline content (e.g. paragraph).\n *\n * The distinction between this two content models is important for choosing correct schema model and proper content conversion.\n * As an example, it ensures that:\n *\n * * children elements paragraphing is enabled for sectioning elements only,\n * * element and its content can be correctly handled by editing view (splitting and merging elements),\n * * model element HTML is semantically correct and easier to work with.\n *\n * If element contains any block element, it will be treated as a sectioning element and registered using\n * {@link module:html-support/dataschema~DataSchemaDefinition#model} and\n * {@link module:html-support/dataschema~DataSchemaDefinition#modelSchema} in editor schema.\n * Otherwise, it will be registered under {@link module:html-support/dataschema~DataSchemaBlockElementDefinition#paragraphLikeModel} model\n * name with model schema accepting only inline content (inheriting from `$block`).\n */ class DualContentModelElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DualContentModelElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register', (evt, definition)=>{\n            const blockDefinition = definition;\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            if (!blockDefinition.paragraphLikeModel) {\n                return;\n            }\n            // Can only apply to newly registered features.\n            if (schema.isRegistered(blockDefinition.model) || schema.isRegistered(blockDefinition.paragraphLikeModel)) {\n                return;\n            }\n            const paragraphLikeModelDefinition = {\n                model: blockDefinition.paragraphLikeModel,\n                view: blockDefinition.view\n            };\n            schema.register(blockDefinition.model, blockDefinition.modelSchema);\n            schema.register(paragraphLikeModelDefinition.model, {\n                inheritAllFrom: '$block'\n            });\n            conversion.for('upcast').elementToElement({\n                view: blockDefinition.view,\n                model: (viewElement, { writer })=>{\n                    if (this._hasBlockContent(viewElement)) {\n                        return writer.createElement(blockDefinition.model);\n                    }\n                    return writer.createElement(paragraphLikeModelDefinition.model);\n                },\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                converterPriority: priorities.low + 0.5\n            });\n            conversion.for('downcast').elementToElement({\n                view: blockDefinition.view,\n                model: blockDefinition.model\n            });\n            this._addAttributeConversion(blockDefinition);\n            conversion.for('downcast').elementToElement({\n                view: paragraphLikeModelDefinition.view,\n                model: paragraphLikeModelDefinition.model\n            });\n            this._addAttributeConversion(paragraphLikeModelDefinition);\n            evt.stop();\n        });\n    }\n    /**\n\t * Checks whether the given view element includes any other block element.\n\t */ _hasBlockContent(viewElement) {\n        const view = this.editor.editing.view;\n        const blockElements = view.domConverter.blockElements;\n        // Traversing the viewElement subtree looking for block elements.\n        // Especially for the cases like <div><a href=\"#\"><p>foo</p></a></div>.\n        // https://github.com/ckeditor/ckeditor5/issues/11513\n        for (const viewItem of view.createRangeIn(viewElement).getItems()){\n            if (viewItem.is('element') && blockElements.includes(viewItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Adds attribute filtering conversion for the given data schema.\n\t */ _addAttributeConversion(definition) {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        editor.model.schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(definition.view)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:heading/heading~Heading Heading} feature.\n */ class HeadingElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Enter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HeadingElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('HeadingEditing')) {\n            return;\n        }\n        const options = editor.config.get('heading.options');\n        this.registerHeadingElements(editor, options);\n    }\n    /**\n\t * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.\n\t */ registerHeadingElements(editor, options) {\n        const dataSchema = editor.plugins.get(DataSchema);\n        const headerModels = [];\n        for (const option of options){\n            if ('model' in option && 'view' in option) {\n                dataSchema.registerBlockElement({\n                    view: option.view,\n                    model: option.model\n                });\n                headerModels.push(option.model);\n            }\n        }\n        dataSchema.extendBlockElement({\n            model: 'htmlHgroup',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n        dataSchema.extendBlockElement({\n            model: 'htmlSummary',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module html-support/integrations/integrationutils\n */ /**\n * Returns the first view element descendant matching the given view name.\n * Includes view element itself.\n *\n * @internal\n */ function getDescendantElement(writer, containerElement, elementName) {\n    const range = writer.createRangeOn(containerElement);\n    for (const { item } of range.getWalker()){\n        if (item.is('element', elementName)) {\n            return item;\n        }\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:image/image~Image Image} feature.\n */ class ImageElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ImageElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // At least one image plugin should be loaded for the integration to work properly.\n        if (!editor.plugins.has('ImageInlineEditing') && !editor.plugins.has('ImageBlockEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter$1(dataFilter));\n        });\n        dataFilter.on('register:img', (evt, definition)=>{\n            if (definition.model !== 'imageBlock' && definition.model !== 'imageInline') {\n                return;\n            }\n            if (schema.isRegistered('imageBlock')) {\n                schema.extend('imageBlock', {\n                    allowAttributes: [\n                        'htmlImgAttributes',\n                        // Figure and Link don't have model counterpart.\n                        // We will preserve attributes on image model element using these attribute keys.\n                        'htmlFigureAttributes',\n                        'htmlLinkAttributes'\n                    ]\n                });\n            }\n            if (schema.isRegistered('imageInline')) {\n                schema.extend('imageInline', {\n                    allowAttributes: [\n                        // `htmlA` is needed for standard GHS link integration.\n                        'htmlA',\n                        'htmlImgAttributes'\n                    ]\n                });\n            }\n            conversion.for('upcast').add(viewToModelImageAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewImageAttributeConverter());\n            if (editor.plugins.has('LinkImage')) {\n                conversion.for('upcast').add(viewToModelLinkImageAttributeConverter(dataFilter, editor));\n            }\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on the {@link module:image/image~Image Image}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelImageAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:img', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewImageElement = data.viewItem;\n            const viewAttributes = dataFilter.processViewAttributes(viewImageElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlImgAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from link view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelLinkImageAttributeConverter(dataFilter, editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('element:a', (evt, data, conversionApi)=>{\n            const viewLink = data.viewItem;\n            const viewImage = imageUtils.findViewImgElement(viewLink);\n            if (!viewImage) {\n                return;\n            }\n            const modelImage = data.modelCursor.parent;\n            if (!modelImage.is('element', 'imageBlock')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewLink, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlLinkAttributes', viewAttributes, modelImage);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter$1(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('image')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * A model-to-view conversion helper applying attributes from the {@link module:image/image~Image Image}\n * feature.\n * @returns Returns a conversion callback.\n */ function modelToViewImageAttributeConverter() {\n    return (dispatcher)=>{\n        addInlineAttributeConversion('htmlImgAttributes');\n        addBlockAttributeConversion('img', 'htmlImgAttributes');\n        addBlockAttributeConversion('figure', 'htmlFigureAttributes');\n        addBlockAttributeConversion('a', 'htmlLinkAttributes');\n        function addInlineAttributeConversion(attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageInline`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const viewElement = conversionApi.mapper.toViewElement(data.item);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            }, {\n                priority: 'low'\n            });\n        }\n        function addBlockAttributeConversion(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageBlock`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (viewElement) {\n                    updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n                    conversionApi.consumable.consume(data.item, evt.name);\n                }\n            }, {\n                priority: 'low'\n            });\n            if (elementName === 'a') {\n                // To have a link element in the view, we need to attach a converter to the `linkHref` attribute as well.\n                dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi)=>{\n                    if (!conversionApi.consumable.consume(data.item, 'attribute:htmlLinkAttributes:imageBlock')) {\n                        return;\n                    }\n                    const containerElement = conversionApi.mapper.toViewElement(data.item);\n                    const viewElement = getDescendantElement(conversionApi.writer, containerElement, 'a');\n                    setViewAttributes(conversionApi.writer, data.item.getAttribute('htmlLinkAttributes'), viewElement);\n                }, {\n                    priority: 'low'\n                });\n            }\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:media-embed/mediaembed~MediaEmbed Media Embed} feature.\n */ class MediaEmbedElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Stop here if MediaEmbed plugin is not provided or the integrator wants to output markup with previews as\n        // we do not support filtering previews.\n        if (!editor.plugins.has('MediaEmbed') || editor.config.get('mediaEmbed.previewsInData')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        const mediaElementName = editor.config.get('mediaEmbed.elementName');\n        // Overwrite GHS schema definition for a given elementName.\n        dataSchema.registerBlockElement({\n            model: 'media',\n            view: mediaElementName\n        });\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributesConverter(dataFilter));\n        });\n        dataFilter.on(`register:${mediaElementName}`, (evt, definition)=>{\n            if (definition.model !== 'media') {\n                return;\n            }\n            schema.extend('media', {\n                allowAttributes: [\n                    getHtmlAttributeName(mediaElementName),\n                    'htmlFigureAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelMediaAttributesConverter(dataFilter, mediaElementName));\n            conversion.for('dataDowncast').add(modelToViewMediaAttributeConverter(mediaElementName));\n            evt.stop();\n        });\n    }\n}\nfunction viewToModelMediaAttributesConverter(dataFilter, mediaElementName) {\n    const upcastMedia = (evt, data, conversionApi)=>{\n        const viewMediaElement = data.viewItem;\n        preserveElementAttributes(viewMediaElement, getHtmlAttributeName(mediaElementName));\n        function preserveElementAttributes(viewElement, attributeName) {\n            const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n            }\n        }\n    };\n    return (dispatcher)=>{\n        dispatcher.on(`element:${mediaElementName}`, upcastMedia, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:media-embed/mediaembed~MediaEmbed MediaEmbed}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributesConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('media')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\nfunction modelToViewMediaAttributeConverter(mediaElementName) {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler(mediaElementName, getHtmlAttributeName(mediaElementName));\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:media`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support for `script` elements.\n */ class ScriptElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ScriptElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:script', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlScript', definition.modelSchema);\n            schema.extend('htmlScript', {\n                allowAttributes: [\n                    'htmlScriptAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'script'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'script',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlScript',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('script', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:table/table~Table Table} feature.\n */ class TableElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TableEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const tableUtils = editor.plugins.get('TableUtils');\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter(dataFilter));\n        });\n        dataFilter.on('register:table', (evt, definition)=>{\n            if (definition.model !== 'table') {\n                return;\n            }\n            schema.extend('table', {\n                allowAttributes: [\n                    'htmlTableAttributes',\n                    // Figure, thead and tbody elements don't have model counterparts.\n                    // We will be preserving attributes on table element using these attribute keys.\n                    'htmlFigureAttributes',\n                    'htmlTheadAttributes',\n                    'htmlTbodyAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelTableAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewTableAttributeConverter());\n            editor.model.document.registerPostFixer(createHeadingRowsPostFixer(editor.model, tableUtils));\n            evt.stop();\n        });\n    }\n}\n/**\n * Creates a model post-fixer for thead and tbody GHS related attributes.\n */ function createHeadingRowsPostFixer(model, tableUtils) {\n    return (writer)=>{\n        const changes = model.document.differ.getChanges();\n        let wasFixed = false;\n        for (const change of changes){\n            if (change.type != 'attribute' || change.attributeKey != 'headingRows') {\n                continue;\n            }\n            const table = change.range.start.nodeAfter;\n            const hasTHeadAttributes = table.getAttribute('htmlTheadAttributes');\n            const hasTBodyAttributes = table.getAttribute('htmlTbodyAttributes');\n            if (hasTHeadAttributes && !change.attributeNewValue) {\n                writer.removeAttribute('htmlTheadAttributes', table);\n                wasFixed = true;\n            } else if (hasTBodyAttributes && change.attributeNewValue == tableUtils.getRows(table)) {\n                writer.removeAttribute('htmlTbodyAttributes', table);\n                wasFixed = true;\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelTableAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewTableElement = data.viewItem;\n            preserveElementAttributes(viewTableElement, 'htmlTableAttributes');\n            for (const childNode of viewTableElement.getChildren()){\n                if (childNode.is('element', 'thead')) {\n                    preserveElementAttributes(childNode, 'htmlTheadAttributes');\n                }\n                if (childNode.is('element', 'tbody')) {\n                    preserveElementAttributes(childNode, 'htmlTbodyAttributes');\n                }\n            }\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('table')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:table/table~Table Table}\n * feature.\n *\n * @returns Returns a conversion callback.\n */ function modelToViewTableAttributeConverter() {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler('table', 'htmlTableAttributes');\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        addAttributeConversionDispatcherHandler('thead', 'htmlTheadAttributes');\n        addAttributeConversionDispatcherHandler('tbody', 'htmlTbodyAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:table`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (!viewElement) {\n                    return;\n                }\n                conversionApi.consumable.consume(data.item, evt.name);\n                updateViewAttributes(conversionApi.writer, data.attributeOldValue, data.attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support for `style` elements.\n */ class StyleElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:style', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlStyle', definition.modelSchema);\n            schema.extend('htmlStyle', {\n                allowAttributes: [\n                    'htmlStyleAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'style'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'style',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlStyle',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('style', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:list/list~List List} feature.\n */ class ListElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ListEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const listEditing = editor.plugins.get('ListEditing');\n        const listUtils = editor.plugins.get('ListUtils');\n        const viewElements = [\n            'ul',\n            'ol',\n            'li'\n        ];\n        // Register downcast strategy.\n        // Note that this must be done before document list editing registers conversion in afterInit.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'htmlLiAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlUlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlOlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        dataFilter.on('register', (evt, definition)=>{\n            if (!viewElements.includes(definition.view)) {\n                return;\n            }\n            evt.stop();\n            // Do not register same converters twice.\n            if (schema.checkAttribute('$block', 'htmlLiAttributes')) {\n                return;\n            }\n            const allowAttributes = viewElements.map((element)=>getHtmlAttributeName(element));\n            schema.extend('$listItem', {\n                allowAttributes\n            });\n            conversion.for('upcast').add((dispatcher)=>{\n                dispatcher.on('element:ul', viewToModelListAttributeConverter('htmlUlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:ol', viewToModelListAttributeConverter('htmlOlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:li', viewToModelListAttributeConverter('htmlLiAttributes', dataFilter), {\n                    priority: 'low'\n                });\n            });\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listType') == node.getAttribute('listType')) {\n                    const attribute = getAttributeFromListType(previousNodeInList.getAttribute('listType'));\n                    const value = previousNodeInList.getAttribute(attribute);\n                    if (!isEqual(node.getAttribute(attribute), value) && writer.model.schema.checkAttribute(node, attribute)) {\n                        writer.setAttribute(attribute, value, node);\n                        evt.return = true;\n                    }\n                }\n                if (previousNodeInList.getAttribute('listItemId') == node.getAttribute('listItemId')) {\n                    const value = previousNodeInList.getAttribute('htmlLiAttributes');\n                    if (!isEqual(node.getAttribute('htmlLiAttributes'), value) && writer.model.schema.checkAttribute(node, 'htmlLiAttributes')) {\n                        writer.setAttribute('htmlLiAttributes', value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n        // Remove `ol` attributes from `ul` elements and vice versa.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node } of listNodes){\n                const listType = node.getAttribute('listType');\n                if (!listUtils.isNumberedListType(listType) && node.getAttribute('htmlOlAttributes')) {\n                    writer.removeAttribute('htmlOlAttributes', node);\n                    evt.return = true;\n                }\n                if (listUtils.isNumberedListType(listType) && node.getAttribute('htmlUlAttributes')) {\n                    writer.removeAttribute('htmlUlAttributes', node);\n                    evt.return = true;\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        if (!editor.commands.get('indentList')) {\n            return;\n        }\n        // Reset list attributes after indenting list items.\n        const indentList = editor.commands.get('indentList');\n        this.listenTo(indentList, 'afterExecute', (evt, changedBlocks)=>{\n            editor.model.change((writer)=>{\n                for (const node of changedBlocks){\n                    const attribute = getAttributeFromListType(node.getAttribute('listType'));\n                    if (!editor.model.schema.checkAttribute(node, attribute)) {\n                        continue;\n                    }\n                    // Just reset the attribute.\n                    // If there is a previous indented list that this node should be merged into,\n                    // the postfixer will unify all the attributes of both sub-lists.\n                    writer.setAttribute(attribute, {}, node);\n                }\n            });\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link TODO}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelListAttributeConverter(attributeName, dataFilter) {\n    return (evt, data, conversionApi)=>{\n        const viewElement = data.viewItem;\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n        for (const item of data.modelRange.getItems({\n            shallow: true\n        })){\n            // Apply only to list item blocks.\n            if (!item.hasAttribute('listItemId')) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled\n            // by the recursive conversion.\n            if (item.hasAttribute('htmlUlAttributes') || item.hasAttribute('htmlOlAttributes')) {\n                continue;\n            }\n            if (conversionApi.writer.model.schema.checkAttribute(item, attributeName)) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes || {}, item);\n            }\n        }\n    };\n}\n/**\n * Returns HTML attribute name based on provided list type.\n */ function getAttributeFromListType(listType) {\n    return listType === 'numbered' || listType == 'customNumbered' ? 'htmlOlAttributes' : 'htmlUlAttributes';\n}\n\n/**\n * Provides the General HTML Support for custom elements (not registered in the {@link module:html-support/dataschema~DataSchema}).\n */ class CustomElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            DataSchema\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CustomElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        dataFilter.on('register:$customElement', (evt, definition)=>{\n            evt.stop();\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            const unsafeElements = editor.editing.view.domConverter.unsafeElements;\n            const preLikeElements = editor.data.htmlProcessor.domConverter.preElements;\n            schema.register(definition.model, definition.modelSchema);\n            schema.extend(definition.model, {\n                allowAttributes: [\n                    'htmlElementName',\n                    'htmlCustomElementAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            // For the `<template>` element we use only raw-content because DOM API exposes its content\n            // only as a document fragment in the `content` property (or innerHTML).\n            editor.data.htmlProcessor.domConverter.registerRawContentMatcher({\n                name: 'template'\n            });\n            // Being executed on the low priority, it will catch all elements that were not caught by other converters.\n            conversion.for('upcast').elementToElement({\n                view: /.*/,\n                model: (viewElement, conversionApi)=>{\n                    // Do not try to convert $comment fake element.\n                    if (viewElement.name == '$comment') {\n                        return null;\n                    }\n                    if (!isValidElementName(viewElement.name)) {\n                        return null;\n                    }\n                    // Allow for fallback only if this element is not defined in data schema to make sure\n                    // that this will handle only custom elements not registered in the data schema.\n                    if (dataSchema.getDefinitionsForView(viewElement.name).size) {\n                        return null;\n                    }\n                    // Make sure that this element will not render in the editing view.\n                    if (!unsafeElements.includes(viewElement.name)) {\n                        unsafeElements.push(viewElement.name);\n                    }\n                    // Make sure that whitespaces will not be trimmed or replaced by nbsps while stringify content.\n                    if (!preLikeElements.includes(viewElement.name)) {\n                        preLikeElements.push(viewElement.name);\n                    }\n                    const modelElement = conversionApi.writer.createElement(definition.model, {\n                        htmlElementName: viewElement.name\n                    });\n                    const htmlAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                    if (htmlAttributes) {\n                        conversionApi.writer.setAttribute('htmlCustomElementAttributes', htmlAttributes, modelElement);\n                    }\n                    let htmlContent;\n                    // For the `<template>` element we use only raw-content because DOM API exposes its content\n                    // only as a document fragment in the `content` property.\n                    if (viewElement.is('element', 'template') && viewElement.getCustomProperty('$rawContent')) {\n                        htmlContent = viewElement.getCustomProperty('$rawContent');\n                    } else {\n                        // Store the whole element in the attribute so that DomConverter will be able to use the pre like element context.\n                        const viewWriter = new UpcastWriter(viewElement.document);\n                        const documentFragment = viewWriter.createDocumentFragment(viewElement);\n                        const domFragment = editor.data.htmlProcessor.domConverter.viewToDom(documentFragment);\n                        const domElement = domFragment.firstChild;\n                        while(domElement.firstChild){\n                            domFragment.appendChild(domElement.firstChild);\n                        }\n                        domElement.remove();\n                        htmlContent = editor.data.htmlProcessor.htmlWriter.getHtml(domFragment);\n                    }\n                    conversionApi.writer.setAttribute('htmlContent', htmlContent, modelElement);\n                    // Consume the content of the element.\n                    for (const { item } of editor.editing.view.createRangeIn(viewElement)){\n                        conversionApi.consumable.consume(item, {\n                            name: true\n                        });\n                    }\n                    return modelElement;\n                },\n                converterPriority: 'low'\n            });\n            // Because this element is unsafe (DomConverter#unsafeElements), it will render as a transparent <span> but it must\n            // be rendered anyway for the mapping between the model and the view to exist.\n            conversion.for('editingDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const viewElement = writer.createRawElement(viewName);\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n            conversion.for('dataDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const htmlContent = modelElement.getAttribute('htmlContent');\n                    const viewElement = writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n                        domConverter.setContentOf(domElement, htmlContent);\n                    });\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if name is valid for a DOM element name.\n */ function isValidElementName(name) {\n    try {\n        document.createElement(name);\n    } catch (error) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * The General HTML Support feature.\n *\n * This is a \"glue\" plugin which initializes the {@link module:html-support/datafilter~DataFilter data filter} configuration\n * and features integration with the General HTML Support.\n */ class GeneralHtmlSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'GeneralHtmlSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            CodeBlockElementSupport,\n            DualContentModelElementSupport,\n            HeadingElementSupport,\n            ImageElementSupport,\n            MediaEmbedElementSupport,\n            ScriptElementSupport,\n            TableElementSupport,\n            StyleElementSupport,\n            ListElementSupport,\n            CustomElementSupport\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const dataFilter = editor.plugins.get(DataFilter);\n        // Load the allowed empty inline elements' configuration.\n        // Note that this modifies DataSchema so must be loaded before registering filtering rules.\n        dataFilter.loadAllowedEmptyElementsConfig(editor.config.get('htmlSupport.allowEmpty') || []);\n        // Load the filtering configuration.\n        dataFilter.loadAllowedConfig(editor.config.get('htmlSupport.allow') || []);\n        dataFilter.loadDisallowedConfig(editor.config.get('htmlSupport.disallow') || []);\n    }\n    /**\n\t * Returns a GHS model attribute name related to a given view element name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t */ getGhsAttributeNameForElement(viewElementName) {\n        const dataSchema = this.editor.plugins.get('DataSchema');\n        const definitions = Array.from(dataSchema.getDefinitionsForView(viewElementName, false));\n        const inlineDefinition = definitions.find((definition)=>definition.isInline && !definitions[0].isObject);\n        if (inlineDefinition) {\n            return inlineDefinition.model;\n        }\n        return getHtmlAttributeName(viewElementName);\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to add.\n\t * @param selectable The selection or element to update.\n\t */ addModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.add(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.delete(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributes The object with attributes to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlAttributes(viewElementName, attributes, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const [key, value] of Object.entries(attributes)){\n                        attributesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributeName The attribute name (or names) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlAttributes(viewElementName, attributeName, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const key of toArray(attributeName)){\n                        attributesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param styles The object with styles to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlStyles(viewElementName, styles, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const [key, value] of Object.entries(styles)){\n                        stylesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param properties The style (or styles list) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlStyles(viewElementName, properties, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const key of toArray(properties)){\n                        stylesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * Returns an iterator over an items in the selectable that accept given GHS attribute.\n */ function* getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName) {\n    if (!selectable) {\n        return;\n    }\n    if (!(Symbol.iterator in selectable) && selectable.is('documentSelection') && selectable.isCollapsed) {\n        if (model.schema.checkAttributeInSelection(selectable, ghsAttributeName)) {\n            yield selectable;\n        }\n    } else {\n        for (const range of getValidRangesForSelectable(model, selectable, ghsAttributeName)){\n            yield* range.getItems({\n                shallow: true\n            });\n        }\n    }\n}\n/**\n * Translates a given selectable to an iterable of ranges.\n */ function getValidRangesForSelectable(model, selectable, ghsAttributeName) {\n    if (!(Symbol.iterator in selectable) && (selectable.is('node') || selectable.is('$text') || selectable.is('$textProxy'))) {\n        if (model.schema.checkAttribute(selectable, ghsAttributeName)) {\n            return [\n                model.createRangeOn(selectable)\n            ];\n        } else {\n            return [];\n        }\n    } else {\n        return model.schema.getValidRanges(model.createSelection(selectable).getRanges(), ghsAttributeName);\n    }\n}\n\n/**\n * The HTML comment feature. It preserves the HTML comments (`<!-- -->`) in the editor data.\n *\n * For a detailed overview, check the {@glink features/html/html-comments HTML comment feature documentation}.\n */ class HtmlComment extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlComment';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const loadedCommentsContent = new Map();\n        editor.data.processor.skipComments = false;\n        // Allow storing comment's content as the $root attribute with the name `$comment:<unique id>`.\n        editor.model.schema.addAttributeCheck((context, attributeName)=>{\n            if (context.endsWith('$root') && attributeName.startsWith('$comment')) {\n                return true;\n            }\n        });\n        // Convert the `$comment` view element to `$comment:<unique id>` marker and store its content (the comment itself) as a $root\n        // attribute. The comment content is needed in the `dataDowncast` pipeline to re-create the comment node.\n        editor.conversion.for('upcast').elementToMarker({\n            view: '$comment',\n            model: (viewElement)=>{\n                const markerUid = uid();\n                const markerName = `$comment:${markerUid}`;\n                const commentContent = viewElement.getCustomProperty('$rawContent');\n                loadedCommentsContent.set(markerName, commentContent);\n                return markerName;\n            }\n        });\n        // Convert the `$comment` marker to `$comment` UI element with `$rawContent` custom property containing the comment content.\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: '$comment',\n            view: (modelElement, { writer })=>{\n                let root = undefined;\n                for (const rootName of this.editor.model.document.getRootNames()){\n                    root = this.editor.model.document.getRoot(rootName);\n                    if (root.hasAttribute(modelElement.markerName)) {\n                        break;\n                    }\n                }\n                const markerName = modelElement.markerName;\n                const commentContent = root.getAttribute(markerName);\n                const comment = writer.createUIElement('$comment');\n                writer.setCustomProperty('$rawContent', commentContent, comment);\n                return comment;\n            }\n        });\n        // Remove comments' markers and their corresponding $root attributes, which are moved to the graveyard.\n        editor.model.document.registerPostFixer((writer)=>{\n            let changed = false;\n            const markers = editor.model.document.differ.getChangedMarkers().filter((marker)=>marker.name.startsWith('$comment:'));\n            for (const marker of markers){\n                const { oldRange, newRange } = marker.data;\n                if (oldRange && newRange && oldRange.root == newRange.root) {\n                    continue;\n                }\n                if (oldRange) {\n                    // The comment marker was moved from one root to another (most probably to the graveyard).\n                    // Remove the related attribute from the previous root.\n                    const oldRoot = oldRange.root;\n                    if (oldRoot.hasAttribute(marker.name)) {\n                        writer.removeAttribute(marker.name, oldRoot);\n                        changed = true;\n                    }\n                }\n                if (newRange) {\n                    const newRoot = newRange.root;\n                    if (newRoot.rootName == '$graveyard') {\n                        // Comment marker was moved to the graveyard -- remove it entirely.\n                        writer.removeMarker(marker.name);\n                        changed = true;\n                    } else if (!newRoot.hasAttribute(marker.name)) {\n                        // Comment marker was just added or was moved to another root - updated roots attributes.\n                        //\n                        // Added fallback to `''` for the comment content in case if someone incorrectly added just the marker \"by hand\"\n                        // and forgot to add the root attribute or add them in different change blocks.\n                        //\n                        // It caused an infinite loop in one of the unit tests.\n                        writer.setAttribute(marker.name, loadedCommentsContent.get(marker.name) || '', newRoot);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n        // Delete all comment markers from the document before setting new data.\n        editor.data.on('set', ()=>{\n            for (const commentMarker of editor.model.markers.getMarkersGroup('$comment')){\n                this.removeHtmlComment(commentMarker.name);\n            }\n        }, {\n            priority: 'high'\n        });\n        // Delete all comment markers that are within a removed range.\n        // Delete all comment markers at the limit element boundaries if the whole content of the limit element is removed.\n        editor.model.on('deleteContent', (evt, [selection])=>{\n            for (const range of selection.getRanges()){\n                const limitElement = editor.model.schema.getLimitElement(range);\n                const firstPosition = editor.model.createPositionAt(limitElement, 0);\n                const lastPosition = editor.model.createPositionAt(limitElement, 'end');\n                let affectedCommentIDs;\n                if (firstPosition.isTouching(range.start) && lastPosition.isTouching(range.end)) {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(editor.model.createRange(firstPosition, lastPosition));\n                } else {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(range, {\n                        skipBoundaries: true\n                    });\n                }\n                for (const commentMarkerID of affectedCommentIDs){\n                    this.removeHtmlComment(commentMarkerID);\n                }\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Creates an HTML comment on the specified position and returns its ID.\n\t *\n\t * *Note*: If two comments are created at the same position, the second comment will be inserted before the first one.\n\t *\n\t * @returns Comment ID. This ID can be later used to e.g. remove the comment from the content.\n\t */ createHtmlComment(position, content) {\n        const id = uid();\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot(position.root.rootName);\n        const markerName = `$comment:${id}`;\n        return model.change((writer)=>{\n            const range = writer.createRange(position);\n            writer.addMarker(markerName, {\n                usingOperation: true,\n                affectsData: true,\n                range\n            });\n            writer.setAttribute(markerName, content, root);\n            return markerName;\n        });\n    }\n    /**\n\t * Removes an HTML comment with the given comment ID.\n\t *\n\t * It does nothing and returns `false` if the comment with the given ID does not exist.\n\t * Otherwise it removes the comment and returns `true`.\n\t *\n\t * Note that a comment can be removed also by removing the content around the comment.\n\t *\n\t * @param commentID The ID of the comment to be removed.\n\t * @returns `true` when the comment with the given ID was removed, `false` otherwise.\n\t */ removeHtmlComment(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.removeMarker(marker);\n        });\n        return true;\n    }\n    /**\n\t * Gets the HTML comment data for the comment with a given ID.\n\t *\n\t * Returns `null` if the comment does not exist.\n\t */ getHtmlCommentData(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return null;\n        }\n        let content = '';\n        for (const root of this.editor.model.document.getRoots()){\n            if (root.hasAttribute(commentID)) {\n                content = root.getAttribute(commentID);\n                break;\n            }\n        }\n        return {\n            content,\n            position: marker.getStart()\n        };\n    }\n    /**\n\t * Gets all HTML comments in the given range.\n\t *\n\t * By default, it includes comments at the range boundaries.\n\t *\n\t * @param range\n\t * @param options.skipBoundaries When set to `true` the range boundaries will be skipped.\n\t * @returns HTML comment IDs\n\t */ getHtmlCommentsInRange(range, { skipBoundaries = false } = {}) {\n        const includeBoundaries = !skipBoundaries;\n        // Unfortunately, MarkerCollection#getMarkersAtPosition() filters out collapsed markers.\n        return Array.from(this.editor.model.markers.getMarkersGroup('$comment')).filter((marker)=>isCommentMarkerInRange(marker, range)).map((marker)=>marker.name);\n        function isCommentMarkerInRange(commentMarker, range) {\n            const position = commentMarker.getRange().start;\n            return (position.isAfter(range.start) || includeBoundaries && position.isEqual(range.start)) && (position.isBefore(range.end) || includeBoundaries && position.isEqual(range.end));\n        }\n    }\n}\n\n/**\n * The full page HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */ class HtmlPageDataProcessor extends HtmlDataProcessor {\n    /**\n\t * @inheritDoc\n\t */ toView(data) {\n        // Ignore content that is not a full page source.\n        if (!/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i.test(data.trim().slice(0, 10_000))) {\n            return super.toView(data);\n        }\n        // Store doctype and xml declaration in a separate properties as they can't be stringified later.\n        let docType = '';\n        let xmlDeclaration = '';\n        data = data.trim().replace(/<\\?xml\\s[^?]*\\?>/i, (match)=>{\n            xmlDeclaration = match;\n            return '';\n        });\n        data = data.trim().replace(/^<!DOCTYPE\\s[^>]*?>/i, (match)=>{\n            docType = match;\n            return '';\n        });\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        const viewFragment = this.domConverter.domToView(domFragment, {\n            skipComments: this.skipComments\n        });\n        const writer = new UpcastWriter(viewFragment.document);\n        // Using the DOM document with body content extracted as a skeleton of the page.\n        writer.setCustomProperty('$fullPageDocument', domFragment.ownerDocument.documentElement.outerHTML, viewFragment);\n        if (docType) {\n            writer.setCustomProperty('$fullPageDocType', docType, viewFragment);\n        }\n        if (xmlDeclaration) {\n            writer.setCustomProperty('$fullPageXmlDeclaration', xmlDeclaration, viewFragment);\n        }\n        return viewFragment;\n    }\n    /**\n\t * @inheritDoc\n\t */ toData(viewFragment) {\n        let data = super.toData(viewFragment);\n        const page = viewFragment.getCustomProperty('$fullPageDocument');\n        const docType = viewFragment.getCustomProperty('$fullPageDocType');\n        const xmlDeclaration = viewFragment.getCustomProperty('$fullPageXmlDeclaration');\n        if (page) {\n            data = page.replace(/<\\/body\\s*>/, data + '$&');\n            if (docType) {\n                data = docType + '\\n' + data;\n            }\n            if (xmlDeclaration) {\n                data = xmlDeclaration + '\\n' + data;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * The full page editing feature. It preserves the whole HTML page in the editor data.\n */ class FullPage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FullPage';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const properties = [\n            '$fullPageDocument',\n            '$fullPageDocType',\n            '$fullPageXmlDeclaration'\n        ];\n        editor.data.processor = new HtmlPageDataProcessor(editor.data.viewDocument);\n        editor.model.schema.extend('$root', {\n            allowAttributes: properties\n        });\n        // Apply custom properties from view document fragment to the model root attributes.\n        editor.data.on('toModel', (evt, [viewElementOrFragment])=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    const value = viewElementOrFragment.getCustomProperty(name);\n                    if (value) {\n                        writer.setAttribute(name, value, root);\n                    }\n                }\n            });\n        }, {\n            priority: 'low'\n        });\n        // Apply root attributes to the view document fragment.\n        editor.data.on('toView', (evt, [modelElementOrFragment])=>{\n            if (!modelElementOrFragment.is('rootElement')) {\n                return;\n            }\n            const root = modelElementOrFragment;\n            const viewFragment = evt.return;\n            if (!root.hasAttribute('$fullPageDocument')) {\n                return;\n            }\n            const writer = new UpcastWriter(viewFragment.document);\n            for (const name of properties){\n                const value = root.getAttribute(name);\n                if (value) {\n                    writer.setCustomProperty(name, value, viewFragment);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // Clear root attributes related to full page editing on editor content reset.\n        editor.data.on('set', ()=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    if (root.hasAttribute(name)) {\n                        writer.removeAttribute(name, root);\n                    }\n                }\n            });\n        }, {\n            priority: 'high'\n        });\n        // Make sure that document is returned even if there is no content in the page body.\n        editor.data.on('get', (evt, args)=>{\n            if (!args[0]) {\n                args[0] = {};\n            }\n            args[0].trim = false;\n        }, {\n            priority: 'high'\n        });\n    }\n}\n\nexport { DataFilter, DataSchema, FullPage, GeneralHtmlSupport, HtmlComment, HtmlPageDataProcessor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, MultiCommand, icons, Command } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { addMarginRules } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * The indent editing feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` commands.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in the\n * {@link module:indent/indent~Indent indent feature} API documentation.\n */ class IndentEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'IndentEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.commands.add('indent', new MultiCommand(editor));\n        editor.commands.add('outdent', new MultiCommand(editor));\n    }\n}\n\n/**\n * The indent UI feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` buttons.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in\n * the {@link module:indent/indent~Indent indent feature} API documentation.\n */ class IndentUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'IndentUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedIndentIcon = locale.uiLanguageDirection == 'ltr' ? icons.indent : icons.outdent;\n        const localizedOutdentIcon = locale.uiLanguageDirection == 'ltr' ? icons.outdent : icons.indent;\n        this._defineButton('indent', t('Increase indent'), localizedIndentIcon);\n        this._defineButton('outdent', t('Decrease indent'), localizedOutdentIcon);\n    }\n    /**\n\t * Defines UI buttons for both toolbar and menu bar.\n\t */ _defineButton(commandName, label, icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(commandName, ()=>{\n            const buttonView = this._createButton(ButtonView, commandName, label, icon);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:' + commandName, ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView, commandName, label, icon);\n        });\n    }\n    /**\n\t * Creates a button to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass, commandName, label, icon) {\n        const editor = this.editor;\n        const command = editor.commands.get(commandName);\n        const view = new ButtonClass(editor.locale);\n        view.set({\n            label,\n            icon\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute(commandName);\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The indent feature.\n *\n * This plugin acts as a single entry point plugin for other features that implement indentation of elements like lists or paragraphs.\n *\n * The compatible features are:\n *\n * * The {@link module:list/list~List} or {@link module:list/list/listediting~ListEditing} feature for list indentation.\n * * The {@link module:indent/indentblock~IndentBlock} feature for block indentation.\n *\n * This is a \"glue\" plugin that loads the following plugins:\n *\n * * The {@link module:indent/indentediting~IndentEditing indent editing feature}.\n * * The {@link module:indent/indentui~IndentUI indent UI feature}.\n *\n * The dependent plugins register the `'indent'` and `'outdent'` commands and introduce the `'indent'` and `'outdent'` buttons\n * that allow to increase or decrease text indentation of supported elements.\n *\n * **Note**: In order for the commands and buttons to work, at least one of compatible features is required.\n */ class Indent extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Indent';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            IndentEditing,\n            IndentUI\n        ];\n    }\n}\n\n/**\n * The indent block command.\n *\n * The command is registered by the {@link module:indent/indentblock~IndentBlock} as `'indentBlock'` for indenting blocks and\n * `'outdentBlock'` for outdenting blocks.\n *\n * To increase block indentation at the current selection, execute the command:\n *\n * ```ts\n * editor.execute( 'indentBlock' );\n * ```\n *\n * To decrease block indentation at the current selection, execute the command:\n *\n * ```ts\n * editor.execute( 'outdentBlock' );\n * ```\n */ class IndentBlockCommand extends Command {\n    /**\n\t * The command's indentation behavior.\n\t */ _indentBehavior;\n    /**\n\t * Creates an instance of the command.\n\t */ constructor(editor, indentBehavior){\n        super(editor);\n        this._indentBehavior = indentBehavior;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const editor = this.editor;\n        const model = editor.model;\n        const block = first(model.document.selection.getSelectedBlocks());\n        if (!block || !this._isIndentationChangeAllowed(block)) {\n            this.isEnabled = false;\n            return;\n        }\n        this.isEnabled = this._indentBehavior.checkEnabled(block.getAttribute('blockIndent'));\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const blocksToChange = this._getBlocksToChange();\n        model.change((writer)=>{\n            for (const block of blocksToChange){\n                const currentIndent = block.getAttribute('blockIndent');\n                const nextIndent = this._indentBehavior.getNextIndent(currentIndent);\n                if (nextIndent) {\n                    writer.setAttribute('blockIndent', nextIndent, block);\n                } else {\n                    writer.removeAttribute('blockIndent', block);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns blocks from selection that should have blockIndent selection set.\n\t */ _getBlocksToChange() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const blocksInSelection = Array.from(selection.getSelectedBlocks());\n        return blocksInSelection.filter((block)=>this._isIndentationChangeAllowed(block));\n    }\n    /**\n\t * Returns false if indentation cannot be applied, i.e.:\n\t * - for blocks disallowed by schema declaration\n\t * - for blocks in Document Lists (disallowed forward indentation only). See https://github.com/ckeditor/ckeditor5/issues/14155.\n\t * Otherwise returns true.\n\t */ _isIndentationChangeAllowed(element) {\n        const editor = this.editor;\n        if (!editor.model.schema.checkAttribute(element, 'blockIndent')) {\n            return false;\n        }\n        if (!editor.plugins.has('ListUtils')) {\n            return true;\n        }\n        // Only forward indentation is disallowed in list items. This allows the user to outdent blocks that are already indented.\n        if (!this._indentBehavior.isForward) {\n            return true;\n        }\n        const documentListUtils = editor.plugins.get('ListUtils');\n        return !documentListUtils.isListItemBlock(element);\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module indent/indentcommandbehavior/indentusingoffset\n */ /**\n * The block indentation behavior that uses offsets to set indentation.\n */ class IndentUsingOffset {\n    /**\n\t * The direction of indentation.\n\t */ isForward;\n    /**\n\t * The offset of the next indentation step.\n\t */ offset;\n    /**\n\t * Indentation unit.\n\t */ unit;\n    /**\n\t * Creates an instance of the indentation behavior.\n\t *\n\t * @param config.direction The direction of indentation.\n\t * @param config.offset The offset of the next indentation step.\n\t * @param config.unit Indentation unit.\n\t */ constructor(config){\n        this.isForward = config.direction === 'forward';\n        this.offset = config.offset;\n        this.unit = config.unit;\n    }\n    /**\n\t * @inheritDoc\n\t */ checkEnabled(indentAttributeValue) {\n        const currentOffset = parseFloat(indentAttributeValue || '0');\n        // The command is always enabled for forward indentation.\n        return this.isForward || currentOffset > 0;\n    }\n    /**\n\t * @inheritDoc\n\t */ getNextIndent(indentAttributeValue) {\n        const currentOffset = parseFloat(indentAttributeValue || '0');\n        const isSameUnit = !indentAttributeValue || indentAttributeValue.endsWith(this.unit);\n        if (!isSameUnit) {\n            return this.isForward ? this.offset + this.unit : undefined;\n        }\n        const nextOffset = this.isForward ? this.offset : -this.offset;\n        const offsetToSet = currentOffset + nextOffset;\n        return offsetToSet > 0 ? offsetToSet + this.unit : undefined;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module indent/indentcommandbehavior/indentusingclasses\n */ /**\n * The block indentation behavior that uses classes to set indentation.\n */ class IndentUsingClasses {\n    /**\n\t * The direction of indentation.\n\t */ isForward;\n    /**\n\t * A list of classes used for indentation.\n\t */ classes;\n    /**\n\t * Creates an instance of the indentation behavior.\n\t *\n\t * @param config.direction The direction of indentation.\n\t * @param config.classes A list of classes used for indentation.\n\t */ constructor(config){\n        this.isForward = config.direction === 'forward';\n        this.classes = config.classes;\n    }\n    /**\n\t * @inheritDoc\n\t */ checkEnabled(indentAttributeValue) {\n        const currentIndex = this.classes.indexOf(indentAttributeValue);\n        if (this.isForward) {\n            return currentIndex < this.classes.length - 1;\n        } else {\n            return currentIndex >= 0;\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ getNextIndent(indentAttributeValue) {\n        const currentIndex = this.classes.indexOf(indentAttributeValue);\n        const indexStep = this.isForward ? 1 : -1;\n        return this.classes[currentIndex + indexStep];\n    }\n}\n\nconst DEFAULT_ELEMENTS = [\n    'paragraph',\n    'heading1',\n    'heading2',\n    'heading3',\n    'heading4',\n    'heading5',\n    'heading6'\n];\n/**\n * The block indentation feature.\n *\n * It registers the `'indentBlock'` and `'outdentBlock'` commands.\n *\n * If the plugin {@link module:indent/indent~Indent} is defined, it also attaches the `'indentBlock'` and `'outdentBlock'` commands to\n * the `'indent'` and `'outdent'` commands.\n */ class IndentBlock extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('indentBlock', {\n            offset: 40,\n            unit: 'px'\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'IndentBlock';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const configuration = editor.config.get('indentBlock');\n        if (configuration.classes && configuration.classes.length) {\n            this._setupConversionUsingClasses(configuration.classes);\n            editor.commands.add('indentBlock', new IndentBlockCommand(editor, new IndentUsingClasses({\n                direction: 'forward',\n                classes: configuration.classes\n            })));\n            editor.commands.add('outdentBlock', new IndentBlockCommand(editor, new IndentUsingClasses({\n                direction: 'backward',\n                classes: configuration.classes\n            })));\n        } else {\n            editor.data.addStyleProcessorRules(addMarginRules);\n            this._setupConversionUsingOffset();\n            editor.commands.add('indentBlock', new IndentBlockCommand(editor, new IndentUsingOffset({\n                direction: 'forward',\n                offset: configuration.offset,\n                unit: configuration.unit\n            })));\n            editor.commands.add('outdentBlock', new IndentBlockCommand(editor, new IndentUsingOffset({\n                direction: 'backward',\n                offset: configuration.offset,\n                unit: configuration.unit\n            })));\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const indentCommand = editor.commands.get('indent');\n        const outdentCommand = editor.commands.get('outdent');\n        // Enable block indentation to heading configuration options. If it is not defined enable in paragraph and default headings.\n        const options = editor.config.get('heading.options');\n        const configuredElements = options && options.map((option)=>option.model);\n        const knownElements = configuredElements || DEFAULT_ELEMENTS;\n        knownElements.forEach((elementName)=>{\n            if (schema.isRegistered(elementName)) {\n                schema.extend(elementName, {\n                    allowAttributes: 'blockIndent'\n                });\n            }\n        });\n        schema.setAttributeProperties('blockIndent', {\n            isFormatting: true\n        });\n        indentCommand.registerChildCommand(editor.commands.get('indentBlock'));\n        outdentCommand.registerChildCommand(editor.commands.get('outdentBlock'));\n    }\n    /**\n\t * Setups conversion for using offset indents.\n\t */ _setupConversionUsingOffset() {\n        const conversion = this.editor.conversion;\n        const locale = this.editor.locale;\n        const marginProperty = locale.contentLanguageDirection === 'rtl' ? 'margin-right' : 'margin-left';\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                styles: {\n                    [marginProperty]: /[\\s\\S]+/\n                }\n            },\n            model: {\n                key: 'blockIndent',\n                value: (viewElement)=>{\n                    // Do not indent block elements in Document Lists. See https://github.com/ckeditor/ckeditor5/issues/12466.\n                    if (!viewElement.is('element', 'li')) {\n                        return viewElement.getStyle(marginProperty);\n                    }\n                }\n            }\n        });\n        conversion.for('downcast').attributeToAttribute({\n            model: 'blockIndent',\n            view: (modelAttributeValue)=>{\n                return {\n                    key: 'style',\n                    value: {\n                        [marginProperty]: modelAttributeValue\n                    }\n                };\n            }\n        });\n    }\n    /**\n\t * Setups conversion for using classes.\n\t */ _setupConversionUsingClasses(classes) {\n        const definition = {\n            model: {\n                key: 'blockIndent',\n                values: []\n            },\n            view: {}\n        };\n        for (const className of classes){\n            definition.model.values.push(className);\n            definition.view[className] = {\n                key: 'class',\n                value: [\n                    className\n                ]\n            };\n        }\n        this.editor.conversion.attributeToAttribute(definition);\n    }\n}\n\nexport { Indent, IndentBlock, IndentEditing, IndentUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { getLanguageDirection, Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { createDropdown, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, ListSeparatorView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ViewModel } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Returns the language attribute value in a human-readable text format:\n *\n * ```\n * <languageCode>:<textDirection>\n * ```\n *\n * * `languageCode` - The language code used for the `lang` attribute in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n * * `textDirection` - One of the following values: `rtl` or `ltr`, indicating the reading direction of the language.\n *\n * See the {@link module:core/editor/editorconfig~LanguageConfig#textPartLanguage text part language configuration}\n * for more information about language properties.\n *\n * If the `textDirection` argument is omitted, it will be automatically detected based on `languageCode`.\n *\n * @param languageCode The language code in the ISO 639-1 format.\n * @param textDirection The language text direction. Automatically detected if omitted.\n */ function stringifyLanguageAttribute(languageCode, textDirection) {\n    textDirection = textDirection || getLanguageDirection(languageCode);\n    return `${languageCode}:${textDirection}`;\n}\n/**\n * Retrieves language properties converted to attribute value by the\n * {@link module:language/utils~stringifyLanguageAttribute stringifyLanguageAttribute} function.\n *\n * @param str The attribute value.\n * @returns The object with properties:\n * * languageCode - The language code in the ISO 639 format.\n * * textDirection - The language text direction.\n */ function parseLanguageAttribute(str) {\n    const [languageCode, textDirection] = str.split(':');\n    return {\n        languageCode,\n        textDirection\n    };\n}\n\n/**\n * The text part language command plugin.\n */ class TextPartLanguageCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = this._getValueFromFirstAllowedNode();\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'language');\n    }\n    /**\n\t * Executes the command. Applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If `languageCode` is set to `false` or a `null` value, it will remove attributes. Otherwise, it will set\n\t * the attribute in the `{@link #value value}` format.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.languageCode The language code to be applied to the model.\n\t * @param options.textDirection The language text direction.\n\t */ execute({ languageCode, textDirection } = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const value = languageCode ? stringifyLanguageAttribute(languageCode, textDirection) : false;\n        model.change((writer)=>{\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute('language', value);\n                } else {\n                    writer.removeSelectionAttribute('language');\n                }\n            } else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), 'language');\n                for (const range of ranges){\n                    if (value) {\n                        writer.setAttribute('language', value, range);\n                    } else {\n                        writer.removeAttribute('language', range);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Returns the attribute value of the first node in the selection that allows the attribute.\n\t * For a collapsed selection it returns the selection attribute.\n\t *\n\t * @returns The attribute value.\n\t */ _getValueFromFirstAllowedNode() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (selection.isCollapsed) {\n            return selection.getAttribute('language') || false;\n        }\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if (schema.checkAttribute(item, 'language')) {\n                    return item.getAttribute('language') || false;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * The text part language editing.\n *\n * Introduces the `'textPartLanguage'` command and the `'language'` model element attribute.\n */ class TextPartLanguageEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TextPartLanguageEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Text part language options are only used to ensure that the feature works by default.\n        // In the real usage it should be reconfigured by a developer. We are not providing\n        // translations for `title` properties on purpose, as it's only an example configuration.\n        editor.config.define('language', {\n            textPartLanguage: [\n                {\n                    title: 'Arabic',\n                    languageCode: 'ar'\n                },\n                {\n                    title: 'French',\n                    languageCode: 'fr'\n                },\n                {\n                    title: 'Spanish',\n                    languageCode: 'es'\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.model.schema.extend('$text', {\n            allowAttributes: 'language'\n        });\n        editor.model.schema.setAttributeProperties('language', {\n            copyOnEnter: true\n        });\n        this._defineConverters();\n        editor.commands.add('textPartLanguage', new TextPartLanguageCommand(editor));\n    }\n    /**\n\t * @private\n\t */ _defineConverters() {\n        const conversion = this.editor.conversion;\n        conversion.for('upcast').elementToAttribute({\n            model: {\n                key: 'language',\n                value: (viewElement)=>{\n                    const languageCode = viewElement.getAttribute('lang');\n                    const textDirection = viewElement.getAttribute('dir');\n                    return stringifyLanguageAttribute(languageCode, textDirection);\n                }\n            },\n            view: {\n                name: 'span',\n                attributes: {\n                    lang: /[\\s\\S]+/\n                }\n            }\n        });\n        conversion.for('downcast').attributeToElement({\n            model: 'language',\n            view: (attributeValue, { writer }, data)=>{\n                if (!attributeValue) {\n                    return;\n                }\n                if (!data.item.is('$textProxy') && !data.item.is('documentSelection')) {\n                    return;\n                }\n                const { languageCode, textDirection } = parseLanguageAttribute(attributeValue);\n                return writer.createAttributeElement('span', {\n                    lang: languageCode,\n                    dir: textDirection\n                });\n            }\n        });\n    }\n}\n\n/**\n * The text part language UI plugin.\n *\n * It introduces the `'language'` dropdown.\n */ class TextPartLanguageUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TextPartLanguageUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const defaultTitle = t('Choose language');\n        const accessibleLabel = t('Language');\n        // Register UI component.\n        editor.ui.componentFactory.add('textPartLanguage', (locale)=>{\n            const { definitions, titles } = this._getItemMetadata();\n            const languageCommand = editor.commands.get('textPartLanguage');\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, definitions, {\n                ariaLabel: accessibleLabel,\n                role: 'menu'\n            });\n            dropdownView.buttonView.set({\n                ariaLabel: accessibleLabel,\n                ariaLabelledBy: undefined,\n                isOn: false,\n                withText: true,\n                tooltip: accessibleLabel\n            });\n            dropdownView.extendTemplate({\n                attributes: {\n                    class: [\n                        'ck-text-fragment-language-dropdown'\n                    ]\n                }\n            });\n            dropdownView.bind('isEnabled').to(languageCommand, 'isEnabled');\n            dropdownView.buttonView.bind('label').to(languageCommand, 'value', (value)=>{\n                return value && titles[value] || defaultTitle;\n            });\n            dropdownView.buttonView.bind('ariaLabel').to(languageCommand, 'value', (value)=>{\n                const selectedLanguageTitle = value && titles[value];\n                if (!selectedLanguageTitle) {\n                    return accessibleLabel;\n                }\n                return `${selectedLanguageTitle}, ${accessibleLabel}`;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', (evt)=>{\n                languageCommand.execute({\n                    languageCode: evt.source.languageCode,\n                    textDirection: evt.source.textDirection\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        // Register menu bar UI component.\n        editor.ui.componentFactory.add('menuBar:textPartLanguage', (locale)=>{\n            const { definitions } = this._getItemMetadata();\n            const languageCommand = editor.commands.get('textPartLanguage');\n            const menuView = new MenuBarMenuView(locale);\n            menuView.buttonView.set({\n                label: accessibleLabel\n            });\n            const listView = new MenuBarMenuListView(locale);\n            listView.set({\n                ariaLabel: t('Language'),\n                role: 'menu'\n            });\n            for (const definition of definitions){\n                if (definition.type != 'button') {\n                    listView.items.add(new ListSeparatorView(locale));\n                    continue;\n                }\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = new MenuBarMenuListItemButtonView(locale);\n                buttonView.set({\n                    role: 'menuitemradio',\n                    isToggleable: true\n                });\n                buttonView.bind(...Object.keys(definition.model)).to(definition.model);\n                buttonView.delegate('execute').to(menuView);\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            }\n            menuView.bind('isEnabled').to(languageCommand, 'isEnabled');\n            menuView.panelView.children.add(listView);\n            menuView.on('execute', (evt)=>{\n                languageCommand.execute({\n                    languageCode: evt.source.languageCode,\n                    textDirection: evt.source.textDirection\n                });\n                editor.editing.view.focus();\n            });\n            return menuView;\n        });\n    }\n    /**\n\t * Returns metadata for dropdown and menu items.\n\t */ _getItemMetadata() {\n        const editor = this.editor;\n        const itemDefinitions = new Collection();\n        const titles = {};\n        const languageCommand = editor.commands.get('textPartLanguage');\n        const options = editor.config.get('language.textPartLanguage');\n        const t = editor.locale.t;\n        const removeTitle = t('Remove language');\n        // Item definition with false `languageCode` will behave as remove lang button.\n        itemDefinitions.add({\n            type: 'button',\n            model: new ViewModel({\n                label: removeTitle,\n                languageCode: false,\n                withText: true\n            })\n        });\n        itemDefinitions.add({\n            type: 'separator'\n        });\n        for (const option of options){\n            const def = {\n                type: 'button',\n                model: new ViewModel({\n                    label: option.title,\n                    languageCode: option.languageCode,\n                    role: 'menuitemradio',\n                    textDirection: option.textDirection,\n                    withText: true\n                })\n            };\n            const language = stringifyLanguageAttribute(option.languageCode, option.textDirection);\n            def.model.bind('isOn').to(languageCommand, 'value', (value)=>value === language);\n            itemDefinitions.add(def);\n            titles[language] = option.title;\n        }\n        return {\n            definitions: itemDefinitions,\n            titles\n        };\n    }\n}\n\n/**\n * The text part language feature.\n *\n * This feature allows setting a language of the document's text part to support\n * [WCAG 3.1.2 Language of Parts](https://www.w3.org/TR/UNDERSTANDING-WCAG20/meaning-other-lang-id.html) specification.\n *\n * To change the editor's UI language, refer to the {@glink getting-started/setup/ui-language Setting the UI language} guide.\n *\n * For more information about this feature, check the {@glink api/language package page} as well as the {@glink features/language\n * Text part language} feature guide.\n *\n * This is a \"glue\" plugin which loads the\n * {@link module:language/textpartlanguageediting~TextPartLanguageEditing text part language editing feature}\n * and the {@link module:language/textpartlanguageui~TextPartLanguageUI text part language UI feature}.\n */ class TextPartLanguage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TextPartLanguageEditing,\n            TextPartLanguageUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TextPartLanguage';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { TextPartLanguage, TextPartLanguageEditing, TextPartLanguageUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { findAttributeRange, TwoStepCaretMovement, Input, inlineHighlight, Delete, TextWatcher, getLastTextLine } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { toMap, Collection, first, ObservableMixin, env, keyCodes, FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { upperFirst } from 'lodash-es';\nimport { ClickObserver, Matcher } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { View, ViewCollection, FocusCycler, submitHandler, LabeledFieldView, createLabeledInputText, ButtonView, SwitchButtonView, ContextualBalloon, CssTransitionDisablerMixin, MenuBarMenuListItemButtonView, clickOutsideHandler } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { isWidget } from '@ckeditor/ckeditor5-widget/dist/index.js';\n\n/**\n * Helper class that ties together all {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition} and provides\n * the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement downcast dispatchers} for them.\n */ class AutomaticDecorators {\n    /**\n\t * Stores the definition of {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators}.\n\t * This data is used as a source for a downcast dispatcher to create a proper conversion to output data.\n\t */ _definitions = new Set();\n    /**\n\t * Gives information about the number of decorators stored in the {@link module:link/utils/automaticdecorators~AutomaticDecorators}\n\t * instance.\n\t */ get length() {\n        return this._definitions.size;\n    }\n    /**\n\t * Adds automatic decorator objects or an array with them to be used during downcasting.\n\t *\n\t * @param item A configuration object of automatic rules for decorating links. It might also be an array of such objects.\n\t */ add(item) {\n        if (Array.isArray(item)) {\n            item.forEach((item)=>this._definitions.add(item));\n        } else {\n            this._definitions.add(item);\n        }\n    }\n    /**\n\t * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method.\n\t *\n\t * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n\t */ getDispatcher() {\n        return (dispatcher)=>{\n            dispatcher.on('attribute:linkHref', (evt, data, conversionApi)=>{\n                // There is only test as this behavior decorates links and\n                // it is run before dispatcher which actually consumes this node.\n                // This allows on writing own dispatcher with highest priority,\n                // which blocks both native converter and this additional decoration.\n                if (!conversionApi.consumable.test(data.item, 'attribute:linkHref')) {\n                    return;\n                }\n                // Automatic decorators for block links are handled e.g. in LinkImageEditing.\n                if (!(data.item.is('selection') || conversionApi.schema.isInline(data.item))) {\n                    return;\n                }\n                const viewWriter = conversionApi.writer;\n                const viewSelection = viewWriter.document.selection;\n                for (const item of this._definitions){\n                    const viewElement = viewWriter.createAttributeElement('a', item.attributes, {\n                        priority: 5\n                    });\n                    if (item.classes) {\n                        viewWriter.addClass(item.classes, viewElement);\n                    }\n                    for(const key in item.styles){\n                        viewWriter.setStyle(key, item.styles[key], viewElement);\n                    }\n                    viewWriter.setCustomProperty('link', true, viewElement);\n                    if (item.callback(data.attributeNewValue)) {\n                        if (data.item.is('selection')) {\n                            viewWriter.wrap(viewSelection.getFirstRange(), viewElement);\n                        } else {\n                            viewWriter.wrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n                        }\n                    } else {\n                        viewWriter.unwrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n                    }\n                }\n            }, {\n                priority: 'high'\n            });\n        };\n    }\n    /**\n\t * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method\n\t * when linking images.\n\t *\n\t * @returns A dispatcher function used as conversion helper in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n\t */ getDispatcherForLinkedImage() {\n        return (dispatcher)=>{\n            dispatcher.on('attribute:linkHref:imageBlock', (evt, data, { writer, mapper })=>{\n                const viewFigure = mapper.toViewElement(data.item);\n                const linkInImage = Array.from(viewFigure.getChildren()).find((child)=>child.is('element', 'a'));\n                // It's not guaranteed that the anchor is present in the image block during execution of this dispatcher.\n                // It might have been removed during the execution of unlink command that runs the image link downcast dispatcher\n                // that is executed before this one and removes the anchor from the image block.\n                if (!linkInImage) {\n                    return;\n                }\n                for (const item of this._definitions){\n                    const attributes = toMap(item.attributes);\n                    if (item.callback(data.attributeNewValue)) {\n                        for (const [key, val] of attributes){\n                            // Left for backward compatibility. Since v30 decorator should\n                            // accept `classes` and `styles` separately from `attributes`.\n                            if (key === 'class') {\n                                writer.addClass(val, linkInImage);\n                            } else {\n                                writer.setAttribute(key, val, linkInImage);\n                            }\n                        }\n                        if (item.classes) {\n                            writer.addClass(item.classes, linkInImage);\n                        }\n                        for(const key in item.styles){\n                            writer.setStyle(key, item.styles[key], linkInImage);\n                        }\n                    } else {\n                        for (const [key, val] of attributes){\n                            if (key === 'class') {\n                                writer.removeClass(val, linkInImage);\n                            } else {\n                                writer.removeAttribute(key, linkInImage);\n                            }\n                        }\n                        if (item.classes) {\n                            writer.removeClass(item.classes, linkInImage);\n                        }\n                        for(const key in item.styles){\n                            writer.removeStyle(key, linkInImage);\n                        }\n                    }\n                }\n            });\n        };\n    }\n}\n\nconst ATTRIBUTE_WHITESPACES = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\nconst SAFE_URL_TEMPLATE = '^(?:(?:<protocols>):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))';\n// Simplified email test - should be run over previously found URL.\nconst EMAIL_REG_EXP = /^[\\S]+@((?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.))+(?:[a-z\\u00a1-\\uffff]{2,})$/i;\n// The regex checks for the protocol syntax ('xxxx://' or 'xxxx:')\n// or non-word characters at the beginning of the link ('/', '#' etc.).\nconst PROTOCOL_REG_EXP = /^((\\w+:(\\/{2,})?)|(\\W))/i;\nconst DEFAULT_LINK_PROTOCOLS = [\n    'https?',\n    'ftps?',\n    'mailto'\n];\n/**\n * A keystroke used by the {@link module:link/linkui~LinkUI link UI feature}.\n */ const LINK_KEYSTROKE = 'Ctrl+K';\n/**\n * Returns `true` if a given view node is the link element.\n */ function isLinkElement(node) {\n    return node.is('attributeElement') && !!node.getCustomProperty('link');\n}\n/**\n * Creates a link {@link module:engine/view/attributeelement~AttributeElement} with the provided `href` attribute.\n */ function createLinkElement(href, { writer }) {\n    // Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n    const linkElement = writer.createAttributeElement('a', {\n        href\n    }, {\n        priority: 5\n    });\n    writer.setCustomProperty('link', true, linkElement);\n    return linkElement;\n}\n/**\n * Returns a safe URL based on a given value.\n *\n * A URL is considered safe if it is safe for the user (does not contain any malicious code).\n *\n * If a URL is considered unsafe, a simple `\"#\"` is returned.\n *\n * @internal\n */ function ensureSafeUrl(url, allowedProtocols = DEFAULT_LINK_PROTOCOLS) {\n    const urlString = String(url);\n    const protocolsList = allowedProtocols.join('|');\n    const customSafeRegex = new RegExp(`${SAFE_URL_TEMPLATE.replace('<protocols>', protocolsList)}`, 'i');\n    return isSafeUrl(urlString, customSafeRegex) ? urlString : '#';\n}\n/**\n * Checks whether the given URL is safe for the user (does not contain any malicious code).\n */ function isSafeUrl(url, customRegexp) {\n    const normalizedUrl = url.replace(ATTRIBUTE_WHITESPACES, '');\n    return !!normalizedUrl.match(customRegexp);\n}\n/**\n * Returns the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} configuration processed\n * to respect the locale of the editor, i.e. to display the {@link module:link/linkconfig~LinkDecoratorManualDefinition label}\n * in the correct language.\n *\n * **Note**: Only the few most commonly used labels are translated automatically. Other labels should be manually\n * translated in the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} configuration.\n *\n * @param t Shorthand for {@link module:utils/locale~Locale#t Locale#t}.\n * @param decorators The decorator reference where the label values should be localized.\n */ function getLocalizedDecorators(t, decorators) {\n    const localizedDecoratorsLabels = {\n        'Open in a new tab': t('Open in a new tab'),\n        'Downloadable': t('Downloadable')\n    };\n    decorators.forEach((decorator)=>{\n        if ('label' in decorator && localizedDecoratorsLabels[decorator.label]) {\n            decorator.label = localizedDecoratorsLabels[decorator.label];\n        }\n        return decorator;\n    });\n    return decorators;\n}\n/**\n * Converts an object with defined decorators to a normalized array of decorators. The `id` key is added for each decorator and\n * is used as the attribute's name in the model.\n */ function normalizeDecorators(decorators) {\n    const retArray = [];\n    if (decorators) {\n        for (const [key, value] of Object.entries(decorators)){\n            const decorator = Object.assign({}, value, {\n                id: `link${upperFirst(key)}`\n            });\n            retArray.push(decorator);\n        }\n    }\n    return retArray;\n}\n/**\n * Returns `true` if the specified `element` can be linked (the element allows the `linkHref` attribute).\n */ function isLinkableElement(element, schema) {\n    if (!element) {\n        return false;\n    }\n    return schema.checkAttribute(element.name, 'linkHref');\n}\n/**\n * Returns `true` if the specified `value` is an email.\n */ function isEmail(value) {\n    return EMAIL_REG_EXP.test(value);\n}\n/**\n * Adds the protocol prefix to the specified `link` when:\n *\n * * it does not contain it already, and there is a {@link module:link/linkconfig~LinkConfig#defaultProtocol `defaultProtocol` }\n * configuration value provided,\n * * or the link is an email address.\n */ function addLinkProtocolIfApplicable(link, defaultProtocol) {\n    const protocol = isEmail(link) ? 'mailto:' : defaultProtocol;\n    const isProtocolNeeded = !!protocol && !linkHasProtocol(link);\n    return link && isProtocolNeeded ? protocol + link : link;\n}\n/**\n * Checks if protocol is already included in the link.\n */ function linkHasProtocol(link) {\n    return PROTOCOL_REG_EXP.test(link);\n}\n/**\n * Opens the link in a new browser tab.\n */ function openLink(link) {\n    window.open(link, '_blank', 'noopener');\n}\n\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n */ class LinkCommand extends Command {\n    /**\n\t * A collection of {@link module:link/utils/manualdecorator~ManualDecorator manual decorators}\n\t * corresponding to the {@link module:link/linkconfig~LinkConfig#decorators decorator configuration}.\n\t *\n\t * You can consider it a model with states of manual decorators added to the currently selected link.\n\t */ manualDecorators = new Collection();\n    /**\n\t * An instance of the helper that ties together all {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition}\n\t * that are used by the {@glink features/link link} and the {@glink features/images/images-linking linking images} features.\n\t */ automaticDecorators = new AutomaticDecorators();\n    /**\n\t * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.\n\t */ restoreManualDecoratorStates() {\n        for (const manualDecorator of this.manualDecorators){\n            manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement() || first(selection.getSelectedBlocks());\n        // A check for any integration that allows linking elements (e.g. `LinkImage`).\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            this.value = selectedElement.getAttribute('linkHref');\n            this.isEnabled = model.schema.checkAttribute(selectedElement, 'linkHref');\n        } else {\n            this.value = selection.getAttribute('linkHref');\n            this.isEnabled = model.schema.checkAttributeInSelection(selection, 'linkHref');\n        }\n        for (const manualDecorator of this.manualDecorators){\n            manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n\t * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n\t *\n\t * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a\n\t * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but\n\t * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n\t * The selection will be updated to wrap the just inserted text node.\n\t *\n\t * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n\t *\n\t * # Decorators and model attribute management\n\t *\n\t * There is an optional argument to this command that applies or removes model\n\t * {@glink framework/architecture/editing-engine#text-attributes text attributes} brought by\n\t * {@link module:link/utils/manualdecorator~ManualDecorator manual link decorators}.\n\t *\n\t * Text attribute names in the model correspond to the entries in the {@link module:link/linkconfig~LinkConfig#decorators\n\t * configuration}.\n\t * For every decorator configured, a model text attribute exists with the \"link\" prefix. For example, a `'linkMyDecorator'` attribute\n\t * corresponds to `'myDecorator'` in the configuration.\n\t *\n\t * To learn more about link decorators, check out the {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`}\n\t * documentation.\n\t *\n\t * Here is how to manage decorator attributes with the link command:\n\t *\n\t * ```ts\n\t * const linkCommand = editor.commands.get( 'link' );\n\t *\n\t * // Adding a new decorator attribute.\n\t * linkCommand.execute( 'http://example.com', {\n\t * \tlinkIsExternal: true\n\t * } );\n\t *\n\t * // Removing a decorator attribute from the selection.\n\t * linkCommand.execute( 'http://example.com', {\n\t * \tlinkIsExternal: false\n\t * } );\n\t *\n\t * // Adding multiple decorator attributes at the same time.\n\t * linkCommand.execute( 'http://example.com', {\n\t * \tlinkIsExternal: true,\n\t * \tlinkIsDownloadable: true,\n\t * } );\n\t *\n\t * // Removing and adding decorator attributes at the same time.\n\t * linkCommand.execute( 'http://example.com', {\n\t * \tlinkIsExternal: false,\n\t * \tlinkFoo: true,\n\t * \tlinkIsDownloadable: false,\n\t * } );\n\t * ```\n\t *\n\t * **Note**: If the decorator attribute name is not specified, its state remains untouched.\n\t *\n\t * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all\n\t * decorator attributes.\n\t *\n\t * @fires execute\n\t * @param href Link destination.\n\t * @param manualDecoratorIds The information about manual decorator attributes to be applied or removed upon execution.\n\t */ execute(href, manualDecoratorIds = {}) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        // Stores information about manual decorators to turn them on/off when command is applied.\n        const truthyManualDecorators = [];\n        const falsyManualDecorators = [];\n        for(const name in manualDecoratorIds){\n            if (manualDecoratorIds[name]) {\n                truthyManualDecorators.push(name);\n            } else {\n                falsyManualDecorators.push(name);\n            }\n        }\n        model.change((writer)=>{\n            // If selection is collapsed then update selected link or insert new one at the place of caret.\n            if (selection.isCollapsed) {\n                const position = selection.getFirstPosition();\n                // When selection is inside text with `linkHref` attribute.\n                if (selection.hasAttribute('linkHref')) {\n                    const linkText = extractTextFromSelection(selection);\n                    // Then update `linkHref` value.\n                    let linkRange = findAttributeRange(position, 'linkHref', selection.getAttribute('linkHref'), model);\n                    if (selection.getAttribute('linkHref') === linkText) {\n                        linkRange = this._updateLinkContent(model, writer, linkRange, href);\n                    }\n                    writer.setAttribute('linkHref', href, linkRange);\n                    truthyManualDecorators.forEach((item)=>{\n                        writer.setAttribute(item, true, linkRange);\n                    });\n                    falsyManualDecorators.forEach((item)=>{\n                        writer.removeAttribute(item, linkRange);\n                    });\n                    // Put the selection at the end of the updated link.\n                    writer.setSelection(writer.createPositionAfter(linkRange.end.nodeBefore));\n                } else if (href !== '') {\n                    const attributes = toMap(selection.getAttributes());\n                    attributes.set('linkHref', href);\n                    truthyManualDecorators.forEach((item)=>{\n                        attributes.set(item, true);\n                    });\n                    const { end: positionAfter } = model.insertContent(writer.createText(href, attributes), position);\n                    // Put the selection at the end of the inserted link.\n                    // Using end of range returned from insertContent in case nodes with the same attributes got merged.\n                    writer.setSelection(positionAfter);\n                }\n                // Remove the `linkHref` attribute and all link decorators from the selection.\n                // It stops adding a new content into the link element.\n                [\n                    'linkHref',\n                    ...truthyManualDecorators,\n                    ...falsyManualDecorators\n                ].forEach((item)=>{\n                    writer.removeSelectionAttribute(item);\n                });\n            } else {\n                // If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n                // omitting nodes where the `linkHref` attribute is disallowed.\n                const ranges = model.schema.getValidRanges(selection.getRanges(), 'linkHref');\n                // But for the first, check whether the `linkHref` attribute is allowed on selected blocks (e.g. the \"image\" element).\n                const allowedRanges = [];\n                for (const element of selection.getSelectedBlocks()){\n                    if (model.schema.checkAttribute(element, 'linkHref')) {\n                        allowedRanges.push(writer.createRangeOn(element));\n                    }\n                }\n                // Ranges that accept the `linkHref` attribute. Since we will iterate over `allowedRanges`, let's clone it.\n                const rangesToUpdate = allowedRanges.slice();\n                // For all selection ranges we want to check whether given range is inside an element that accepts the `linkHref` attribute.\n                // If so, we don't want to propagate applying the attribute to its children.\n                for (const range of ranges){\n                    if (this._isRangeToUpdate(range, allowedRanges)) {\n                        rangesToUpdate.push(range);\n                    }\n                }\n                for (const range of rangesToUpdate){\n                    let linkRange = range;\n                    if (rangesToUpdate.length === 1) {\n                        // Current text of the link in the document.\n                        const linkText = extractTextFromSelection(selection);\n                        if (selection.getAttribute('linkHref') === linkText) {\n                            linkRange = this._updateLinkContent(model, writer, range, href);\n                            writer.setSelection(writer.createSelection(linkRange));\n                        }\n                    }\n                    writer.setAttribute('linkHref', href, linkRange);\n                    truthyManualDecorators.forEach((item)=>{\n                        writer.setAttribute(item, true, linkRange);\n                    });\n                    falsyManualDecorators.forEach((item)=>{\n                        writer.removeAttribute(item, linkRange);\n                    });\n                }\n            }\n        });\n    }\n    /**\n\t * Provides information whether a decorator with a given name is present in the currently processed selection.\n\t *\n\t * @param decoratorName The name of the manual decorator used in the model\n\t * @returns The information whether a given decorator is currently present in the selection.\n\t */ _getDecoratorStateFromModel(decoratorName) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // A check for the `LinkImage` plugin. If the selection contains an element, get values from the element.\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            return selectedElement.getAttribute(decoratorName);\n        }\n        return selection.getAttribute(decoratorName);\n    }\n    /**\n\t * Checks whether specified `range` is inside an element that accepts the `linkHref` attribute.\n\t *\n\t * @param range A range to check.\n\t * @param allowedRanges An array of ranges created on elements where the attribute is accepted.\n\t */ _isRangeToUpdate(range, allowedRanges) {\n        for (const allowedRange of allowedRanges){\n            // A range is inside an element that will have the `linkHref` attribute. Do not modify its nodes.\n            if (allowedRange.containsRange(range)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Updates selected link with a new value as its content and as its href attribute.\n\t *\n\t * @param model Model is need to insert content.\n\t * @param writer Writer is need to create text element in model.\n\t * @param range A range where should be inserted content.\n\t * @param href A link value which should be in the href attribute and in the content.\n\t */ _updateLinkContent(model, writer, range, href) {\n        const text = writer.createText(href, {\n            linkHref: href\n        });\n        return model.insertContent(text, range);\n    }\n}\n// Returns a text of a link under the collapsed selection or a selection that contains the entire link.\nfunction extractTextFromSelection(selection) {\n    if (selection.isCollapsed) {\n        const firstPosition = selection.getFirstPosition();\n        return firstPosition.textNode && firstPosition.textNode.data;\n    } else {\n        const rangeItems = Array.from(selection.getFirstRange().getItems());\n        if (rangeItems.length > 1) {\n            return null;\n        }\n        const firstNode = rangeItems[0];\n        if (firstNode.is('$text') || firstNode.is('$textProxy')) {\n            return firstNode.data;\n        }\n        return null;\n    }\n}\n\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n */ class UnlinkCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // A check for any integration that allows linking elements (e.g. `LinkImage`).\n        // Currently the selection reads attributes from text nodes only. See #7429 and #7465.\n        if (isLinkableElement(selectedElement, model.schema)) {\n            this.isEnabled = model.schema.checkAttribute(selectedElement, 'linkHref');\n        } else {\n            this.isEnabled = model.schema.checkAttributeInSelection(selection, 'linkHref');\n        }\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n\t * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n\t *\n\t * # Decorators\n\t *\n\t * If {@link module:link/linkconfig~LinkConfig#decorators `config.link.decorators`} is specified,\n\t * all configured decorators are removed together with the `linkHref` attribute.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const editor = this.editor;\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const linkCommand = editor.commands.get('link');\n        model.change((writer)=>{\n            // Get ranges to unlink.\n            const rangesToUnlink = selection.isCollapsed ? [\n                findAttributeRange(selection.getFirstPosition(), 'linkHref', selection.getAttribute('linkHref'), model)\n            ] : model.schema.getValidRanges(selection.getRanges(), 'linkHref');\n            // Remove `linkHref` attribute from specified ranges.\n            for (const range of rangesToUnlink){\n                writer.removeAttribute('linkHref', range);\n                // If there are registered custom attributes, then remove them during unlink.\n                if (linkCommand) {\n                    for (const manualDecorator of linkCommand.manualDecorators){\n                        writer.removeAttribute(manualDecorator.id, range);\n                    }\n                }\n            }\n        });\n    }\n}\n\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils/manualdecorator~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n */ class ManualDecorator extends /* #__PURE__ */ ObservableMixin() {\n    /**\n\t * An ID of a manual decorator which is the name of the attribute in the model, for example: 'linkManualDecorator0'.\n\t */ id;\n    /**\n\t * The default value of manual decorator.\n\t */ defaultValue;\n    /**\n\t * The label used in the user interface to toggle the manual decorator.\n\t */ label;\n    /**\n\t * A set of attributes added to downcasted data when the decorator is activated for a specific link.\n\t * Attributes should be added in a form of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t */ attributes;\n    /**\n\t * A set of classes added to downcasted data when the decorator is activated for a specific link.\n\t * Classes should be added in a form of classes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t */ classes;\n    /**\n\t * A set of styles added to downcasted data when the decorator is activated for a specific link.\n\t * Styles should be added in a form of styles defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t */ styles;\n    /**\n\t * Creates a new instance of {@link module:link/utils/manualdecorator~ManualDecorator}.\n\t *\n\t * @param config.id The name of the attribute used in the model that represents a given manual decorator.\n\t * For example: `'linkIsExternal'`.\n\t * @param config.label The label used in the user interface to toggle the manual decorator.\n\t * @param config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n\t * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t * @param [config.defaultValue] Controls whether the decorator is \"on\" by default.\n\t */ constructor({ id, label, attributes, classes, styles, defaultValue }){\n        super();\n        this.id = id;\n        this.set('value', undefined);\n        this.defaultValue = defaultValue;\n        this.label = label;\n        this.attributes = attributes;\n        this.classes = classes;\n        this.styles = styles;\n    }\n    /**\n\t * Returns {@link module:engine/view/matcher~MatcherPattern} with decorator attributes.\n\t *\n\t * @internal\n\t */ _createPattern() {\n        return {\n            attributes: this.attributes,\n            classes: this.classes,\n            styles: this.styles\n        };\n    }\n}\n\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n */ class LinkEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        // Clipboard is required for handling cut and paste events while typing over the link.\n        return [\n            TwoStepCaretMovement,\n            Input,\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('link', {\n            allowCreatingEmptyLinks: false,\n            addTargetToExternalLinks: false\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const allowedProtocols = this.editor.config.get('link.allowedProtocols');\n        // Allow link attribute on all inline nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: 'linkHref'\n        });\n        editor.conversion.for('dataDowncast').attributeToElement({\n            model: 'linkHref',\n            view: createLinkElement\n        });\n        editor.conversion.for('editingDowncast').attributeToElement({\n            model: 'linkHref',\n            view: (href, conversionApi)=>{\n                return createLinkElement(ensureSafeUrl(href, allowedProtocols), conversionApi);\n            }\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'a',\n                attributes: {\n                    href: true\n                }\n            },\n            model: {\n                key: 'linkHref',\n                value: (viewElement)=>viewElement.getAttribute('href')\n            }\n        });\n        // Create linking commands.\n        editor.commands.add('link', new LinkCommand(editor));\n        editor.commands.add('unlink', new UnlinkCommand(editor));\n        const linkDecorators = getLocalizedDecorators(editor.t, normalizeDecorators(editor.config.get('link.decorators')));\n        this._enableAutomaticDecorators(linkDecorators.filter((item)=>item.mode === DECORATOR_AUTOMATIC));\n        this._enableManualDecorators(linkDecorators.filter((item)=>item.mode === DECORATOR_MANUAL));\n        // Enable two-step caret movement for `linkHref` attribute.\n        const twoStepCaretMovementPlugin = editor.plugins.get(TwoStepCaretMovement);\n        twoStepCaretMovementPlugin.registerAttribute('linkHref');\n        // Setup highlight over selected link.\n        inlineHighlight(editor, 'linkHref', 'a', HIGHLIGHT_CLASS);\n        // Handle link following by CTRL+click or ALT+ENTER\n        this._enableLinkOpen();\n        // Clears the DocumentSelection decorator attributes if the selection is no longer in a link (for example while using 2-SCM).\n        this._enableSelectionAttributesFixer();\n        // Handle adding default protocol to pasted links.\n        this._enableClipboardIntegration();\n    }\n    /**\n\t * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators}\n\t * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n\t * for each one of them. Downcast dispatchers are obtained using the\n\t * {@link module:link/utils/automaticdecorators~AutomaticDecorators#getDispatcher} method.\n\t *\n\t * **Note**: This method also activates the automatic external link decorator if enabled with\n\t * {@link module:link/linkconfig~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n\t */ _enableAutomaticDecorators(automaticDecoratorDefinitions) {\n        const editor = this.editor;\n        // Store automatic decorators in the command instance as we do the same with manual decorators.\n        // Thanks to that, `LinkImageEditing` plugin can re-use the same definitions.\n        const command = editor.commands.get('link');\n        const automaticDecorators = command.automaticDecorators;\n        // Adds a default decorator for external links.\n        if (editor.config.get('link.addTargetToExternalLinks')) {\n            automaticDecorators.add({\n                id: 'linkIsExternal',\n                mode: DECORATOR_AUTOMATIC,\n                callback: (url)=>!!url && EXTERNAL_LINKS_REGEXP.test(url),\n                attributes: {\n                    target: '_blank',\n                    rel: 'noopener noreferrer'\n                }\n            });\n        }\n        automaticDecorators.add(automaticDecoratorDefinitions);\n        if (automaticDecorators.length) {\n            editor.conversion.for('downcast').add(automaticDecorators.getDispatcher());\n        }\n    }\n    /**\n\t * Processes an array of configured {@link module:link/linkconfig~LinkDecoratorManualDefinition manual decorators},\n\t * transforms them into {@link module:link/utils/manualdecorator~ManualDecorator} instances and stores them in the\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n\t *\n\t * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n\t * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n\t * with adequate model attributes.\n\t */ _enableManualDecorators(manualDecoratorDefinitions) {\n        if (!manualDecoratorDefinitions.length) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        const manualDecorators = command.manualDecorators;\n        manualDecoratorDefinitions.forEach((decoratorDefinition)=>{\n            editor.model.schema.extend('$text', {\n                allowAttributes: decoratorDefinition.id\n            });\n            // Keeps reference to manual decorator to decode its name to attributes during downcast.\n            const decorator = new ManualDecorator(decoratorDefinition);\n            manualDecorators.add(decorator);\n            editor.conversion.for('downcast').attributeToElement({\n                model: decorator.id,\n                view: (manualDecoratorValue, { writer, schema }, { item })=>{\n                    // Manual decorators for block links are handled e.g. in LinkImageEditing.\n                    if (!(item.is('selection') || schema.isInline(item))) {\n                        return;\n                    }\n                    if (manualDecoratorValue) {\n                        const element = writer.createAttributeElement('a', decorator.attributes, {\n                            priority: 5\n                        });\n                        if (decorator.classes) {\n                            writer.addClass(decorator.classes, element);\n                        }\n                        for(const key in decorator.styles){\n                            writer.setStyle(key, decorator.styles[key], element);\n                        }\n                        writer.setCustomProperty('link', true, element);\n                        return element;\n                    }\n                }\n            });\n            editor.conversion.for('upcast').elementToAttribute({\n                view: {\n                    name: 'a',\n                    ...decorator._createPattern()\n                },\n                model: {\n                    key: decorator.id\n                }\n            });\n        });\n    }\n    /**\n\t * Attaches handlers for {@link module:engine/view/document~Document#event:enter} and\n\t * {@link module:engine/view/document~Document#event:click} to enable link following.\n\t */ _enableLinkOpen() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        this.listenTo(viewDocument, 'click', (evt, data)=>{\n            const shouldOpen = env.isMac ? data.domEvent.metaKey : data.domEvent.ctrlKey;\n            if (!shouldOpen) {\n                return;\n            }\n            let clickedElement = data.domTarget;\n            if (clickedElement.tagName.toLowerCase() != 'a') {\n                clickedElement = clickedElement.closest('a');\n            }\n            if (!clickedElement) {\n                return;\n            }\n            const url = clickedElement.getAttribute('href');\n            if (!url) {\n                return;\n            }\n            evt.stop();\n            data.preventDefault();\n            openLink(url);\n        }, {\n            context: '$capture'\n        });\n        // Open link on Alt+Enter.\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            const linkCommand = editor.commands.get('link');\n            const url = linkCommand.value;\n            const shouldOpen = !!url && data.keyCode === keyCodes.enter && data.altKey;\n            if (!shouldOpen) {\n                return;\n            }\n            evt.stop();\n            openLink(url);\n        });\n    }\n    /**\n\t * Watches the DocumentSelection attribute changes and removes link decorator attributes when the linkHref attribute is removed.\n\t *\n\t * This is to ensure that there is no left-over link decorator attributes on the document selection that is no longer in a link.\n\t */ _enableSelectionAttributesFixer() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        this.listenTo(selection, 'change:attribute', (evt, { attributeKeys })=>{\n            if (!attributeKeys.includes('linkHref') || selection.hasAttribute('linkHref')) {\n                return;\n            }\n            model.change((writer)=>{\n                removeLinkAttributesFromSelection(writer, getLinkAttributesAllowedOnText(model.schema));\n            });\n        });\n    }\n    /**\n\t * Enables URL fixing on pasting.\n\t */ _enableClipboardIntegration() {\n        const editor = this.editor;\n        const model = editor.model;\n        const defaultProtocol = this.editor.config.get('link.defaultProtocol');\n        if (!defaultProtocol) {\n            return;\n        }\n        this.listenTo(editor.plugins.get('ClipboardPipeline'), 'contentInsertion', (evt, data)=>{\n            model.change((writer)=>{\n                const range = writer.createRangeIn(data.content);\n                for (const item of range.getItems()){\n                    if (item.hasAttribute('linkHref')) {\n                        const newLink = addLinkProtocolIfApplicable(item.getAttribute('linkHref'), defaultProtocol);\n                        writer.setAttribute('linkHref', newLink, item);\n                    }\n                }\n            });\n        });\n    }\n}\n/**\n * Make the selection free of link-related model attributes.\n * All link-related model attributes start with \"link\". That includes not only \"linkHref\"\n * but also all decorator attributes (they have dynamic names), or even custom plugins.\n */ function removeLinkAttributesFromSelection(writer, linkAttributes) {\n    writer.removeSelectionAttribute('linkHref');\n    for (const attribute of linkAttributes){\n        writer.removeSelectionAttribute(attribute);\n    }\n}\n/**\n * Returns an array containing names of the attributes allowed on `$text` that describes the link item.\n */ function getLinkAttributesAllowedOnText(schema) {\n    const textAttributes = schema.getDefinition('$text').allowAttributes;\n    return textAttributes.filter((attribute)=>attribute.startsWith('link'));\n}\n\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n */ class LinkFormView extends View {\n    /**\n\t * Tracks information about DOM focus in the form.\n\t */ focusTracker = new FocusTracker();\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes = new KeystrokeHandler();\n    /**\n\t * The URL input view.\n\t */ urlInputView;\n    /**\n\t * The Save button view.\n\t */ saveButtonView;\n    /**\n\t * The Cancel button view.\n\t */ cancelButtonView;\n    /**\n\t * A collection of {@link module:ui/button/switchbuttonview~SwitchButtonView},\n\t * which corresponds to {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators}\n\t * configured in the editor.\n\t */ _manualDecoratorSwitches;\n    /**\n\t * A collection of child views in the form.\n\t */ children;\n    /**\n\t * An array of form validators used by {@link #isValid}.\n\t */ _validators;\n    /**\n\t * A collection of views that can be focused in the form.\n\t */ _focusables = new ViewCollection();\n    /**\n\t * Helps cycling over {@link #_focusables} in the form.\n\t */ _focusCycler;\n    /**\n\t * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param locale The localization services instance.\n\t * @param linkCommand Reference to {@link module:link/linkcommand~LinkCommand}.\n\t * @param validators  Form validators used by {@link #isValid}.\n\t */ constructor(locale, linkCommand, validators){\n        super(locale);\n        const t = locale.t;\n        this._validators = validators;\n        this.urlInputView = this._createUrlInput();\n        this.saveButtonView = this._createButton(t('Save'), icons.check, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        this.cancelButtonView = this._createButton(t('Cancel'), icons.cancel, 'ck-button-cancel', 'cancel');\n        this._manualDecoratorSwitches = this._createManualDecoratorSwitches(linkCommand);\n        this.children = this._createFormChildren(linkCommand.manualDecorators);\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        const classList = [\n            'ck',\n            'ck-link-form',\n            'ck-responsive-form'\n        ];\n        if (linkCommand.manualDecorators.length) {\n            classList.push('ck-link-form_layout-vertical', 'ck-vertical-form');\n        }\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: classList,\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n\t * in the {@link module:link/ui/linkformview~LinkFormView}.\n\t *\n\t * @returns Key-value pairs, where the key is the name of the decorator and the value is its state.\n\t */ getDecoratorSwitchesState() {\n        return Array.from(this._manualDecoratorSwitches).reduce((accumulator, switchButton)=>{\n            accumulator[switchButton.name] = switchButton.isOn;\n            return accumulator;\n        }, {});\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        submitHandler({\n            view: this\n        });\n        const childViews = [\n            this.urlInputView,\n            ...this._manualDecoratorSwitches,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach((v)=>{\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the form.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Validates the form and returns `false` when some fields are invalid.\n\t */ isValid() {\n        this.resetFormStatus();\n        for (const validator of this._validators){\n            const errorText = validator(this);\n            // One error per field is enough.\n            if (errorText) {\n                // Apply updated error.\n                this.urlInputView.errorText = errorText;\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Cleans up the supplementary error and information text of the {@link #urlInputView}\n\t * bringing them back to the state when the form has been displayed for the first time.\n\t *\n\t * See {@link #isValid}.\n\t */ resetFormStatus() {\n        this.urlInputView.errorText = null;\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @returns Labeled field view instance.\n\t */ _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        labeledInput.fieldView.inputMode = 'url';\n        labeledInput.label = t('Link URL');\n        return labeledInput;\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @param label The button label.\n\t * @param icon The button icon.\n\t * @param className The additional button CSS class name.\n\t * @param eventName An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns The button view instance.\n\t */ _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({\n            attributes: {\n                class: className\n            }\n        });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n\t * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n\t * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n\t *\n\t * @param linkCommand A reference to the link command.\n\t * @returns ViewCollection of switch buttons.\n\t */ _createManualDecoratorSwitches(linkCommand) {\n        const switches = this.createCollection();\n        for (const manualDecorator of linkCommand.manualDecorators){\n            const switchButton = new SwitchButtonView(this.locale);\n            switchButton.set({\n                name: manualDecorator.id,\n                label: manualDecorator.label,\n                withText: true\n            });\n            switchButton.bind('isOn').toMany([\n                manualDecorator,\n                linkCommand\n            ], 'value', (decoratorValue, commandValue)=>{\n                return commandValue === undefined && decoratorValue === undefined ? !!manualDecorator.defaultValue : !!decoratorValue;\n            });\n            switchButton.on('execute', ()=>{\n                manualDecorator.set('value', !switchButton.isOn);\n            });\n            switches.add(switchButton);\n        }\n        return switches;\n    }\n    /**\n\t * Populates the {@link #children} collection of the form.\n\t *\n\t * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n\t * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n\t * to these decorators.\n\t *\n\t * @param manualDecorators A reference to\n\t * the collection of manual decorators stored in the link command.\n\t * @returns The children of link form view.\n\t */ _createFormChildren(manualDecorators) {\n        const children = this.createCollection();\n        children.add(this.urlInputView);\n        if (manualDecorators.length) {\n            const additionalButtonsView = new View();\n            additionalButtonsView.setTemplate({\n                tag: 'ul',\n                children: this._manualDecoratorSwitches.map((switchButton)=>({\n                        tag: 'li',\n                        children: [\n                            switchButton\n                        ],\n                        attributes: {\n                            class: [\n                                'ck',\n                                'ck-list__item'\n                            ]\n                        }\n                    })),\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-reset',\n                        'ck-list'\n                    ]\n                }\n            });\n            children.add(additionalButtonsView);\n        }\n        children.add(this.saveButtonView);\n        children.add(this.cancelButtonView);\n        return children;\n    }\n    /**\n\t * The native DOM `value` of the {@link #urlInputView} element.\n\t *\n\t * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n\t * which works one way only and may not represent the actual state of the component in the DOM.\n\t */ get url() {\n        const { element } = this.urlInputView.fieldView;\n        if (!element) {\n            return null;\n        }\n        return element.value.trim();\n    }\n}\n\nvar unlinkIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.077 15 .991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\\\"/></svg>\";\n\n/**\n * The link actions view class. This view displays the link preview, allows\n * unlinking or editing the link.\n */ class LinkActionsView extends View {\n    /**\n\t * Tracks information about DOM focus in the actions.\n\t */ focusTracker = new FocusTracker();\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes = new KeystrokeHandler();\n    /**\n\t * The href preview view.\n\t */ previewButtonView;\n    /**\n\t * The unlink button view.\n\t */ unlinkButtonView;\n    /**\n\t * The edit link button view.\n\t */ editButtonView;\n    /**\n\t * A collection of views that can be focused in the view.\n\t */ _focusables = new ViewCollection();\n    /**\n\t * Helps cycling over {@link #_focusables} in the view.\n\t */ _focusCycler;\n    _linkConfig;\n    /**\n\t * @inheritDoc\n\t */ constructor(locale, linkConfig = {}){\n        super(locale);\n        const t = locale.t;\n        this.previewButtonView = this._createPreviewButton();\n        this.unlinkButtonView = this._createButton(t('Unlink'), unlinkIcon, 'unlink');\n        this.editButtonView = this._createButton(t('Edit link'), icons.pencil, 'edit');\n        this.set('href', undefined);\n        this._linkConfig = linkConfig;\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions',\n                    'ck-responsive-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach((v)=>{\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the fist {@link #_focusables} in the actions.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Creates a button view.\n\t *\n\t * @param label The button label.\n\t * @param icon The button icon.\n\t * @param eventName An event name that the `ButtonView#execute` event will be delegated to.\n\t * @returns The button view instance.\n\t */ _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n\t * Creates a link href preview button.\n\t *\n\t * @returns The button view instance.\n\t */ _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('Open link in new tab')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions__preview'\n                ],\n                href: bind.to('href', (href)=>href && ensureSafeUrl(href, this._linkConfig.allowedProtocols)),\n                target: '_blank',\n                rel: 'noopener noreferrer'\n            }\n        });\n        button.bind('label').to(this, 'href', (href)=>{\n            return href || t('This link has no URL');\n        });\n        button.bind('isEnabled').to(this, 'href', (href)=>!!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}\n\nvar linkIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m11.077 15 .991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\\\"/></svg>\";\n\nconst VISUAL_SELECTION_MARKER_NAME = 'link-ui';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n */ class LinkUI extends Plugin {\n    /**\n\t * The actions view displayed inside of the balloon.\n\t */ actionsView = null;\n    /**\n\t * The form view displayed inside the balloon.\n\t */ formView = null;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        editor.editing.view.addObserver(ClickObserver);\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        this._enableBalloonActivators();\n        // Renders a fake visual selection marker on an expanded selection.\n        editor.conversion.for('editingDowncast').markerToHighlight({\n            model: VISUAL_SELECTION_MARKER_NAME,\n            view: {\n                classes: [\n                    'ck-fake-link-selection'\n                ]\n            }\n        });\n        // Renders a fake visual selection marker on a collapsed selection.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: VISUAL_SELECTION_MARKER_NAME,\n            view: (data, { writer })=>{\n                if (!data.markerRange.isCollapsed) {\n                    return null;\n                }\n                const markerElement = writer.createUIElement('span');\n                writer.addClass([\n                    'ck-fake-link-selection',\n                    'ck-fake-link-selection_collapsed'\n                ], markerElement);\n                return markerElement;\n            }\n        });\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Create link'),\n                    keystroke: LINK_KEYSTROKE\n                },\n                {\n                    label: t('Move out of a link'),\n                    keystroke: [\n                        [\n                            'arrowleft',\n                            'arrowleft'\n                        ],\n                        [\n                            'arrowright',\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        if (this.formView) {\n            this.formView.destroy();\n        }\n        if (this.actionsView) {\n            this.actionsView.destroy();\n        }\n    }\n    /**\n\t * Creates views.\n\t */ _createViews() {\n        this.actionsView = this._createActionsView();\n        this.formView = this._createFormView();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t */ _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale, editor.config.get('link'));\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', ()=>{\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', ()=>{\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel)=>{\n            this._hideUI();\n            cancel();\n        });\n        // Open the form view on Ctrl+K when the **actions have focus**..\n        actionsView.keystrokes.set(LINK_KEYSTROKE, (data, cancel)=>{\n            this._addFormView();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t */ _createFormView() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const defaultProtocol = editor.config.get('link.defaultProtocol');\n        const formView = new (CssTransitionDisablerMixin(LinkFormView))(editor.locale, linkCommand, getFormValidators(editor));\n        formView.urlInputView.fieldView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isEnabled').to(linkCommand, 'isEnabled');\n        // Disable the \"save\" button if the command is disabled.\n        formView.saveButtonView.bind('isEnabled').to(linkCommand, 'isEnabled');\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', ()=>{\n            if (formView.isValid()) {\n                const { value } = formView.urlInputView.fieldView.element;\n                const parsedUrl = addLinkProtocolIfApplicable(value, defaultProtocol);\n                editor.execute('link', parsedUrl, formView.getDecoratorSwitchesState());\n                this._closeFormView();\n            }\n        });\n        // Update balloon position when form error changes.\n        this.listenTo(formView.urlInputView, 'change:errorText', ()=>{\n            editor.ui.update();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', ()=>{\n            this._closeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel)=>{\n            this._closeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t */ _createToolbarLinkButton() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('link', ()=>{\n            const button = this._createButton(ButtonView);\n            button.set({\n                tooltip: true\n            });\n            return button;\n        });\n        editor.ui.componentFactory.add('menuBar:link', ()=>{\n            const button = this._createButton(MenuBarMenuListItemButtonView);\n            button.set({\n                role: 'menuitemcheckbox'\n            });\n            return button;\n        });\n    }\n    /**\n\t * Creates a button for link command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('link');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Link'),\n            icon: linkIcon,\n            keystroke: LINK_KEYSTROKE,\n            isToggleable: true\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        view.bind('isOn').to(command, 'value', (value)=>!!value);\n        // Show the panel on button click.\n        this.listenTo(view, 'execute', ()=>this._showUI(true));\n        return view;\n    }\n    /**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} should be displayed.\n\t */ _enableBalloonActivators() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', ()=>{\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(LINK_KEYSTROKE, (keyEvtData, cancel)=>{\n            // Prevent focusing the search bar in FF, Chrome and Edge. See https://github.com/ckeditor/ckeditor5/issues/4811.\n            cancel();\n            if (editor.commands.get('link').isEnabled) {\n                this._showUI(true);\n            }\n        });\n    }\n    /**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t */ _enableUserBalloonInteractions() {\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel)=>{\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel)=>{\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: ()=>this._isUIInPanel,\n            contextElements: ()=>[\n                    this._balloon.view.element\n                ],\n            callback: ()=>this._hideUI()\n        });\n    }\n    /**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @internal\n\t */ _addActionsView() {\n        if (!this.actionsView) {\n            this._createViews();\n        }\n        if (this._areActionsInPanel) {\n            return;\n        }\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t */ _addFormView() {\n        if (!this.formView) {\n            this._createViews();\n        }\n        if (this._isFormInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this.formView.disableCssTransitions();\n        this.formView.resetFormStatus();\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView.fieldView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.fieldView.value = linkCommand.value || '';\n        // Select input when form view is currently visible.\n        if (this._balloon.visibleView === this.formView) {\n            this.formView.urlInputView.fieldView.select();\n        }\n        this.formView.enableCssTransitions();\n    }\n    /**\n\t * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n\t * decided upon the link command value (which has a value if the document selection is in the link).\n\t *\n\t * Additionally, if any {@link module:link/linkconfig~LinkConfig#decorators} are defined in the editor configuration, the state of\n\t * switch buttons responsible for manual decorator handling is restored.\n\t */ _closeFormView() {\n        const linkCommand = this.editor.commands.get('link');\n        // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n        // when the user cancels the editing form.\n        linkCommand.restoreManualDecoratorStates();\n        if (linkCommand.value !== undefined) {\n            this._removeFormView();\n        } else {\n            this._hideUI();\n        }\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t */ _removeFormView() {\n        if (this._isFormInPanel) {\n            // Blur the input element before removing it from DOM to prevent issues in some browsers.\n            // See https://github.com/ckeditor/ckeditor5/issues/1501.\n            this.formView.saveButtonView.focus();\n            // Reset the URL field to update the state of the submit button.\n            this.formView.urlInputView.fieldView.reset();\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n            this._hideFakeVisualSelection();\n        }\n    }\n    /**\n\t * Shows the correct UI type. It is either {@link #formView} or {@link #actionsView}.\n\t *\n\t * @internal\n\t */ _showUI(forceVisible = false) {\n        if (!this.formView) {\n            this._createViews();\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            // Show visual selection on a text without a link when the contextual balloon is displayed.\n            // See https://github.com/ckeditor/ckeditor5/issues/4721.\n            this._showFakeVisualSelection();\n            this._addActionsView();\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n            this._addFormView();\n        } else {\n            // Go to the editing UI if actions are already visible.\n            if (this._areActionsVisible) {\n                this._addFormView();\n            } else {\n                this._addActionsView();\n            }\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n        }\n        // Begin responding to ui#update once the UI is added.\n        this._startUpdatingUI();\n    }\n    /**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t */ _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this.stopListening(this._balloon, 'change:visibleView');\n        // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n        // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n        editor.editing.view.focus();\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n        this._hideFakeVisualSelection();\n    }\n    /**\n\t * Makes the UI react to the {@link module:ui/editorui/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor UI should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t */ _startUpdatingUI() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        const update = ()=>{\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n                this._hideUI();\n            } else if (this._isUIVisible) {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        };\n        function getSelectionParent() {\n            return viewDocument.selection.focus.getAncestors().reverse().find((node)=>node.is('element'));\n        }\n        this.listenTo(editor.ui, 'update', update);\n        this.listenTo(this._balloon, 'change:visibleView', update);\n    }\n    /**\n\t * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n\t */ get _isFormInPanel() {\n        return !!this.formView && this._balloon.hasView(this.formView);\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n\t */ get _areActionsInPanel() {\n        return !!this.actionsView && this._balloon.hasView(this.actionsView);\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t */ get _areActionsVisible() {\n        return !!this.actionsView && this._balloon.visibleView === this.actionsView;\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t */ get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t */ get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return !!this.formView && visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t */ _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const model = this.editor.model;\n        const viewDocument = view.document;\n        let target;\n        if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n            // There are cases when we highlight selection using a marker (#7705, #4721).\n            const markerViewElements = Array.from(this.editor.editing.mapper.markerNameToElements(VISUAL_SELECTION_MARKER_NAME));\n            const newRange = view.createRange(view.createPositionBefore(markerViewElements[0]), view.createPositionAfter(markerViewElements[markerViewElements.length - 1]));\n            target = view.domConverter.viewRangeToDom(newRange);\n        } else {\n            // Make sure the target is calculated on demand at the last moment because a cached DOM range\n            // (which is very fragile) can desynchronize with the state of the editing view if there was\n            // any rendering done in the meantime. This can happen, for instance, when an inline widget\n            // gets unlinked.\n            target = ()=>{\n                const targetLink = this._getSelectedLinkElement();\n                return targetLink ? // When selection is inside link element, then attach panel to this element.\n                view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n                view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n            };\n        }\n        return {\n            target\n        };\n    }\n    /**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection, the link element is returned when **fully**\n\t * selected and the **only** element within the selection boundaries, or when\n\t * a linked widget is selected.\n\t */ _getSelectedLinkElement() {\n        const view = this.editor.editing.view;\n        const selection = view.document.selection;\n        const selectedElement = selection.getSelectedElement();\n        // The selection is collapsed or some widget is selected (especially inline widget).\n        if (selection.isCollapsed || selectedElement && isWidget(selectedElement)) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        } else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            } else {\n                return null;\n            }\n        }\n    }\n    /**\n\t * Displays a fake visual selection when the contextual balloon is displayed.\n\t *\n\t * This adds a 'link-ui' marker into the document that is rendered as a highlight on selected text fragment.\n\t */ _showFakeVisualSelection() {\n        const model = this.editor.model;\n        model.change((writer)=>{\n            const range = model.document.selection.getFirstRange();\n            if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n                writer.updateMarker(VISUAL_SELECTION_MARKER_NAME, {\n                    range\n                });\n            } else {\n                if (range.start.isAtEnd) {\n                    const startPosition = range.start.getLastMatchingPosition(({ item })=>!model.schema.isContent(item), {\n                        boundaries: range\n                    });\n                    writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n                        usingOperation: false,\n                        affectsData: false,\n                        range: writer.createRange(startPosition, range.end)\n                    });\n                } else {\n                    writer.addMarker(VISUAL_SELECTION_MARKER_NAME, {\n                        usingOperation: false,\n                        affectsData: false,\n                        range\n                    });\n                }\n            }\n        });\n    }\n    /**\n\t * Hides the fake visual selection created in {@link #_showFakeVisualSelection}.\n\t */ _hideFakeVisualSelection() {\n        const model = this.editor.model;\n        if (model.markers.has(VISUAL_SELECTION_MARKER_NAME)) {\n            model.change((writer)=>{\n                writer.removeMarker(VISUAL_SELECTION_MARKER_NAME);\n            });\n        }\n    }\n}\n/**\n * Returns a link element if there's one among the ancestors of the provided `Position`.\n *\n * @param View position to analyze.\n * @returns Link element at the position or null.\n */ function findLinkElementAncestor(position) {\n    return position.getAncestors().find((ancestor)=>isLinkElement(ancestor)) || null;\n}\n/**\n * Returns link form validation callbacks.\n *\n * @param editor Editor instance.\n */ function getFormValidators(editor) {\n    const t = editor.t;\n    const allowCreatingEmptyLinks = editor.config.get('link.allowCreatingEmptyLinks');\n    return [\n        (form)=>{\n            if (!allowCreatingEmptyLinks && !form.url.length) {\n                return t('Link URL must not be empty.');\n            }\n        }\n    ];\n}\n\nconst MIN_LINK_LENGTH_WITH_SPACE_AT_END = 4; // Ie: \"t.co \" (length 5).\n// This was a tweak from https://gist.github.com/dperini/729294.\nconst URL_REG_EXP = new RegExp(// Group 1: Line start or after a space.\n'(^|\\\\s)' + // Group 2: Detected URL (or e-mail).\n'(' + // Protocol identifier or short syntax \"//\"\n// a. Full form http://user@foo.bar.baz:8080/foo/bar.html#baz?foo=bar\n'(' + '(?:(?:(?:https?|ftp):)?\\\\/\\\\/)' + // BasicAuth using user:pass (optional)\n'(?:\\\\S+(?::\\\\S*)?@)?' + '(?:' + // IP address dotted notation octets\n// excludes loopback network 0.0.0.0\n// excludes reserved space >= 224.0.0.0\n// excludes network & broadcast addresses\n// (first & last IP address of each class)\n'(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])' + '(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}' + '(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))' + '|' + '(' + // Do not allow `www.foo` - see https://github.com/ckeditor/ckeditor5/issues/8050.\n'((?!www\\\\.)|(www\\\\.))' + // Host & domain names.\n'(?![-_])(?:[-_a-z0-9\\\\u00a1-\\\\uffff]{1,63}\\\\.)+' + // TLD identifier name.\n'(?:[a-z\\\\u00a1-\\\\uffff]{2,63})' + ')' + ')' + // port number (optional)\n'(?::\\\\d{2,5})?' + // resource path (optional)\n'(?:[/?#]\\\\S*)?' + ')' + '|' + // b. Short form (either www.example.com or example@example.com)\n'(' + '(www.|(\\\\S+@))' + // Host & domain names.\n'((?![-_])(?:[-_a-z0-9\\\\u00a1-\\\\uffff]{1,63}\\\\.))+' + // TLD identifier name.\n'(?:[a-z\\\\u00a1-\\\\uffff]{2,63})' + ')' + ')$', 'i');\nconst URL_GROUP_IN_MATCH = 2;\n/**\n * The autolink plugin.\n */ class AutoLink extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Delete,\n            LinkEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AutoLink';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        selection.on('change:range', ()=>{\n            // Disable plugin when selection is inside a code block.\n            this.isEnabled = !selection.anchor.parent.is('element', 'codeBlock');\n        });\n        this._enableTypingHandling();\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        this._enableEnterHandling();\n        this._enableShiftEnterHandling();\n        this._enablePasteLinking();\n    }\n    /**\n\t * For given position, returns a range that includes the whole link that contains the position.\n\t *\n\t * If position is not inside a link, returns `null`.\n\t */ _expandLinkRange(model, position) {\n        if (position.textNode && position.textNode.hasAttribute('linkHref')) {\n            return findAttributeRange(position, 'linkHref', position.textNode.getAttribute('linkHref'), model);\n        } else {\n            return null;\n        }\n    }\n    /**\n\t * Extends the document selection to includes all links that intersects with given `selectedRange`.\n\t */ _selectEntireLinks(writer, selectedRange) {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const selStart = selection.getFirstPosition();\n        const selEnd = selection.getLastPosition();\n        let updatedSelection = selectedRange.getJoined(this._expandLinkRange(model, selStart) || selectedRange);\n        if (updatedSelection) {\n            updatedSelection = updatedSelection.getJoined(this._expandLinkRange(model, selEnd) || selectedRange);\n        }\n        if (updatedSelection && (updatedSelection.start.isBefore(selStart) || updatedSelection.end.isAfter(selEnd))) {\n            // Only update the selection if it changed.\n            writer.setSelection(updatedSelection);\n        }\n    }\n    /**\n\t * Enables autolinking on pasting a URL when some content is selected.\n\t */ _enablePasteLinking() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        const linkCommand = editor.commands.get('link');\n        clipboardPipeline.on('inputTransformation', (evt, data)=>{\n            if (!this.isEnabled || !linkCommand.isEnabled || selection.isCollapsed || data.method !== 'paste') {\n                // Abort if we are disabled or the selection is collapsed.\n                return;\n            }\n            if (selection.rangeCount > 1) {\n                // Abort if there are multiple selection ranges.\n                return;\n            }\n            const selectedRange = selection.getFirstRange();\n            const newLink = data.dataTransfer.getData('text/plain');\n            if (!newLink) {\n                // Abort if there is no plain text on the clipboard.\n                return;\n            }\n            const matches = newLink.match(URL_REG_EXP);\n            // If the text in the clipboard has a URL, and that URL is the whole clipboard.\n            if (matches && matches[2] === newLink) {\n                model.change((writer)=>{\n                    this._selectEntireLinks(writer, selectedRange);\n                    linkCommand.execute(newLink);\n                });\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Enables autolinking on typing.\n\t */ _enableTypingHandling() {\n        const editor = this.editor;\n        const watcher = new TextWatcher(editor.model, (text)=>{\n            // 1. Detect <kbd>Space</kbd> after a text with a potential link.\n            if (!isSingleSpaceAtTheEnd(text)) {\n                return;\n            }\n            // 2. Check text before last typed <kbd>Space</kbd>.\n            const url = getUrlAtTextEnd(text.substr(0, text.length - 1));\n            if (url) {\n                return {\n                    url\n                };\n            }\n        });\n        watcher.on('matched:data', (evt, data)=>{\n            const { batch, range, url } = data;\n            if (!batch.isTyping) {\n                return;\n            }\n            const linkEnd = range.end.getShiftedBy(-1); // Executed after a space character.\n            const linkStart = linkEnd.getShiftedBy(-url.length);\n            const linkRange = editor.model.createRange(linkStart, linkEnd);\n            this._applyAutoLink(url, linkRange);\n        });\n        watcher.bind('isEnabled').to(this);\n    }\n    /**\n\t * Enables autolinking on the <kbd>Enter</kbd> key.\n\t */ _enableEnterHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const enterCommand = editor.commands.get('enter');\n        if (!enterCommand) {\n            return;\n        }\n        enterCommand.on('execute', ()=>{\n            const position = model.document.selection.getFirstPosition();\n            if (!position.parent.previousSibling) {\n                return;\n            }\n            const rangeToCheck = model.createRangeIn(position.parent.previousSibling);\n            this._checkAndApplyAutoLinkOnRange(rangeToCheck);\n        });\n    }\n    /**\n\t * Enables autolinking on the <kbd>Shift</kbd>+<kbd>Enter</kbd> keyboard shortcut.\n\t */ _enableShiftEnterHandling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const shiftEnterCommand = editor.commands.get('shiftEnter');\n        if (!shiftEnterCommand) {\n            return;\n        }\n        shiftEnterCommand.on('execute', ()=>{\n            const position = model.document.selection.getFirstPosition();\n            const rangeToCheck = model.createRange(model.createPositionAt(position.parent, 0), position.getShiftedBy(-1));\n            this._checkAndApplyAutoLinkOnRange(rangeToCheck);\n        });\n    }\n    /**\n\t * Checks if the passed range contains a linkable text.\n\t */ _checkAndApplyAutoLinkOnRange(rangeToCheck) {\n        const model = this.editor.model;\n        const { text, range } = getLastTextLine(rangeToCheck, model);\n        const url = getUrlAtTextEnd(text);\n        if (url) {\n            const linkRange = model.createRange(range.end.getShiftedBy(-url.length), range.end);\n            this._applyAutoLink(url, linkRange);\n        }\n    }\n    /**\n\t * Applies a link on a given range if the link should be applied.\n\t *\n\t * @param url The URL to link.\n\t * @param range The text range to apply the link attribute to.\n\t */ _applyAutoLink(url, range) {\n        const model = this.editor.model;\n        const defaultProtocol = this.editor.config.get('link.defaultProtocol');\n        const fullUrl = addLinkProtocolIfApplicable(url, defaultProtocol);\n        if (!this.isEnabled || !isLinkAllowedOnRange(range, model) || !linkHasProtocol(fullUrl) || linkIsAlreadySet(range)) {\n            return;\n        }\n        this._persistAutoLink(fullUrl, range);\n    }\n    /**\n\t * Enqueues autolink changes in the model.\n\t *\n\t * @param url The URL to link.\n\t * @param range The text range to apply the link attribute to.\n\t */ _persistAutoLink(url, range) {\n        const model = this.editor.model;\n        const deletePlugin = this.editor.plugins.get('Delete');\n        // Enqueue change to make undo step.\n        model.enqueueChange((writer)=>{\n            writer.setAttribute('linkHref', url, range);\n            model.enqueueChange(()=>{\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    }\n}\n// Check if text should be evaluated by the plugin in order to reduce number of RegExp checks on whole text.\nfunction isSingleSpaceAtTheEnd(text) {\n    return text.length > MIN_LINK_LENGTH_WITH_SPACE_AT_END && text[text.length - 1] === ' ' && text[text.length - 2] !== ' ';\n}\nfunction getUrlAtTextEnd(text) {\n    const match = URL_REG_EXP.exec(text);\n    return match ? match[URL_GROUP_IN_MATCH] : null;\n}\nfunction isLinkAllowedOnRange(range, model) {\n    return model.schema.checkAttributeInSelection(model.createSelection(range), 'linkHref');\n}\nfunction linkIsAlreadySet(range) {\n    const item = range.start.nodeAfter;\n    return !!item && item.hasAttribute('linkHref');\n}\n\n/**\n * The link plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n */ class Link extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LinkEditing,\n            LinkUI,\n            AutoLink\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Link';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The link image engine feature.\n *\n * It accepts the `linkHref=\"url\"` attribute in the model for the {@link module:image/image~Image `<imageBlock>`} element\n * which allows linking images.\n */ class LinkImageEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'ImageEditing',\n            'ImageUtils',\n            LinkEditing\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkImageEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        if (editor.plugins.has('ImageBlockEditing')) {\n            schema.extend('imageBlock', {\n                allowAttributes: [\n                    'linkHref'\n                ]\n            });\n        }\n        editor.conversion.for('upcast').add(upcastLink(editor));\n        editor.conversion.for('downcast').add(downcastImageLink(editor));\n        // Definitions for decorators are provided by the `link` command and the `LinkEditing` plugin.\n        this._enableAutomaticDecorators();\n        this._enableManualDecorators();\n    }\n    /**\n\t * Processes {@link module:link/linkconfig~LinkDecoratorAutomaticDefinition automatic decorators} definitions and\n\t * attaches proper converters that will work when linking an image.`\n\t */ _enableAutomaticDecorators() {\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        const automaticDecorators = command.automaticDecorators;\n        if (automaticDecorators.length) {\n            editor.conversion.for('downcast').add(automaticDecorators.getDispatcherForLinkedImage());\n        }\n    }\n    /**\n\t * Processes transformed {@link module:link/utils/manualdecorator~ManualDecorator} instances and attaches proper converters\n\t * that will work when linking an image.\n\t */ _enableManualDecorators() {\n        const editor = this.editor;\n        const command = editor.commands.get('link');\n        for (const decorator of command.manualDecorators){\n            if (editor.plugins.has('ImageBlockEditing')) {\n                editor.model.schema.extend('imageBlock', {\n                    allowAttributes: decorator.id\n                });\n            }\n            if (editor.plugins.has('ImageInlineEditing')) {\n                editor.model.schema.extend('imageInline', {\n                    allowAttributes: decorator.id\n                });\n            }\n            editor.conversion.for('downcast').add(downcastImageLinkManualDecorator(decorator));\n            editor.conversion.for('upcast').add(upcastImageLinkManualDecorator(editor, decorator));\n        }\n    }\n}\n/**\n * Returns a converter for linked block images that consumes the \"href\" attribute\n * if a link contains an image.\n *\n * @param editor The editor instance.\n */ function upcastLink(editor) {\n    const isImageInlinePluginLoaded = editor.plugins.has('ImageInlineEditing');\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('element:a', (evt, data, conversionApi)=>{\n            const viewLink = data.viewItem;\n            const imageInLink = imageUtils.findViewImgElement(viewLink);\n            if (!imageInLink) {\n                return;\n            }\n            const blockImageView = imageInLink.findAncestor((element)=>imageUtils.isBlockImageView(element));\n            // There are four possible cases to consider here\n            //\n            // 1. A \"root > ... > figure.image > a > img\" structure.\n            // 2. A \"root > ... > figure.image > a > picture > img\" structure.\n            // 3. A \"root > ... > block > a > img\" structure.\n            // 4. A \"root > ... > block > a > picture > img\" structure.\n            //\n            // but the last 2 cases should only be considered by this converter when the inline image plugin\n            // is NOT loaded in the editor (because otherwise, that would be a plain, linked inline image).\n            if (isImageInlinePluginLoaded && !blockImageView) {\n                return;\n            }\n            // There's an image inside an <a> element - we consume it so it won't be picked up by the Link plugin.\n            const consumableAttributes = {\n                attributes: [\n                    'href'\n                ]\n            };\n            // Consume the `href` attribute so the default one will not convert it to $text attribute.\n            if (!conversionApi.consumable.consume(viewLink, consumableAttributes)) {\n                // Might be consumed by something else - i.e. other converter with priority=highest - a standard check.\n                return;\n            }\n            const linkHref = viewLink.getAttribute('href');\n            // Missing the 'href' attribute.\n            if (!linkHref) {\n                return;\n            }\n            // A full definition of the image feature.\n            // figure > a > img: parent of the view link element is an image element (figure).\n            let modelElement = data.modelCursor.parent;\n            if (!modelElement.is('element', 'imageBlock')) {\n                // a > img: parent of the view link is not the image (figure) element. We need to convert it manually.\n                const conversionResult = conversionApi.convertItem(imageInLink, data.modelCursor);\n                // Set image range as conversion result.\n                data.modelRange = conversionResult.modelRange;\n                // Continue conversion where image conversion ends.\n                data.modelCursor = conversionResult.modelCursor;\n                modelElement = data.modelCursor.nodeBefore;\n            }\n            if (modelElement && modelElement.is('element', 'imageBlock')) {\n                // Set the linkHref attribute from link element on model image element.\n                conversionApi.writer.setAttribute('linkHref', linkHref, modelElement);\n            }\n        }, {\n            priority: 'high'\n        });\n    // Using the same priority that `upcastImageLinkManualDecorator()` converter guarantees\n    // that manual decorators will decorate the proper element.\n    };\n}\n/**\n * Creates a converter that adds `<a>` to linked block image view elements.\n */ function downcastImageLink(editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            // The image will be already converted - so it will be present in the view.\n            const viewFigure = conversionApi.mapper.toViewElement(data.item);\n            const writer = conversionApi.writer;\n            // But we need to check whether the link element exists.\n            const linkInImage = Array.from(viewFigure.getChildren()).find((child)=>child.is('element', 'a'));\n            const viewImage = imageUtils.findViewImgElement(viewFigure);\n            // <picture>...<img/></picture> or <img/>\n            const viewImgOrPicture = viewImage.parent.is('element', 'picture') ? viewImage.parent : viewImage;\n            // If so, update the attribute if it's defined or remove the entire link if the attribute is empty.\n            if (linkInImage) {\n                if (data.attributeNewValue) {\n                    writer.setAttribute('href', data.attributeNewValue, linkInImage);\n                } else {\n                    writer.move(writer.createRangeOn(viewImgOrPicture), writer.createPositionAt(viewFigure, 0));\n                    writer.remove(linkInImage);\n                }\n            } else {\n                // But if it does not exist. Let's wrap already converted image by newly created link element.\n                // 1. Create an empty link element.\n                const linkElement = writer.createContainerElement('a', {\n                    href: data.attributeNewValue\n                });\n                // 2. Insert link inside the associated image.\n                writer.insert(writer.createPositionAt(viewFigure, 0), linkElement);\n                // 3. Move the image to the link.\n                writer.move(writer.createRangeOn(viewImgOrPicture), writer.createPositionAt(linkElement, 0));\n            }\n        }, {\n            priority: 'high'\n        });\n    };\n}\n/**\n * Returns a converter that decorates the `<a>` element when the image is the link label.\n */ function downcastImageLinkManualDecorator(decorator) {\n    return (dispatcher)=>{\n        dispatcher.on(`attribute:${decorator.id}:imageBlock`, (evt, data, conversionApi)=>{\n            const viewFigure = conversionApi.mapper.toViewElement(data.item);\n            const linkInImage = Array.from(viewFigure.getChildren()).find((child)=>child.is('element', 'a'));\n            // The <a> element was removed by the time this converter is executed.\n            // It may happen when the base `linkHref` and decorator attributes are removed\n            // at the same time (see #8401).\n            if (!linkInImage) {\n                return;\n            }\n            for (const [key, val] of toMap(decorator.attributes)){\n                conversionApi.writer.setAttribute(key, val, linkInImage);\n            }\n            if (decorator.classes) {\n                conversionApi.writer.addClass(decorator.classes, linkInImage);\n            }\n            for(const key in decorator.styles){\n                conversionApi.writer.setStyle(key, decorator.styles[key], linkInImage);\n            }\n        });\n    };\n}\n/**\n * Returns a converter that checks whether manual decorators should be applied to the link.\n */ function upcastImageLinkManualDecorator(editor, decorator) {\n    const isImageInlinePluginLoaded = editor.plugins.has('ImageInlineEditing');\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('element:a', (evt, data, conversionApi)=>{\n            const viewLink = data.viewItem;\n            const imageInLink = imageUtils.findViewImgElement(viewLink);\n            // We need to check whether an image is inside a link because the converter handles\n            // only manual decorators for linked images. See #7975.\n            if (!imageInLink) {\n                return;\n            }\n            const blockImageView = imageInLink.findAncestor((element)=>imageUtils.isBlockImageView(element));\n            if (isImageInlinePluginLoaded && !blockImageView) {\n                return;\n            }\n            const matcher = new Matcher(decorator._createPattern());\n            const result = matcher.match(viewLink);\n            // The link element does not have required attributes or/and proper values.\n            if (!result) {\n                return;\n            }\n            // Check whether we can consume those attributes.\n            if (!conversionApi.consumable.consume(viewLink, result.match)) {\n                return;\n            }\n            // At this stage we can assume that we have the `<imageBlock>` element.\n            // `nodeBefore` comes after conversion: `<a><img></a>`.\n            // `parent` comes with full image definition: `<figure><a><img></a></figure>.\n            // See the body of the `upcastLink()` function.\n            const modelElement = data.modelCursor.nodeBefore || data.modelCursor.parent;\n            conversionApi.writer.setAttribute(decorator.id, true, modelElement);\n        }, {\n            priority: 'high'\n        });\n    // Using the same priority that `upcastLink()` converter guarantees that the linked image was properly converted.\n    };\n}\n\n/**\n * The link image UI plugin.\n *\n * This plugin provides the `'linkImage'` button that can be displayed in the {@link module:image/imagetoolbar~ImageToolbar}.\n * It can be used to wrap images in links.\n */ class LinkImageUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LinkEditing,\n            LinkUI,\n            'ImageBlockEditing'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkImageUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        this.listenTo(viewDocument, 'click', (evt, data)=>{\n            if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n                // Prevent browser navigation when clicking a linked image.\n                data.preventDefault();\n                // Block the `LinkUI` plugin when an image was clicked.\n                // In such a case, we'd like to display the image toolbar.\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this._createToolbarLinkImageButton();\n    }\n    /**\n\t * Creates a `LinkImageUI` button view.\n\t *\n\t * Clicking this button shows a {@link module:link/linkui~LinkUI#_balloon} attached to the selection.\n\t * When an image is already linked, the view shows {@link module:link/linkui~LinkUI#actionsView} or\n\t * {@link module:link/linkui~LinkUI#formView} if it is not.\n\t */ _createToolbarLinkImageButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('linkImage', (locale)=>{\n            const button = new ButtonView(locale);\n            const plugin = editor.plugins.get('LinkUI');\n            const linkCommand = editor.commands.get('link');\n            button.set({\n                isEnabled: true,\n                label: t('Link image'),\n                icon: linkIcon,\n                keystroke: LINK_KEYSTROKE,\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            button.bind('isOn').to(linkCommand, 'value', (value)=>!!value);\n            // Show the actionsView or formView (both from LinkUI) on button click depending on whether the image is linked already.\n            this.listenTo(button, 'execute', ()=>{\n                if (this._isSelectedLinkedImage(editor.model.document.selection)) {\n                    plugin._addActionsView();\n                } else {\n                    plugin._showUI(true);\n                }\n            });\n            return button;\n        });\n    }\n    /**\n\t * Returns true if a linked image (either block or inline) is the only selected element\n\t * in the model document.\n\t */ _isSelectedLinkedImage(selection) {\n        const selectedModelElement = selection.getSelectedElement();\n        const imageUtils = this.editor.plugins.get('ImageUtils');\n        return imageUtils.isImage(selectedModelElement) && selectedModelElement.hasAttribute('linkHref');\n    }\n}\n\n/**\n * The `LinkImage` plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkimageediting~LinkImageEditing link image editing feature}\n * and {@link module:link/linkimageui~LinkImageUI link image UI feature}.\n */ class LinkImage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            LinkImageEditing,\n            LinkImageUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkImage';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { AutoLink, Link, LinkActionsView, LinkCommand, LinkEditing, LinkFormView, LinkImage, LinkImageEditing, LinkImageUI, LinkUI, UnlinkCommand, addLinkProtocolIfApplicable, isLinkableElement };\n//# sourceMappingURL=index.js.map\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n","function extend (destination) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) destination[key] = source[key];\n    }\n  }\n  return destination\n}\n\nfunction repeat (character, count) {\n  return Array(count + 1).join(character)\n}\n\nfunction trimLeadingNewlines (string) {\n  return string.replace(/^\\n*/, '')\n}\n\nfunction trimTrailingNewlines (string) {\n  // avoid match-at-end regexp bottleneck, see #370\n  var indexEnd = string.length;\n  while (indexEnd > 0 && string[indexEnd - 1] === '\\n') indexEnd--;\n  return string.substring(0, indexEnd)\n}\n\nvar blockElements = [\n  'ADDRESS', 'ARTICLE', 'ASIDE', 'AUDIO', 'BLOCKQUOTE', 'BODY', 'CANVAS',\n  'CENTER', 'DD', 'DIR', 'DIV', 'DL', 'DT', 'FIELDSET', 'FIGCAPTION', 'FIGURE',\n  'FOOTER', 'FORM', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER',\n  'HGROUP', 'HR', 'HTML', 'ISINDEX', 'LI', 'MAIN', 'MENU', 'NAV', 'NOFRAMES',\n  'NOSCRIPT', 'OL', 'OUTPUT', 'P', 'PRE', 'SECTION', 'TABLE', 'TBODY', 'TD',\n  'TFOOT', 'TH', 'THEAD', 'TR', 'UL'\n];\n\nfunction isBlock (node) {\n  return is(node, blockElements)\n}\n\nvar voidElements = [\n  'AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT',\n  'KEYGEN', 'LINK', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR'\n];\n\nfunction isVoid (node) {\n  return is(node, voidElements)\n}\n\nfunction hasVoid (node) {\n  return has(node, voidElements)\n}\n\nvar meaningfulWhenBlankElements = [\n  'A', 'TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TH', 'TD', 'IFRAME', 'SCRIPT',\n  'AUDIO', 'VIDEO'\n];\n\nfunction isMeaningfulWhenBlank (node) {\n  return is(node, meaningfulWhenBlankElements)\n}\n\nfunction hasMeaningfulWhenBlank (node) {\n  return has(node, meaningfulWhenBlankElements)\n}\n\nfunction is (node, tagNames) {\n  return tagNames.indexOf(node.nodeName) >= 0\n}\n\nfunction has (node, tagNames) {\n  return (\n    node.getElementsByTagName &&\n    tagNames.some(function (tagName) {\n      return node.getElementsByTagName(tagName).length\n    })\n  )\n}\n\nvar rules = {};\n\nrules.paragraph = {\n  filter: 'p',\n\n  replacement: function (content) {\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.lineBreak = {\n  filter: 'br',\n\n  replacement: function (content, node, options) {\n    return options.br + '\\n'\n  }\n};\n\nrules.heading = {\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n  replacement: function (content, node, options) {\n    var hLevel = Number(node.nodeName.charAt(1));\n\n    if (options.headingStyle === 'setext' && hLevel < 3) {\n      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n      return (\n        '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n      )\n    } else {\n      return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.blockquote = {\n  filter: 'blockquote',\n\n  replacement: function (content) {\n    content = content.replace(/^\\n+|\\n+$/g, '');\n    content = content.replace(/^/gm, '> ');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.list = {\n  filter: ['ul', 'ol'],\n\n  replacement: function (content, node) {\n    var parent = node.parentNode;\n    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n      return '\\n' + content\n    } else {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.listItem = {\n  filter: 'li',\n\n  replacement: function (content, node, options) {\n    content = content\n      .replace(/^\\n+/, '') // remove leading newlines\n      .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n      .replace(/\\n/gm, '\\n    '); // indent\n    var prefix = options.bulletListMarker + '   ';\n    var parent = node.parentNode;\n    if (parent.nodeName === 'OL') {\n      var start = parent.getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix = (start ? Number(start) + index : index + 1) + '.  ';\n    }\n    return (\n      prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n    )\n  }\n};\n\nrules.indentedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'indented' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    return (\n      '\\n\\n    ' +\n      node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n      '\\n\\n'\n    )\n  }\n};\n\nrules.fencedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'fenced' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var className = node.firstChild.getAttribute('class') || '';\n    var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n    var code = node.firstChild.textContent;\n\n    var fenceChar = options.fence.charAt(0);\n    var fenceSize = 3;\n    var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');\n\n    var match;\n    while ((match = fenceInCodeRegex.exec(code))) {\n      if (match[0].length >= fenceSize) {\n        fenceSize = match[0].length + 1;\n      }\n    }\n\n    var fence = repeat(fenceChar, fenceSize);\n\n    return (\n      '\\n\\n' + fence + language + '\\n' +\n      code.replace(/\\n$/, '') +\n      '\\n' + fence + '\\n\\n'\n    )\n  }\n};\n\nrules.horizontalRule = {\n  filter: 'hr',\n\n  replacement: function (content, node, options) {\n    return '\\n\\n' + options.hr + '\\n\\n'\n  }\n};\n\nrules.inlineLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'inlined' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node) {\n    var href = node.getAttribute('href');\n    if (href) href = href.replace(/([()])/g, '\\\\$1');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title.replace(/\"/g, '\\\\\"') + '\"';\n    return '[' + content + '](' + href + title + ')'\n  }\n};\n\nrules.referenceLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'referenced' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var href = node.getAttribute('href');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title + '\"';\n    var replacement;\n    var reference;\n\n    switch (options.linkReferenceStyle) {\n      case 'collapsed':\n        replacement = '[' + content + '][]';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      case 'shortcut':\n        replacement = '[' + content + ']';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      default:\n        var id = this.references.length + 1;\n        replacement = '[' + content + '][' + id + ']';\n        reference = '[' + id + ']: ' + href + title;\n    }\n\n    this.references.push(reference);\n    return replacement\n  },\n\n  references: [],\n\n  append: function (options) {\n    var references = '';\n    if (this.references.length) {\n      references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n      this.references = []; // Reset references\n    }\n    return references\n  }\n};\n\nrules.emphasis = {\n  filter: ['em', 'i'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.emDelimiter + content + options.emDelimiter\n  }\n};\n\nrules.strong = {\n  filter: ['strong', 'b'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.strongDelimiter + content + options.strongDelimiter\n  }\n};\n\nrules.code = {\n  filter: function (node) {\n    var hasSiblings = node.previousSibling || node.nextSibling;\n    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n    return node.nodeName === 'CODE' && !isCodeBlock\n  },\n\n  replacement: function (content) {\n    if (!content) return ''\n    content = content.replace(/\\r?\\n|\\r/g, ' ');\n\n    var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\n    var delimiter = '`';\n    var matches = content.match(/`+/gm) || [];\n    while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n\n    return delimiter + extraSpace + content + extraSpace + delimiter\n  }\n};\n\nrules.image = {\n  filter: 'img',\n\n  replacement: function (content, node) {\n    var alt = cleanAttribute(node.getAttribute('alt'));\n    var src = node.getAttribute('src') || '';\n    var title = cleanAttribute(node.getAttribute('title'));\n    var titlePart = title ? ' \"' + title + '\"' : '';\n    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n  }\n};\n\nfunction cleanAttribute (attribute) {\n  return attribute ? attribute.replace(/(\\n+\\s*)+/g, '\\n') : ''\n}\n\n/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\n\nfunction Rules (options) {\n  this.options = options;\n  this._keep = [];\n  this._remove = [];\n\n  this.blankRule = {\n    replacement: options.blankReplacement\n  };\n\n  this.keepReplacement = options.keepReplacement;\n\n  this.defaultRule = {\n    replacement: options.defaultReplacement\n  };\n\n  this.array = [];\n  for (var key in options.rules) this.array.push(options.rules[key]);\n}\n\nRules.prototype = {\n  add: function (key, rule) {\n    this.array.unshift(rule);\n  },\n\n  keep: function (filter) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement\n    });\n  },\n\n  remove: function (filter) {\n    this._remove.unshift({\n      filter: filter,\n      replacement: function () {\n        return ''\n      }\n    });\n  },\n\n  forNode: function (node) {\n    if (node.isBlank) return this.blankRule\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule\n    if ((rule = findRule(this._keep, node, this.options))) return rule\n    if ((rule = findRule(this._remove, node, this.options))) return rule\n\n    return this.defaultRule\n  },\n\n  forEach: function (fn) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n};\n\nfunction findRule (rules, node, options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule\n  }\n  return void 0\n}\n\nfunction filterValue (rule, node, options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    if (filter === node.nodeName.toLowerCase()) return true\n  } else if (Array.isArray(filter)) {\n    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n  } else if (typeof filter === 'function') {\n    if (filter.call(rule, node, options)) return true\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function')\n  }\n}\n\n/**\n * The collapseWhitespace function is adapted from collapse-whitespace\n * by Luc Thevenard.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace (options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre = options.isPre || function (node) {\n    return node.nodeName === 'PRE'\n  };\n\n  if (!element.firstChild || isPre(element)) return\n\n  var prevText = null;\n  var keepLeadingWs = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n      if ((!prevText || / $/.test(prevText.data)) &&\n          !keepLeadingWs && text[0] === ' ') {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        keepLeadingWs = false;\n      } else if (isVoid(node) || isPre(node)) {\n        // Avoid trimming space around non-block, non-BR void elements and inline PRE.\n        prevText = null;\n        keepLeadingWs = true;\n      } else if (prevText) {\n        // Drop protection if set previously.\n        keepLeadingWs = false;\n      }\n    } else {\n      node = remove(node);\n      continue\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove (node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode.removeChild(node);\n\n  return next\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next (prev, current, isPre) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return current.nextSibling || current.parentNode\n  }\n\n  return current.firstChild || current.nextSibling || current.parentNode\n}\n\n/*\n * Set up window for Node.js\n */\n\nvar root = (typeof window !== 'undefined' ? window : {});\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively () {\n  var Parser = root.DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse\n}\n\nfunction createHTMLParser () {\n  var Parser = function () {};\n\n  {\n    if (shouldUseActiveX()) {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = new window.ActiveXObject('htmlfile');\n        doc.designMode = 'on'; // disable on-page scripts\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    } else {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = document.implementation.createHTMLDocument('');\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    }\n  }\n  return Parser\n}\n\nfunction shouldUseActiveX () {\n  var useActiveX = false;\n  try {\n    document.implementation.createHTMLDocument('').open();\n  } catch (e) {\n    if (root.ActiveXObject) useActiveX = true;\n  }\n  return useActiveX\n}\n\nvar HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\nfunction RootNode (input, options) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n      'text/html'\n    );\n    root = doc.getElementById('turndown-root');\n  } else {\n    root = input.cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root,\n    isBlock: isBlock,\n    isVoid: isVoid,\n    isPre: options.preformattedCode ? isPreOrCode : null\n  });\n\n  return root\n}\n\nvar _htmlParser;\nfunction htmlParser () {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser\n}\n\nfunction isPreOrCode (node) {\n  return node.nodeName === 'PRE' || node.nodeName === 'CODE'\n}\n\nfunction Node (node, options) {\n  node.isBlock = isBlock(node);\n  node.isCode = node.nodeName === 'CODE' || node.parentNode.isCode;\n  node.isBlank = isBlank(node);\n  node.flankingWhitespace = flankingWhitespace(node, options);\n  return node\n}\n\nfunction isBlank (node) {\n  return (\n    !isVoid(node) &&\n    !isMeaningfulWhenBlank(node) &&\n    /^\\s*$/i.test(node.textContent) &&\n    !hasVoid(node) &&\n    !hasMeaningfulWhenBlank(node)\n  )\n}\n\nfunction flankingWhitespace (node, options) {\n  if (node.isBlock || (options.preformattedCode && node.isCode)) {\n    return { leading: '', trailing: '' }\n  }\n\n  var edges = edgeWhitespace(node.textContent);\n\n  // abandon leading ASCII WS if left-flanked by ASCII WS\n  if (edges.leadingAscii && isFlankedByWhitespace('left', node, options)) {\n    edges.leading = edges.leadingNonAscii;\n  }\n\n  // abandon trailing ASCII WS if right-flanked by ASCII WS\n  if (edges.trailingAscii && isFlankedByWhitespace('right', node, options)) {\n    edges.trailing = edges.trailingNonAscii;\n  }\n\n  return { leading: edges.leading, trailing: edges.trailing }\n}\n\nfunction edgeWhitespace (string) {\n  var m = string.match(/^(([ \\t\\r\\n]*)(\\s*))(?:(?=\\S)[\\s\\S]*\\S)?((\\s*?)([ \\t\\r\\n]*))$/);\n  return {\n    leading: m[1], // whole string for whitespace-only strings\n    leadingAscii: m[2],\n    leadingNonAscii: m[3],\n    trailing: m[4], // empty for whitespace-only strings\n    trailingNonAscii: m[5],\n    trailingAscii: m[6]\n  }\n}\n\nfunction isFlankedByWhitespace (side, node, options) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue);\n    } else if (options.preformattedCode && sibling.nodeName === 'CODE') {\n      isFlanked = false;\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n      isFlanked = regExp.test(sibling.textContent);\n    }\n  }\n  return isFlanked\n}\n\nvar reduce = Array.prototype.reduce;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/^-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. ']\n];\n\nfunction TurndownService (options) {\n  if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n  var defaults = {\n    rules: rules,\n    headingStyle: 'setext',\n    hr: '* * *',\n    bulletListMarker: '*',\n    codeBlockStyle: 'indented',\n    fence: '```',\n    emDelimiter: '_',\n    strongDelimiter: '**',\n    linkStyle: 'inlined',\n    linkReferenceStyle: 'full',\n    br: '  ',\n    preformattedCode: false,\n    blankReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' : ''\n    },\n    keepReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n    },\n    defaultReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n    }\n  };\n  this.options = extend({}, defaults, options);\n  this.rules = new Rules(this.options);\n}\n\nTurndownService.prototype = {\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown: function (input) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      )\n    }\n\n    if (input === '') return ''\n\n    var output = process.call(this, new RootNode(input, this.options));\n    return postProcess.call(this, output)\n  },\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  use: function (plugin) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions')\n    }\n    return this\n  },\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  addRule: function (key, rule) {\n    this.rules.add(key, rule);\n    return this\n  },\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  keep: function (filter) {\n    this.rules.keep(filter);\n    return this\n  },\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  remove: function (filter) {\n    this.rules.remove(filter);\n    return this\n  },\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape: function (string) {\n    return escapes.reduce(function (accumulator, escape) {\n      return accumulator.replace(escape[0], escape[1])\n    }, string)\n  }\n};\n\n/**\n * Reduces a DOM node down to its Markdown string equivalent\n * @private\n * @param {HTMLElement} parentNode The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction process (parentNode) {\n  var self = this;\n  return reduce.call(parentNode.childNodes, function (output, node) {\n    node = new Node(node, self.options);\n\n    var replacement = '';\n    if (node.nodeType === 3) {\n      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n    } else if (node.nodeType === 1) {\n      replacement = replacementForNode.call(self, node);\n    }\n\n    return join(output, replacement)\n  }, '')\n}\n\n/**\n * Appends strings as each rule requires and trims the output\n * @private\n * @param {String} output The conversion output\n * @returns A trimmed version of the ouput\n * @type String\n */\n\nfunction postProcess (output) {\n  var self = this;\n  this.rules.forEach(function (rule) {\n    if (typeof rule.append === 'function') {\n      output = join(output, rule.append(self.options));\n    }\n  });\n\n  return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n}\n\n/**\n * Converts an element node to its Markdown equivalent\n * @private\n * @param {HTMLElement} node The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction replacementForNode (node) {\n  var rule = this.rules.forNode(node);\n  var content = process.call(this, node);\n  var whitespace = node.flankingWhitespace;\n  if (whitespace.leading || whitespace.trailing) content = content.trim();\n  return (\n    whitespace.leading +\n    rule.replacement(content, node, this.options) +\n    whitespace.trailing\n  )\n}\n\n/**\n * Joins replacement to the current output with appropriate number of new lines\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns Joined output\n * @type String\n */\n\nfunction join (output, replacement) {\n  var s1 = trimTrailingNewlines(output);\n  var s2 = trimLeadingNewlines(replacement);\n  var nls = Math.max(output.length - s1.length, replacement.length - s2.length);\n  var separator = '\\n\\n'.substring(0, nls);\n\n  return s1 + separator + s2\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert (input) {\n  return (\n    input != null && (\n      typeof input === 'string' ||\n      (input.nodeType && (\n        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n      ))\n    )\n  )\n}\n\nexport default TurndownService;\n","var highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;\n\nfunction highlightedCodeBlock (turndownService) {\n  turndownService.addRule('highlightedCodeBlock', {\n    filter: function (node) {\n      var firstChild = node.firstChild;\n      return (\n        node.nodeName === 'DIV' &&\n        highlightRegExp.test(node.className) &&\n        firstChild &&\n        firstChild.nodeName === 'PRE'\n      )\n    },\n    replacement: function (content, node, options) {\n      var className = node.className || '';\n      var language = (className.match(highlightRegExp) || [null, ''])[1];\n\n      return (\n        '\\n\\n' + options.fence + language + '\\n' +\n        node.firstChild.textContent +\n        '\\n' + options.fence + '\\n\\n'\n      )\n    }\n  });\n}\n\nfunction strikethrough (turndownService) {\n  turndownService.addRule('strikethrough', {\n    filter: ['del', 's', 'strike'],\n    replacement: function (content) {\n      return '~' + content + '~'\n    }\n  });\n}\n\nvar indexOf = Array.prototype.indexOf;\nvar every = Array.prototype.every;\nvar rules = {};\n\nrules.tableCell = {\n  filter: ['th', 'td'],\n  replacement: function (content, node) {\n    return cell(content, node)\n  }\n};\n\nrules.tableRow = {\n  filter: 'tr',\n  replacement: function (content, node) {\n    var borderCells = '';\n    var alignMap = { left: ':--', right: '--:', center: ':-:' };\n\n    if (isHeadingRow(node)) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        var border = '---';\n        var align = (\n          node.childNodes[i].getAttribute('align') || ''\n        ).toLowerCase();\n\n        if (align) border = alignMap[align] || border;\n\n        borderCells += cell(border, node.childNodes[i]);\n      }\n    }\n    return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n  }\n};\n\nrules.table = {\n  // Only convert tables with a heading row.\n  // Tables with no heading row are kept using `keep` (see below).\n  filter: function (node) {\n    return node.nodeName === 'TABLE' && isHeadingRow(node.rows[0])\n  },\n\n  replacement: function (content) {\n    // Ensure there are no blank lines\n    content = content.replace('\\n\\n', '\\n');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.tableSection = {\n  filter: ['thead', 'tbody', 'tfoot'],\n  replacement: function (content) {\n    return content\n  }\n};\n\n// A tr is a heading row if:\n// - the parent is a THEAD\n// - or if its the first child of the TABLE or the first TBODY (possibly\n//   following a blank THEAD)\n// - and every cell is a TH\nfunction isHeadingRow (tr) {\n  var parentNode = tr.parentNode;\n  return (\n    parentNode.nodeName === 'THEAD' ||\n    (\n      parentNode.firstChild === tr &&\n      (parentNode.nodeName === 'TABLE' || isFirstTbody(parentNode)) &&\n      every.call(tr.childNodes, function (n) { return n.nodeName === 'TH' })\n    )\n  )\n}\n\nfunction isFirstTbody (element) {\n  var previousSibling = element.previousSibling;\n  return (\n    element.nodeName === 'TBODY' && (\n      !previousSibling ||\n      (\n        previousSibling.nodeName === 'THEAD' &&\n        /^\\s*$/i.test(previousSibling.textContent)\n      )\n    )\n  )\n}\n\nfunction cell (content, node) {\n  var index = indexOf.call(node.parentNode.childNodes, node);\n  var prefix = ' ';\n  if (index === 0) prefix = '| ';\n  return prefix + content + ' |'\n}\n\nfunction tables (turndownService) {\n  turndownService.keep(function (node) {\n    return node.nodeName === 'TABLE' && !isHeadingRow(node.rows[0])\n  });\n  for (var key in rules) turndownService.addRule(key, rules[key]);\n}\n\nfunction taskListItems (turndownService) {\n  turndownService.addRule('taskListItems', {\n    filter: function (node) {\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI'\n    },\n    replacement: function (content, node) {\n      return (node.checked ? '[x]' : '[ ]') + ' '\n    }\n  });\n}\n\nfunction gfm (turndownService) {\n  turndownService.use([\n    highlightedCodeBlock,\n    strikethrough,\n    tables,\n    taskListItems\n  ]);\n}\n\nexport { gfm, highlightedCodeBlock, strikethrough, tables, taskListItems };\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { HtmlDataProcessor } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { marked } from 'marked';\nimport Turndown from 'turndown';\nimport { gfm } from 'turndown-plugin-gfm';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\n\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert Markdown to HTML.\n */ class MarkdownToHtml {\n    _parser;\n    _options = {\n        gfm: true,\n        breaks: true,\n        tables: true,\n        xhtml: true,\n        headerIds: false\n    };\n    constructor(){\n        // Overrides.\n        marked.use({\n            tokenizer: {\n                // Disable the autolink rule in the lexer.\n                autolink: ()=>null,\n                url: ()=>null\n            },\n            renderer: {\n                checkbox (...args) {\n                    // Remove bogus space after <input type=\"checkbox\"> because it would be preserved\n                    // by DomConverter as it's next to an inline object.\n                    return Object.getPrototypeOf(this).checkbox.call(this, ...args).trimRight();\n                },\n                code (...args) {\n                    // Since marked v1.2.8, every <code> gets a trailing \"\\n\" whether it originally\n                    // ended with one or not (see https://github.com/markedjs/marked/issues/1884 to learn why).\n                    // This results in a redundant soft break in the model when loaded into the editor, which\n                    // is best prevented at this stage. See https://github.com/ckeditor/ckeditor5/issues/11124.\n                    return Object.getPrototypeOf(this).code.call(this, ...args).replace('\\n</code>', '</code>');\n                }\n            }\n        });\n        this._parser = marked;\n    }\n    parse(markdown) {\n        return this._parser.parse(markdown, this._options);\n    }\n}\n\nconst autolinkRegex = /* #__PURE__ */ new RegExp(// Prefix.\n/\\b(?:(?:https?|ftp):\\/\\/|www\\.)/.source + // Domain name.\n/(?![-_])(?:[-_a-z0-9\\u00a1-\\uffff]{1,63}\\.)+(?:[a-z\\u00a1-\\uffff]{2,63})/.source + // The rest.\n/(?:[^\\s<>]*)/.source, 'gi');\nclass UpdatedTurndown extends Turndown {\n    escape(string) {\n        const originalEscape = super.escape;\n        function escape(string) {\n            string = originalEscape(string);\n            // Escape \"<\".\n            string = string.replace(/</g, '\\\\<');\n            return string;\n        }\n        // Urls should not be escaped. Our strategy is using a regex to find them and escape everything\n        // which is out of the matches parts.\n        let escaped = '';\n        let lastLinkEnd = 0;\n        for (const match of this._matchAutolink(string)){\n            const index = match.index;\n            // Append the substring between the last match and the current one (if anything).\n            if (index > lastLinkEnd) {\n                escaped += escape(string.substring(lastLinkEnd, index));\n            }\n            const matchedURL = match[0];\n            escaped += matchedURL;\n            lastLinkEnd = index + matchedURL.length;\n        }\n        // Add text after the last link or at the string start if no matches.\n        if (lastLinkEnd < string.length) {\n            escaped += escape(string.substring(lastLinkEnd, string.length));\n        }\n        return escaped;\n    }\n    /**\n\t * Trimming end of link.\n\t * https://github.github.com/gfm/#autolinks-extension-\n\t */ *_matchAutolink(string) {\n        for (const match of string.matchAll(autolinkRegex)){\n            const matched = match[0];\n            const length = this._autolinkFindEnd(matched);\n            yield Object.assign([\n                matched.substring(0, length)\n            ], {\n                index: match.index\n            });\n        // We could adjust regex.lastIndex but it's not needed because what we skipped is for sure not a valid URL.\n        }\n    }\n    /**\n\t * Returns the new length of the link (after it would trim trailing characters).\n\t */ _autolinkFindEnd(string) {\n        let length = string.length;\n        while(length > 0){\n            const char = string[length - 1];\n            if ('?!.,:*_~\\'\"'.includes(char)) {\n                length--;\n            } else if (char == ')') {\n                let openBrackets = 0;\n                for(let i = 0; i < length; i++){\n                    if (string[i] == '(') {\n                        openBrackets++;\n                    } else if (string[i] == ')') {\n                        openBrackets--;\n                    }\n                }\n                // If there is fewer opening brackets then closing ones we should remove a closing bracket.\n                if (openBrackets < 0) {\n                    length--;\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        return length;\n    }\n}\n/**\n * This is a helper class used by the {@link module:markdown-gfm/markdown Markdown feature} to convert HTML to Markdown.\n */ class HtmlToMarkdown {\n    _parser;\n    constructor(){\n        this._parser = this._createParser();\n    }\n    parse(html) {\n        return this._parser.turndown(html);\n    }\n    keep(elements) {\n        this._parser.keep(elements);\n    }\n    _createParser() {\n        const parser = new UpdatedTurndown({\n            codeBlockStyle: 'fenced',\n            hr: '---',\n            headingStyle: 'atx'\n        });\n        parser.use([\n            gfm,\n            this._todoList\n        ]);\n        return parser;\n    }\n    // This is a copy of the original taskListItems rule from turndown-plugin-gfm, with minor changes.\n    _todoList(turndown) {\n        turndown.addRule('taskListItems', {\n            filter (node) {\n                return node.type === 'checkbox' && // Changes here as CKEditor outputs a deeper structure.\n                (node.parentNode.nodeName === 'LI' || node.parentNode.parentNode.nodeName === 'LI');\n            },\n            replacement (content, node) {\n                return (node.checked ? '[x]' : '[ ]') + ' ';\n            }\n        });\n    }\n}\n\n/**\n * This data processor implementation uses GitHub Flavored Markdown as input/output data.\n *\n * See the {@glink features/markdown Markdown output} guide to learn more on how to enable it.\n */ class GFMDataProcessor {\n    /**\n\t * HTML data processor used to process HTML produced by the Markdown-to-HTML converter and the other way.\n\t */ _htmlDP;\n    /**\n\t * Helper for converting Markdown to HTML.\n\t */ _markdown2html;\n    /**\n\t * Helper for converting HTML to Markdown.\n\t */ _html2markdown;\n    /**\n\t * Creates a new instance of the Markdown data processor class.\n\t */ constructor(document){\n        this._htmlDP = new HtmlDataProcessor(document);\n        this._markdown2html = new MarkdownToHtml();\n        this._html2markdown = new HtmlToMarkdown();\n    }\n    /**\n\t * Keeps the specified element in the output as HTML. This is useful if the editor contains\n\t * features producing HTML that is not a part of the Markdown standard.\n\t *\n\t * By default, all HTML tags are removed.\n\t *\n\t * @param element The element name to be kept.\n\t */ keepHtml(element) {\n        this._html2markdown.keep([\n            element\n        ]);\n    }\n    /**\n\t * Converts the provided Markdown string to a view tree.\n\t *\n\t * @param data A Markdown string.\n\t * @returns The converted view element.\n\t */ toView(data) {\n        const html = this._markdown2html.parse(data);\n        return this._htmlDP.toView(html);\n    }\n    /**\n\t * Converts the provided {@link module:engine/view/documentfragment~DocumentFragment} to data format &ndash; in this\n\t * case to a Markdown string.\n\t *\n\t * @returns Markdown string.\n\t */ toData(viewFragment) {\n        const html = this._htmlDP.toData(viewFragment);\n        return this._html2markdown.parse(html);\n    }\n    /**\n\t * Registers a {@link module:engine/view/matcher~MatcherPattern} for view elements whose content should be treated as raw data\n\t * and not processed during the conversion from Markdown to view elements.\n\t *\n\t * The raw data can be later accessed by a\n\t * {@link module:engine/view/element~Element#getCustomProperty custom property of a view element} called `\"$rawContent\"`.\n\t *\n\t * @param pattern The pattern matching all view elements whose content should\n\t * be treated as raw data.\n\t */ registerRawContentMatcher(pattern) {\n        this._htmlDP.registerRawContentMatcher(pattern);\n    }\n    /**\n\t * This method does not have any effect on the data processor result. It exists for compatibility with the\n\t * {@link module:engine/dataprocessor/dataprocessor~DataProcessor `DataProcessor` interface}.\n\t */ useFillerType() {}\n}\n\n/**\n * The GitHub Flavored Markdown (GFM) plugin.\n *\n * For a detailed overview, check the {@glink features/markdown Markdown feature} guide.\n */ class Markdown extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.data.processor = new GFMDataProcessor(editor.data.viewDocument);\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Markdown';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nconst ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS = [\n    'SPAN',\n    'BR',\n    'PRE',\n    'CODE'\n];\n/**\n * The GitHub Flavored Markdown (GFM) paste plugin.\n *\n * For a detailed overview, check the {@glink features/pasting/paste-markdown Paste Markdown feature} guide.\n */ class PasteFromMarkdownExperimental extends Plugin {\n    /**\n\t * @internal\n\t */ _gfmDataProcessor;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._gfmDataProcessor = new GFMDataProcessor(editor.data.viewDocument);\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PasteFromMarkdownExperimental';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        let shiftPressed = false;\n        this.listenTo(viewDocument, 'keydown', (evt, data)=>{\n            shiftPressed = data.shiftKey;\n        });\n        this.listenTo(clipboardPipeline, 'inputTransformation', (evt, data)=>{\n            if (shiftPressed) {\n                return;\n            }\n            const dataAsTextHtml = data.dataTransfer.getData('text/html');\n            if (!dataAsTextHtml) {\n                const dataAsTextPlain = data.dataTransfer.getData('text/plain');\n                data.content = this._gfmDataProcessor.toView(dataAsTextPlain);\n                return;\n            }\n            const markdownFromHtml = this._parseMarkdownFromHtml(dataAsTextHtml);\n            if (markdownFromHtml) {\n                data.content = this._gfmDataProcessor.toView(markdownFromHtml);\n            }\n        });\n    }\n    /**\n\t * Determines if the code copied from a website in the `text/html` type can be parsed as Markdown.\n\t * It removes any OS-specific HTML tags, for example, <meta> on macOS and <!--StartFragment--> on Windows.\n\t * Then removes a single wrapper HTML tag or wrappers for sibling tags, and if there are no more tags left,\n\t * returns the remaining text. Returns null if there are any remaining HTML tags detected.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */ _parseMarkdownFromHtml(htmlString) {\n        const withoutOsSpecificTags = this._removeOsSpecificTags(htmlString);\n        if (!this._containsOnlyAllowedFirstLevelTags(withoutOsSpecificTags)) {\n            return null;\n        }\n        const withoutWrapperTag = this._removeFirstLevelWrapperTagsAndBrs(withoutOsSpecificTags);\n        if (this._containsAnyRemainingHtmlTags(withoutWrapperTag)) {\n            return null;\n        }\n        return this._replaceHtmlReservedEntitiesWithCharacters(withoutWrapperTag);\n    }\n    /**\n\t * Removes OS-specific tags.\n\t *\n\t * @param htmlString Clipboard content in the `text/html` type format.\n\t */ _removeOsSpecificTags(htmlString) {\n        // Removing the <meta> tag present on Mac.\n        const withoutMetaTag = htmlString.replace(/^<meta\\b[^>]*>/, '').trim();\n        // Removing the <html> tag present on Windows.\n        const withoutHtmlTag = withoutMetaTag.replace(/^<html>/, '').replace(/<\\/html>$/, '').trim();\n        // Removing the <body> tag present on Windows.\n        const withoutBodyTag = withoutHtmlTag.replace(/^<body>/, '').replace(/<\\/body>$/, '').trim();\n        // Removing the <!--StartFragment--> tag present on Windows.\n        return withoutBodyTag.replace(/^<!--StartFragment-->/, '').replace(/<!--EndFragment-->$/, '').trim();\n    }\n    /**\n\t * If the input HTML string contains any first-level formatting tags\n\t * like <b>, <strong>, or <i>, we should not treat it as Markdown.\n\t *\n\t * @param htmlString Clipboard content.\n\t */ _containsOnlyAllowedFirstLevelTags(htmlString) {\n        const parser = new DOMParser();\n        const { body: tempElement } = parser.parseFromString(htmlString, 'text/html');\n        const tagNames = Array.from(tempElement.children).map((el)=>el.tagName);\n        return tagNames.every((el)=>ALLOWED_MARKDOWN_FIRST_LEVEL_TAGS.includes(el));\n    }\n    /**\n\t * Removes multiple HTML wrapper tags from a list of sibling HTML tags.\n\t *\n\t * @param htmlString Clipboard content without any OS-specific tags.\n\t */ _removeFirstLevelWrapperTagsAndBrs(htmlString) {\n        const parser = new DOMParser();\n        const { body: tempElement } = parser.parseFromString(htmlString, 'text/html');\n        const brElements = tempElement.querySelectorAll('br');\n        for (const br of brElements){\n            br.replaceWith('\\n');\n        }\n        const outerElements = tempElement.querySelectorAll(':scope > *');\n        for (const element of outerElements){\n            const elementClone = element.cloneNode(true);\n            element.replaceWith(...elementClone.childNodes);\n        }\n        return tempElement.innerHTML;\n    }\n    /**\n\t * Determines if a string contains any HTML tags.\n\t */ _containsAnyRemainingHtmlTags(str) {\n        return str.includes('<');\n    }\n    /**\n\t * Replaces the reserved HTML entities with the actual characters.\n\t *\n\t * @param htmlString Clipboard content without any tags.\n\t */ _replaceHtmlReservedEntitiesWithCharacters(htmlString) {\n        return htmlString.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&nbsp;/g, ' ');\n    }\n}\n\nexport { Markdown, PasteFromMarkdownExperimental };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toWidget, isWidget, findOptimalInsertionRange, Widget, WidgetToolbarRepository } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { logWarning, toArray, first, global, FocusTracker, KeystrokeHandler } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IconView, Template, View, submitHandler, LabeledFieldView, createLabeledInputText, Dialog, ButtonView, MenuBarMenuListItemButtonView, CssTransitionDisablerMixin } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { LivePosition, LiveRange } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { Clipboard } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Undo } from '@ckeditor/ckeditor5-undo/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module media-embed/converters\n */ /**\n * Returns a function that converts the model \"url\" attribute to the view representation.\n *\n * Depending on the configuration, the view representation can be \"semantic\" (for the data pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<oembed url=\"foo\"></oembed>\n * </figure>\n * ```\n *\n * or \"non-semantic\" (for the editing view pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n * </figure>\n * ```\n *\n * **Note:** Changing the model \"url\" attribute replaces the entire content of the\n * `<figure>` in the view.\n *\n * @param registry The registry providing\n * the media and their content.\n * @param options options object with following properties:\n * - elementName When set, overrides the default element name for semantic media embeds.\n * - renderMediaPreview When `true`, the converter will create the view in the non-semantic form.\n * - renderForEditingView When `true`, the converter will create a view specific for the\n * editing pipeline (e.g. including CSS classes, content placeholders).\n */ function modelToViewUrlAttributeConverter(registry, options) {\n    const converter = (evt, data, conversionApi)=>{\n        if (!conversionApi.consumable.consume(data.item, evt.name)) {\n            return;\n        }\n        const url = data.attributeNewValue;\n        const viewWriter = conversionApi.writer;\n        const figure = conversionApi.mapper.toViewElement(data.item);\n        const mediaContentElement = [\n            ...figure.getChildren()\n        ].find((child)=>child.getCustomProperty('media-content'));\n        // TODO: removing the wrapper and creating it from scratch is a hack. We can do better than that.\n        viewWriter.remove(mediaContentElement);\n        const mediaViewElement = registry.getMediaViewElement(viewWriter, url, options);\n        viewWriter.insert(viewWriter.createPositionAt(figure, 0), mediaViewElement);\n    };\n    return (dispatcher)=>{\n        dispatcher.on('attribute:url:media', converter);\n    };\n}\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a media embed widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the media widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param writer An instance of the view writer.\n * @param label The element's label.\n */ function toMediaWidget(viewElement, writer, label) {\n    writer.setCustomProperty('media', true, viewElement);\n    return toWidget(viewElement, writer, {\n        label\n    });\n}\n/**\n * Returns a media widget editing view element if one is selected.\n */ function getSelectedMediaViewWidget(selection) {\n    const viewElement = selection.getSelectedElement();\n    if (viewElement && isMediaWidget(viewElement)) {\n        return viewElement;\n    }\n    return null;\n}\n/**\n * Checks if a given view element is a media widget.\n */ function isMediaWidget(viewElement) {\n    return !!viewElement.getCustomProperty('media') && isWidget(viewElement);\n}\n/**\n * Creates a view element representing the media. Either a \"semantic\" one for the data pipeline:\n *\n * ```html\n * <figure class=\"media\">\n * \t<oembed url=\"foo\"></oembed>\n * </figure>\n * ```\n *\n * or a \"non-semantic\" (for the editing view pipeline):\n *\n * ```html\n * <figure class=\"media\">\n * \t<div data-oembed-url=\"foo\">[ non-semantic media preview for \"foo\" ]</div>\n * </figure>\n * ```\n */ function createMediaFigureElement(writer, registry, url, options) {\n    return writer.createContainerElement('figure', {\n        class: 'media'\n    }, [\n        registry.getMediaViewElement(writer, url, options),\n        writer.createSlot()\n    ]);\n}\n/**\n * Returns a selected media element in the model, if any.\n */ function getSelectedMediaModelWidget(selection) {\n    const selectedElement = selection.getSelectedElement();\n    if (selectedElement && selectedElement.is('element', 'media')) {\n        return selectedElement;\n    }\n    return null;\n}\n/**\n * Creates a media element and inserts it into the model.\n *\n * **Note**: This method will use {@link module:engine/model/model~Model#insertContent `model.insertContent()`} logic of inserting content\n * if no `insertPosition` is passed.\n *\n * @param url An URL of an embeddable media.\n * @param findOptimalPosition If true it will try to find optimal position to insert media without breaking content\n * in which a selection is.\n */ function insertMedia(model, url, selectable, findOptimalPosition) {\n    model.change((writer)=>{\n        const mediaElement = writer.createElement('media', {\n            url\n        });\n        model.insertObject(mediaElement, selectable, null, {\n            setSelection: 'on',\n            findOptimalPosition: findOptimalPosition ? 'auto' : undefined\n        });\n    });\n}\n\n/**\n * The insert media command.\n *\n * The command is registered by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} as `'mediaEmbed'`.\n *\n * To insert media at the current selection, execute the command and specify the URL:\n *\n * ```ts\n * editor.execute( 'mediaEmbed', 'http://url.to.the/media' );\n * ```\n */ class MediaEmbedCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedMedia = getSelectedMediaModelWidget(selection);\n        this.value = selectedMedia ? selectedMedia.getAttribute('url') : undefined;\n        this.isEnabled = isMediaSelected(selection) || isAllowedInParent(selection, model);\n    }\n    /**\n\t * Executes the command, which either:\n\t *\n\t * * updates the URL of the selected media,\n\t * * inserts the new media into the editor and puts the selection around it.\n\t *\n\t * @fires execute\n\t * @param url The URL of the media.\n\t */ execute(url) {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const selectedMedia = getSelectedMediaModelWidget(selection);\n        if (selectedMedia) {\n            model.change((writer)=>{\n                writer.setAttribute('url', url, selectedMedia);\n            });\n        } else {\n            insertMedia(model, url, selection, true);\n        }\n    }\n}\n/**\n * Checks if the media embed is allowed in the parent.\n */ function isAllowedInParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    let parent = insertionRange.start.parent;\n    // The model.insertContent() will remove empty parent (unless it is a $root or a limit).\n    if (parent.isEmpty && !model.schema.isLimit(parent)) {\n        parent = parent.parent;\n    }\n    return model.schema.checkChild(parent, 'media');\n}\n/**\n * Checks if the media object is selected.\n */ function isMediaSelected(selection) {\n    const element = selection.getSelectedElement();\n    return !!element && element.name === 'media';\n}\n\nvar mediaPlaceholderIcon = \"<svg viewBox=\\\"0 0 64 42\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M47.426 17V3.713L63.102 0v19.389h-.001l.001.272c0 1.595-2.032 3.43-4.538 4.098-2.506.668-4.538-.083-4.538-1.678 0-1.594 2.032-3.43 4.538-4.098.914-.244 2.032-.565 2.888-.603V4.516L49.076 7.447v9.556A1.014 1.014 0 0 0 49 17h-1.574zM29.5 17h-8.343a7.073 7.073 0 1 0-4.657 4.06v3.781H3.3a2.803 2.803 0 0 1-2.8-2.804V8.63a2.803 2.803 0 0 1 2.8-2.805h4.082L8.58 2.768A1.994 1.994 0 0 1 10.435 1.5h8.985c.773 0 1.477.448 1.805 1.149l1.488 3.177H26.7c1.546 0 2.8 1.256 2.8 2.805V17zm-11.637 0H17.5a1 1 0 0 0-1 1v.05A4.244 4.244 0 1 1 17.863 17zm29.684 2c.97 0 .953-.048.953.889v20.743c0 .953.016.905-.953.905H19.453c-.97 0-.953.048-.953-.905V19.89c0-.937-.016-.889.97-.889h28.077zm-4.701 19.338V22.183H24.154v16.155h18.692zM20.6 21.375v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616v-1.616H20.6zm0 3.231v1.616h1.616V37.53H20.6zm24.233-16.155v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615v-1.616h-1.615zm0 3.231v1.616h1.615V37.53h-1.615zM29.485 25.283a.4.4 0 0 1 .593-.35l9.05 4.977a.4.4 0 0 1 0 .701l-9.05 4.978a.4.4 0 0 1-.593-.35v-9.956z\\\"/></svg>\";\n\nconst mediaPlaceholderIconViewBox = '0 0 64 42';\n/**\n * A bridge between the raw media content provider definitions and the editor view content.\n *\n * It helps translating media URLs to corresponding {@link module:engine/view/element~Element view elements}.\n *\n * Mostly used by the {@link module:media-embed/mediaembedediting~MediaEmbedEditing} plugin.\n */ class MediaRegistry {\n    /**\n\t * The {@link module:utils/locale~Locale} instance.\n\t */ locale;\n    /**\n\t * The media provider definitions available for the registry. Usually corresponding with the\n\t * {@link module:media-embed/mediaembedconfig~MediaEmbedConfig media configuration}.\n\t */ providerDefinitions;\n    /**\n\t * Creates an instance of the {@link module:media-embed/mediaregistry~MediaRegistry} class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param config The configuration of the media embed feature.\n\t */ constructor(locale, config){\n        const providers = config.providers;\n        const extraProviders = config.extraProviders || [];\n        const removedProviders = new Set(config.removeProviders);\n        const providerDefinitions = providers.concat(extraProviders).filter((provider)=>{\n            const name = provider.name;\n            if (!name) {\n                /**\n\t\t\t\t\t * One of the providers (or extra providers) specified in the media embed configuration\n\t\t\t\t\t * has no name and will not be used by the editor. In order to get this media\n\t\t\t\t\t * provider working, double check your editor configuration.\n\t\t\t\t\t *\n\t\t\t\t\t * @error media-embed-no-provider-name\n\t\t\t\t\t */ logWarning('media-embed-no-provider-name', {\n                    provider\n                });\n                return false;\n            }\n            return !removedProviders.has(name);\n        });\n        this.locale = locale;\n        this.providerDefinitions = providerDefinitions;\n    }\n    /**\n\t * Checks whether the passed URL is representing a certain media type allowed in the editor.\n\t *\n\t * @param url The URL to be checked\n\t */ hasMedia(url) {\n        return !!this._getMedia(url);\n    }\n    /**\n\t * For the given media URL string and options, it returns the {@link module:engine/view/element~Element view element}\n\t * representing that media.\n\t *\n\t * **Note:** If no URL is specified, an empty view element is returned.\n\t *\n\t * @param writer The view writer used to produce a view element.\n\t * @param url The URL to be translated into a view element.\n\t */ getMediaViewElement(writer, url, options) {\n        return this._getMedia(url).getViewElement(writer, options);\n    }\n    /**\n\t * Returns a `Media` instance for the given URL.\n\t *\n\t * @param url The URL of the media.\n\t * @returns The `Media` instance or `null` when there is none.\n\t */ _getMedia(url) {\n        if (!url) {\n            return new Media(this.locale);\n        }\n        url = url.trim();\n        for (const definition of this.providerDefinitions){\n            const previewRenderer = definition.html;\n            const pattern = toArray(definition.url);\n            for (const subPattern of pattern){\n                const match = this._getUrlMatches(url, subPattern);\n                if (match) {\n                    return new Media(this.locale, url, match, previewRenderer);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n\t * Tries to match `url` to `pattern`.\n\t *\n\t * @param url The URL of the media.\n\t * @param pattern The pattern that should accept the media URL.\n\t */ _getUrlMatches(url, pattern) {\n        // 1. Try to match without stripping the protocol and \"www\" subdomain.\n        let match = url.match(pattern);\n        if (match) {\n            return match;\n        }\n        // 2. Try to match after stripping the protocol.\n        let rawUrl = url.replace(/^https?:\\/\\//, '');\n        match = rawUrl.match(pattern);\n        if (match) {\n            return match;\n        }\n        // 3. Try to match after stripping the \"www\" subdomain.\n        rawUrl = rawUrl.replace(/^www\\./, '');\n        match = rawUrl.match(pattern);\n        if (match) {\n            return match;\n        }\n        return null;\n    }\n}\n/**\n * Represents media defined by the provider configuration.\n *\n * It can be rendered to the {@link module:engine/view/element~Element view element} and used in the editing or data pipeline.\n */ class Media {\n    /**\n\t * The URL this Media instance represents.\n\t */ url;\n    /**\n\t * Shorthand for {@link module:utils/locale~Locale#t}.\n\t *\n\t * @see module:utils/locale~Locale#t\n\t */ _locale;\n    /**\n\t * The output of the `RegExp.match` which validated the {@link #url} of this media.\n\t */ _match;\n    /**\n\t * The function returning the HTML string preview of this media.\n\t */ _previewRenderer;\n    constructor(locale, url, match, previewRenderer){\n        this.url = this._getValidUrl(url);\n        this._locale = locale;\n        this._match = match;\n        this._previewRenderer = previewRenderer;\n    }\n    /**\n\t * Returns the view element representation of the media.\n\t *\n\t * @param writer The view writer used to produce a view element.\n\t */ getViewElement(writer, options) {\n        const attributes = {};\n        let viewElement;\n        if (options.renderForEditingView || options.renderMediaPreview && this.url && this._previewRenderer) {\n            if (this.url) {\n                attributes['data-oembed-url'] = this.url;\n            }\n            if (options.renderForEditingView) {\n                attributes.class = 'ck-media__wrapper';\n            }\n            const mediaHtml = this._getPreviewHtml(options);\n            viewElement = writer.createRawElement('div', attributes, (domElement, domConverter)=>{\n                domConverter.setContentOf(domElement, mediaHtml);\n            });\n        } else {\n            if (this.url) {\n                attributes.url = this.url;\n            }\n            viewElement = writer.createEmptyElement(options.elementName, attributes);\n        }\n        writer.setCustomProperty('media-content', true, viewElement);\n        return viewElement;\n    }\n    /**\n\t * Returns the HTML string of the media content preview.\n\t */ _getPreviewHtml(options) {\n        if (this._previewRenderer) {\n            return this._previewRenderer(this._match);\n        } else {\n            // The placeholder only makes sense for editing view and media which have URLs.\n            // Placeholder is never displayed in data and URL-less media have no content.\n            if (this.url && options.renderForEditingView) {\n                return this._getPlaceholderHtml();\n            }\n            return '';\n        }\n    }\n    /**\n\t * Returns the placeholder HTML when the media has no content preview.\n\t */ _getPlaceholderHtml() {\n        const icon = new IconView();\n        const t = this._locale.t;\n        icon.content = mediaPlaceholderIcon;\n        icon.viewBox = mediaPlaceholderIconViewBox;\n        const placeholder = new Template({\n            tag: 'div',\n            attributes: {\n                class: 'ck ck-reset_all ck-media__placeholder'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: 'ck-media__placeholder__icon'\n                    },\n                    children: [\n                        icon\n                    ]\n                },\n                {\n                    tag: 'a',\n                    attributes: {\n                        class: 'ck-media__placeholder__url',\n                        target: '_blank',\n                        rel: 'noopener noreferrer',\n                        href: this.url,\n                        'data-cke-tooltip-text': t('Open media in new tab')\n                    },\n                    children: [\n                        {\n                            tag: 'span',\n                            attributes: {\n                                class: 'ck-media__placeholder__url__text'\n                            },\n                            children: [\n                                this.url\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }).render();\n        return placeholder.outerHTML;\n    }\n    /**\n\t * Returns the full URL to the specified media.\n\t *\n\t * @param url The URL of the media.\n\t */ _getValidUrl(url) {\n        if (!url) {\n            return null;\n        }\n        if (url.match(/^https?/)) {\n            return url;\n        }\n        return 'https://' + url;\n    }\n}\n\n/**\n * The media embed editing feature.\n */ class MediaEmbedEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * The media registry managing the media providers in the editor.\n\t */ registry;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('mediaEmbed', {\n            elementName: 'oembed',\n            providers: [\n                {\n                    name: 'dailymotion',\n                    url: [\n                        /^dailymotion\\.com\\/video\\/(\\w+)/,\n                        /^dai.ly\\/(\\w+)/\n                    ],\n                    html: (match)=>{\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; \">' + `<iframe src=\"https://www.dailymotion.com/embed/video/${id}\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" width=\"480\" height=\"270\" allowfullscreen allow=\"autoplay\">' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'spotify',\n                    url: [\n                        /^open\\.spotify\\.com\\/(artist\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(album\\/\\w+)/,\n                        /^open\\.spotify\\.com\\/(track\\/\\w+)/\n                    ],\n                    html: (match)=>{\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 126%;\">' + `<iframe src=\"https://open.spotify.com/embed/${id}\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\">' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'youtube',\n                    url: [\n                        /^(?:m\\.)?youtube\\.com\\/watch\\?v=([\\w-]+)(?:&t=(\\d+))?/,\n                        /^(?:m\\.)?youtube\\.com\\/shorts\\/([\\w-]+)(?:\\?t=(\\d+))?/,\n                        /^(?:m\\.)?youtube\\.com\\/v\\/([\\w-]+)(?:\\?t=(\\d+))?/,\n                        /^youtube\\.com\\/embed\\/([\\w-]+)(?:\\?start=(\\d+))?/,\n                        /^youtu\\.be\\/([\\w-]+)(?:\\?t=(\\d+))?/\n                    ],\n                    html: (match)=>{\n                        const id = match[1];\n                        const time = match[2];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' + `<iframe src=\"https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ''}\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen>' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'vimeo',\n                    url: [\n                        /^vimeo\\.com\\/(\\d+)/,\n                        /^vimeo\\.com\\/[^/]+\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/album\\/[^/]+\\/video\\/(\\d+)/,\n                        /^vimeo\\.com\\/channels\\/[^/]+\\/(\\d+)/,\n                        /^vimeo\\.com\\/groups\\/[^/]+\\/videos\\/(\\d+)/,\n                        /^vimeo\\.com\\/ondemand\\/[^/]+\\/(\\d+)/,\n                        /^player\\.vimeo\\.com\\/video\\/(\\d+)/\n                    ],\n                    html: (match)=>{\n                        const id = match[1];\n                        return '<div style=\"position: relative; padding-bottom: 100%; height: 0; padding-bottom: 56.2493%;\">' + `<iframe src=\"https://player.vimeo.com/video/${id}\" ` + 'style=\"position: absolute; width: 100%; height: 100%; top: 0; left: 0;\" ' + 'frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen>' + '</iframe>' + '</div>';\n                    }\n                },\n                {\n                    name: 'instagram',\n                    url: [\n                        /^instagram\\.com\\/p\\/(\\w+)/,\n                        /^instagram\\.com\\/reel\\/(\\w+)/\n                    ]\n                },\n                {\n                    name: 'twitter',\n                    url: [\n                        /^twitter\\.com/,\n                        /^x\\.com/\n                    ]\n                },\n                {\n                    name: 'googleMaps',\n                    url: [\n                        /^google\\.com\\/maps/,\n                        /^goo\\.gl\\/maps/,\n                        /^maps\\.google\\.com/,\n                        /^maps\\.app\\.goo\\.gl/\n                    ]\n                },\n                {\n                    name: 'flickr',\n                    url: /^flickr\\.com/\n                },\n                {\n                    name: 'facebook',\n                    url: /^facebook\\.com/\n                }\n            ]\n        });\n        this.registry = new MediaRegistry(editor.locale, editor.config.get('mediaEmbed'));\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        const renderMediaPreview = editor.config.get('mediaEmbed.previewsInData');\n        const elementName = editor.config.get('mediaEmbed.elementName');\n        const registry = this.registry;\n        editor.commands.add('mediaEmbed', new MediaEmbedCommand(editor));\n        // Configure the schema.\n        schema.register('media', {\n            inheritAllFrom: '$blockObject',\n            allowAttributes: [\n                'url'\n            ]\n        });\n        // Model -> Data\n        conversion.for('dataDowncast').elementToStructure({\n            model: 'media',\n            view: (modelElement, { writer })=>{\n                const url = modelElement.getAttribute('url');\n                return createMediaFigureElement(writer, registry, url, {\n                    elementName,\n                    renderMediaPreview: !!url && renderMediaPreview\n                });\n            }\n        });\n        // Model -> Data (url -> data-oembed-url)\n        conversion.for('dataDowncast').add(modelToViewUrlAttributeConverter(registry, {\n            elementName,\n            renderMediaPreview\n        }));\n        // Model -> View (element)\n        conversion.for('editingDowncast').elementToStructure({\n            model: 'media',\n            view: (modelElement, { writer })=>{\n                const url = modelElement.getAttribute('url');\n                const figure = createMediaFigureElement(writer, registry, url, {\n                    elementName,\n                    renderForEditingView: true\n                });\n                return toMediaWidget(figure, writer, t('media widget'));\n            }\n        });\n        // Model -> View (url -> data-oembed-url)\n        conversion.for('editingDowncast').add(modelToViewUrlAttributeConverter(registry, {\n            elementName,\n            renderForEditingView: true\n        }));\n        // View -> Model (data-oembed-url -> url)\n        conversion.for('upcast')// Upcast semantic media.\n        .elementToElement({\n            view: (element)=>[\n                    'oembed',\n                    elementName\n                ].includes(element.name) && element.getAttribute('url') ? {\n                    name: true\n                } : null,\n            model: (viewMedia, { writer })=>{\n                const url = viewMedia.getAttribute('url');\n                if (registry.hasMedia(url)) {\n                    return writer.createElement('media', {\n                        url\n                    });\n                }\n                return null;\n            }\n        })// Upcast non-semantic media.\n        .elementToElement({\n            view: {\n                name: 'div',\n                attributes: {\n                    'data-oembed-url': true\n                }\n            },\n            model: (viewMedia, { writer })=>{\n                const url = viewMedia.getAttribute('data-oembed-url');\n                if (registry.hasMedia(url)) {\n                    return writer.createElement('media', {\n                        url\n                    });\n                }\n                return null;\n            }\n        })// Consume `<figure class=\"media\">` elements, that were left after upcast.\n        .add((dispatcher)=>{\n            const converter = (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.viewItem, {\n                    name: true,\n                    classes: 'media'\n                })) {\n                    return;\n                }\n                const { modelRange, modelCursor } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n                data.modelRange = modelRange;\n                data.modelCursor = modelCursor;\n                const modelElement = first(modelRange.getItems());\n                if (!modelElement) {\n                    // Revert consumed figure so other features can convert it.\n                    conversionApi.consumable.revert(data.viewItem, {\n                        name: true,\n                        classes: 'media'\n                    });\n                }\n            };\n            dispatcher.on('element:figure', converter);\n        });\n    }\n}\n\nconst URL_REGEXP = /^(?:http(s)?:\\/\\/)?[\\w-]+\\.[\\w-.~:/?#[\\]@!$&'()*+,;=%]+$/;\n/**\n * The auto-media embed plugin. It recognizes media links in the pasted content and embeds\n * them shortly after they are injected into the document.\n */ class AutoMediaEmbed extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Clipboard,\n            Delete,\n            Undo\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'AutoMediaEmbed';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * The paste–to–embed `setTimeout` ID. Stored as a property to allow\n\t * cleaning of the timeout.\n\t */ _timeoutId;\n    /**\n\t * The position where the `<media>` element will be inserted after the timeout,\n\t * determined each time the new content is pasted into the document.\n\t */ _positionToInsert;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._timeoutId = null;\n        this._positionToInsert = null;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const modelDocument = editor.model.document;\n        // We need to listen on `Clipboard#inputTransformation` because we need to save positions of selection.\n        // After pasting, the content between those positions will be checked for a URL that could be transformed\n        // into media.\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        this.listenTo(clipboardPipeline, 'inputTransformation', ()=>{\n            const firstRange = modelDocument.selection.getFirstRange();\n            const leftLivePosition = LivePosition.fromPosition(firstRange.start);\n            leftLivePosition.stickiness = 'toPrevious';\n            const rightLivePosition = LivePosition.fromPosition(firstRange.end);\n            rightLivePosition.stickiness = 'toNext';\n            modelDocument.once('change:data', ()=>{\n                this._embedMediaBetweenPositions(leftLivePosition, rightLivePosition);\n                leftLivePosition.detach();\n                rightLivePosition.detach();\n            }, {\n                priority: 'high'\n            });\n        });\n        const undoCommand = editor.commands.get('undo');\n        undoCommand.on('execute', ()=>{\n            if (this._timeoutId) {\n                global.window.clearTimeout(this._timeoutId);\n                this._positionToInsert.detach();\n                this._timeoutId = null;\n                this._positionToInsert = null;\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Analyzes the part of the document between provided positions in search for a URL representing media.\n\t * When the URL is found, it is automatically converted into media.\n\t *\n\t * @param leftPosition Left position of the selection.\n\t * @param rightPosition Right position of the selection.\n\t */ _embedMediaBetweenPositions(leftPosition, rightPosition) {\n        const editor = this.editor;\n        const mediaRegistry = editor.plugins.get(MediaEmbedEditing).registry;\n        // TODO: Use marker instead of LiveRange & LivePositions.\n        const urlRange = new LiveRange(leftPosition, rightPosition);\n        const walker = urlRange.getWalker({\n            ignoreElementEnd: true\n        });\n        let url = '';\n        for (const node of walker){\n            if (node.item.is('$textProxy')) {\n                url += node.item.data;\n            }\n        }\n        url = url.trim();\n        // If the URL does not match to universal URL regexp, let's skip that.\n        if (!url.match(URL_REGEXP)) {\n            urlRange.detach();\n            return;\n        }\n        // If the URL represents a media, let's use it.\n        if (!mediaRegistry.hasMedia(url)) {\n            urlRange.detach();\n            return;\n        }\n        const mediaEmbedCommand = editor.commands.get('mediaEmbed');\n        // Do not anything if media element cannot be inserted at the current position (#47).\n        if (!mediaEmbedCommand.isEnabled) {\n            urlRange.detach();\n            return;\n        }\n        // Position won't be available in the `setTimeout` function so let's clone it.\n        this._positionToInsert = LivePosition.fromPosition(leftPosition);\n        // This action mustn't be executed if undo was called between pasting and auto-embedding.\n        this._timeoutId = global.window.setTimeout(()=>{\n            editor.model.change((writer)=>{\n                this._timeoutId = null;\n                writer.remove(urlRange);\n                urlRange.detach();\n                let insertionPosition = null;\n                // Check if position where the media element should be inserted is still valid.\n                // Otherwise leave it as undefined to use document.selection - default behavior of model.insertContent().\n                if (this._positionToInsert.root.rootName !== '$graveyard') {\n                    insertionPosition = this._positionToInsert;\n                }\n                insertMedia(editor.model, url, insertionPosition, false);\n                this._positionToInsert.detach();\n                this._positionToInsert = null;\n            });\n            editor.plugins.get(Delete).requestUndoOnBackspace();\n        }, 100);\n    }\n}\n\n/**\n * The media form view controller class.\n *\n * See {@link module:media-embed/ui/mediaformview~MediaFormView}.\n */ class MediaFormView extends View {\n    /**\n\t * Tracks information about the DOM focus in the form.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * The URL input view.\n\t */ urlInputView;\n    /**\n\t * An array of form validators used by {@link #isValid}.\n\t */ _validators;\n    /**\n\t * The default info text for the {@link #urlInputView}.\n\t */ _urlInputViewInfoDefault;\n    /**\n\t * The info text with an additional tip for the {@link #urlInputView},\n\t * displayed when the input has some value.\n\t */ _urlInputViewInfoTip;\n    /**\n\t * @param validators Form validators used by {@link #isValid}.\n\t * @param locale The localization services instance.\n\t */ constructor(validators, locale){\n        super(locale);\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('mediaURLInputValue', '');\n        this.urlInputView = this._createUrlInput();\n        this._validators = validators;\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-media-form',\n                    'ck-responsive-form'\n                ],\n                tabindex: '-1'\n            },\n            children: [\n                this.urlInputView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        submitHandler({\n            view: this\n        });\n        // Register the view in the focus tracker.\n        this.focusTracker.add(this.urlInputView.element);\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the {@link #urlInputView}.\n\t */ focus() {\n        this.urlInputView.focus();\n    }\n    /**\n\t * The native DOM `value` of the {@link #urlInputView} element.\n\t *\n\t * **Note**: Do not confuse it with the {@link module:ui/inputtext/inputtextview~InputTextView#value}\n\t * which works one way only and may not represent the actual state of the component in the DOM.\n\t */ get url() {\n        return this.urlInputView.fieldView.element.value.trim();\n    }\n    set url(url) {\n        this.urlInputView.fieldView.value = url.trim();\n    }\n    /**\n\t * Validates the form and returns `false` when some fields are invalid.\n\t */ isValid() {\n        this.resetFormStatus();\n        for (const validator of this._validators){\n            const errorText = validator(this);\n            // One error per field is enough.\n            if (errorText) {\n                // Apply updated error.\n                this.urlInputView.errorText = errorText;\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Cleans up the supplementary error and information text of the {@link #urlInputView}\n\t * bringing them back to the state when the form has been displayed for the first time.\n\t *\n\t * See {@link #isValid}.\n\t */ resetFormStatus() {\n        this.urlInputView.errorText = null;\n        this.urlInputView.infoText = this._urlInputViewInfoDefault;\n    }\n    /**\n\t * Creates a labeled input view.\n\t *\n\t * @returns Labeled input view instance.\n\t */ _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledFieldView(this.locale, createLabeledInputText);\n        const inputField = labeledInput.fieldView;\n        this._urlInputViewInfoDefault = t('Paste the media URL in the input.');\n        this._urlInputViewInfoTip = t('Tip: Paste the URL into the content to embed faster.');\n        labeledInput.label = t('Media URL');\n        labeledInput.infoText = this._urlInputViewInfoDefault;\n        inputField.inputMode = 'url';\n        inputField.on('input', ()=>{\n            // Display the tip text only when there is some value. Otherwise fall back to the default info text.\n            labeledInput.infoText = inputField.element.value ? this._urlInputViewInfoTip : this._urlInputViewInfoDefault;\n            this.mediaURLInputValue = inputField.element.value.trim();\n        });\n        return labeledInput;\n    }\n}\n\nvar mediaIcon = \"<svg viewBox=\\\"0 0 22 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1.587 1.5c-.612 0-.601-.029-.601.551v14.84c0 .59-.01.559.591.559h18.846c.602 0 .591.03.591-.56V2.052c0-.58.01-.55-.591-.55H1.587Zm.701.971h1.003v1H2.288v-1Zm16.448 0h1.003v1h-1.003v-1Zm-14.24 1h13.008v12H4.467l.029-12Zm-2.208 1h1.003v1H2.288v-1Zm16.448 0h1.003v1h-1.003v-1Zm-16.448 2h1.003v1H2.288v-1Zm16.448 0h1.003v1h-1.003v-1Zm-16.448 2h1.003v1H2.288v-1Zm16.448 0h1.003v1h-1.003v-1Zm-16.448 2h1.003v1H2.288v-1Zm16.448 0h1.003v1h-1.003v-1Zm-16.448 2h1.003l-.029 1h-.974v-1Zm16.448 0h1.003v1h-1.003v-1Zm-16.448 2h.974v1h-.974v-1Zm16.448 0h1.003v1h-1.003v-1Z\\\"/><path d=\\\"M8.374 6.648a.399.399 0 0 1 .395-.4.402.402 0 0 1 .2.049l5.148 2.824a.4.4 0 0 1 0 .7l-5.148 2.824a.403.403 0 0 1-.595-.35V6.648Z\\\"/></svg>\";\n\n/**\n * The media embed UI plugin.\n */ class MediaEmbedUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            MediaEmbedEditing,\n            Dialog\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    _formView;\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('mediaEmbed', ()=>{\n            const t = this.editor.locale.t;\n            const button = this._createDialogButton(ButtonView);\n            button.tooltip = true;\n            button.label = t('Insert media');\n            return button;\n        });\n        editor.ui.componentFactory.add('menuBar:mediaEmbed', ()=>{\n            const t = this.editor.locale.t;\n            const button = this._createDialogButton(MenuBarMenuListItemButtonView);\n            button.label = t('Media');\n            return button;\n        });\n    }\n    /**\n\t * Creates a button for menu bar that will show media embed dialog.\n\t */ _createDialogButton(ButtonClass) {\n        const editor = this.editor;\n        const buttonView = new ButtonClass(editor.locale);\n        const command = editor.commands.get('mediaEmbed');\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        buttonView.icon = mediaIcon;\n        buttonView.bind('isEnabled').to(command, 'isEnabled');\n        buttonView.on('execute', ()=>{\n            if (dialogPlugin.id === 'mediaEmbed') {\n                dialogPlugin.hide();\n            } else {\n                this._showDialog();\n            }\n        });\n        return buttonView;\n    }\n    _showDialog() {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        const command = editor.commands.get('mediaEmbed');\n        const t = editor.locale.t;\n        if (!this._formView) {\n            const registry = editor.plugins.get(MediaEmbedEditing).registry;\n            this._formView = new (CssTransitionDisablerMixin(MediaFormView))(getFormValidators(editor.t, registry), editor.locale);\n            this._formView.on('submit', ()=>this._handleSubmitForm());\n        }\n        dialog.show({\n            id: 'mediaEmbed',\n            title: t('Insert media'),\n            content: this._formView,\n            isModal: true,\n            onShow: ()=>{\n                this._formView.url = command.value || '';\n                this._formView.resetFormStatus();\n                this._formView.urlInputView.fieldView.select();\n            },\n            actionButtons: [\n                {\n                    label: t('Cancel'),\n                    withText: true,\n                    onExecute: ()=>dialog.hide()\n                },\n                {\n                    label: t('Accept'),\n                    class: 'ck-button-action',\n                    withText: true,\n                    onExecute: ()=>this._handleSubmitForm()\n                }\n            ]\n        });\n    }\n    _handleSubmitForm() {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        if (this._formView.isValid()) {\n            editor.execute('mediaEmbed', this._formView.url);\n            dialog.hide();\n            editor.editing.view.focus();\n        }\n    }\n}\nfunction getFormValidators(t, registry) {\n    return [\n        (form)=>{\n            if (!form.url.length) {\n                return t('The URL must not be empty.');\n            }\n        },\n        (form)=>{\n            if (!registry.hasMedia(form.url)) {\n                return t('This media URL is not supported.');\n            }\n        }\n    ];\n}\n\n/**\n * The media embed plugin.\n *\n * For a detailed overview, check the {@glink features/media-embed Media Embed feature documentation}.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:media-embed/mediaembedediting~MediaEmbedEditing media embed editing feature},\n * * The {@link module:media-embed/mediaembedui~MediaEmbedUI media embed UI feature} and\n * * The {@link module:media-embed/automediaembed~AutoMediaEmbed auto-media embed feature}.\n */ class MediaEmbed extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            MediaEmbedEditing,\n            MediaEmbedUI,\n            AutoMediaEmbed,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbed';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\n/**\n * The media embed toolbar plugin. It creates a toolbar for media embed that shows up when the media element is selected.\n *\n * Instances of toolbar components (e.g. buttons) are created based on the\n * {@link module:media-embed/mediaembedconfig~MediaEmbedConfig#toolbar `media.toolbar` configuration option}.\n */ class MediaEmbedToolbar extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            WidgetToolbarRepository\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedToolbar';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        widgetToolbarRepository.register('mediaEmbed', {\n            ariaLabel: t('Media toolbar'),\n            items: editor.config.get('mediaEmbed.toolbar') || [],\n            getRelatedElement: getSelectedMediaViewWidget\n        });\n    }\n}\n\nexport { AutoMediaEmbed, MediaEmbed, MediaEmbedEditing, MediaEmbedToolbar, MediaEmbedUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { CKEditorError, toMap, uid, Rect, keyCodes, Collection, logWarning, env } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ListView, View, ListItemView, ContextualBalloon, clickOutsideHandler, ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { TextWatcher } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { debounce } from 'lodash-es';\n\nconst BRACKET_PAIRS = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n};\n/**\n * The mention command.\n *\n * The command is registered by {@link module:mention/mentionediting~MentionEditing} as `'mention'`.\n *\n * To insert a mention into a range, execute the command and specify a mention object with a range to replace:\n *\n * ```ts\n * const focus = editor.model.document.selection.focus;\n *\n * // It will replace one character before the selection focus with the '#1234' text\n * // with the mention attribute filled with passed attributes.\n * editor.execute( 'mention', {\n * \tmarker: '#',\n * \tmention: {\n * \t\tid: '#1234',\n * \t\tname: 'Foo',\n * \t\ttitle: 'Big Foo'\n * \t},\n * \trange: editor.model.createRange( focus.getShiftedBy( -1 ), focus )\n * } );\n *\n * // It will replace one character before the selection focus with the 'The \"Big Foo\"' text\n * // with the mention attribute filled with passed attributes.\n * editor.execute( 'mention', {\n * \tmarker: '#',\n * \tmention: {\n * \t\tid: '#1234',\n * \t\tname: 'Foo',\n * \t\ttitle: 'Big Foo'\n * \t},\n * \ttext: 'The \"Big Foo\"',\n * \trange: editor.model.createRange( focus.getShiftedBy( -1 ), focus )\n * } );\n *\t```\n */ class MentionCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Since this command may pass range in execution parameters, it should be checked directly in execute block.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'mention');\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.mention The mention object to insert. When a string is passed, it will be used to create a plain\n\t * object with the name attribute that equals the passed string.\n\t * @param options.marker The marker character (e.g. `'@'`).\n\t * @param options.text The text of the inserted mention. Defaults to the full mention string composed from `marker` and\n\t * `mention` string or `mention.id` if an object is passed.\n\t * @param options.range The range to replace.\n\t * Note that the replaced range might be shorter than the inserted text with the mention attribute.\n\t * @fires execute\n\t */ execute(options) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const mentionData = typeof options.mention == 'string' ? {\n            id: options.mention\n        } : options.mention;\n        const mentionID = mentionData.id;\n        const range = options.range || selection.getFirstRange();\n        // Don't execute command if range is in non-editable place.\n        if (!model.canEditAt(range)) {\n            return;\n        }\n        const mentionText = options.text || mentionID;\n        const mention = _addMentionAttributes({\n            _text: mentionText,\n            id: mentionID\n        }, mentionData);\n        if (options.marker.length != 1) {\n            /**\n\t\t\t * The marker must be a single character.\n\t\t\t *\n\t\t\t * Correct markers: `'@'`, `'#'`.\n\t\t\t *\n\t\t\t * Incorrect markers: `'@@'`, `'[@'`.\n\t\t\t *\n\t\t\t * See {@link module:mention/mentionconfig~MentionConfig}.\n\t\t\t *\n\t\t\t * @error mentioncommand-incorrect-marker\n\t\t\t */ throw new CKEditorError('mentioncommand-incorrect-marker', this);\n        }\n        if (mentionID.charAt(0) != options.marker) {\n            /**\n\t\t\t * The feed item ID must start with the marker character.\n\t\t\t *\n\t\t\t * Correct mention feed setting:\n\t\t\t *\n\t\t\t * ```ts\n\t\t\t * mentions: [\n\t\t\t * \t{\n\t\t\t * \t\tmarker: '@',\n\t\t\t * \t\tfeed: [ '@Ann', '@Barney', ... ]\n\t\t\t * \t}\n\t\t\t * ]\n\t\t\t * ```\n\t\t\t *\n\t\t\t * Incorrect mention feed setting:\n\t\t\t *\n\t\t\t * ```ts\n\t\t\t * mentions: [\n\t\t\t * \t{\n\t\t\t * \t\tmarker: '@',\n\t\t\t * \t\tfeed: [ 'Ann', 'Barney', ... ]\n\t\t\t * \t}\n\t\t\t * ]\n\t\t\t * ```\n\t\t\t *\n\t\t\t * See {@link module:mention/mentionconfig~MentionConfig}.\n\t\t\t *\n\t\t\t * @error mentioncommand-incorrect-id\n\t\t\t */ throw new CKEditorError('mentioncommand-incorrect-id', this);\n        }\n        model.change((writer)=>{\n            const currentAttributes = toMap(selection.getAttributes());\n            const attributesWithMention = new Map(currentAttributes.entries());\n            attributesWithMention.set('mention', mention);\n            // Replace a range with the text with a mention.\n            const insertionRange = model.insertContent(writer.createText(mentionText, attributesWithMention), range);\n            const nodeBefore = insertionRange.start.nodeBefore;\n            const nodeAfter = insertionRange.end.nodeAfter;\n            const isFollowedByWhiteSpace = nodeAfter && nodeAfter.is('$text') && nodeAfter.data.startsWith(' ');\n            let isInsertedInBrackets = false;\n            if (nodeBefore && nodeAfter && nodeBefore.is('$text') && nodeAfter.is('$text')) {\n                const precedingCharacter = nodeBefore.data.slice(-1);\n                const isPrecededByOpeningBracket = precedingCharacter in BRACKET_PAIRS;\n                const isFollowedByBracketClosure = isPrecededByOpeningBracket && nodeAfter.data.startsWith(BRACKET_PAIRS[precedingCharacter]);\n                isInsertedInBrackets = isPrecededByOpeningBracket && isFollowedByBracketClosure;\n            }\n            // Don't add a white space if either of the following is true:\n            // * there's already one after the mention;\n            // * the mention was inserted in the empty matching brackets.\n            // https://github.com/ckeditor/ckeditor5/issues/4651\n            if (!isInsertedInBrackets && !isFollowedByWhiteSpace) {\n                model.insertContent(writer.createText(' ', currentAttributes), range.start.getShiftedBy(mentionText.length));\n            }\n        });\n    }\n}\n\n/**\n * The mention editing feature.\n *\n * It introduces the {@link module:mention/mentioncommand~MentionCommand command} and the `mention`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span class=\"mention\" data-mention=\"@mention\">`.\n */ class MentionEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MentionEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        const doc = model.document;\n        // Allow the mention attribute on all text nodes.\n        model.schema.extend('$text', {\n            allowAttributes: 'mention'\n        });\n        // Upcast conversion.\n        editor.conversion.for('upcast').elementToAttribute({\n            view: {\n                name: 'span',\n                key: 'data-mention',\n                classes: 'mention'\n            },\n            model: {\n                key: 'mention',\n                value: (viewElement)=>_toMentionAttribute(viewElement)\n            }\n        });\n        // Downcast conversion.\n        editor.conversion.for('downcast').attributeToElement({\n            model: 'mention',\n            view: createViewMentionElement\n        });\n        editor.conversion.for('downcast').add(preventPartialMentionDowncast);\n        doc.registerPostFixer((writer)=>removePartialMentionPostFixer(writer, doc, model.schema));\n        doc.registerPostFixer((writer)=>extendAttributeOnMentionPostFixer(writer, doc));\n        doc.registerPostFixer((writer)=>selectionMentionAttributePostFixer(writer, doc));\n        editor.commands.add('mention', new MentionCommand(editor));\n    }\n}\n/**\n * @internal\n */ function _addMentionAttributes(baseMentionData, data) {\n    return Object.assign({\n        uid: uid()\n    }, baseMentionData, data || {});\n}\n/**\n * Creates a mention attribute value from the provided view element and optional data.\n *\n * This function is exposed as\n * {@link module:mention/mention~Mention#toMentionAttribute `editor.plugins.get( 'Mention' ).toMentionAttribute()`}.\n *\n * @internal\n */ function _toMentionAttribute(viewElementOrMention, data) {\n    const dataMention = viewElementOrMention.getAttribute('data-mention');\n    const textNode = viewElementOrMention.getChild(0);\n    // Do not convert empty mentions.\n    if (!textNode) {\n        return;\n    }\n    const baseMentionData = {\n        id: dataMention,\n        _text: textNode.data\n    };\n    return _addMentionAttributes(baseMentionData, data);\n}\n/**\n * A converter that blocks partial mention from being converted.\n *\n * This converter is registered with 'highest' priority in order to consume mention attribute before it is converted by\n * any other converters. This converter only consumes partial mention - those whose `_text` attribute is not equal to text with mention\n * attribute. This may happen when copying part of mention text.\n */ function preventPartialMentionDowncast(dispatcher) {\n    dispatcher.on('attribute:mention', (evt, data, conversionApi)=>{\n        const mention = data.attributeNewValue;\n        if (!data.item.is('$textProxy') || !mention) {\n            return;\n        }\n        const start = data.range.start;\n        const textNode = start.textNode || start.nodeAfter;\n        if (textNode.data != mention._text) {\n            // Consume item to prevent partial mention conversion.\n            conversionApi.consumable.consume(data.item, evt.name);\n        }\n    }, {\n        priority: 'highest'\n    });\n}\n/**\n * Creates a mention element from the mention data.\n */ function createViewMentionElement(mention, { writer }) {\n    if (!mention) {\n        return;\n    }\n    const attributes = {\n        class: 'mention',\n        'data-mention': mention.id\n    };\n    const options = {\n        id: mention.uid,\n        priority: 20\n    };\n    return writer.createAttributeElement('span', attributes, options);\n}\n/**\n * Model post-fixer that disallows typing with selection when the selection is placed after the text node with the mention attribute or\n * before a text node with mention attribute.\n */ function selectionMentionAttributePostFixer(writer, doc) {\n    const selection = doc.selection;\n    const focus = selection.focus;\n    if (selection.isCollapsed && selection.hasAttribute('mention') && shouldNotTypeWithMentionAt(focus)) {\n        writer.removeSelectionAttribute('mention');\n        return true;\n    }\n    return false;\n}\n/**\n * Helper function to detect if mention attribute should be removed from selection.\n * This check makes only sense if the selection has mention attribute.\n *\n * The mention attribute should be removed from a selection when selection focus is placed:\n * a) after a text node\n * b) the position is at parents start - the selection will set attributes from node after.\n */ function shouldNotTypeWithMentionAt(position) {\n    const isAtStart = position.isAtStart;\n    const isAfterAMention = position.nodeBefore && position.nodeBefore.is('$text');\n    return isAfterAMention || isAtStart;\n}\n/**\n * Model post-fixer that removes the mention attribute from the modified text node.\n */ function removePartialMentionPostFixer(writer, doc, schema) {\n    const changes = doc.differ.getChanges();\n    let wasChanged = false;\n    for (const change of changes){\n        if (change.type == 'attribute') {\n            continue;\n        }\n        // Checks the text node on the current position.\n        const position = change.position;\n        if (change.name == '$text') {\n            const nodeAfterInsertedTextNode = position.textNode && position.textNode.nextSibling;\n            // Checks the text node where the change occurred.\n            wasChanged = checkAndFix(position.textNode, writer) || wasChanged;\n            // Occurs on paste inside a text node with mention.\n            wasChanged = checkAndFix(nodeAfterInsertedTextNode, writer) || wasChanged;\n            wasChanged = checkAndFix(position.nodeBefore, writer) || wasChanged;\n            wasChanged = checkAndFix(position.nodeAfter, writer) || wasChanged;\n        }\n        // Checks text nodes in inserted elements (might occur when splitting a paragraph or pasting content inside text with mention).\n        if (change.name != '$text' && change.type == 'insert') {\n            const insertedNode = position.nodeAfter;\n            for (const item of writer.createRangeIn(insertedNode).getItems()){\n                wasChanged = checkAndFix(item, writer) || wasChanged;\n            }\n        }\n        // Inserted inline elements might break mention.\n        if (change.type == 'insert' && schema.isInline(change.name)) {\n            const nodeAfterInserted = position.nodeAfter && position.nodeAfter.nextSibling;\n            wasChanged = checkAndFix(position.nodeBefore, writer) || wasChanged;\n            wasChanged = checkAndFix(nodeAfterInserted, writer) || wasChanged;\n        }\n    }\n    return wasChanged;\n}\n/**\n * This post-fixer will extend the attribute applied on the part of the mention so the whole text node of the mention will have\n * the added attribute.\n */ function extendAttributeOnMentionPostFixer(writer, doc) {\n    const changes = doc.differ.getChanges();\n    let wasChanged = false;\n    for (const change of changes){\n        if (change.type === 'attribute' && change.attributeKey != 'mention') {\n            // Checks the node on the left side of the range...\n            const nodeBefore = change.range.start.nodeBefore;\n            // ... and on the right side of the range.\n            const nodeAfter = change.range.end.nodeAfter;\n            for (const node of [\n                nodeBefore,\n                nodeAfter\n            ]){\n                if (isBrokenMentionNode(node) && node.getAttribute(change.attributeKey) != change.attributeNewValue) {\n                    writer.setAttribute(change.attributeKey, change.attributeNewValue, node);\n                    wasChanged = true;\n                }\n            }\n        }\n    }\n    return wasChanged;\n}\n/**\n * Checks if a node has a correct mention attribute if present.\n * Returns `true` if the node is text and has a mention attribute whose text does not match the expected mention text.\n */ function isBrokenMentionNode(node) {\n    if (!node || !(node.is('$text') || node.is('$textProxy')) || !node.hasAttribute('mention')) {\n        return false;\n    }\n    const text = node.data;\n    const mention = node.getAttribute('mention');\n    const expectedText = mention._text;\n    return text != expectedText;\n}\n/**\n * Fixes a mention on a text node if it needs a fix.\n */ function checkAndFix(textNode, writer) {\n    if (isBrokenMentionNode(textNode)) {\n        writer.removeAttribute('mention', textNode);\n        return true;\n    }\n    return false;\n}\n\n/**\n * The mention ui view.\n */ class MentionsView extends ListView {\n    selected;\n    position;\n    /**\n\t * @inheritDoc\n\t */ constructor(locale){\n        super(locale);\n        this.extendTemplate({\n            attributes: {\n                class: [\n                    'ck-mentions'\n                ],\n                tabindex: '-1'\n            }\n        });\n    }\n    /**\n\t * {@link #select Selects} the first item.\n\t */ selectFirst() {\n        this.select(0);\n    }\n    /**\n\t * Selects next item to the currently {@link #select selected}.\n\t *\n\t * If the last item is already selected, it will select the first item.\n\t */ selectNext() {\n        const item = this.selected;\n        const index = this.items.getIndex(item);\n        this.select(index + 1);\n    }\n    /**\n\t * Selects previous item to the currently {@link #select selected}.\n\t *\n\t * If the first item is already selected, it will select the last item.\n\t */ selectPrevious() {\n        const item = this.selected;\n        const index = this.items.getIndex(item);\n        this.select(index - 1);\n    }\n    /**\n\t * Marks item at a given index as selected.\n\t *\n\t * Handles selection cycling when passed index is out of bounds:\n\t * - if the index is lower than 0, it will select the last item,\n\t * - if the index is higher than the last item index, it will select the first item.\n\t *\n\t * @param index Index of an item to be marked as selected.\n\t */ select(index) {\n        let indexToGet = 0;\n        if (index > 0 && index < this.items.length) {\n            indexToGet = index;\n        } else if (index < 0) {\n            indexToGet = this.items.length - 1;\n        }\n        const item = this.items.get(indexToGet);\n        // Return early if item is already selected.\n        if (this.selected === item) {\n            return;\n        }\n        // Remove highlight of previously selected item.\n        if (this.selected) {\n            this.selected.removeHighlight();\n        }\n        item.highlight();\n        this.selected = item;\n        // Scroll the mentions view to the selected element.\n        if (!this._isItemVisibleInScrolledArea(item)) {\n            this.element.scrollTop = item.element.offsetTop;\n        }\n    }\n    /**\n\t * Triggers the `execute` event on the {@link #select selected} item.\n\t */ executeSelected() {\n        this.selected.fire('execute');\n    }\n    /**\n\t * Checks if an item is visible in the scrollable area.\n\t *\n\t * The item is considered visible when:\n\t * - its top boundary is inside the scrollable rect\n\t * - its bottom boundary is inside the scrollable rect (the whole item must be visible)\n\t */ _isItemVisibleInScrolledArea(item) {\n        return new Rect(this.element).contains(new Rect(item.element));\n    }\n}\n\n/**\n * This class wraps DOM element as a CKEditor5 UI View.\n *\n * It allows to render any DOM element and use it in mentions list.\n */ class DomWrapperView extends View {\n    /**\n\t * The DOM element for which wrapper was created.\n\t */ domElement;\n    /**\n\t * Creates an instance of {@link module:mention/ui/domwrapperview~DomWrapperView} class.\n\t *\n\t * Also see {@link #render}.\n\t */ constructor(locale, domElement){\n        super(locale);\n        // Disable template rendering on this view.\n        this.template = undefined;\n        this.domElement = domElement;\n        // Render dom wrapper as a button.\n        this.domElement.classList.add('ck-button');\n        this.set('isOn', false);\n        // Handle isOn state as in buttons.\n        this.on('change:isOn', (evt, name, isOn)=>{\n            if (isOn) {\n                this.domElement.classList.add('ck-on');\n                this.domElement.classList.remove('ck-off');\n            } else {\n                this.domElement.classList.add('ck-off');\n                this.domElement.classList.remove('ck-on');\n            }\n        });\n        // Pass click event as execute event.\n        this.listenTo(this.domElement, 'click', ()=>{\n            this.fire('execute');\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.element = this.domElement;\n    }\n    /**\n\t * Focuses the DOM element.\n\t */ focus() {\n        this.domElement.focus();\n    }\n}\n\nclass MentionListItemView extends ListItemView {\n    item;\n    marker;\n    highlight() {\n        const child = this.children.first;\n        child.isOn = true;\n    }\n    removeHighlight() {\n        const child = this.children.first;\n        child.isOn = false;\n    }\n}\n\nconst VERTICAL_SPACING = 3;\n// The key codes that mention UI handles when it is open (without commit keys).\nconst defaultHandledKeyCodes = [\n    keyCodes.arrowup,\n    keyCodes.arrowdown,\n    keyCodes.esc\n];\n// Dropdown commit key codes.\nconst defaultCommitKeyCodes = [\n    keyCodes.enter,\n    keyCodes.tab\n];\n/**\n * The mention UI feature.\n */ class MentionUI extends Plugin {\n    /**\n\t * The mention view.\n\t */ _mentionsView;\n    /**\n\t * Stores mention feeds configurations.\n\t */ _mentionsConfigurations;\n    /**\n\t * The contextual balloon plugin instance.\n\t */ _balloon;\n    _items = new Collection();\n    _lastRequested;\n    /**\n\t * Debounced feed requester. It uses `lodash#debounce` method to delay function call.\n\t */ _requestFeedDebounced;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MentionUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ContextualBalloon\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this._mentionsView = this._createMentionView();\n        this._mentionsConfigurations = new Map();\n        this._requestFeedDebounced = debounce(this._requestFeed, 100);\n        editor.config.define('mention', {\n            feeds: []\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const commitKeys = editor.config.get('mention.commitKeys') || defaultCommitKeyCodes;\n        const handledKeyCodes = defaultHandledKeyCodes.concat(commitKeys);\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Key listener that handles navigation in mention view.\n        editor.editing.view.document.on('keydown', (evt, data)=>{\n            if (isHandledKey(data.keyCode) && this._isUIVisible) {\n                data.preventDefault();\n                evt.stop(); // Required for Enter key overriding.\n                if (data.keyCode == keyCodes.arrowdown) {\n                    this._mentionsView.selectNext();\n                }\n                if (data.keyCode == keyCodes.arrowup) {\n                    this._mentionsView.selectPrevious();\n                }\n                if (commitKeys.includes(data.keyCode)) {\n                    this._mentionsView.executeSelected();\n                }\n                if (data.keyCode == keyCodes.esc) {\n                    this._hideUIAndRemoveMarker();\n                }\n            }\n        }, {\n            priority: 'highest'\n        }); // Required to override the Enter key.\n        // Close the dropdown upon clicking outside of the plugin UI.\n        clickOutsideHandler({\n            emitter: this._mentionsView,\n            activator: ()=>this._isUIVisible,\n            contextElements: ()=>[\n                    this._balloon.view.element\n                ],\n            callback: ()=>this._hideUIAndRemoveMarker()\n        });\n        const feeds = editor.config.get('mention.feeds');\n        for (const mentionDescription of feeds){\n            const { feed, marker, dropdownLimit } = mentionDescription;\n            if (!isValidMentionMarker(marker)) {\n                /**\n\t\t\t\t * The marker must be a single character.\n\t\t\t\t *\n\t\t\t\t * Correct markers: `'@'`, `'#'`.\n\t\t\t\t *\n\t\t\t\t * Incorrect markers: `'$$'`, `'[@'`.\n\t\t\t\t *\n\t\t\t\t * See {@link module:mention/mentionconfig~MentionConfig}.\n\t\t\t\t *\n\t\t\t\t * @error mentionconfig-incorrect-marker\n\t\t\t\t * @param marker Configured marker\n\t\t\t\t */ throw new CKEditorError('mentionconfig-incorrect-marker', null, {\n                    marker\n                });\n            }\n            const feedCallback = typeof feed == 'function' ? feed.bind(this.editor) : createFeedCallback(feed);\n            const itemRenderer = mentionDescription.itemRenderer;\n            const definition = {\n                marker,\n                feedCallback,\n                itemRenderer,\n                dropdownLimit\n            };\n            this._mentionsConfigurations.set(marker, definition);\n        }\n        this._setupTextWatcher(feeds);\n        this.listenTo(editor, 'change:isReadOnly', ()=>{\n            this._hideUIAndRemoveMarker();\n        });\n        this.on('requestFeed:response', (evt, data)=>this._handleFeedResponse(data));\n        this.on('requestFeed:error', ()=>this._hideUIAndRemoveMarker());\n        /**\n\t\t * Checks if a given key code is handled by the mention UI.\n\t\t */ function isHandledKey(keyCode) {\n            return handledKeyCodes.includes(keyCode);\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this._mentionsView.destroy();\n    }\n    /**\n\t * Returns true when {@link #_mentionsView} is in the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon} and it is\n\t * currently visible.\n\t */ get _isUIVisible() {\n        return this._balloon.visibleView === this._mentionsView;\n    }\n    /**\n\t * Creates the {@link #_mentionsView}.\n\t */ _createMentionView() {\n        const locale = this.editor.locale;\n        const mentionsView = new MentionsView(locale);\n        mentionsView.items.bindTo(this._items).using((data)=>{\n            const { item, marker } = data;\n            const { dropdownLimit: markerDropdownLimit } = this._mentionsConfigurations.get(marker);\n            // Set to 10 by default for backwards compatibility. See: #10479\n            const dropdownLimit = markerDropdownLimit || this.editor.config.get('mention.dropdownLimit') || 10;\n            if (mentionsView.items.length >= dropdownLimit) {\n                return null;\n            }\n            const listItemView = new MentionListItemView(locale);\n            const view = this._renderItem(item, marker);\n            view.delegate('execute').to(listItemView);\n            listItemView.children.add(view);\n            listItemView.item = item;\n            listItemView.marker = marker;\n            listItemView.on('execute', ()=>{\n                mentionsView.fire('execute', {\n                    item,\n                    marker\n                });\n            });\n            return listItemView;\n        });\n        mentionsView.on('execute', (evt, data)=>{\n            const editor = this.editor;\n            const model = editor.model;\n            const item = data.item;\n            const marker = data.marker;\n            const mentionMarker = editor.model.markers.get('mention');\n            // Create a range on matched text.\n            const end = model.createPositionAt(model.document.selection.focus);\n            const start = model.createPositionAt(mentionMarker.getStart());\n            const range = model.createRange(start, end);\n            this._hideUIAndRemoveMarker();\n            editor.execute('mention', {\n                mention: item,\n                text: item.text,\n                marker,\n                range\n            });\n            editor.editing.view.focus();\n        });\n        return mentionsView;\n    }\n    /**\n\t * Returns item renderer for the marker.\n\t */ _getItemRenderer(marker) {\n        const { itemRenderer } = this._mentionsConfigurations.get(marker);\n        return itemRenderer;\n    }\n    /**\n\t * Requests a feed from a configured callbacks.\n\t */ _requestFeed(marker, feedText) {\n        // @if CK_DEBUG_MENTION // console.log( '%c[Feed]%c Requesting for', 'color: blue', 'color: black', `\"${ feedText }\"` );\n        // Store the last requested feed - it is used to discard any out-of order requests.\n        this._lastRequested = feedText;\n        const { feedCallback } = this._mentionsConfigurations.get(marker);\n        const feedResponse = feedCallback(feedText);\n        const isAsynchronous = feedResponse instanceof Promise;\n        // For synchronous feeds (e.g. callbacks, arrays) fire the response event immediately.\n        if (!isAsynchronous) {\n            this.fire('requestFeed:response', {\n                feed: feedResponse,\n                marker,\n                feedText\n            });\n            return;\n        }\n        // Handle the asynchronous responses.\n        feedResponse.then((response)=>{\n            // Check the feed text of this response with the last requested one so either:\n            if (this._lastRequested == feedText) {\n                // It is the same and fire the response event.\n                this.fire('requestFeed:response', {\n                    feed: response,\n                    marker,\n                    feedText\n                });\n            } else {\n                // It is different - most probably out-of-order one, so fire the discarded event.\n                this.fire('requestFeed:discarded', {\n                    feed: response,\n                    marker,\n                    feedText\n                });\n            }\n        }).catch((error)=>{\n            this.fire('requestFeed:error', {\n                error\n            });\n            /**\n\t\t\t\t * The callback used for obtaining mention autocomplete feed thrown and error and the mention UI was hidden or\n\t\t\t\t * not displayed at all.\n\t\t\t\t *\n\t\t\t\t * @error mention-feed-callback-error\n\t\t\t\t */ logWarning('mention-feed-callback-error', {\n                marker\n            });\n        });\n    }\n    /**\n\t * Registers a text watcher for the marker.\n\t */ _setupTextWatcher(feeds) {\n        const editor = this.editor;\n        const feedsWithPattern = feeds.map((feed)=>({\n                ...feed,\n                pattern: createRegExp(feed.marker, feed.minimumCharacters || 0)\n            }));\n        const watcher = new TextWatcher(editor.model, createTestCallback(feedsWithPattern));\n        watcher.on('matched', (evt, data)=>{\n            const markerDefinition = getLastValidMarkerInText(feedsWithPattern, data.text);\n            const selection = editor.model.document.selection;\n            const focus = selection.focus;\n            const markerPosition = editor.model.createPositionAt(focus.parent, markerDefinition.position);\n            if (isPositionInExistingMention(focus) || isMarkerInExistingMention(markerPosition)) {\n                this._hideUIAndRemoveMarker();\n                return;\n            }\n            const feedText = requestFeedText(markerDefinition, data.text);\n            const matchedTextLength = markerDefinition.marker.length + feedText.length;\n            // Create a marker range.\n            const start = focus.getShiftedBy(-matchedTextLength);\n            const end = focus.getShiftedBy(-feedText.length);\n            const markerRange = editor.model.createRange(start, end);\n            // @if CK_DEBUG_MENTION // console.group( '%c[TextWatcher]%c matched', 'color: red', 'color: black', `\"${ feedText }\"` );\n            // @if CK_DEBUG_MENTION // console.log( 'data#text', `\"${ data.text }\"` );\n            // @if CK_DEBUG_MENTION // console.log( 'data#range', data.range.start.path, data.range.end.path );\n            // @if CK_DEBUG_MENTION // console.log( 'marker definition', markerDefinition );\n            // @if CK_DEBUG_MENTION // console.log( 'marker range', markerRange.start.path, markerRange.end.path );\n            if (checkIfStillInCompletionMode(editor)) {\n                const mentionMarker = editor.model.markers.get('mention');\n                // Update the marker - user might've moved the selection to other mention trigger.\n                editor.model.change((writer)=>{\n                    // @if CK_DEBUG_MENTION // console.log( '%c[Editing]%c Updating the marker.', 'color: purple', 'color: black' );\n                    writer.updateMarker(mentionMarker, {\n                        range: markerRange\n                    });\n                });\n            } else {\n                editor.model.change((writer)=>{\n                    // @if CK_DEBUG_MENTION // console.log( '%c[Editing]%c Adding the marker.', 'color: purple', 'color: black' );\n                    writer.addMarker('mention', {\n                        range: markerRange,\n                        usingOperation: false,\n                        affectsData: false\n                    });\n                });\n            }\n            this._requestFeedDebounced(markerDefinition.marker, feedText);\n        // @if CK_DEBUG_MENTION // console.groupEnd();\n        });\n        watcher.on('unmatched', ()=>{\n            this._hideUIAndRemoveMarker();\n        });\n        const mentionCommand = editor.commands.get('mention');\n        watcher.bind('isEnabled').to(mentionCommand);\n        return watcher;\n    }\n    /**\n\t * Handles the feed response event data.\n\t */ _handleFeedResponse(data) {\n        const { feed, marker } = data;\n        // eslint-disable-next-line max-len\n        // @if CK_DEBUG_MENTION // console.log( `%c[Feed]%c Response for \"${ data.feedText }\" (${ feed.length })`, 'color: blue', 'color: black', feed );\n        // If the marker is not in the document happens when the selection had changed and the 'mention' marker was removed.\n        if (!checkIfStillInCompletionMode(this.editor)) {\n            return;\n        }\n        // Reset the view.\n        this._items.clear();\n        for (const feedItem of feed){\n            const item = typeof feedItem != 'object' ? {\n                id: feedItem,\n                text: feedItem\n            } : feedItem;\n            this._items.add({\n                item,\n                marker\n            });\n        }\n        const mentionMarker = this.editor.model.markers.get('mention');\n        if (this._items.length) {\n            this._showOrUpdateUI(mentionMarker);\n        } else {\n            // Do not show empty mention UI.\n            this._hideUIAndRemoveMarker();\n        }\n    }\n    /**\n\t * Shows the mentions balloon. If the panel is already visible, it will reposition it.\n\t */ _showOrUpdateUI(markerMarker) {\n        if (this._isUIVisible) {\n            // @if CK_DEBUG_MENTION // console.log( '%c[UI]%c Updating position.', 'color: green', 'color: black' );\n            // Update balloon position as the mention list view may change its size.\n            this._balloon.updatePosition(this._getBalloonPanelPositionData(markerMarker, this._mentionsView.position));\n        } else {\n            // @if CK_DEBUG_MENTION // console.log( '%c[UI]%c Showing the UI.', 'color: green', 'color: black' );\n            this._balloon.add({\n                view: this._mentionsView,\n                position: this._getBalloonPanelPositionData(markerMarker, this._mentionsView.position),\n                singleViewMode: true\n            });\n        }\n        this._mentionsView.position = this._balloon.view.position;\n        this._mentionsView.selectFirst();\n    }\n    /**\n\t * Hides the mentions balloon and removes the 'mention' marker from the markers collection.\n\t */ _hideUIAndRemoveMarker() {\n        // Remove the mention view from balloon before removing marker - it is used by balloon position target().\n        if (this._balloon.hasView(this._mentionsView)) {\n            // @if CK_DEBUG_MENTION // console.log( '%c[UI]%c Hiding the UI.', 'color: green', 'color: black' );\n            this._balloon.remove(this._mentionsView);\n        }\n        if (checkIfStillInCompletionMode(this.editor)) {\n            // @if CK_DEBUG_MENTION // console.log( '%c[Editing]%c Removing marker.', 'color: purple', 'color: black' );\n            this.editor.model.change((writer)=>writer.removeMarker('mention'));\n        }\n        // Make the last matched position on panel view undefined so the #_getBalloonPanelPositionData() method will return all positions\n        // on the next call.\n        this._mentionsView.position = undefined;\n    }\n    /**\n\t * Renders a single item in the autocomplete list.\n\t */ _renderItem(item, marker) {\n        const editor = this.editor;\n        let view;\n        let label = item.id;\n        const renderer = this._getItemRenderer(marker);\n        if (renderer) {\n            const renderResult = renderer(item);\n            if (typeof renderResult != 'string') {\n                view = new DomWrapperView(editor.locale, renderResult);\n            } else {\n                label = renderResult;\n            }\n        }\n        if (!view) {\n            const buttonView = new ButtonView(editor.locale);\n            buttonView.label = label;\n            buttonView.withText = true;\n            view = buttonView;\n        }\n        return view;\n    }\n    /**\n\t * Creates a position options object used to position the balloon panel.\n\t *\n\t * @param mentionMarker\n\t * @param preferredPosition The name of the last matched position name.\n\t */ _getBalloonPanelPositionData(mentionMarker, preferredPosition) {\n        const editor = this.editor;\n        const editing = editor.editing;\n        const domConverter = editing.view.domConverter;\n        const mapper = editing.mapper;\n        const uiLanguageDirection = editor.locale.uiLanguageDirection;\n        return {\n            target: ()=>{\n                let modelRange = mentionMarker.getRange();\n                // Target the UI to the model selection range - the marker has been removed so probably the UI will not be shown anyway.\n                // The logic is used by ContextualBalloon to display another panel in the same place.\n                if (modelRange.start.root.rootName == '$graveyard') {\n                    modelRange = editor.model.document.selection.getFirstRange();\n                }\n                const viewRange = mapper.toViewRange(modelRange);\n                const rangeRects = Rect.getDomRangeRects(domConverter.viewRangeToDom(viewRange));\n                return rangeRects.pop();\n            },\n            limiter: ()=>{\n                const view = this.editor.editing.view;\n                const viewDocument = view.document;\n                const editableElement = viewDocument.selection.editableElement;\n                if (editableElement) {\n                    return view.domConverter.mapViewToDom(editableElement.root);\n                }\n                return null;\n            },\n            positions: getBalloonPanelPositions(preferredPosition, uiLanguageDirection)\n        };\n    }\n}\n/**\n * Returns the balloon positions data callbacks.\n */ function getBalloonPanelPositions(preferredPosition, uiLanguageDirection) {\n    const positions = {\n        // Positions the panel to the southeast of the caret rectangle.\n        'caret_se': (targetRect)=>{\n            return {\n                top: targetRect.bottom + VERTICAL_SPACING,\n                left: targetRect.right,\n                name: 'caret_se',\n                config: {\n                    withArrow: false\n                }\n            };\n        },\n        // Positions the panel to the northeast of the caret rectangle.\n        'caret_ne': (targetRect, balloonRect)=>{\n            return {\n                top: targetRect.top - balloonRect.height - VERTICAL_SPACING,\n                left: targetRect.right,\n                name: 'caret_ne',\n                config: {\n                    withArrow: false\n                }\n            };\n        },\n        // Positions the panel to the southwest of the caret rectangle.\n        'caret_sw': (targetRect, balloonRect)=>{\n            return {\n                top: targetRect.bottom + VERTICAL_SPACING,\n                left: targetRect.right - balloonRect.width,\n                name: 'caret_sw',\n                config: {\n                    withArrow: false\n                }\n            };\n        },\n        // Positions the panel to the northwest of the caret rect.\n        'caret_nw': (targetRect, balloonRect)=>{\n            return {\n                top: targetRect.top - balloonRect.height - VERTICAL_SPACING,\n                left: targetRect.right - balloonRect.width,\n                name: 'caret_nw',\n                config: {\n                    withArrow: false\n                }\n            };\n        }\n    };\n    // Returns only the last position if it was matched to prevent the panel from jumping after the first match.\n    if (Object.prototype.hasOwnProperty.call(positions, preferredPosition)) {\n        return [\n            positions[preferredPosition]\n        ];\n    }\n    // By default, return all position callbacks ordered depending on the UI language direction.\n    return uiLanguageDirection !== 'rtl' ? [\n        positions.caret_se,\n        positions.caret_sw,\n        positions.caret_ne,\n        positions.caret_nw\n    ] : [\n        positions.caret_sw,\n        positions.caret_se,\n        positions.caret_nw,\n        positions.caret_ne\n    ];\n}\n/**\n * Returns a marker definition of the last valid occurring marker in a given string.\n * If there is no valid marker in a string, it returns undefined.\n *\n * Example of returned object:\n *\n * ```ts\n * {\n * \tmarker: '@',\n * \tposition: 4,\n * \tminimumCharacters: 0\n * }\n * ````\n *\n * @param feedsWithPattern Registered feeds in editor for mention plugin with created RegExp for matching marker.\n * @param text String to find the marker in\n * @returns Matched marker's definition\n */ function getLastValidMarkerInText(feedsWithPattern, text) {\n    let lastValidMarker;\n    for (const feed of feedsWithPattern){\n        const currentMarkerLastIndex = text.lastIndexOf(feed.marker);\n        if (currentMarkerLastIndex > 0 && !text.substring(currentMarkerLastIndex - 1).match(feed.pattern)) {\n            continue;\n        }\n        if (!lastValidMarker || currentMarkerLastIndex >= lastValidMarker.position) {\n            lastValidMarker = {\n                marker: feed.marker,\n                position: currentMarkerLastIndex,\n                minimumCharacters: feed.minimumCharacters,\n                pattern: feed.pattern\n            };\n        }\n    }\n    return lastValidMarker;\n}\n/**\n * Creates a RegExp pattern for the marker.\n *\n * Function has to be exported to achieve 100% code coverage.\n */ function createRegExp(marker, minimumCharacters) {\n    const numberOfCharacters = minimumCharacters == 0 ? '*' : `{${minimumCharacters},}`;\n    const openAfterCharacters = env.features.isRegExpUnicodePropertySupported ? '\\\\p{Ps}\\\\p{Pi}\"\\'' : '\\\\(\\\\[{\"\\'';\n    const mentionCharacters = '.';\n    // I wanted to make an util out of it, but since this regexp uses \"u\" flag, it became difficult.\n    // When \"u\" flag is used, the regexp has \"strict\" escaping rules, i.e. if you try to escape a character that does not need\n    // to be escaped, RegExp() will throw. It made it difficult to write a generic util, because different characters are\n    // allowed in different context. For example, escaping \"-\" sometimes was correct, but sometimes it threw an error.\n    marker = marker.replace(/[.*+?^${}()\\-|[\\]\\\\]/g, '\\\\$&');\n    // The pattern consists of 3 groups:\n    //\n    // - 0 (non-capturing): Opening sequence - start of the line, space or an opening punctuation character like \"(\" or \"\\\"\",\n    // - 1: The marker character,\n    // - 2: Mention input (taking the minimal length into consideration to trigger the UI),\n    //\n    // The pattern matches up to the caret (end of string switch - $).\n    //               (0:      opening sequence       )(1:   marker  )(2:                typed mention              )$\n    const pattern = `(?:^|[ ${openAfterCharacters}])([${marker}])(${mentionCharacters}${numberOfCharacters})$`;\n    return new RegExp(pattern, 'u');\n}\n/**\n * Creates a test callback for the marker to be used in the text watcher instance.\n *\n * @param feedsWithPattern Feeds of mention plugin configured in editor with RegExp to match marker in text\n */ function createTestCallback(feedsWithPattern) {\n    const textMatcher = (text)=>{\n        const markerDefinition = getLastValidMarkerInText(feedsWithPattern, text);\n        if (!markerDefinition) {\n            return false;\n        }\n        let splitStringFrom = 0;\n        if (markerDefinition.position !== 0) {\n            splitStringFrom = markerDefinition.position - 1;\n        }\n        const textToTest = text.substring(splitStringFrom);\n        return markerDefinition.pattern.test(textToTest);\n    };\n    return textMatcher;\n}\n/**\n * Creates a text matcher from the marker.\n */ function requestFeedText(markerDefinition, text) {\n    let splitStringFrom = 0;\n    if (markerDefinition.position !== 0) {\n        splitStringFrom = markerDefinition.position - 1;\n    }\n    const regExp = createRegExp(markerDefinition.marker, 0);\n    const textToMatch = text.substring(splitStringFrom);\n    const match = textToMatch.match(regExp);\n    return match[2];\n}\n/**\n * The default feed callback.\n */ function createFeedCallback(feedItems) {\n    return (feedText)=>{\n        const filteredItems = feedItems// Make the default mention feed case-insensitive.\n        .filter((item)=>{\n            // Item might be defined as object.\n            const itemId = typeof item == 'string' ? item : String(item.id);\n            // The default feed is case insensitive.\n            return itemId.toLowerCase().includes(feedText.toLowerCase());\n        });\n        return filteredItems;\n    };\n}\n/**\n * Checks if position in inside or right after a text with a mention.\n */ function isPositionInExistingMention(position) {\n    // The text watcher listens only to changed range in selection - so the selection attributes are not yet available\n    // and you cannot use selection.hasAttribute( 'mention' ) just yet.\n    // See https://github.com/ckeditor/ckeditor5-engine/issues/1723.\n    const hasMention = position.textNode && position.textNode.hasAttribute('mention');\n    const nodeBefore = position.nodeBefore;\n    return hasMention || nodeBefore && nodeBefore.is('$text') && nodeBefore.hasAttribute('mention');\n}\n/**\n * Checks if the closest marker offset is at the beginning of a mention.\n *\n * See https://github.com/ckeditor/ckeditor5/issues/11400.\n */ function isMarkerInExistingMention(markerPosition) {\n    const nodeAfter = markerPosition.nodeAfter;\n    return nodeAfter && nodeAfter.is('$text') && nodeAfter.hasAttribute('mention');\n}\n/**\n * Checks if string is a valid mention marker.\n */ function isValidMentionMarker(marker) {\n    return marker && marker.length == 1;\n}\n/**\n * Checks the mention plugins is in completion mode (e.g. when typing is after a valid mention string like @foo).\n */ function checkIfStillInCompletionMode(editor) {\n    return editor.model.markers.has('mention');\n}\n\n/**\n * The mention plugin.\n *\n * For a detailed overview, check the {@glink features/mentions Mention feature} guide.\n */ class Mention extends Plugin {\n    toMentionAttribute(viewElement, data) {\n        return _toMentionAttribute(viewElement, data);\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Mention';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            MentionEditing,\n            MentionUI\n        ];\n    }\n}\n\nexport { DomWrapperView, Mention, MentionEditing, MentionListItemView, MentionUI, MentionsView };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toUnit, global, Rect, findClosestScrollableAncestor } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { IframeView, View } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { DomConverter, Renderer } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\nconst toPx$1 = /* #__PURE__ */ toUnit('px');\n/**\n * The internal `<iframe>` view that hosts the minimap content.\n *\n * @internal\n */ class MinimapIframeView extends IframeView {\n    /**\n\t * Cached view constructor options for re-use in other methods.\n\t */ _options;\n    /**\n\t * Creates an instance of the internal minimap iframe.\n\t */ constructor(locale, options){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('top', 0);\n        this.set('height', 0);\n        this._options = options;\n        this.extendTemplate({\n            attributes: {\n                tabindex: -1,\n                'aria-hidden': 'true',\n                class: [\n                    'ck-minimap__iframe'\n                ],\n                style: {\n                    top: bind.to('top', (top)=>toPx$1(top)),\n                    height: bind.to('height', (height)=>toPx$1(height))\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        return super.render().then(()=>{\n            this._prepareDocument();\n        });\n    }\n    /**\n\t * Sets the new height of the iframe.\n\t */ setHeight(newHeight) {\n        this.height = newHeight;\n    }\n    /**\n\t * Sets the top offset of the iframe to move it around vertically.\n\t */ setTopOffset(newOffset) {\n        this.top = newOffset;\n    }\n    /**\n\t * Sets the internal structure of the `<iframe>` readying it to display the\n\t * minimap element.\n\t */ _prepareDocument() {\n        const iframeDocument = this.element.contentWindow.document;\n        const domRootClone = iframeDocument.adoptNode(this._options.domRootClone);\n        const boxStyles = this._options.useSimplePreview ? `\n\t\t\t.ck.ck-editor__editable_inline img {\n\t\t\t\tfilter: contrast( 0 );\n\t\t\t}\n\n\t\t\tp, li, a, figcaption, span {\n\t\t\t\tbackground: hsl(0, 0%, 80%) !important;\n\t\t\t\tcolor: hsl(0, 0%, 80%) !important;\n\t\t\t}\n\n\t\t\th1, h2, h3, h4 {\n\t\t\t\tbackground: hsl(0, 0%, 60%) !important;\n\t\t\t\tcolor: hsl(0, 0%, 60%) !important;\n\t\t\t}\n\t\t` : '';\n        const pageStyles = this._options.pageStyles.map((definition)=>{\n            if (typeof definition === 'string') {\n                return `<style>${definition}</style>`;\n            } else {\n                return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${definition.href}\">`;\n            }\n        }).join('\\n');\n        const html = `<!DOCTYPE html><html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"utf-8\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t\t\t${pageStyles}\n\t\t\t\t<style>\n\t\t\t\t\thtml, body {\n\t\t\t\t\t\tmargin: 0 !important;\n\t\t\t\t\t\tpadding: 0 !important;\n\t\t\t\t\t}\n\n\t\t\t\t\thtml {\n\t\t\t\t\t\toverflow: hidden;\n\t\t\t\t\t}\n\n\t\t\t\t\tbody {\n\t\t\t\t\t\ttransform: scale( ${this._options.scaleRatio} );\n\t\t\t\t\t\ttransform-origin: 0 0;\n\t\t\t\t\t\toverflow: visible;\n\t\t\t\t\t}\n\n\t\t\t\t\t.ck.ck-editor__editable_inline {\n\t\t\t\t\t\tmargin: 0 !important;\n\t\t\t\t\t\tborder-color: transparent !important;\n\t\t\t\t\t\toutline-color: transparent !important;\n\t\t\t\t\t\tbox-shadow: none !important;\n\t\t\t\t\t}\n\n\t\t\t\t\t.ck.ck-content {\n\t\t\t\t\t\tbackground: white;\n\t\t\t\t\t}\n\n\t\t\t\t\t${boxStyles}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t<body class=\"${this._options.extraClasses || ''}\"></body>\n\t\t</html>`;\n        iframeDocument.open();\n        iframeDocument.write(html);\n        iframeDocument.close();\n        iframeDocument.body.appendChild(domRootClone);\n    }\n}\n\nconst toPx = /* #__PURE__ */ toUnit('px');\n/**\n * The position tracker visualizing the visible subset of the content. Displayed over the minimap.\n *\n * @internal\n */ class MinimapPositionTrackerView extends View {\n    constructor(locale){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('height', 0);\n        this.set('top', 0);\n        this.set('scrollProgress', 0);\n        this.set('_isDragging', false);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-minimap__position-tracker',\n                    bind.if('_isDragging', 'ck-minimap__position-tracker_dragging')\n                ],\n                style: {\n                    top: bind.to('top', (top)=>toPx(top)),\n                    height: bind.to('height', (height)=>toPx(height))\n                },\n                'data-progress': bind.to('scrollProgress')\n            },\n            on: {\n                mousedown: bind.to(()=>{\n                    this._isDragging = true;\n                })\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.listenTo(global.document, 'mousemove', (evt, data)=>{\n            if (!this._isDragging) {\n                return;\n            }\n            this.fire('drag', data.movementY);\n        }, {\n            useCapture: true\n        });\n        this.listenTo(global.document, 'mouseup', ()=>{\n            this._isDragging = false;\n        }, {\n            useCapture: true\n        });\n    }\n    /**\n\t * Sets the new height of the tracker to visualize the subset of the content visible to the user.\n\t */ setHeight(newHeight) {\n        this.height = newHeight;\n    }\n    /**\n\t * Sets the top offset of the tracker to move it around vertically.\n\t */ setTopOffset(newOffset) {\n        this.top = newOffset;\n    }\n    /**\n\t * Sets the scroll progress (in %) to inform the user using a label when the tracker is being dragged.\n\t */ setScrollProgress(newProgress) {\n        this.scrollProgress = newProgress;\n    }\n}\n\n/**\n * The main view of the minimap. It renders the original content but scaled down with a tracker element\n * visualizing the subset of the content visible to the user and allowing interactions (scrolling, dragging).\n *\n * @internal\n */ class MinimapView extends View {\n    /**\n\t * An instance of the tracker view displayed over the minimap.\n\t */ _positionTrackerView;\n    /**\n\t * The scale ratio of the minimap relative to the original editing DOM root with the content.\n\t */ _scaleRatio;\n    /**\n\t * An instance of the iframe view that hosts the minimap.\n\t */ _minimapIframeView;\n    /**\n\t * Creates an instance of the minimap view.\n\t */ constructor({ locale, scaleRatio, pageStyles, extraClasses, useSimplePreview, domRootClone }){\n        super(locale);\n        const bind = this.bindTemplate;\n        this._positionTrackerView = new MinimapPositionTrackerView(locale);\n        this._positionTrackerView.delegate('drag').to(this);\n        this._scaleRatio = scaleRatio;\n        this._minimapIframeView = new MinimapIframeView(locale, {\n            useSimplePreview,\n            pageStyles,\n            extraClasses,\n            scaleRatio,\n            domRootClone\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-minimap'\n                ]\n            },\n            children: [\n                this._positionTrackerView\n            ],\n            on: {\n                click: bind.to(this._handleMinimapClick.bind(this)),\n                wheel: bind.to(this._handleMinimapMouseWheel.bind(this))\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        this._minimapIframeView.destroy();\n        super.destroy();\n    }\n    /**\n\t * Returns the DOM {@link module:utils/dom/rect~Rect} height of the minimap.\n\t */ get height() {\n        return new Rect(this.element).height;\n    }\n    /**\n\t * Returns the number of available space (pixels) the position tracker (visible subset of the content) can use to scroll vertically.\n\t */ get scrollHeight() {\n        return Math.max(0, Math.min(this.height, this._minimapIframeView.height) - this._positionTrackerView.height);\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this._minimapIframeView.render();\n        this.element.appendChild(this._minimapIframeView.element);\n    }\n    /**\n\t * Sets the new height of the minimap (in px) to respond to the changes in the original editing DOM root.\n\t *\n\t * **Note**:The provided value should be the `offsetHeight` of the original editing DOM root.\n\t */ setContentHeight(newHeight) {\n        this._minimapIframeView.setHeight(newHeight * this._scaleRatio);\n    }\n    /**\n\t * Sets the minimap scroll progress.\n\t *\n\t * The minimap scroll progress is linked to the original editing DOM root and its scrollable container (ancestor).\n\t * Changing the progress will alter the vertical position of the minimap (and its position tracker) and give the user an accurate\n\t * overview of the visible document.\n\t *\n\t * **Note**: The value should be between 0 and 1. 0 when the DOM root has not been scrolled, 1 when the\n\t * scrolling has reached the end.\n\t */ setScrollProgress(newScrollProgress) {\n        const iframeView = this._minimapIframeView;\n        const positionTrackerView = this._positionTrackerView;\n        // The scrolling should end when the bottom edge of the iframe touches the bottom edge of the minimap.\n        if (iframeView.height < this.height) {\n            iframeView.setTopOffset(0);\n            positionTrackerView.setTopOffset((iframeView.height - positionTrackerView.height) * newScrollProgress);\n        } else {\n            const totalOffset = iframeView.height - this.height;\n            iframeView.setTopOffset(-totalOffset * newScrollProgress);\n            positionTrackerView.setTopOffset((this.height - positionTrackerView.height) * newScrollProgress);\n        }\n        positionTrackerView.setScrollProgress(Math.round(newScrollProgress * 100));\n    }\n    /**\n\t * Sets the new height of the tracker (in px) to visualize the subset of the content visible to the user.\n\t */ setPositionTrackerHeight(trackerHeight) {\n        this._positionTrackerView.setHeight(trackerHeight * this._scaleRatio);\n    }\n    /**\n\t * @param data DOM event data\n\t */ _handleMinimapClick(data) {\n        const positionTrackerView = this._positionTrackerView;\n        if (data.target === positionTrackerView.element) {\n            return;\n        }\n        const trackerViewRect = new Rect(positionTrackerView.element);\n        const diff = data.clientY - trackerViewRect.top - trackerViewRect.height / 2;\n        const percentage = diff / this._minimapIframeView.height;\n        this.fire('click', percentage);\n    }\n    /**\n\t * @param data DOM event data\n\t */ _handleMinimapMouseWheel(data) {\n        this.fire('drag', data.deltaY * this._scaleRatio);\n    }\n}\n\n/**\n * Clones the editing view DOM root by using a dedicated pair of {@link module:engine/view/renderer~Renderer} and\n * {@link module:engine/view/domconverter~DomConverter}. The DOM root clone updates incrementally to stay in sync with the\n * source root.\n *\n * @internal\n * @param editor The editor instance the original editing root belongs to.\n * @param rootName The name of the root to clone.\n * @returns The editing root DOM clone element.\n */ function cloneEditingViewDomRoot(editor, rootName) {\n    const viewDocument = editor.editing.view.document;\n    const viewRoot = viewDocument.getRoot(rootName);\n    const domConverter = new DomConverter(viewDocument);\n    const renderer = new Renderer(domConverter, viewDocument.selection);\n    const domRootClone = editor.editing.view.getDomRoot().cloneNode();\n    domConverter.bindElements(domRootClone, viewRoot);\n    renderer.markToSync('children', viewRoot);\n    renderer.markToSync('attributes', viewRoot);\n    viewRoot.on('change:children', (evt, node)=>renderer.markToSync('children', node));\n    viewRoot.on('change:attributes', (evt, node)=>renderer.markToSync('attributes', node));\n    viewRoot.on('change:text', (evt, node)=>renderer.markToSync('text', node));\n    renderer.render();\n    editor.editing.view.on('render', ()=>renderer.render());\n    // TODO: Cleanup after destruction.\n    editor.on('destroy', ()=>{\n        domConverter.unbindDomElement(domRootClone);\n    });\n    return domRootClone;\n}\n/**\n * Harvests all web page styles, for instance, to allow re-using them in an `<iframe>` preserving the look of the content.\n *\n * The returned data format is as follows:\n *\n * ```ts\n * [\n * \t'p { color: red; ... } h2 { font-size: 2em; ... } ...',\n * \t'.spacing { padding: 1em; ... }; ...',\n * \t'...',\n * \t{ href: 'http://link.to.external.stylesheet' },\n * \t{ href: '...' }\n * ]\n * ```\n *\n * **Note**: For stylesheets with `href` different than window origin, an object is returned because\n * accessing rules of these styles may cause CORS errors (depending on the configuration of the web page).\n *\n * @internal\n */ function getPageStyles() {\n    return Array.from(global.document.styleSheets).map((styleSheet)=>{\n        // CORS\n        if (styleSheet.href && !styleSheet.href.startsWith(global.window.location.origin)) {\n            return {\n                href: styleSheet.href\n            };\n        }\n        return Array.from(styleSheet.cssRules).filter((rule)=>!(rule instanceof CSSMediaRule)).map((rule)=>rule.cssText).join(' \\n');\n    });\n}\n/**\n * Gets dimensions rectangle according to passed DOM element. Returns whole window's size for `body` element.\n *\n * @internal\n */ function getDomElementRect(domElement) {\n    return new Rect(domElement === global.document.body ? global.window : domElement);\n}\n/**\n * Gets client height according to passed DOM element. Returns window's height for `body` element.\n *\n * @internal\n */ function getClientHeight(domElement) {\n    return domElement === global.document.body ? global.window.innerHeight : domElement.clientHeight;\n}\n/**\n * Returns the DOM element itself if it's not a `body` element, whole window otherwise.\n *\n * @internal\n */ function getScrollable(domElement) {\n    return domElement === global.document.body ? global.window : domElement;\n}\n\n/**\n * The content minimap feature.\n */ class Minimap extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Minimap';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * The reference to the view of the minimap.\n\t */ _minimapView;\n    /**\n\t * The DOM element closest to the editable element of the editor as returned\n\t * by {@link module:ui/editorui/editorui~EditorUI#getEditableElement}.\n\t */ _scrollableRootAncestor;\n    /**\n\t * The DOM element closest to the editable element of the editor as returned\n\t * by {@link module:ui/editorui/editorui~EditorUI#getEditableElement}.\n\t */ _editingRootElement;\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        this._minimapView = null;\n        this._scrollableRootAncestor = null;\n        this.listenTo(editor.ui, 'ready', this._onUiReady.bind(this));\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this._minimapView.destroy();\n        this._minimapView.element.remove();\n    }\n    /**\n\t * Initializes the minimap view element and starts the layout synchronization\n\t * on the editing view `render` event.\n\t */ _onUiReady() {\n        const editor = this.editor;\n        // TODO: This will not work with the multi-root editor.\n        const editingRootElement = this._editingRootElement = editor.ui.getEditableElement();\n        this._scrollableRootAncestor = findClosestScrollableAncestor(editingRootElement);\n        // DOM root element is not yet attached to the document.\n        if (!editingRootElement.ownerDocument.body.contains(editingRootElement)) {\n            editor.ui.once('update', this._onUiReady.bind(this));\n            return;\n        }\n        this._initializeMinimapView();\n        this.listenTo(editor.editing.view, 'render', ()=>{\n            if (editor.state !== 'ready') {\n                return;\n            }\n            this._syncMinimapToEditingRootScrollPosition();\n        });\n        this._syncMinimapToEditingRootScrollPosition();\n    }\n    /**\n\t * Initializes the minimap view and attaches listeners that make it responsive to the environment (document)\n\t * but also allow the minimap to control the document (scroll position).\n\t */ _initializeMinimapView() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const useSimplePreview = editor.config.get('minimap.useSimplePreview');\n        // TODO: Throw an error if there is no `minimap` in config.\n        const minimapContainerElement = editor.config.get('minimap.container');\n        const scrollableRootAncestor = this._scrollableRootAncestor;\n        // TODO: This should be dynamic, the root width could change as the viewport scales if not fixed unit.\n        const editingRootElementWidth = getDomElementRect(this._editingRootElement).width;\n        const minimapContainerWidth = getDomElementRect(minimapContainerElement).width;\n        const minimapScaleRatio = minimapContainerWidth / editingRootElementWidth;\n        const minimapView = this._minimapView = new MinimapView({\n            locale,\n            scaleRatio: minimapScaleRatio,\n            pageStyles: getPageStyles(),\n            extraClasses: editor.config.get('minimap.extraClasses'),\n            useSimplePreview,\n            domRootClone: cloneEditingViewDomRoot(editor)\n        });\n        minimapView.render();\n        // Scrollable ancestor scroll -> minimap position update.\n        minimapView.listenTo(global.document, 'scroll', (evt, data)=>{\n            if (scrollableRootAncestor === global.document.body) {\n                if (data.target !== global.document) {\n                    return;\n                }\n            } else if (data.target !== scrollableRootAncestor) {\n                return;\n            }\n            this._syncMinimapToEditingRootScrollPosition();\n        }, {\n            useCapture: true,\n            usePassive: true\n        });\n        // Viewport resize -> minimap position update.\n        minimapView.listenTo(global.window, 'resize', ()=>{\n            this._syncMinimapToEditingRootScrollPosition();\n        });\n        // Dragging the visible content area -> document (scrollable) position update.\n        minimapView.on('drag', (evt, movementY)=>{\n            let movementYPercentage;\n            if (minimapView.scrollHeight === 0) {\n                movementYPercentage = 0;\n            } else {\n                movementYPercentage = movementY / minimapView.scrollHeight;\n            }\n            const absoluteScrollProgress = movementYPercentage * (scrollableRootAncestor.scrollHeight - getClientHeight(scrollableRootAncestor));\n            const scrollable = getScrollable(scrollableRootAncestor);\n            scrollable.scrollBy(0, Math.round(absoluteScrollProgress));\n        });\n        // Clicking the minimap -> center the document (scrollable) to the corresponding position.\n        minimapView.on('click', (evt, percentage)=>{\n            const absoluteScrollProgress = percentage * scrollableRootAncestor.scrollHeight;\n            const scrollable = getScrollable(scrollableRootAncestor);\n            scrollable.scrollBy(0, Math.round(absoluteScrollProgress));\n        });\n        minimapContainerElement.appendChild(minimapView.element);\n    }\n    /**\n\t * @private\n\t */ _syncMinimapToEditingRootScrollPosition() {\n        const editingRootElement = this._editingRootElement;\n        const minimapView = this._minimapView;\n        minimapView.setContentHeight(editingRootElement.offsetHeight);\n        const editingRootRect = getDomElementRect(editingRootElement);\n        const scrollableRootAncestorRect = getDomElementRect(this._scrollableRootAncestor);\n        let scrollProgress;\n        // @if CK_DEBUG_MINIMAP // RectDrawer.clear();\n        // @if CK_DEBUG_MINIMAP // RectDrawer.draw( scrollableRootAncestorRect, { outlineColor: 'red' }, 'scrollableRootAncestor' );\n        // @if CK_DEBUG_MINIMAP // RectDrawer.draw( editingRootRect, { outlineColor: 'green' }, 'editingRoot' );\n        // The root is completely visible in the scrollable ancestor.\n        if (scrollableRootAncestorRect.contains(editingRootRect)) {\n            scrollProgress = 0;\n        } else {\n            if (editingRootRect.top > scrollableRootAncestorRect.top) {\n                scrollProgress = 0;\n            } else {\n                scrollProgress = (editingRootRect.top - scrollableRootAncestorRect.top) / (scrollableRootAncestorRect.height - editingRootRect.height);\n                scrollProgress = Math.max(0, Math.min(scrollProgress, 1));\n            }\n        }\n        // The intersection helps to change the tracker height when there is a lot of padding around the root.\n        // Note: It is **essential** that the height is set first because the progress depends on the correct tracker height.\n        minimapView.setPositionTrackerHeight(scrollableRootAncestorRect.getIntersection(editingRootRect).height);\n        minimapView.setScrollProgress(scrollProgress);\n    }\n}\n\nexport { Minimap };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { findOptimalInsertionRange, toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The page break command.\n *\n * The command is registered by {@link module:page-break/pagebreakediting~PageBreakEditing} as `'pageBreak'`.\n *\n * To insert a page break at the current selection, execute the command:\n *\n *\t\teditor.execute( 'pageBreak' );\n */ class PageBreakCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        this.isEnabled = isPageBreakAllowedInParent(selection, schema, model);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        model.change((writer)=>{\n            const pageBreakElement = writer.createElement('pageBreak');\n            model.insertObject(pageBreakElement, null, null, {\n                setSelection: 'after'\n            });\n        });\n    }\n}\n/**\n * Checks if a page break is allowed by the schema in the optimal insertion parent.\n */ function isPageBreakAllowedInParent(selection, schema, model) {\n    const parent = getInsertPageBreakParent(selection, model);\n    return schema.checkChild(parent, 'pageBreak');\n}\n/**\n * Returns a node that will be used to insert a page break with `model.insertContent` to check if the page break can be placed there.\n */ function getInsertPageBreakParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    const parent = insertionRange.start.parent;\n    if (parent.isEmpty && !parent.is('element', '$root')) {\n        return parent.parent;\n    }\n    return parent;\n}\n\n/**\n * The page break editing feature.\n */ class PageBreakEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreakEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        schema.register('pageBreak', {\n            inheritAllFrom: '$blockObject'\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: 'pageBreak',\n            view: (modelElement, { writer })=>{\n                const divElement = writer.createContainerElement('div', {\n                    class: 'page-break',\n                    // If user has no `.ck-content` styles, it should always break a page during print.\n                    style: 'page-break-after: always'\n                }, // For a rationale of using span inside a div see:\n                // https://github.com/ckeditor/ckeditor5-page-break/pull/1#discussion_r328934062.\n                writer.createContainerElement('span', {\n                    style: 'display: none'\n                }));\n                return divElement;\n            }\n        });\n        conversion.for('editingDowncast').elementToStructure({\n            model: 'pageBreak',\n            view: (modelElement, { writer })=>{\n                const label = t('Page break');\n                const viewWrapper = writer.createContainerElement('div');\n                const viewLabelElement = writer.createRawElement('span', {\n                    class: 'page-break__label'\n                }, function(domElement) {\n                    domElement.innerText = t('Page break');\n                });\n                writer.addClass('page-break', viewWrapper);\n                writer.insert(writer.createPositionAt(viewWrapper, 0), viewLabelElement);\n                return toPageBreakWidget(viewWrapper, writer, label);\n            }\n        });\n        conversion.for('upcast').elementToElement({\n            view: (element)=>{\n                // For upcast conversion it's enough if we check for element style and verify if it's empty\n                // or contains only hidden span element.\n                const hasPageBreakBefore = element.getStyle('page-break-before') == 'always';\n                const hasPageBreakAfter = element.getStyle('page-break-after') == 'always';\n                if (!hasPageBreakBefore && !hasPageBreakAfter) {\n                    return null;\n                }\n                // The \"page break\" div accepts only single child or no child at all.\n                if (element.childCount == 1) {\n                    const viewSpan = element.getChild(0);\n                    // The child must be the \"span\" element that is not displayed.\n                    if (!viewSpan.is('element', 'span') || viewSpan.getStyle('display') != 'none') {\n                        return null;\n                    }\n                } else if (element.childCount > 1) {\n                    return null;\n                }\n                return {\n                    name: true\n                };\n            },\n            model: 'pageBreak',\n            // This conversion must be checked before <br> conversion because some editors use\n            // <br style=\"page-break-before:always\"> as a page break marker.\n            converterPriority: 'high'\n        });\n        editor.commands.add('pageBreak', new PageBreakCommand(editor));\n    }\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a page break widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to\n *   recognize the page break widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n */ function toPageBreakWidget(viewElement, writer, label) {\n    writer.setCustomProperty('pageBreak', true, viewElement);\n    return toWidget(viewElement, writer, {\n        label\n    });\n}\n\nvar pageBreakIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.598.687h1.5v5h-1.5zm14.5 0h1.5v5h-1.5z\\\"/><path d=\\\"M19.598 4.187v1.5h-16v-1.5zm-16 14.569h1.5v-5h-1.5zm14.5 0h1.5v-5h-1.5z\\\"/><path d=\\\"M19.598 15.256v-1.5h-16v1.5zM5.081 9h6v2h-6zm8 0h6v2h-6zm-9.483 1L0 12.5v-5z\\\"/></svg>\";\n\n/**\n * The page break UI plugin.\n */ class PageBreakUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreakUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Add pageBreak button to feature components.\n        editor.ui.componentFactory.add('pageBreak', ()=>{\n            const view = this._createButton(ButtonView);\n            view.set({\n                tooltip: true\n            });\n            return view;\n        });\n        editor.ui.componentFactory.add('menuBar:pageBreak', ()=>this._createButton(MenuBarMenuListItemButtonView));\n    }\n    /**\n\t * Creates a button for page break command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('pageBreak');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Page break'),\n            icon: pageBreakIcon\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('pageBreak');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The page break feature.\n *\n * It provides the possibility to insert a page break into the rich-text editor.\n *\n * For a detailed overview, check the {@glink features/page-break Page break feature} documentation.\n */ class PageBreak extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PageBreakEditing,\n            PageBreakUI,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreak';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { PageBreak, PageBreakEditing, PageBreakUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ClipboardPipeline } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { UpcastWriter, Matcher, ViewDocument, DomConverter } from '@ckeditor/ckeditor5-engine/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/utils\n */ /**\n * Normalizes CSS length value to 'px'.\n *\n * @internal\n */ function convertCssLengthToPx(value) {\n    const numericValue = parseFloat(value);\n    if (value.endsWith('pt')) {\n        // 1pt = 1in / 72\n        return toPx(numericValue * 96 / 72);\n    } else if (value.endsWith('pc')) {\n        // 1pc = 12pt = 1in / 6.\n        return toPx(numericValue * 12 * 96 / 72);\n    } else if (value.endsWith('in')) {\n        // 1in = 2.54cm = 96px\n        return toPx(numericValue * 96);\n    } else if (value.endsWith('cm')) {\n        // 1cm = 96px / 2.54\n        return toPx(numericValue * 96 / 2.54);\n    } else if (value.endsWith('mm')) {\n        // 1mm = 1cm / 10\n        return toPx(numericValue / 10 * 96 / 2.54);\n    }\n    return value;\n}\n/**\n * Returns true for value with 'px' unit.\n *\n * @internal\n */ function isPx(value) {\n    return value !== undefined && value.endsWith('px');\n}\n/**\n * Returns a rounded 'px' value.\n *\n * @internal\n */ function toPx(value) {\n    return value.toFixed(2).replace(/\\.?0+$/, '') + 'px';\n}\n\n/**\n * Transforms Word specific list-like elements to the semantic HTML lists.\n *\n * Lists in Word are represented by block elements with special attributes like:\n *\n * ```xml\n * <p class=MsoListParagraphCxSpFirst style='mso-list:l1 level1 lfo1'>...</p> // Paragraph based list.\n * <h1 style='mso-list:l0 level1 lfo1'>...</h1> // Heading 1 based list.\n * ```\n *\n * @param documentFragment The view structure to be transformed.\n * @param stylesString Styles from which list-like elements styling will be extracted.\n */ function transformListItemLikeElementsIntoLists(documentFragment, stylesString, hasMultiLevelListPlugin) {\n    if (!documentFragment.childCount) {\n        return;\n    }\n    const writer = new UpcastWriter(documentFragment.document);\n    const itemLikeElements = findAllItemLikeElements(documentFragment, writer);\n    if (!itemLikeElements.length) {\n        return;\n    }\n    const encounteredLists = {};\n    const stack = [];\n    for (const itemLikeElement of itemLikeElements){\n        if (itemLikeElement.indent !== undefined) {\n            if (!isListContinuation(itemLikeElement)) {\n                stack.length = 0;\n            }\n            // Combined list ID for addressing encounter lists counters.\n            const originalListId = `${itemLikeElement.id}:${itemLikeElement.indent}`;\n            // Normalized list item indentation.\n            const indent = Math.min(itemLikeElement.indent - 1, stack.length);\n            // Trimming of the list stack on list ID change.\n            if (indent < stack.length && stack[indent].id !== itemLikeElement.id) {\n                stack.length = indent;\n            }\n            // Trimming of the list stack on lower indent list encountered.\n            if (indent < stack.length - 1) {\n                stack.length = indent + 1;\n            } else {\n                const listStyle = detectListStyle(itemLikeElement, stylesString);\n                // Create a new OL/UL if required (greater indent or different list type).\n                if (indent > stack.length - 1 || stack[indent].listElement.name != listStyle.type) {\n                    // Check if there is some start index to set from a previous list.\n                    if (indent == 0 && listStyle.type == 'ol' && itemLikeElement.id !== undefined && encounteredLists[originalListId]) {\n                        listStyle.startIndex = encounteredLists[originalListId];\n                    }\n                    const listElement = createNewEmptyList(listStyle, writer, hasMultiLevelListPlugin);\n                    // Apply list padding only if we have margins for the item and the parent item.\n                    if (isPx(itemLikeElement.marginLeft) && (indent == 0 || isPx(stack[indent - 1].marginLeft))) {\n                        let marginLeft = itemLikeElement.marginLeft;\n                        if (indent > 0) {\n                            // Convert the padding from absolute to relative.\n                            marginLeft = toPx(parseFloat(marginLeft) - parseFloat(stack[indent - 1].marginLeft));\n                        }\n                        writer.setStyle('padding-left', marginLeft, listElement);\n                    }\n                    // Insert the new OL/UL.\n                    if (stack.length == 0) {\n                        const parent = itemLikeElement.element.parent;\n                        const index = parent.getChildIndex(itemLikeElement.element) + 1;\n                        writer.insertChild(index, listElement, parent);\n                    } else {\n                        const parentListItems = stack[indent - 1].listItemElements;\n                        writer.appendChild(listElement, parentListItems[parentListItems.length - 1]);\n                    }\n                    // Update the list stack for other items to reference.\n                    stack[indent] = {\n                        ...itemLikeElement,\n                        listElement,\n                        listItemElements: []\n                    };\n                    // Prepare list counter for start index.\n                    if (indent == 0 && itemLikeElement.id !== undefined) {\n                        encounteredLists[originalListId] = listStyle.startIndex || 1;\n                    }\n                }\n            }\n            // Use LI if it is already it or create a new LI element.\n            // https://github.com/ckeditor/ckeditor5/issues/15964\n            const listItem = itemLikeElement.element.name == 'li' ? itemLikeElement.element : writer.createElement('li');\n            // Append the LI to OL/UL.\n            writer.appendChild(listItem, stack[indent].listElement);\n            stack[indent].listItemElements.push(listItem);\n            // Increment list counter.\n            if (indent == 0 && itemLikeElement.id !== undefined) {\n                encounteredLists[originalListId]++;\n            }\n            // Append list block to LI.\n            if (itemLikeElement.element != listItem) {\n                writer.appendChild(itemLikeElement.element, listItem);\n            }\n            // Clean list block.\n            removeBulletElement(itemLikeElement.element, writer);\n            writer.removeStyle('text-indent', itemLikeElement.element); // #12361\n            writer.removeStyle('margin-left', itemLikeElement.element);\n        } else {\n            // Other blocks in a list item.\n            const stackItem = stack.find((stackItem)=>stackItem.marginLeft == itemLikeElement.marginLeft);\n            // This might be a paragraph that has known margin, but it is not a real list block.\n            if (stackItem) {\n                const listItems = stackItem.listItemElements;\n                // Append block to LI.\n                writer.appendChild(itemLikeElement.element, listItems[listItems.length - 1]);\n                writer.removeStyle('margin-left', itemLikeElement.element);\n            } else {\n                stack.length = 0;\n            }\n        }\n    }\n}\n/**\n * Removes paragraph wrapping content inside a list item.\n */ function unwrapParagraphInListItem(documentFragment, writer) {\n    for (const value of writer.createRangeIn(documentFragment)){\n        const element = value.item;\n        if (element.is('element', 'li')) {\n            // Google Docs allows for single paragraph inside LI.\n            const firstChild = element.getChild(0);\n            if (firstChild && firstChild.is('element', 'p')) {\n                writer.unwrapElement(firstChild);\n            }\n        }\n    }\n}\n/**\n * Finds all list-like elements in a given document fragment.\n *\n * @param documentFragment Document fragment in which to look for list-like nodes.\n * @returns Array of found list-like items. Each item is an object containing:\n */ function findAllItemLikeElements(documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const itemLikeElements = [];\n    const foundMargins = new Set();\n    for (const item of range.getItems()){\n        // https://github.com/ckeditor/ckeditor5/issues/15964\n        if (!item.is('element') || !item.name.match(/^(p|h\\d+|li|div)$/)) {\n            continue;\n        }\n        // Try to rely on margin-left style to find paragraphs visually aligned with previously encountered list item.\n        let marginLeft = getMarginLeftNormalized(item);\n        // Ignore margin-left 0 style if there is no MsoList... class.\n        if (marginLeft !== undefined && parseFloat(marginLeft) == 0 && !Array.from(item.getClassNames()).find((className)=>className.startsWith('MsoList'))) {\n            marginLeft = undefined;\n        }\n        // List item or a following list item block.\n        if (item.hasStyle('mso-list') || marginLeft !== undefined && foundMargins.has(marginLeft)) {\n            const itemData = getListItemData(item);\n            itemLikeElements.push({\n                element: item,\n                id: itemData.id,\n                order: itemData.order,\n                indent: itemData.indent,\n                marginLeft\n            });\n            if (marginLeft !== undefined) {\n                foundMargins.add(marginLeft);\n            }\n        } else {\n            foundMargins.clear();\n        }\n    }\n    return itemLikeElements;\n}\n/**\n * Whether the given element is possibly a list continuation. Previous element was wrapped into a list\n * or the current element already is inside a list.\n */ function isListContinuation(currentItem) {\n    const previousSibling = currentItem.element.previousSibling;\n    if (!previousSibling) {\n        // If it's a li inside ul or ol like in here: https://github.com/ckeditor/ckeditor5/issues/15964.\n        return isList(currentItem.element.parent);\n    }\n    // Even with the same id the list does not have to be continuous (#43).\n    return isList(previousSibling);\n}\nfunction isList(element) {\n    return element.is('element', 'ol') || element.is('element', 'ul');\n}\n/**\n * Extracts list item style from the provided CSS.\n *\n * List item style is extracted from the CSS stylesheet. Each list with its specific style attribute\n * value (`mso-list:l1 level1 lfo1`) has its dedicated properties in a CSS stylesheet defined with a selector like:\n *\n * ```css\n * @list l1:level1 { ... }\n * ```\n *\n * It contains `mso-level-number-format` property which defines list numbering/bullet style. If this property\n * is not defined it means default `decimal` numbering.\n *\n * Here CSS string representation is used as `mso-level-number-format` property is an invalid CSS property\n * and will be removed during CSS parsing.\n *\n * @param listLikeItem List-like item for which list style will be searched for. Usually\n * a result of `findAllItemLikeElements()` function.\n * @param stylesString CSS stylesheet.\n * @returns An object with properties:\n *\n * * type - List type, could be `ul` or `ol`.\n * * startIndex - List start index, valid only for ordered lists.\n * * style - List style, for example: `decimal`, `lower-roman`, etc. It is extracted\n *     directly from Word stylesheet and adjusted to represent proper values for the CSS `list-style-type` property.\n *     If it cannot be adjusted, the `null` value is returned.\n */ function detectListStyle(listLikeItem, stylesString) {\n    const listStyleRegexp = new RegExp(`@list l${listLikeItem.id}:level${listLikeItem.indent}\\\\s*({[^}]*)`, 'gi');\n    const listStyleTypeRegex = /mso-level-number-format:([^;]{0,100});/gi;\n    const listStartIndexRegex = /mso-level-start-at:\\s{0,100}([0-9]{0,10})\\s{0,100};/gi;\n    const legalStyleListRegex = new RegExp(`@list\\\\s+l${listLikeItem.id}:level\\\\d\\\\s*{[^{]*mso-level-text:\"%\\\\d\\\\\\\\.`, 'gi');\n    const multiLevelNumberFormatTypeRegex = new RegExp(`@list l${listLikeItem.id}:level\\\\d\\\\s*{[^{]*mso-level-number-format:`, 'gi');\n    const legalStyleListMatch = legalStyleListRegex.exec(stylesString);\n    const multiLevelNumberFormatMatch = multiLevelNumberFormatTypeRegex.exec(stylesString);\n    // Multi level lists in Word have mso-level-number-format attribute except legal lists,\n    // so we used that. If list has legal list match and doesn't has mso-level-number-format\n    // then this is legal-list.\n    const islegalStyleList = legalStyleListMatch && !multiLevelNumberFormatMatch;\n    const listStyleMatch = listStyleRegexp.exec(stylesString);\n    let listStyleType = 'decimal'; // Decimal is default one.\n    let type = 'ol'; // <ol> is default list.\n    let startIndex = null;\n    if (listStyleMatch && listStyleMatch[1]) {\n        const listStyleTypeMatch = listStyleTypeRegex.exec(listStyleMatch[1]);\n        if (listStyleTypeMatch && listStyleTypeMatch[1]) {\n            listStyleType = listStyleTypeMatch[1].trim();\n            type = listStyleType !== 'bullet' && listStyleType !== 'image' ? 'ol' : 'ul';\n        }\n        // Styles for the numbered lists are always defined in the Word CSS stylesheet.\n        // Unordered lists MAY contain a value for the Word CSS definition `mso-level-text` but sometimes\n        // this tag is missing. And because of that, we cannot depend on that. We need to predict the list style value\n        // based on the list style marker element.\n        if (listStyleType === 'bullet') {\n            const bulletedStyle = findBulletedListStyle(listLikeItem.element);\n            if (bulletedStyle) {\n                listStyleType = bulletedStyle;\n            }\n        } else {\n            const listStartIndexMatch = listStartIndexRegex.exec(listStyleMatch[1]);\n            if (listStartIndexMatch && listStartIndexMatch[1]) {\n                startIndex = parseInt(listStartIndexMatch[1]);\n            }\n        }\n        if (islegalStyleList) {\n            type = 'ol';\n        }\n    }\n    return {\n        type,\n        startIndex,\n        style: mapListStyleDefinition(listStyleType),\n        isLegalStyleList: islegalStyleList\n    };\n}\n/**\n * Tries to extract the `list-style-type` value based on the marker element for bulleted list.\n */ function findBulletedListStyle(element) {\n    // https://github.com/ckeditor/ckeditor5/issues/15964\n    if (element.name == 'li' && element.parent.name == 'ul' && element.parent.hasAttribute('type')) {\n        return element.parent.getAttribute('type');\n    }\n    const listMarkerElement = findListMarkerNode(element);\n    if (!listMarkerElement) {\n        return null;\n    }\n    const listMarker = listMarkerElement._data;\n    if (listMarker === 'o') {\n        return 'circle';\n    } else if (listMarker === '·') {\n        return 'disc';\n    } else if (listMarker === '§') {\n        return 'square';\n    }\n    return null;\n}\n/**\n * Tries to find a text node that represents the marker element (list-style-type).\n */ function findListMarkerNode(element) {\n    // If the first child is a text node, it is the data for the element.\n    // The list-style marker is not present here.\n    if (element.getChild(0).is('$text')) {\n        return null;\n    }\n    for (const childNode of element.getChildren()){\n        // The list-style marker will be inside the `<span>` element. Let's ignore all non-span elements.\n        // It may happen that the `<a>` element is added as the first child. Most probably, it's an anchor element.\n        if (!childNode.is('element', 'span')) {\n            continue;\n        }\n        const textNodeOrElement = childNode.getChild(0);\n        if (!textNodeOrElement) {\n            continue;\n        }\n        // If already found the marker element, use it.\n        if (textNodeOrElement.is('$text')) {\n            return textNodeOrElement;\n        }\n        return textNodeOrElement.getChild(0);\n    }\n    /* istanbul ignore next -- @preserve */ return null;\n}\n/**\n * Parses the `list-style-type` value extracted directly from the Word CSS stylesheet and returns proper CSS definition.\n */ function mapListStyleDefinition(value) {\n    if (value.startsWith('arabic-leading-zero')) {\n        return 'decimal-leading-zero';\n    }\n    switch(value){\n        case 'alpha-upper':\n            return 'upper-alpha';\n        case 'alpha-lower':\n            return 'lower-alpha';\n        case 'roman-upper':\n            return 'upper-roman';\n        case 'roman-lower':\n            return 'lower-roman';\n        case 'circle':\n        case 'disc':\n        case 'square':\n            return value;\n        default:\n            return null;\n    }\n}\n/**\n * Creates a new list OL/UL element.\n */ function createNewEmptyList(listStyle, writer, hasMultiLevelListPlugin) {\n    const list = writer.createElement(listStyle.type);\n    // We do not support modifying the marker for a particular list item.\n    // Set the value for the `list-style-type` property directly to the list container.\n    if (listStyle.style) {\n        writer.setStyle('list-style-type', listStyle.style, list);\n    }\n    if (listStyle.startIndex && listStyle.startIndex > 1) {\n        writer.setAttribute('start', listStyle.startIndex, list);\n    }\n    if (listStyle.isLegalStyleList && hasMultiLevelListPlugin) {\n        writer.addClass('legal-list', list);\n    }\n    return list;\n}\n/**\n * Extracts list item information from Word specific list-like element style:\n *\n * ```\n * `style=\"mso-list:l1 level1 lfo1\"`\n * ```\n *\n * where:\n *\n * ```\n * * `l1` is a list id (however it does not mean this is a continuous list - see #43),\n * * `level1` is a list item indentation level,\n * * `lfo1` is a list insertion order in a document.\n * ```\n *\n * @param element Element from which style data is extracted.\n */ function getListItemData(element) {\n    const listStyle = element.getStyle('mso-list');\n    if (listStyle === undefined) {\n        return {};\n    }\n    const idMatch = listStyle.match(/(^|\\s{1,100})l(\\d+)/i);\n    const orderMatch = listStyle.match(/\\s{0,100}lfo(\\d+)/i);\n    const indentMatch = listStyle.match(/\\s{0,100}level(\\d+)/i);\n    if (idMatch && orderMatch && indentMatch) {\n        return {\n            id: idMatch[2],\n            order: orderMatch[1],\n            indent: parseInt(indentMatch[1])\n        };\n    }\n    return {\n        indent: 1 // Handle empty mso-list style as a marked for default list item.\n    };\n}\n/**\n * Removes span with a numbering/bullet from a given element.\n */ function removeBulletElement(element, writer) {\n    // Matcher for finding `span` elements holding lists numbering/bullets.\n    const bulletMatcher = new Matcher({\n        name: 'span',\n        styles: {\n            'mso-list': 'Ignore'\n        }\n    });\n    const range = writer.createRangeIn(element);\n    for (const value of range){\n        if (value.type === 'elementStart' && bulletMatcher.match(value.item)) {\n            writer.remove(value.item);\n        }\n    }\n}\n/**\n * Returns element left margin normalized to 'px' if possible.\n */ function getMarginLeftNormalized(element) {\n    const value = element.getStyle('margin-left');\n    if (value === undefined || value.endsWith('px')) {\n        return value;\n    }\n    return convertCssLengthToPx(value);\n}\n\n/**\n * Replaces source attribute of all `<img>` elements representing regular\n * images (not the Word shapes) with inlined base64 image representation extracted from RTF or Blob data.\n *\n * @param documentFragment Document fragment on which transform images.\n * @param rtfData The RTF data from which images representation will be used.\n */ function replaceImagesSourceWithBase64(documentFragment, rtfData) {\n    if (!documentFragment.childCount) {\n        return;\n    }\n    const upcastWriter = new UpcastWriter(documentFragment.document);\n    const shapesIds = findAllShapesIds(documentFragment, upcastWriter);\n    removeAllImgElementsRepresentingShapes(shapesIds, documentFragment, upcastWriter);\n    insertMissingImgs(shapesIds, documentFragment, upcastWriter);\n    removeAllShapeElements(documentFragment, upcastWriter);\n    const images = findAllImageElementsWithLocalSource(documentFragment, upcastWriter);\n    if (images.length) {\n        replaceImagesFileSourceWithInlineRepresentation(images, extractImageDataFromRtf(rtfData), upcastWriter);\n    }\n}\n/**\n * Converts given HEX string to base64 representation.\n *\n * @internal\n * @param hexString The HEX string to be converted.\n * @returns Base64 representation of a given HEX string.\n */ function _convertHexToBase64(hexString) {\n    return btoa(hexString.match(/\\w{2}/g).map((char)=>{\n        return String.fromCharCode(parseInt(char, 16));\n    }).join(''));\n}\n/**\n * Finds all shapes (`<v:*>...</v:*>`) ids. Shapes can represent images (canvas)\n * or Word shapes (which does not have RTF or Blob representation).\n *\n * @param documentFragment Document fragment from which to extract shape ids.\n * @returns Array of shape ids.\n */ function findAllShapesIds(documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const shapeElementsMatcher = new Matcher({\n        name: /v:(.+)/\n    });\n    const shapesIds = [];\n    for (const value of range){\n        if (value.type != 'elementStart') {\n            continue;\n        }\n        const el = value.item;\n        const previousSibling = el.previousSibling;\n        const prevSiblingName = previousSibling && previousSibling.is('element') ? previousSibling.name : null;\n        // List of ids which should not be considered as shapes.\n        // https://github.com/ckeditor/ckeditor5/pull/15847#issuecomment-1941543983\n        const exceptionIds = [\n            'Chart'\n        ];\n        const isElementAShape = shapeElementsMatcher.match(el);\n        const hasElementGfxdataAttribute = el.getAttribute('o:gfxdata');\n        const isPreviousSiblingAShapeType = prevSiblingName === 'v:shapetype';\n        const isElementIdInExceptionsArray = hasElementGfxdataAttribute && exceptionIds.some((item)=>el.getAttribute('id').includes(item));\n        // If shape element has 'o:gfxdata' attribute and is not directly before\n        // `<v:shapetype>` element it means that it represents a Word shape.\n        if (isElementAShape && hasElementGfxdataAttribute && !isPreviousSiblingAShapeType && !isElementIdInExceptionsArray) {\n            shapesIds.push(value.item.getAttribute('id'));\n        }\n    }\n    return shapesIds;\n}\n/**\n * Removes all `<img>` elements which represents Word shapes and not regular images.\n *\n * @param shapesIds Shape ids which will be checked against `<img>` elements.\n * @param documentFragment Document fragment from which to remove `<img>` elements.\n */ function removeAllImgElementsRepresentingShapes(shapesIds, documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const imageElementsMatcher = new Matcher({\n        name: 'img'\n    });\n    const imgs = [];\n    for (const value of range){\n        if (value.item.is('element') && imageElementsMatcher.match(value.item)) {\n            const el = value.item;\n            const shapes = el.getAttribute('v:shapes') ? el.getAttribute('v:shapes').split(' ') : [];\n            if (shapes.length && shapes.every((shape)=>shapesIds.indexOf(shape) > -1)) {\n                imgs.push(el);\n            // Shapes may also have empty source while content is paste in some browsers (Safari).\n            } else if (!el.getAttribute('src')) {\n                imgs.push(el);\n            }\n        }\n    }\n    for (const img of imgs){\n        writer.remove(img);\n    }\n}\n/**\n * Removes all shape elements (`<v:*>...</v:*>`) so they do not pollute the output structure.\n *\n * @param documentFragment Document fragment from which to remove shape elements.\n */ function removeAllShapeElements(documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const shapeElementsMatcher = new Matcher({\n        name: /v:(.+)/\n    });\n    const shapes = [];\n    for (const value of range){\n        if (value.type == 'elementStart' && shapeElementsMatcher.match(value.item)) {\n            shapes.push(value.item);\n        }\n    }\n    for (const shape of shapes){\n        writer.remove(shape);\n    }\n}\n/**\n * Inserts `img` tags if there is none after a shape.\n */ function insertMissingImgs(shapeIds, documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const shapes = [];\n    for (const value of range){\n        if (value.type == 'elementStart' && value.item.is('element', 'v:shape')) {\n            const id = value.item.getAttribute('id');\n            if (shapeIds.includes(id)) {\n                continue;\n            }\n            if (!containsMatchingImg(value.item.parent.getChildren(), id)) {\n                shapes.push(value.item);\n            }\n        }\n    }\n    for (const shape of shapes){\n        const attrs = {\n            src: findSrc(shape)\n        };\n        if (shape.hasAttribute('alt')) {\n            attrs.alt = shape.getAttribute('alt');\n        }\n        const img = writer.createElement('img', attrs);\n        writer.insertChild(shape.index + 1, img, shape.parent);\n    }\n    function containsMatchingImg(nodes, id) {\n        for (const node of nodes){\n            /* istanbul ignore else -- @preserve */ if (node.is('element')) {\n                if (node.name == 'img' && node.getAttribute('v:shapes') == id) {\n                    return true;\n                }\n                if (containsMatchingImg(node.getChildren(), id)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    function findSrc(shape) {\n        for (const child of shape.getChildren()){\n            /* istanbul ignore else -- @preserve */ if (child.is('element') && child.getAttribute('src')) {\n                return child.getAttribute('src');\n            }\n        }\n    }\n}\n/**\n * Finds all `<img>` elements in a given document fragment which have source pointing to local `file://` resource.\n *\n * @param documentFragment Document fragment in which to look for `<img>` elements.\n * @returns result All found images grouped by source type.\n */ function findAllImageElementsWithLocalSource(documentFragment, writer) {\n    const range = writer.createRangeIn(documentFragment);\n    const imageElementsMatcher = new Matcher({\n        name: 'img'\n    });\n    const imgs = [];\n    for (const value of range){\n        if (value.item.is('element') && imageElementsMatcher.match(value.item)) {\n            if (value.item.getAttribute('src').startsWith('file://')) {\n                imgs.push(value.item);\n            }\n        }\n    }\n    return imgs;\n}\n/**\n * Extracts all images HEX representations from a given RTF data.\n *\n * @param rtfData The RTF data from which to extract images HEX representation.\n * @returns Array of found HEX representations. Each array item is an object containing:\n *\n * * hex Image representation in HEX format.\n * * type Type of image, `image/png` or `image/jpeg`.\n */ function extractImageDataFromRtf(rtfData) {\n    if (!rtfData) {\n        return [];\n    }\n    const regexPictureHeader = /{\\\\pict[\\s\\S]+?\\\\bliptag-?\\d+(\\\\blipupi-?\\d+)?({\\\\\\*\\\\blipuid\\s?[\\da-fA-F]+)?[\\s}]*?/;\n    const regexPicture = new RegExp('(?:(' + regexPictureHeader.source + '))([\\\\da-fA-F\\\\s]+)\\\\}', 'g');\n    const images = rtfData.match(regexPicture);\n    const result = [];\n    if (images) {\n        for (const image of images){\n            let imageType = false;\n            if (image.includes('\\\\pngblip')) {\n                imageType = 'image/png';\n            } else if (image.includes('\\\\jpegblip')) {\n                imageType = 'image/jpeg';\n            }\n            if (imageType) {\n                result.push({\n                    hex: image.replace(regexPictureHeader, '').replace(/[^\\da-fA-F]/g, ''),\n                    type: imageType\n                });\n            }\n        }\n    }\n    return result;\n}\n/**\n * Replaces `src` attribute value of all given images with the corresponding base64 image representation.\n *\n * @param imageElements Array of image elements which will have its source replaced.\n * @param imagesHexSources Array of images hex sources (usually the result of `extractImageDataFromRtf()` function).\n * The array should be the same length as `imageElements` parameter.\n */ function replaceImagesFileSourceWithInlineRepresentation(imageElements, imagesHexSources, writer) {\n    // Assume there is an equal amount of image elements and images HEX sources so they can be matched accordingly based on existing order.\n    if (imageElements.length === imagesHexSources.length) {\n        for(let i = 0; i < imageElements.length; i++){\n            const newSrc = `data:${imagesHexSources[i].type};base64,${_convertHexToBase64(imagesHexSources[i].hex)}`;\n            writer.setAttribute('src', newSrc, imageElements[i]);\n        }\n    }\n}\n\n/**\n * Cleanup MS attributes like styles, attributes and elements.\n *\n * @param documentFragment element `data.content` obtained from clipboard.\n */ function removeMSAttributes(documentFragment) {\n    const elementsToUnwrap = [];\n    const writer = new UpcastWriter(documentFragment.document);\n    for (const { item } of writer.createRangeIn(documentFragment)){\n        if (!item.is('element')) {\n            continue;\n        }\n        for (const className of item.getClassNames()){\n            if (/\\bmso/gi.exec(className)) {\n                writer.removeClass(className, item);\n            }\n        }\n        for (const styleName of item.getStyleNames()){\n            if (/\\bmso/gi.exec(styleName)) {\n                writer.removeStyle(styleName, item);\n            }\n        }\n        if (item.is('element', 'w:sdt') || item.is('element', 'w:sdtpr') && item.isEmpty || item.is('element', 'o:p') && item.isEmpty) {\n            elementsToUnwrap.push(item);\n        }\n    }\n    for (const item of elementsToUnwrap){\n        const itemParent = item.parent;\n        const childIndex = itemParent.getChildIndex(item);\n        writer.insertChild(childIndex, item.getChildren(), itemParent);\n        writer.remove(item);\n    }\n}\n\nconst msWordMatch1 = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i;\nconst msWordMatch2 = /xmlns:o=\"urn:schemas-microsoft-com/i;\n/**\n * Normalizer for the content pasted from Microsoft Word.\n */ class MSWordNormalizer {\n    document;\n    hasMultiLevelListPlugin;\n    /**\n\t * Creates a new `MSWordNormalizer` instance.\n\t *\n\t * @param document View document.\n\t */ constructor(document, hasMultiLevelListPlugin = false){\n        this.document = document;\n        this.hasMultiLevelListPlugin = hasMultiLevelListPlugin;\n    }\n    /**\n\t * @inheritDoc\n\t */ isActive(htmlString) {\n        return msWordMatch1.test(htmlString) || msWordMatch2.test(htmlString);\n    }\n    /**\n\t * @inheritDoc\n\t */ execute(data) {\n        const { body: documentFragment, stylesString } = data._parsedData;\n        transformListItemLikeElementsIntoLists(documentFragment, stylesString, this.hasMultiLevelListPlugin);\n        replaceImagesSourceWithBase64(documentFragment, data.dataTransfer.getData('text/rtf'));\n        removeMSAttributes(documentFragment);\n        data.content = documentFragment;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/removeboldwrapper\n */ /**\n * Removes the `<b>` tag wrapper added by Google Docs to a copied content.\n *\n * @param documentFragment element `data.content` obtained from clipboard\n */ function removeBoldWrapper(documentFragment, writer) {\n    for (const child of documentFragment.getChildren()){\n        if (child.is('element', 'b') && child.getStyle('font-weight') === 'normal') {\n            const childIndex = documentFragment.getChildIndex(child);\n            writer.remove(child);\n            writer.insertChild(childIndex, child.getChildren(), documentFragment);\n        }\n    }\n}\n\n/**\n * Transforms `<br>` elements that are siblings to some block element into a paragraphs.\n *\n * @param documentFragment The view structure to be transformed.\n */ function transformBlockBrsToParagraphs(documentFragment, writer) {\n    const viewDocument = new ViewDocument(writer.document.stylesProcessor);\n    const domConverter = new DomConverter(viewDocument, {\n        renderingMode: 'data'\n    });\n    const blockElements = domConverter.blockElements;\n    const inlineObjectElements = domConverter.inlineObjectElements;\n    const elementsToReplace = [];\n    for (const value of writer.createRangeIn(documentFragment)){\n        const element = value.item;\n        if (element.is('element', 'br')) {\n            const nextSibling = findSibling(element, 'forward', writer, {\n                blockElements,\n                inlineObjectElements\n            });\n            const previousSibling = findSibling(element, 'backward', writer, {\n                blockElements,\n                inlineObjectElements\n            });\n            const nextSiblingIsBlock = isBlockViewElement(nextSibling, blockElements);\n            const previousSiblingIsBlock = isBlockViewElement(previousSibling, blockElements);\n            // If the <br> is surrounded by blocks then convert it to a paragraph:\n            // * <p>foo</p>[<br>]<p>bar</p> -> <p>foo</p>[<p></p>]<p>bar</p>\n            // * <p>foo</p>[<br>] -> <p>foo</p>[<p></p>]\n            // * [<br>]<p>foo</p> -> [<p></p>]<p>foo</p>\n            if (previousSiblingIsBlock || nextSiblingIsBlock) {\n                elementsToReplace.push(element);\n            }\n        }\n    }\n    for (const element of elementsToReplace){\n        if (element.hasClass('Apple-interchange-newline')) {\n            writer.remove(element);\n        } else {\n            writer.replace(element, writer.createElement('p'));\n        }\n    }\n}\n/**\n * Returns sibling node, threats inline elements as transparent (but should stop on an inline objects).\n */ function findSibling(viewElement, direction, writer, { blockElements, inlineObjectElements }) {\n    let position = writer.createPositionAt(viewElement, direction == 'forward' ? 'after' : 'before');\n    // Find first position that is just before a first:\n    // * text node,\n    // * block element,\n    // * inline object element.\n    // It's ignoring any inline (non-object) elements like span, strong, etc.\n    position = position.getLastMatchingPosition(({ item })=>item.is('element') && !blockElements.includes(item.name) && !inlineObjectElements.includes(item.name), {\n        direction\n    });\n    return direction == 'forward' ? position.nodeAfter : position.nodeBefore;\n}\n/**\n * Returns true for view elements that are listed as block view elements.\n */ function isBlockViewElement(node, blockElements) {\n    return !!node && node.is('element') && blockElements.includes(node.name);\n}\n\nconst googleDocsMatch = /id=(\"|')docs-internal-guid-[-0-9a-f]+(\"|')/i;\n/**\n * Normalizer for the content pasted from Google Docs.\n */ class GoogleDocsNormalizer {\n    document;\n    /**\n\t * Creates a new `GoogleDocsNormalizer` instance.\n\t *\n\t * @param document View document.\n\t */ constructor(document){\n        this.document = document;\n    }\n    /**\n\t * @inheritDoc\n\t */ isActive(htmlString) {\n        return googleDocsMatch.test(htmlString);\n    }\n    /**\n\t * @inheritDoc\n\t */ execute(data) {\n        const writer = new UpcastWriter(this.document);\n        const { body: documentFragment } = data._parsedData;\n        removeBoldWrapper(documentFragment, writer);\n        unwrapParagraphInListItem(documentFragment, writer);\n        transformBlockBrsToParagraphs(documentFragment, writer);\n        data.content = documentFragment;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/removexmlns\n */ /**\n * Removes the `xmlns` attribute from table pasted from Google Sheets.\n *\n * @param documentFragment element `data.content` obtained from clipboard\n */ function removeXmlns(documentFragment, writer) {\n    for (const child of documentFragment.getChildren()){\n        if (child.is('element', 'table') && child.hasAttribute('xmlns')) {\n            writer.removeAttribute('xmlns', child);\n        }\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/removegooglesheetstag\n */ /**\n * Removes the `<google-sheets-html-origin>` tag wrapper added by Google Sheets to a copied content.\n *\n * @param documentFragment element `data.content` obtained from clipboard\n */ function removeGoogleSheetsTag(documentFragment, writer) {\n    for (const child of documentFragment.getChildren()){\n        if (child.is('element', 'google-sheets-html-origin')) {\n            const childIndex = documentFragment.getChildIndex(child);\n            writer.remove(child);\n            writer.insertChild(childIndex, child.getChildren(), documentFragment);\n        }\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/removeinvalidtablewidth\n */ /**\n * Removes the `width:0px` style from table pasted from Google Sheets.\n *\n * @param documentFragment element `data.content` obtained from clipboard\n */ function removeInvalidTableWidth(documentFragment, writer) {\n    for (const child of documentFragment.getChildren()){\n        if (child.is('element', 'table') && child.getStyle('width') === '0px') {\n            writer.removeStyle('width', child);\n        }\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/removestyleblock\n */ /**\n * Removes `<style>` block added by Google Sheets to a copied content.\n *\n * @param documentFragment element `data.content` obtained from clipboard\n */ function removeStyleBlock(documentFragment, writer) {\n    for (const child of Array.from(documentFragment.getChildren())){\n        if (child.is('element', 'style')) {\n            writer.remove(child);\n        }\n    }\n}\n\nconst googleSheetsMatch = /<google-sheets-html-origin/i;\n/**\n * Normalizer for the content pasted from Google Sheets.\n */ class GoogleSheetsNormalizer {\n    document;\n    /**\n\t * Creates a new `GoogleSheetsNormalizer` instance.\n\t *\n\t * @param document View document.\n\t */ constructor(document){\n        this.document = document;\n    }\n    /**\n\t * @inheritDoc\n\t */ isActive(htmlString) {\n        return googleSheetsMatch.test(htmlString);\n    }\n    /**\n\t * @inheritDoc\n\t */ execute(data) {\n        const writer = new UpcastWriter(this.document);\n        const { body: documentFragment } = data._parsedData;\n        removeGoogleSheetsTag(documentFragment, writer);\n        removeXmlns(documentFragment, writer);\n        removeInvalidTableWidth(documentFragment, writer);\n        removeStyleBlock(documentFragment, writer);\n        data.content = documentFragment;\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module paste-from-office/filters/space\n */ /**\n * Replaces last space preceding elements closing tag with `&nbsp;`. Such operation prevents spaces from being removed\n * during further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDomInlineNodes}).\n * This method also takes into account Word specific `<o:p></o:p>` empty tags.\n * Additionally multiline sequences of spaces and new lines between tags are removed (see #39 and #40).\n *\n * @param htmlString HTML string in which spacing should be normalized.\n * @returns Input HTML with spaces normalized.\n */ function normalizeSpacing(htmlString) {\n    // Run normalizeSafariSpaceSpans() two times to cover nested spans.\n    return normalizeSafariSpaceSpans(normalizeSafariSpaceSpans(htmlString))// Remove all \\r\\n from \"spacerun spans\" so the last replace line doesn't strip all whitespaces.\n    .replace(/(<span\\s+style=['\"]mso-spacerun:yes['\"]>[^\\S\\r\\n]*?)[\\r\\n]+([^\\S\\r\\n]*<\\/span>)/g, '$1$2').replace(/<span\\s+style=['\"]mso-spacerun:yes['\"]><\\/span>/g, '').replace(/(<span\\s+style=['\"]letter-spacing:[^'\"]+?['\"]>)[\\r\\n]+(<\\/span>)/g, '$1 $2').replace(/ <\\//g, '\\u00A0</').replace(/ <o:p><\\/o:p>/g, '\\u00A0<o:p></o:p>')// Remove <o:p> block filler from empty paragraph. Safari uses \\u00A0 instead of &nbsp;.\n    .replace(/<o:p>(&nbsp;|\\u00A0)<\\/o:p>/g, '')// Remove all whitespaces when they contain any \\r or \\n.\n    .replace(/>([^\\S\\r\\n]*[\\r\\n]\\s*)</g, '><');\n}\n/**\n * Normalizes spacing in special Word `spacerun spans` (`<span style='mso-spacerun:yes'>\\s+</span>`) by replacing\n * all spaces with `&nbsp; ` pairs. This prevents spaces from being removed during further DOM/View processing\n * (see especially {@link module:engine/view/domconverter~DomConverter#_processDomInlineNodes}).\n *\n * @param htmlDocument Native `Document` object in which spacing should be normalized.\n */ function normalizeSpacerunSpans(htmlDocument) {\n    htmlDocument.querySelectorAll('span[style*=spacerun]').forEach((el)=>{\n        const htmlElement = el;\n        const innerTextLength = htmlElement.innerText.length || 0;\n        htmlElement.innerText = Array(innerTextLength + 1).join('\\u00A0 ').substr(0, innerTextLength);\n    });\n}\n/**\n * Normalizes specific spacing generated by Safari when content pasted from Word (`<span class=\"Apple-converted-space\"> </span>`)\n * by replacing all spaces sequences longer than 1 space with `&nbsp; ` pairs. This prevents spaces from being removed during\n * further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n *\n * This function is similar to {@link module:clipboard/utils/normalizeclipboarddata normalizeClipboardData util} but uses\n * regular spaces / &nbsp; sequence for replacement.\n *\n * @param htmlString HTML string in which spacing should be normalized\n * @returns Input HTML with spaces normalized.\n */ function normalizeSafariSpaceSpans(htmlString) {\n    return htmlString.replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces)=>{\n        return spaces.length === 1 ? ' ' : Array(spaces.length + 1).join('\\u00A0 ').substr(0, spaces.length);\n    });\n}\n\n/**\n * Parses the provided HTML extracting contents of `<body>` and `<style>` tags.\n *\n * @param htmlString HTML string to be parsed.\n */ function parseHtml(htmlString, stylesProcessor) {\n    const domParser = new DOMParser();\n    // Remove Word specific \"if comments\" so content inside is not omitted by the parser.\n    htmlString = htmlString.replace(/<!--\\[if gte vml 1]>/g, '');\n    // Clean the <head> section of MS Windows specific tags. See https://github.com/ckeditor/ckeditor5/issues/15333.\n    // The regular expression matches the <o:SmartTagType> tag with optional attributes (with or without values).\n    htmlString = htmlString.replace(/<o:SmartTagType(?:\\s+[^\\s>=]+(?:=\"[^\"]*\")?)*\\s*\\/?>/gi, '');\n    const normalizedHtml = normalizeSpacing(cleanContentAfterBody(htmlString));\n    // Parse htmlString as native Document object.\n    const htmlDocument = domParser.parseFromString(normalizedHtml, 'text/html');\n    normalizeSpacerunSpans(htmlDocument);\n    // Get `innerHTML` first as transforming to View modifies the source document.\n    const bodyString = htmlDocument.body.innerHTML;\n    // Transform document.body to View.\n    const bodyView = documentToView(htmlDocument, stylesProcessor);\n    // Extract stylesheets.\n    const stylesObject = extractStyles(htmlDocument);\n    return {\n        body: bodyView,\n        bodyString,\n        styles: stylesObject.styles,\n        stylesString: stylesObject.stylesString\n    };\n}\n/**\n * Transforms native `Document` object into {@link module:engine/view/documentfragment~DocumentFragment}. Comments are skipped.\n *\n * @param htmlDocument Native `Document` object to be transformed.\n */ function documentToView(htmlDocument, stylesProcessor) {\n    const viewDocument = new ViewDocument(stylesProcessor);\n    const domConverter = new DomConverter(viewDocument, {\n        renderingMode: 'data'\n    });\n    const fragment = htmlDocument.createDocumentFragment();\n    const nodes = htmlDocument.body.childNodes;\n    while(nodes.length > 0){\n        fragment.appendChild(nodes[0]);\n    }\n    return domConverter.domToView(fragment, {\n        skipComments: true\n    });\n}\n/**\n * Extracts both `CSSStyleSheet` and string representation from all `style` elements available in a provided `htmlDocument`.\n *\n * @param htmlDocument Native `Document` object from which styles will be extracted.\n */ function extractStyles(htmlDocument) {\n    const styles = [];\n    const stylesString = [];\n    const styleTags = Array.from(htmlDocument.getElementsByTagName('style'));\n    for (const style of styleTags){\n        if (style.sheet && style.sheet.cssRules && style.sheet.cssRules.length) {\n            styles.push(style.sheet);\n            stylesString.push(style.innerHTML);\n        }\n    }\n    return {\n        styles,\n        stylesString: stylesString.join(' ')\n    };\n}\n/**\n * Removes leftover content from between closing </body> and closing </html> tag:\n *\n * ```html\n * <html><body><p>Foo Bar</p></body><span>Fo</span></html> -> <html><body><p>Foo Bar</p></body></html>\n * ```\n *\n * This function is used as specific browsers (Edge) add some random content after `body` tag when pasting from Word.\n * @param htmlString The HTML string to be cleaned.\n * @returns The HTML string with leftover content removed.\n */ function cleanContentAfterBody(htmlString) {\n    const bodyCloseTag = '</body>';\n    const htmlCloseTag = '</html>';\n    const bodyCloseIndex = htmlString.indexOf(bodyCloseTag);\n    if (bodyCloseIndex < 0) {\n        return htmlString;\n    }\n    const htmlCloseIndex = htmlString.indexOf(htmlCloseTag, bodyCloseIndex + bodyCloseTag.length);\n    return htmlString.substring(0, bodyCloseIndex + bodyCloseTag.length) + (htmlCloseIndex >= 0 ? htmlString.substring(htmlCloseIndex) : '');\n}\n\n/**\n * The Paste from Office plugin.\n *\n * This plugin handles content pasted from Office apps and transforms it (if necessary)\n * to a valid structure which can then be understood by the editor features.\n *\n * Transformation is made by a set of predefined {@link module:paste-from-office/normalizer~Normalizer normalizers}.\n * This plugin includes following normalizers:\n * * {@link module:paste-from-office/normalizers/mswordnormalizer~MSWordNormalizer Microsoft Word normalizer}\n * * {@link module:paste-from-office/normalizers/googledocsnormalizer~GoogleDocsNormalizer Google Docs normalizer}\n *\n * For more information about this feature check the {@glink api/paste-from-office package page}.\n */ class PasteFromOffice extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PasteFromOffice';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ClipboardPipeline\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const clipboardPipeline = editor.plugins.get('ClipboardPipeline');\n        const viewDocument = editor.editing.view.document;\n        const normalizers = [];\n        const hasMultiLevelListPlugin = this.editor.plugins.has('MultiLevelList');\n        normalizers.push(new MSWordNormalizer(viewDocument, hasMultiLevelListPlugin));\n        normalizers.push(new GoogleDocsNormalizer(viewDocument));\n        normalizers.push(new GoogleSheetsNormalizer(viewDocument));\n        clipboardPipeline.on('inputTransformation', (evt, data)=>{\n            if (data._isTransformedWithPasteFromOffice) {\n                return;\n            }\n            const codeBlock = editor.model.document.selection.getFirstPosition().parent;\n            if (codeBlock.is('element', 'codeBlock')) {\n                return;\n            }\n            const htmlString = data.dataTransfer.getData('text/html');\n            const activeNormalizer = normalizers.find((normalizer)=>normalizer.isActive(htmlString));\n            if (activeNormalizer) {\n                if (!data._parsedData) {\n                    data._parsedData = parseHtml(htmlString, viewDocument.stylesProcessor);\n                }\n                activeNormalizer.execute(data);\n                data._isTransformedWithPasteFromOffice = true;\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n}\n\nexport { MSWordNormalizer, PasteFromOffice, parseHtml };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, Command } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\nvar removeFormatIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.69 14.915c.053.052.173.083.36.093a.366.366 0 0 1 .345.485l-.003.01a.738.738 0 0 1-.697.497h-2.67a.374.374 0 0 1-.353-.496l.013-.038a.681.681 0 0 1 .644-.458c.197-.012.325-.043.386-.093a.28.28 0 0 0 .072-.11L9.592 4.5H6.269c-.359-.017-.609.013-.75.09-.142.078-.289.265-.442.563-.192.29-.516.464-.864.464H4.17a.43.43 0 0 1-.407-.569L4.46 3h13.08l-.62 2.043a.81.81 0 0 1-.775.574h-.114a.486.486 0 0 1-.486-.486c.001-.284-.054-.464-.167-.54-.112-.076-.367-.106-.766-.091h-3.28l-2.68 10.257c-.006.074.007.127.038.158zM3 17h8a.5.5 0 1 1 0 1H3a.5.5 0 1 1 0-1zm11.299 1.17a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.06-1.06l1.415 1.414 1.414-1.415a.75.75 0 1 1 1.06 1.06l-1.413 1.415 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414-1.414 1.414z\\\"/></svg>\";\n\nconst REMOVE_FORMAT = 'removeFormat';\n/**\n * The remove format UI plugin. It registers the `'removeFormat'` button which can be\n * used in the toolbar.\n */ class RemoveFormatUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RemoveFormatUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(REMOVE_FORMAT, ()=>{\n            const view = this._createButton(ButtonView);\n            view.set({\n                tooltip: true\n            });\n            return view;\n        });\n        editor.ui.componentFactory.add(`menuBar:${REMOVE_FORMAT}`, ()=>this._createButton(MenuBarMenuListItemButtonView));\n    }\n    /**\n\t * Creates a button for remove format command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get(REMOVE_FORMAT);\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Remove Format'),\n            icon: removeFormatIcon\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute(REMOVE_FORMAT);\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The remove format command.\n *\n * It is used by the {@link module:remove-format/removeformat~RemoveFormat remove format feature}\n * to clear the formatting in the selection.\n *\n * ```ts\n * editor.execute( 'removeFormat' );\n * ```\n */ class RemoveFormatCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        this.isEnabled = !!first(this._getFormattingItems(model.document.selection, model.schema));\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        model.change((writer)=>{\n            for (const item of this._getFormattingItems(model.document.selection, schema)){\n                if (item.is('selection')) {\n                    for (const attributeName of this._getFormattingAttributes(item, schema)){\n                        writer.removeSelectionAttribute(attributeName);\n                    }\n                } else {\n                    // Workaround for items with multiple removable attributes. See\n                    // https://github.com/ckeditor/ckeditor5-remove-format/pull/1#pullrequestreview-220515609\n                    const itemRange = writer.createRangeOn(item);\n                    for (const attributeName of this._getFormattingAttributes(item, schema)){\n                        writer.removeAttribute(attributeName, itemRange);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Returns an iterable of items in a selection (including the selection itself) that have formatting model\n\t * attributes to be removed by the feature.\n\t *\n\t * @param schema The schema describing the item.\n\t */ *_getFormattingItems(selection, schema) {\n        const itemHasRemovableFormatting = (item)=>{\n            return !!first(this._getFormattingAttributes(item, schema));\n        };\n        // Check formatting on selected items that are not blocks.\n        for (const curRange of selection.getRanges()){\n            for (const item of curRange.getItems()){\n                if (!schema.isBlock(item) && itemHasRemovableFormatting(item)) {\n                    yield item;\n                }\n            }\n        }\n        // Check formatting from selected blocks.\n        for (const block of selection.getSelectedBlocks()){\n            if (itemHasRemovableFormatting(block)) {\n                yield block;\n            }\n        }\n        // Finally the selection might be formatted as well, so make sure to check it.\n        if (itemHasRemovableFormatting(selection)) {\n            yield selection;\n        }\n    }\n    /**\n\t * Returns an iterable of formatting attributes of a given model item.\n\t *\n\t * **Note:** Formatting items have the `isFormatting` property set to `true`.\n\t *\n\t * @param schema The schema describing the item.\n\t * @returns The names of formatting attributes found in a given item.\n\t */ *_getFormattingAttributes(item, schema) {\n        for (const [attributeName] of item.getAttributes()){\n            const attributeProperties = schema.getAttributeProperties(attributeName);\n            if (attributeProperties && attributeProperties.isFormatting) {\n                yield attributeName;\n            }\n        }\n    }\n}\n\n/**\n * The remove format editing plugin.\n *\n * It registers the {@link module:remove-format/removeformatcommand~RemoveFormatCommand removeFormat} command.\n */ class RemoveFormatEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RemoveFormatEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.commands.add('removeFormat', new RemoveFormatCommand(editor));\n    }\n}\n\n/**\n * The remove format plugin.\n *\n * This is a \"glue\" plugin which loads the {@link module:remove-format/removeformatediting~RemoveFormatEditing}\n * and {@link module:remove-format/removeformatui~RemoveFormatUI} plugins.\n *\n * For a detailed overview, check out the {@glink features/remove-format remove format} feature documentation.\n */ class RemoveFormat extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            RemoveFormatEditing,\n            RemoveFormatUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RemoveFormat';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n}\n\nexport { RemoveFormat, RemoveFormatEditing, RemoveFormatUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Matcher } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { createDropdown, addListToDropdown, MenuBarMenuView, MenuBarMenuListView, MenuBarMenuListItemView, MenuBarMenuListItemButtonView, ViewModel, ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { Collection } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * The command that allows navigation across the exceptions in the edited document.\n */ class RestrictedEditingModeNavigationCommand extends Command {\n    /**\n\t * The direction of the command.\n\t */ _direction;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor The editor instance.\n\t * @param direction The direction that the command works.\n\t */ constructor(editor, direction){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode and in restricted editing mode.\n        this.affectsData = false;\n        this._direction = direction;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._checkEnabled();\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const position = getNearestExceptionRange(this.editor.model, this._direction);\n        if (!position) {\n            return;\n        }\n        this.editor.model.change((writer)=>{\n            writer.setSelection(position);\n        });\n    }\n    /**\n\t * Checks whether the command can be enabled in the current context.\n\t *\n\t * @returns Whether the command should be enabled.\n\t */ _checkEnabled() {\n        return !!getNearestExceptionRange(this.editor.model, this._direction);\n    }\n}\n/**\n * Returns the range of the exception marker closest to the last position of the model selection.\n */ function getNearestExceptionRange(model, direction) {\n    const selection = model.document.selection;\n    const selectionPosition = selection.getFirstPosition();\n    const markerRanges = [];\n    // Get all exception marker positions that start after/before the selection position.\n    for (const marker of model.markers.getMarkersGroup('restrictedEditingException')){\n        const markerRange = marker.getRange();\n        // Checking parent because there two positions <paragraph>foo^</paragraph><paragraph>^bar</paragraph>\n        // are touching but they will represent different markers.\n        const isMarkerRangeTouching = selectionPosition.isTouching(markerRange.start) && selectionPosition.hasSameParentAs(markerRange.start) || selectionPosition.isTouching(markerRange.end) && selectionPosition.hasSameParentAs(markerRange.end);\n        // <paragraph>foo <marker≥b[]ar</marker> baz</paragraph>\n        // <paragraph>foo <marker≥b[ar</marker> ba]z</paragraph>\n        // <paragraph>foo <marker≥bar</marker>[] baz</paragraph>\n        // <paragraph>foo []<marker≥bar</marker> baz</paragraph>\n        if (markerRange.containsPosition(selectionPosition) || isMarkerRangeTouching) {\n            continue;\n        }\n        if (direction === 'forward' && markerRange.start.isAfter(selectionPosition)) {\n            markerRanges.push(markerRange);\n        } else if (direction === 'backward' && markerRange.end.isBefore(selectionPosition)) {\n            markerRanges.push(markerRange);\n        }\n    }\n    if (!markerRanges.length) {\n        return;\n    }\n    // Get the marker closest to the selection position among many. To know that, we need to sort\n    // them first.\n    return markerRanges.sort((rangeA, rangeB)=>{\n        if (direction === 'forward') {\n            return rangeA.start.isAfter(rangeB.start) ? 1 : -1;\n        } else {\n            return rangeA.start.isBefore(rangeB.start) ? 1 : -1;\n        }\n    }).shift();\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module restricted-editing/restrictededitingmode/utils\n */ /**\n * Returns a single \"restricted-editing-exception\" marker at a given position. Contrary to\n * {@link module:engine/model/markercollection~MarkerCollection#getMarkersAtPosition}, it returnd a marker also when the postion is\n * equal to one of the marker's start or end positions.\n */ function getMarkerAtPosition(editor, position) {\n    for (const marker of editor.model.markers){\n        const markerRange = marker.getRange();\n        if (isPositionInRangeBoundaries(markerRange, position)) {\n            if (marker.name.startsWith('restrictedEditingException:')) {\n                return marker;\n            }\n        }\n    }\n}\n/**\n * Checks if the position is fully contained in the range. Positions equal to range start or end are considered \"in\".\n */ function isPositionInRangeBoundaries(range, position) {\n    return range.containsPosition(position) || range.end.isEqual(position) || range.start.isEqual(position);\n}\n/**\n * Checks if the selection is fully contained in the marker. Positions on marker boundaries are considered \"in\".\n *\n * ```xml\n * <marker>[]foo</marker> -> true\n * <marker>f[oo]</marker> -> true\n * <marker>f[oo</marker> ba]r -> false\n * <marker>foo</marker> []bar -> false\n * ```\n */ function isSelectionInMarker(selection, marker) {\n    if (!marker) {\n        return false;\n    }\n    const markerRange = marker.getRange();\n    if (selection.isCollapsed) {\n        return isPositionInRangeBoundaries(markerRange, selection.focus);\n    }\n    return markerRange.containsRange(selection.getFirstRange(), true);\n}\n\nconst HIGHLIGHT_CLASS = 'restricted-editing-exception_selected';\n/**\n * Adds a visual highlight style to a restricted editing exception that the selection is anchored to.\n *\n * The highlight is turned on by adding the `.restricted-editing-exception_selected` class to the\n * exception in the view:\n *\n * * The class is removed before the conversion starts, as callbacks added with the `'highest'` priority\n * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n * * The class is added in the view post-fixer, after other changes in the model tree are converted to the view.\n *\n * This way, adding and removing the highlight does not interfere with conversion.\n */ function setupExceptionHighlighting(editor) {\n    const view = editor.editing.view;\n    const model = editor.model;\n    const highlightedMarkers = new Set();\n    // Adding the class.\n    view.document.registerPostFixer((writer)=>{\n        const modelSelection = model.document.selection;\n        const marker = getMarkerAtPosition(editor, modelSelection.anchor);\n        if (!marker) {\n            return false;\n        }\n        for (const viewElement of editor.editing.mapper.markerNameToElements(marker.name)){\n            writer.addClass(HIGHLIGHT_CLASS, viewElement);\n            highlightedMarkers.add(viewElement);\n        }\n        return false;\n    });\n    // Removing the class.\n    editor.conversion.for('editingDowncast').add((dispatcher)=>{\n        // Make sure the highlight is removed on every possible event, before conversion is started.\n        dispatcher.on('insert', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('remove', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('attribute', removeHighlight, {\n            priority: 'highest'\n        });\n        dispatcher.on('cleanSelection', removeHighlight);\n        function removeHighlight() {\n            view.change((writer)=>{\n                for (const item of highlightedMarkers.values()){\n                    writer.removeClass(HIGHLIGHT_CLASS, item);\n                    highlightedMarkers.delete(item);\n                }\n            });\n        }\n    });\n}\n/**\n * A post-fixer that prevents removing a collapsed marker from the document.\n */ function resurrectCollapsedMarkerPostFixer(editor) {\n    // This post-fixer shouldn't be necessary after https://github.com/ckeditor/ckeditor5/issues/5778.\n    return (writer)=>{\n        let changeApplied = false;\n        for (const { name, data } of editor.model.document.differ.getChangedMarkers()){\n            if (name.startsWith('restrictedEditingException') && data.newRange && data.newRange.root.rootName == '$graveyard') {\n                writer.updateMarker(name, {\n                    range: writer.createRange(writer.createPositionAt(data.oldRange.start))\n                });\n                changeApplied = true;\n            }\n        }\n        return changeApplied;\n    };\n}\n/**\n * A post-fixer that extends a marker when the user types on its boundaries.\n */ function extendMarkerOnTypingPostFixer(editor) {\n    // This post-fixer shouldn't be necessary after https://github.com/ckeditor/ckeditor5/issues/5778.\n    return (writer)=>{\n        let changeApplied = false;\n        const schema = editor.model.schema;\n        for (const change of editor.model.document.differ.getChanges()){\n            if (change.type == 'insert' && schema.checkChild('$block', change.name)) {\n                changeApplied = _tryExtendMarkerStart(editor, change.position, change.length, writer) || changeApplied;\n                changeApplied = _tryExtendMarkedEnd(editor, change.position, change.length, writer) || changeApplied;\n            }\n        }\n        return changeApplied;\n    };\n}\n/**\n * A view highlight-to-marker conversion helper.\n *\n * @param config Conversion configuration.\n */ function upcastHighlightToMarker(config) {\n    return (dispatcher)=>dispatcher.on('element:span', (evt, data, conversionApi)=>{\n            const { writer } = conversionApi;\n            const matcher = new Matcher(config.view);\n            const matcherResult = matcher.match(data.viewItem);\n            // If there is no match, this callback should not do anything.\n            if (!matcherResult) {\n                return;\n            }\n            const match = matcherResult.match;\n            // Force consuming element's name (taken from upcast helpers elementToElement converter).\n            match.name = true;\n            const { modelRange: convertedChildrenRange } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n            conversionApi.consumable.consume(data.viewItem, match);\n            const markerName = config.model();\n            const fakeMarkerStart = writer.createElement('$marker', {\n                'data-name': markerName\n            });\n            const fakeMarkerEnd = writer.createElement('$marker', {\n                'data-name': markerName\n            });\n            // Insert in reverse order to use converter content positions directly (without recalculating).\n            writer.insert(fakeMarkerEnd, convertedChildrenRange.end);\n            writer.insert(fakeMarkerStart, convertedChildrenRange.start);\n            data.modelRange = writer.createRange(writer.createPositionBefore(fakeMarkerStart), writer.createPositionAfter(fakeMarkerEnd));\n            data.modelCursor = data.modelRange.end;\n        });\n}\n/**\n * Extend marker if change detected on marker's start position.\n */ function _tryExtendMarkerStart(editor, position, length, writer) {\n    const markerAtStart = getMarkerAtPosition(editor, position.getShiftedBy(length));\n    if (markerAtStart && markerAtStart.getStart().isEqual(position.getShiftedBy(length))) {\n        writer.updateMarker(markerAtStart, {\n            range: writer.createRange(markerAtStart.getStart().getShiftedBy(-length), markerAtStart.getEnd())\n        });\n        return true;\n    }\n    return false;\n}\n/**\n * Extend marker if change detected on marker's end position.\n */ function _tryExtendMarkedEnd(editor, position, length, writer) {\n    const markerAtEnd = getMarkerAtPosition(editor, position);\n    if (markerAtEnd && markerAtEnd.getEnd().isEqual(position)) {\n        writer.updateMarker(markerAtEnd, {\n            range: writer.createRange(markerAtEnd.getStart(), markerAtEnd.getEnd().getShiftedBy(length))\n        });\n        return true;\n    }\n    return false;\n}\n\nconst COMMAND_FORCE_DISABLE_ID = 'RestrictedEditingMode';\n/**\n * The restricted editing mode editing feature.\n *\n * * It introduces the exception marker group that renders to `<span>` elements with the `restricted-editing-exception` CSS class.\n * * It registers the `'goToPreviousRestrictedEditingException'` and `'goToNextRestrictedEditingException'` commands.\n * * It also enables highlighting exception markers that are selected.\n */ class RestrictedEditingModeEditing extends Plugin {\n    /**\n\t * Command names that are enabled outside the non-restricted regions.\n\t */ _alwaysEnabled;\n    /**\n\t * Commands allowed in non-restricted areas.\n\t *\n\t * Commands always enabled combine typing feature commands: `'input'`, `'insertText'`, `'delete'`, and `'deleteForward'` with\n\t * commands defined in the feature configuration.\n\t */ _allowedInException;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RestrictedEditingModeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        editor.config.define('restrictedEditing', {\n            allowedCommands: [\n                'bold',\n                'italic',\n                'link',\n                'unlink'\n            ],\n            allowedAttributes: [\n                'bold',\n                'italic',\n                'linkHref'\n            ]\n        });\n        this._alwaysEnabled = new Set([\n            'undo',\n            'redo'\n        ]);\n        this._allowedInException = new Set([\n            'input',\n            'insertText',\n            'delete',\n            'deleteForward'\n        ]);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const allowedCommands = editor.config.get('restrictedEditing.allowedCommands');\n        allowedCommands.forEach((commandName)=>this._allowedInException.add(commandName));\n        this._setupConversion();\n        this._setupCommandsToggling();\n        this._setupRestrictions();\n        // Commands & keystrokes that allow navigation in the content.\n        editor.commands.add('goToPreviousRestrictedEditingException', new RestrictedEditingModeNavigationCommand(editor, 'backward'));\n        editor.commands.add('goToNextRestrictedEditingException', new RestrictedEditingModeNavigationCommand(editor, 'forward'));\n        this.listenTo(editingView.document, 'tab', (evt, data)=>{\n            const commandName = !data.shiftKey ? 'goToNextRestrictedEditingException' : 'goToPreviousRestrictedEditingException';\n            const command = editor.commands.get(commandName);\n            if (command.isEnabled) {\n                editor.execute(commandName);\n                // Stop the event in the DOM: no listener in the web page will be triggered by this event.\n                data.preventDefault();\n                data.stopPropagation();\n            }\n            // Stop the event bubbling in the editor: no more callbacks will be executed for this keystroke.\n            evt.stop();\n        }, {\n            context: '$capture'\n        });\n        editor.keystrokes.set('Ctrl+A', getSelectAllHandler(editor));\n        editingView.change((writer)=>{\n            for (const root of editingView.document.roots){\n                writer.addClass('ck-restricted-editing_mode_restricted', root);\n            }\n        });\n    }\n    /**\n\t * Makes the given command always enabled in the restricted editing mode (regardless\n\t * of selection location).\n\t *\n\t * To enable some commands in non-restricted areas of the content use\n\t * {@link module:restricted-editing/restrictededitingconfig~RestrictedEditingConfig#allowedCommands} configuration option.\n\t *\n\t * @param commandName Name of the command to enable.\n\t */ enableCommand(commandName) {\n        const command = this.editor.commands.get(commandName);\n        command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        this._alwaysEnabled.add(commandName);\n    }\n    /**\n\t * Sets up the restricted mode editing conversion:\n\t *\n\t * * ucpast & downcast converters,\n\t * * marker highlighting in the edting area,\n\t * * marker post-fixers.\n\t */ _setupConversion() {\n        const editor = this.editor;\n        const model = editor.model;\n        const doc = model.document;\n        // The restricted editing does not attach additional data to the zones so there's no need for smarter markers managing.\n        // Also, the markers will only be created when loading the data.\n        let markerNumber = 0;\n        editor.conversion.for('upcast').add(upcastHighlightToMarker({\n            view: {\n                name: 'span',\n                classes: 'restricted-editing-exception'\n            },\n            model: ()=>{\n                markerNumber++; // Starting from restrictedEditingException:1 marker.\n                return `restrictedEditingException:${markerNumber}`;\n            }\n        }));\n        // Currently the marker helpers are tied to other use-cases and do not render a collapsed marker as highlight.\n        // Also, markerToHighlight can not convert marker on an inline object. It handles only text and widgets,\n        // but it is not a case in the data pipeline. That's why there are 3 downcast converters for them:\n        //\n        // 1. The custom inline item (text or inline object) converter (but not the selection).\n        editor.conversion.for('downcast').add((dispatcher)=>{\n            dispatcher.on('addMarker:restrictedEditingException', (evt, data, conversionApi)=>{\n                // Only convert per-item conversion.\n                if (!data.item) {\n                    return;\n                }\n                // Do not convert the selection or non-inline items.\n                if (data.item.is('selection') || !conversionApi.schema.isInline(data.item)) {\n                    return;\n                }\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const viewWriter = conversionApi.writer;\n                const viewElement = viewWriter.createAttributeElement('span', {\n                    class: 'restricted-editing-exception'\n                }, {\n                    id: data.markerName,\n                    priority: -10\n                });\n                const viewRange = conversionApi.mapper.toViewRange(data.range);\n                const rangeAfterWrap = viewWriter.wrap(viewRange, viewElement);\n                for (const element of rangeAfterWrap.getItems()){\n                    if (element.is('attributeElement') && element.isSimilar(viewElement)) {\n                        conversionApi.mapper.bindElementToMarker(element, data.markerName);\n                        break;\n                    }\n                }\n            });\n        });\n        // 2. The marker-to-highlight converter for the document selection.\n        editor.conversion.for('downcast').markerToHighlight({\n            model: 'restrictedEditingException',\n            // Use callback to return new object every time new marker instance is created - otherwise it will be seen as the same marker.\n            view: ()=>{\n                return {\n                    name: 'span',\n                    classes: 'restricted-editing-exception',\n                    priority: -10\n                };\n            }\n        });\n        // 3. And for collapsed marker we need to render it as an element.\n        // Additionally, the editing pipeline should always display a collapsed marker.\n        editor.conversion.for('editingDowncast').markerToElement({\n            model: 'restrictedEditingException',\n            view: (markerData, { writer })=>{\n                return writer.createUIElement('span', {\n                    class: 'restricted-editing-exception restricted-editing-exception_collapsed'\n                });\n            }\n        });\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: 'restrictedEditingException',\n            view: (markerData, { writer })=>{\n                return writer.createEmptyElement('span', {\n                    class: 'restricted-editing-exception'\n                });\n            }\n        });\n        doc.registerPostFixer(extendMarkerOnTypingPostFixer(editor));\n        doc.registerPostFixer(resurrectCollapsedMarkerPostFixer(editor));\n        doc.registerPostFixer(ensureNewMarkerIsFlatPostFixer(editor));\n        setupExceptionHighlighting(editor);\n    }\n    /**\n\t * Setups additional editing restrictions beyond command toggling:\n\t *\n\t * * delete content range trimming\n\t * * disabling input command outside exception marker\n\t * * restricting clipboard holder to text only\n\t * * restricting text attributes in content\n\t */ _setupRestrictions() {\n        const editor = this.editor;\n        const model = editor.model;\n        const selection = model.document.selection;\n        const viewDoc = editor.editing.view.document;\n        const clipboard = editor.plugins.get('ClipboardPipeline');\n        this.listenTo(model, 'deleteContent', restrictDeleteContent(editor), {\n            priority: 'high'\n        });\n        const insertTextCommand = editor.commands.get('insertText');\n        // The restricted editing might be configured without insert text support - ie allow only bolding or removing text.\n        // This check is bit synthetic since only tests are used this way.\n        if (insertTextCommand) {\n            this.listenTo(insertTextCommand, 'execute', disallowInputExecForWrongRange(editor), {\n                priority: 'high'\n            });\n        }\n        // Block clipboard outside exception marker on paste and drop.\n        this.listenTo(clipboard, 'contentInsertion', (evt)=>{\n            if (!isRangeInsideSingleMarker(editor, selection.getFirstRange())) {\n                evt.stop();\n            }\n        });\n        // Block clipboard outside exception marker on cut.\n        this.listenTo(viewDoc, 'clipboardOutput', (evt, data)=>{\n            if (data.method == 'cut' && !isRangeInsideSingleMarker(editor, selection.getFirstRange())) {\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        const allowedAttributes = editor.config.get('restrictedEditing.allowedAttributes');\n        model.schema.addAttributeCheck(onlyAllowAttributesFromList(allowedAttributes));\n        model.schema.addChildCheck(allowTextOnlyInClipboardHolder());\n    }\n    /**\n\t * Sets up the command toggling which enables or disables commands based on the user selection.\n\t */ _setupCommandsToggling() {\n        const editor = this.editor;\n        const model = editor.model;\n        const doc = model.document;\n        this._disableCommands();\n        this.listenTo(doc.selection, 'change', this._checkCommands.bind(this));\n        this.listenTo(doc, 'change:data', this._checkCommands.bind(this));\n    }\n    /**\n\t * Checks if commands should be enabled or disabled based on the current selection.\n\t */ _checkCommands() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        if (selection.rangeCount > 1) {\n            this._disableCommands();\n            return;\n        }\n        const marker = getMarkerAtPosition(editor, selection.focus);\n        this._disableCommands();\n        if (isSelectionInMarker(selection, marker)) {\n            this._enableCommands(marker);\n        }\n    }\n    /**\n\t * Enables commands in non-restricted regions.\n\t */ _enableCommands(marker) {\n        const editor = this.editor;\n        for (const [commandName, command] of editor.commands){\n            if (!command.affectsData || this._alwaysEnabled.has(commandName)) {\n                continue;\n            }\n            // Enable ony those commands that are allowed in the exception marker.\n            if (!this._allowedInException.has(commandName)) {\n                continue;\n            }\n            // Do not enable 'delete' and 'deleteForward' commands on the exception marker boundaries.\n            if (isDeleteCommandOnMarkerBoundaries(commandName, editor.model.document.selection, marker.getRange())) {\n                continue;\n            }\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Disables commands outside non-restricted regions.\n\t */ _disableCommands() {\n        const editor = this.editor;\n        for (const [commandName, command] of editor.commands){\n            if (!command.affectsData || this._alwaysEnabled.has(commandName)) {\n                continue;\n            }\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n}\n/**\n * Helper for handling Ctrl+A keydown behaviour.\n */ function getSelectAllHandler(editor) {\n    return (_, cancel)=>{\n        const model = editor.model;\n        const selection = editor.model.document.selection;\n        const marker = getMarkerAtPosition(editor, selection.focus);\n        if (!marker) {\n            return;\n        }\n        // If selection range is inside a restricted editing exception, select text only within the exception.\n        //\n        // Note: Second Ctrl+A press is also blocked and it won't select the entire text in the editor.\n        const selectionRange = selection.getFirstRange();\n        const markerRange = marker.getRange();\n        if (markerRange.containsRange(selectionRange, true) || selection.isCollapsed) {\n            cancel();\n            model.change((writer)=>{\n                writer.setSelection(marker.getRange());\n            });\n        }\n    };\n}\n/**\n * Additional rule for enabling \"delete\" and \"deleteForward\" commands if selection is on range boundaries:\n *\n * Does not allow to enable command when selection focus is:\n * - is on marker start - \"delete\" - to prevent removing content before marker\n * - is on marker end - \"deleteForward\" - to prevent removing content after marker\n */ function isDeleteCommandOnMarkerBoundaries(commandName, selection, markerRange) {\n    if (commandName == 'delete' && markerRange.start.isEqual(selection.focus)) {\n        return true;\n    }\n    // Only for collapsed selection - non-collapsed selection that extends over a marker is handled elsewhere.\n    if (commandName == 'deleteForward' && selection.isCollapsed && markerRange.end.isEqual(selection.focus)) {\n        return true;\n    }\n    return false;\n}\n/**\n * Ensures that model.deleteContent() does not delete outside exception markers ranges.\n *\n * The enforced restrictions are:\n * - only execute deleteContent() inside exception markers\n * - restrict passed selection to exception marker\n */ function restrictDeleteContent(editor) {\n    return (evt, args)=>{\n        const [selection] = args;\n        const marker = getMarkerAtPosition(editor, selection.focus) || getMarkerAtPosition(editor, selection.anchor);\n        // Stop method execution if marker was not found at selection focus.\n        if (!marker) {\n            evt.stop();\n            return;\n        }\n        // Collapsed selection inside exception marker does not require fixing.\n        if (selection.isCollapsed) {\n            return;\n        }\n        // Shrink the selection to the range inside exception marker.\n        const allowedToDelete = marker.getRange().getIntersection(selection.getFirstRange());\n        // Some features uses selection passed to model.deleteContent() to set the selection afterwards. For this we need to properly modify\n        // either the document selection using change block...\n        if (selection.is('documentSelection')) {\n            editor.model.change((writer)=>{\n                writer.setSelection(allowedToDelete);\n            });\n        } else {\n            selection.setTo(allowedToDelete);\n        }\n    };\n}\n/**\n * Ensures that input command is executed with a range that is inside exception marker.\n *\n * This restriction is due to fact that using native spell check changes text outside exception marker.\n */ function disallowInputExecForWrongRange(editor) {\n    return (evt, args)=>{\n        const [options] = args;\n        const { range } = options;\n        // Only check \"input\" command executed with a range value.\n        // Selection might be set in exception marker but passed range might point elsewhere.\n        if (!range) {\n            return;\n        }\n        if (!isRangeInsideSingleMarker(editor, range)) {\n            evt.stop();\n        }\n    };\n}\nfunction isRangeInsideSingleMarker(editor, range) {\n    const markerAtStart = getMarkerAtPosition(editor, range.start);\n    const markerAtEnd = getMarkerAtPosition(editor, range.end);\n    return markerAtStart && markerAtEnd && markerAtEnd === markerAtStart;\n}\n/**\n * Checks if new marker range is flat. Non-flat ranges might appear during upcast conversion in nested structures, ie tables.\n *\n * Note: This marker fixer only consider case which is possible to create using StandardEditing mode plugin.\n * Markers created by developer in the data might break in many other ways.\n *\n * See #6003.\n */ function ensureNewMarkerIsFlatPostFixer(editor) {\n    return (writer)=>{\n        let changeApplied = false;\n        const changedMarkers = editor.model.document.differ.getChangedMarkers();\n        for (const { data, name } of changedMarkers){\n            if (!name.startsWith('restrictedEditingException')) {\n                continue;\n            }\n            const newRange = data.newRange;\n            if (!data.oldRange && !newRange.isFlat) {\n                const start = newRange.start;\n                const end = newRange.end;\n                const startIsHigherInTree = start.path.length > end.path.length;\n                const fixedStart = startIsHigherInTree ? newRange.start : writer.createPositionAt(end.parent, 0);\n                const fixedEnd = startIsHigherInTree ? writer.createPositionAt(start.parent, 'end') : newRange.end;\n                writer.updateMarker(name, {\n                    range: writer.createRange(fixedStart, fixedEnd)\n                });\n                changeApplied = true;\n            }\n        }\n        return changeApplied;\n    };\n}\nfunction onlyAllowAttributesFromList(allowedAttributes) {\n    return (context, attributeName)=>{\n        if (context.startsWith('$clipboardHolder')) {\n            return allowedAttributes.includes(attributeName);\n        }\n    };\n}\nfunction allowTextOnlyInClipboardHolder() {\n    return (context, childDefinition)=>{\n        if (context.startsWith('$clipboardHolder')) {\n            return childDefinition.name === '$text';\n        }\n    };\n}\n\nvar lockIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.5 6.5a3.5 3.5 0 0 1 3.495 3.308L19 10v2a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-5a1 1 0 0 1 1-1v-2l.005-.192A3.5 3.5 0 0 1 15.5 6.5zm0 7.5a.5.5 0 0 0-.492.41L15 14.5v2a.5.5 0 0 0 .992.09L16 16.5v-2a.5.5 0 0 0-.5-.5zm0-6a2 2 0 0 0-2 2v2h4v-2a2 2 0 0 0-2-2zm-9.25 8a.75.75 0 1 1 0 1.5H.75a.75.75 0 1 1 0-1.5h5.5zm0-5a.75.75 0 1 1 0 1.5H.75a.75.75 0 1 1 0-1.5h5.5zm3-5a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1 0-1.5h8.5zm6-5a.75.75 0 1 1 0 1.5H.75a.75.75 0 0 1 0-1.5h14.5z\\\"/></svg>\";\n\n/**\n * The restricted editing mode UI feature.\n *\n * It introduces the `'restrictedEditing'` dropdown that offers tools to navigate between exceptions across\n * the document.\n */ class RestrictedEditingModeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RestrictedEditingModeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('restrictedEditing', (locale)=>{\n            const dropdownView = createDropdown(locale);\n            const listItems = new Collection();\n            this._getButtonDefinitions().forEach(({ commandName, label, keystroke })=>{\n                listItems.add(this._getButtonDefinition(commandName, label, keystroke));\n            });\n            addListToDropdown(dropdownView, listItems, {\n                role: 'menu'\n            });\n            dropdownView.buttonView.set({\n                label: t('Navigate editable regions'),\n                icon: lockIcon,\n                tooltip: true,\n                isEnabled: true,\n                isOn: false\n            });\n            this.listenTo(dropdownView, 'execute', (evt)=>{\n                const { _commandName } = evt.source;\n                editor.execute(_commandName);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('menuBar:restrictedEditing', (locale)=>{\n            const menuView = new MenuBarMenuView(locale);\n            const listView = new MenuBarMenuListView(locale);\n            listView.set({\n                ariaLabel: t('Navigate editable regions'),\n                role: 'menu'\n            });\n            menuView.buttonView.set({\n                label: t('Navigate editable regions'),\n                icon: lockIcon\n            });\n            menuView.panelView.children.add(listView);\n            this._getButtonDefinitions().forEach(({ commandName, label, keystroke })=>{\n                const listItemView = new MenuBarMenuListItemView(locale, menuView);\n                const buttonView = this._createMenuBarButton(label, commandName, keystroke);\n                buttonView.delegate('execute').to(menuView);\n                listItemView.children.add(buttonView);\n                listView.items.add(listItemView);\n            });\n            return menuView;\n        });\n    }\n    /**\n\t * Creates a button for restricted editing command to use in menu bar.\n\t */ _createMenuBarButton(label, commandName, keystroke) {\n        const editor = this.editor;\n        const command = editor.commands.get(commandName);\n        const view = new MenuBarMenuListItemButtonView(editor.locale);\n        view.set({\n            label,\n            keystroke,\n            isEnabled: true,\n            isOn: false\n        });\n        view.bind('isEnabled').to(command);\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute(commandName);\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n    /**\n\t * Returns a definition of the navigation button to be used in the dropdown.\n\t *\n\t * @param commandName The name of the command that the button represents.\n\t * @param label The translated label of the button.\n\t * @param keystroke The button keystroke.\n\t */ _getButtonDefinition(commandName, label, keystroke) {\n        const editor = this.editor;\n        const command = editor.commands.get(commandName);\n        const definition = {\n            type: 'button',\n            model: new ViewModel({\n                label,\n                withText: true,\n                keystroke,\n                withKeystroke: true,\n                role: 'menuitem',\n                _commandName: commandName\n            })\n        };\n        definition.model.bind('isEnabled').to(command, 'isEnabled');\n        return definition;\n    }\n    /**\n\t * Returns definitions for UI buttons.\n\t *\n\t * @internal\n\t */ _getButtonDefinitions() {\n        const t = this.editor.locale.t;\n        return [\n            {\n                commandName: 'goToPreviousRestrictedEditingException',\n                label: t('Previous editable region'),\n                keystroke: 'Shift+Tab'\n            },\n            {\n                commandName: 'goToNextRestrictedEditingException',\n                label: t('Next editable region'),\n                keystroke: 'Tab'\n            }\n        ];\n    }\n}\n\n/**\n * The restricted editing mode plugin.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * The {@link module:restricted-editing/restrictededitingmodeediting~RestrictedEditingModeEditing restricted mode editing feature}.\n * * The {@link module:restricted-editing/restrictededitingmodeui~RestrictedEditingModeUI restricted mode UI feature}.\n */ class RestrictedEditingMode extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'RestrictedEditingMode';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            RestrictedEditingModeEditing,\n            RestrictedEditingModeUI\n        ];\n    }\n}\n\n/**\n * The command that toggles exceptions from the restricted editing on text.\n */ class RestrictedEditingExceptionCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = !!doc.selection.getAttribute('restrictedEditingException');\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'restrictedEditingException');\n    }\n    /**\n\t * @inheritDoc\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = document.selection;\n        const valueToSet = options.forceValue === undefined ? !this.value : options.forceValue;\n        model.change((writer)=>{\n            const ranges = model.schema.getValidRanges(selection.getRanges(), 'restrictedEditingException');\n            if (selection.isCollapsed) {\n                if (valueToSet) {\n                    writer.setSelectionAttribute('restrictedEditingException', valueToSet);\n                } else {\n                    const isSameException = (value)=>{\n                        return value.item.getAttribute('restrictedEditingException') === this.value;\n                    };\n                    const focus = selection.focus;\n                    const exceptionStart = focus.getLastMatchingPosition(isSameException, {\n                        direction: 'backward'\n                    });\n                    const exceptionEnd = focus.getLastMatchingPosition(isSameException);\n                    writer.removeSelectionAttribute('restrictedEditingException');\n                    if (!(focus.isEqual(exceptionStart) || focus.isEqual(exceptionEnd))) {\n                        writer.removeAttribute('restrictedEditingException', writer.createRange(exceptionStart, exceptionEnd));\n                    }\n                }\n            } else {\n                for (const range of ranges){\n                    if (valueToSet) {\n                        writer.setAttribute('restrictedEditingException', valueToSet, range);\n                    } else {\n                        writer.removeAttribute('restrictedEditingException', range);\n                    }\n                }\n            }\n        });\n    }\n}\n\n/**\n * The standard editing mode editing feature.\n *\n * * It introduces the `restrictedEditingException` text attribute that is rendered as\n * a `<span>` element with the `restricted-editing-exception` CSS class.\n * * It registers the `'restrictedEditingException'` command.\n */ class StandardEditingModeEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StandardEditingModeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.model.schema.extend('$text', {\n            allowAttributes: [\n                'restrictedEditingException'\n            ]\n        });\n        editor.conversion.for('upcast').elementToAttribute({\n            model: 'restrictedEditingException',\n            view: {\n                name: 'span',\n                classes: 'restricted-editing-exception'\n            }\n        });\n        editor.conversion.for('downcast').attributeToElement({\n            model: 'restrictedEditingException',\n            view: (modelAttributeValue, { writer })=>{\n                if (modelAttributeValue) {\n                    // Make the restricted editing <span> outer-most in the view.\n                    return writer.createAttributeElement('span', {\n                        class: 'restricted-editing-exception'\n                    }, {\n                        priority: -10\n                    });\n                }\n            }\n        });\n        editor.commands.add('restrictedEditingException', new RestrictedEditingExceptionCommand(editor));\n        editor.editing.view.change((writer)=>{\n            for (const root of editor.editing.view.document.roots){\n                writer.addClass('ck-restricted-editing_mode_standard', root);\n            }\n        });\n    }\n}\n\nvar unlockIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.25 16a.75.75 0 1 1 0 1.5H.75a.75.75 0 1 1 0-1.5h5.5zm0-5a.75.75 0 1 1 0 1.5H.75a.75.75 0 1 1 0-1.5h5.5zm3-5a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1 0-1.5h8.5zm6-5a.75.75 0 1 1 0 1.5H.75a.75.75 0 0 1 0-1.5h14.5zm.25 5.5a3.5 3.5 0 0 1 3.143 1.959.75.75 0 0 1-1.36.636A2 2 0 0 0 13.5 10v2H19a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1h-7a1 1 0 0 1-1-1v-5a1 1 0 0 1 1-1v-2l.005-.192A3.5 3.5 0 0 1 15.5 6.5zm0 7.5a.5.5 0 0 0-.492.41L15 14.5v2a.5.5 0 0 0 .992.09L16 16.5v-2a.5.5 0 0 0-.5-.5z\\\"/></svg>\";\n\n/**\n * The standard editing mode UI feature.\n *\n * It introduces the `'restrictedEditingException'` button that marks text as unrestricted for editing.\n */ class StandardEditingModeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StandardEditingModeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('restrictedEditingException', ()=>{\n            const button = this._createButton(ButtonView);\n            button.set({\n                tooltip: true,\n                isToggleable: true\n            });\n            return button;\n        });\n        editor.ui.componentFactory.add('menuBar:restrictedEditingException', ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Creates a button for restricted editing exception command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = this.editor.commands.get('restrictedEditingException');\n        const view = new ButtonClass(locale);\n        const t = locale.t;\n        view.icon = unlockIcon;\n        view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n        view.bind('label').to(command, 'value', (value)=>{\n            return value ? t('Disable editing') : t('Enable editing');\n        });\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('restrictedEditingException');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The standard editing mode plugin.\n *\n * This is a \"glue\" plugin that loads the following plugins:\n *\n * * The {@link module:restricted-editing/standardeditingmodeediting~StandardEditingModeEditing standard mode editing feature}.\n * * The {@link module:restricted-editing/standardeditingmodeui~StandardEditingModeUI standard mode UI feature}.\n */ class StandardEditingMode extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StandardEditingMode';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    static get requires() {\n        return [\n            StandardEditingModeEditing,\n            StandardEditingModeUI\n        ];\n    }\n}\n\nexport { RestrictedEditingMode, RestrictedEditingModeEditing, RestrictedEditingModeUI, StandardEditingMode, StandardEditingModeEditing, StandardEditingModeUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The show blocks command.\n *\n * Displays the HTML element names for content blocks.\n */ class ShowBlocksCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n        this.value = false;\n    }\n    /**\n\t * Toggles the visibility of content blocks.\n\t */ execute() {\n        const CLASS_NAME = 'ck-show-blocks';\n        const view = this.editor.editing.view;\n        view.change((writer)=>{\n            // Multiroot support.\n            for (const root of view.document.roots){\n                if (!root.hasClass(CLASS_NAME)) {\n                    writer.addClass(CLASS_NAME, root);\n                    this.value = true;\n                } else {\n                    writer.removeClass(CLASS_NAME, root);\n                    this.value = false;\n                }\n            }\n        });\n    }\n}\n\n/**\n * The show blocks editing plugin.\n */ class ShowBlocksEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ShowBlocksEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const { editor } = this;\n        editor.commands.add('showBlocks', new ShowBlocksCommand(editor));\n    }\n}\n\nvar showBlocksIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m6.395 9.196 2.545-.007V6.498a.598.598 0 0 1 .598-.598h.299a.598.598 0 0 1 .598.598v6.877a.598.598 0 0 1-.598.598h-.299a.598.598 0 0 1-.598-.598v-2.691l-2.545.007v2.691a.598.598 0 0 1-.598.598h-.299a.598.598 0 0 1-.598-.598V6.505a.598.598 0 0 1 .598-.598h.299a.598.598 0 0 1 .598.598v2.691Z\\\"/><path d=\\\"M15.094 13.417V6.462a.562.562 0 0 0-.562-.562h-.782a1 1 0 0 0-.39.08l-1.017.43a.562.562 0 0 0-.343.517v.197c0 .4.406.67.775.519l.819-.337v6.111c0 .31.251.562.561.562h.377c.31 0 .562-.251.562-.562Z\\\"/><path d=\\\"M0 15.417v1.5h1.5v-1.5H0Z\\\"/><path d=\\\"M18.5 15.417v1.5H20v-1.5h-1.5Z\\\"/><path d=\\\"M18.5 12.333v1.5H20v-1.5h-1.5Z\\\"/><path d=\\\"M18.5 9.25v1.5H20v-1.5h-1.5Z\\\"/><path d=\\\"M18.5 6.167v1.5H20v-1.5h-1.5Z\\\"/><path d=\\\"M0 18.5v.5a1 1 0 0 0 1 1h.5v-1.5H0Z\\\"/><path d=\\\"M3.083 18.5V20h1.5v-1.5h-1.5Z\\\"/><path d=\\\"M6.167 18.5V20h1.5v-1.5h-1.5Z\\\"/><path d=\\\"M9.25 18.5V20h1.5v-1.5h-1.5Z\\\"/><path d=\\\"M12.333 18.5V20h1.5v-1.5h-1.5Z\\\"/><path d=\\\"M15.417 18.5V20h1.5v-1.5h-1.5Z\\\"/><path d=\\\"M18.5 18.5V20h.5a1 1 0 0 0 1-1v-.5h-1.5Z\\\"/><path clip-rule=\\\"evenodd\\\" d=\\\"M0 1a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1v3.583h-1.5V1.5h-17v12.333H0V1Z\\\"/></svg>\";\n\n/**\n * The UI plugin of the show blocks feature.\n *\n * It registers the `'showBlocks'` UI button in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}\n * that toggles the visibility of the HTML element names of content blocks.\n */ class ShowBlocksUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ShowBlocksUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('showBlocks', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true,\n                icon: showBlocksIcon\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:showBlocks', ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Creates a button for show blocks command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('showBlocks');\n        const view = new ButtonClass(locale);\n        const t = locale.t;\n        view.set({\n            label: t('Show blocks'),\n            isToggleable: true,\n            role: 'menuitemcheckbox'\n        });\n        view.bind('isEnabled').to(command);\n        view.bind('isOn').to(command, 'value', command, 'isEnabled', (value, isEnabled)=>value && isEnabled);\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('showBlocks');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The show blocks feature.\n *\n * For a detailed overview, check the {@glink features/show-blocks Show blocks} feature guide.\n */ class ShowBlocks extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ShowBlocks';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ShowBlocksEditing,\n            ShowBlocksUI\n        ];\n    }\n}\n\nexport { ShowBlocks, ShowBlocksCommand, ShowBlocksEditing, ShowBlocksUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { ElementReplacer, CKEditorError, createElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module source-editing/utils/formathtml\n */ /**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param input An HTML string to format.\n */ function formatHtml(input) {\n    // A list of block-like elements around which the new lines should be inserted, and within which\n    // the indentation of their children should be increased.\n    // The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n    // a full list of HTML block-level elements.\n    // A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n    // Note that <pre> element is not listed on this list to avoid breaking whitespace formatting.\n    // Note that <br> element is not listed and handled separately so no additional white spaces are injected.\n    const elementsToFormat = [\n        {\n            name: 'address',\n            isVoid: false\n        },\n        {\n            name: 'article',\n            isVoid: false\n        },\n        {\n            name: 'aside',\n            isVoid: false\n        },\n        {\n            name: 'blockquote',\n            isVoid: false\n        },\n        {\n            name: 'details',\n            isVoid: false\n        },\n        {\n            name: 'dialog',\n            isVoid: false\n        },\n        {\n            name: 'dd',\n            isVoid: false\n        },\n        {\n            name: 'div',\n            isVoid: false\n        },\n        {\n            name: 'dl',\n            isVoid: false\n        },\n        {\n            name: 'dt',\n            isVoid: false\n        },\n        {\n            name: 'fieldset',\n            isVoid: false\n        },\n        {\n            name: 'figcaption',\n            isVoid: false\n        },\n        {\n            name: 'figure',\n            isVoid: false\n        },\n        {\n            name: 'footer',\n            isVoid: false\n        },\n        {\n            name: 'form',\n            isVoid: false\n        },\n        {\n            name: 'h1',\n            isVoid: false\n        },\n        {\n            name: 'h2',\n            isVoid: false\n        },\n        {\n            name: 'h3',\n            isVoid: false\n        },\n        {\n            name: 'h4',\n            isVoid: false\n        },\n        {\n            name: 'h5',\n            isVoid: false\n        },\n        {\n            name: 'h6',\n            isVoid: false\n        },\n        {\n            name: 'header',\n            isVoid: false\n        },\n        {\n            name: 'hgroup',\n            isVoid: false\n        },\n        {\n            name: 'hr',\n            isVoid: true\n        },\n        {\n            name: 'li',\n            isVoid: false\n        },\n        {\n            name: 'main',\n            isVoid: false\n        },\n        {\n            name: 'nav',\n            isVoid: false\n        },\n        {\n            name: 'ol',\n            isVoid: false\n        },\n        {\n            name: 'p',\n            isVoid: false\n        },\n        {\n            name: 'section',\n            isVoid: false\n        },\n        {\n            name: 'table',\n            isVoid: false\n        },\n        {\n            name: 'tbody',\n            isVoid: false\n        },\n        {\n            name: 'td',\n            isVoid: false\n        },\n        {\n            name: 'th',\n            isVoid: false\n        },\n        {\n            name: 'thead',\n            isVoid: false\n        },\n        {\n            name: 'tr',\n            isVoid: false\n        },\n        {\n            name: 'ul',\n            isVoid: false\n        }\n    ];\n    const elementNamesToFormat = elementsToFormat.map((element)=>element.name).join('|');\n    // It is not the fastest way to format the HTML markup but the performance should be good enough.\n    const lines = input// Add new line before and after `<tag>` and `</tag>`.\n    // It may separate individual elements with two new lines, but this will be fixed below.\n    .replace(new RegExp(`</?(${elementNamesToFormat})( .*?)?>`, 'g'), '\\n$&\\n')// Keep `<br>`s at the end of line to avoid adding additional whitespaces before `<br>`.\n    .replace(/<br[^>]*>/g, '$&\\n')// Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n    .split('\\n');\n    let indentCount = 0;\n    let isPreformattedLine = false;\n    return lines.filter((line)=>line.length).map((line)=>{\n        isPreformattedLine = isPreformattedBlockLine(line, isPreformattedLine);\n        if (isNonVoidOpeningTag(line, elementsToFormat)) {\n            return indentLine(line, indentCount++);\n        }\n        if (isClosingTag(line, elementsToFormat)) {\n            return indentLine(line, --indentCount);\n        }\n        if (isPreformattedLine === 'middle' || isPreformattedLine === 'last') {\n            return line;\n        }\n        return indentLine(line, indentCount);\n    }).join('\\n');\n}\n/**\n * Checks, if an argument is an opening tag of a non-void element to be formatted.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */ function isNonVoidOpeningTag(line, elementsToFormat) {\n    return elementsToFormat.some((element)=>{\n        if (element.isVoid) {\n            return false;\n        }\n        if (!new RegExp(`<${element.name}( .*?)?>`).test(line)) {\n            return false;\n        }\n        return true;\n    });\n}\n/**\n * Checks, if an argument is a closing tag.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */ function isClosingTag(line, elementsToFormat) {\n    return elementsToFormat.some((element)=>{\n        return new RegExp(`</${element.name}>`).test(line);\n    });\n}\n/**\n * Indents a line by a specified number of characters.\n *\n * @param line Line to indent.\n * @param indentCount Number of characters to use for indentation.\n * @param indentChar Indentation character(s). 4 spaces by default.\n */ function indentLine(line, indentCount, indentChar = '    ') {\n    // More about Math.max() here in https://github.com/ckeditor/ckeditor5/issues/10698.\n    return `${indentChar.repeat(Math.max(0, indentCount))}${line}`;\n}\n/**\n * Checks whether a line belongs to a preformatted (`<pre>`) block.\n *\n * @param line Line to check.\n * @param isPreviousLinePreFormatted Information on whether the previous line was preformatted (and how).\n */ function isPreformattedBlockLine(line, isPreviousLinePreFormatted) {\n    if (new RegExp('<pre( .*?)?>').test(line)) {\n        return 'first';\n    } else if (new RegExp('</pre>').test(line)) {\n        return 'last';\n    } else if (isPreviousLinePreFormatted === 'first' || isPreviousLinePreFormatted === 'middle') {\n        return 'middle';\n    } else {\n        return false;\n    }\n}\n\nvar sourceEditingIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.5 0 5 4.5v15.003h-16V0h11zM3 1.5v3.25l-1.497 1-.003 8 1.5 1v3.254L7.685 18l-.001 1.504H17.5V8.002L16 9.428l-.004-4.22-4.222-3.692L3 1.5z\\\"/><path d=\\\"M4.06 6.64a.75.75 0 0 1 .958 1.15l-.085.07L2.29 9.75l2.646 1.89c.302.216.4.62.232.951l-.058.095a.75.75 0 0 1-.951.232l-.095-.058-3.5-2.5V9.14l3.496-2.5zm4.194 6.22a.75.75 0 0 1-.958-1.149l.085-.07 2.643-1.89-2.646-1.89a.75.75 0 0 1-.232-.952l.058-.095a.75.75 0 0 1 .95-.232l.096.058 3.5 2.5v1.22l-3.496 2.5zm7.644-.836 2.122 2.122-5.825 5.809-2.125-.005.003-2.116zm2.539-1.847 1.414 1.414a.5.5 0 0 1 0 .707l-1.06 1.06-2.122-2.12 1.061-1.061a.5.5 0 0 1 .707 0z\\\"/></svg>\";\n\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n */ class SourceEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SourceEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PendingActions\n        ];\n    }\n    /**\n\t * The element replacer instance used to replace the editing roots with the wrapper elements containing the document source.\n\t */ _elementReplacer;\n    /**\n\t * Maps all root names to wrapper elements containing the document source.\n\t */ _replacedRoots;\n    /**\n\t * Maps all root names to their document data.\n\t */ _dataFromRoots;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.set('isSourceEditingMode', false);\n        this._elementReplacer = new ElementReplacer();\n        this._replacedRoots = new Map();\n        this._dataFromRoots = new Map();\n        editor.config.define('sourceEditing.allowCollaborationFeatures', false);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._checkCompatibility();\n        const editor = this.editor;\n        const t = editor.locale.t;\n        editor.ui.componentFactory.add('sourceEditing', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                label: t('Source'),\n                icon: sourceEditingIcon,\n                tooltip: true,\n                class: 'ck-source-editing-button'\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:sourceEditing', ()=>{\n            const buttonView = this._createButton(MenuBarMenuListItemButtonView);\n            buttonView.set({\n                label: t('Show source'),\n                role: 'menuitemcheckbox'\n            });\n            return buttonView;\n        });\n        // Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n        // integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n        if (this._isAllowedToHandleSourceEditingMode()) {\n            this.on('change:isSourceEditingMode', (evt, name, isSourceEditingMode)=>{\n                if (isSourceEditingMode) {\n                    this._hideVisibleDialog();\n                    this._showSourceEditing();\n                    this._disableCommands();\n                } else {\n                    this._hideSourceEditing();\n                    this._enableCommands();\n                }\n            });\n            this.on('change:isEnabled', (evt, name, isEnabled)=>this._handleReadOnlyMode(!isEnabled));\n            this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly)=>this._handleReadOnlyMode(isReadOnly));\n        }\n        // Update the editor data while calling editor.getData() in the source editing mode.\n        editor.data.on('get', ()=>{\n            if (this.isSourceEditingMode) {\n                this.updateEditorData();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Updates the source data in all hidden editing roots.\n\t */ updateEditorData() {\n        const editor = this.editor;\n        const data = {};\n        for (const [rootName, domSourceEditingElementWrapper] of this._replacedRoots){\n            const oldData = this._dataFromRoots.get(rootName);\n            const newData = domSourceEditingElementWrapper.dataset.value;\n            // Do not set the data unless some changes have been made in the meantime.\n            // This prevents empty undo steps after switching to the normal editor.\n            if (oldData !== newData) {\n                data[rootName] = newData;\n                this._dataFromRoots.set(rootName, newData);\n            }\n        }\n        if (Object.keys(data).length) {\n            editor.data.set(data, {\n                batchType: {\n                    isUndoable: true\n                },\n                suppressErrorInCollaboration: true\n            });\n        }\n    }\n    _checkCompatibility() {\n        const editor = this.editor;\n        const allowCollaboration = editor.config.get('sourceEditing.allowCollaborationFeatures');\n        if (!allowCollaboration && editor.plugins.has('RealTimeCollaborativeEditing')) {\n            /**\n\t\t\t * Source editing feature is not fully compatible with real-time collaboration,\n\t\t\t * and using it may lead to data loss. Please read\n\t\t\t * {@glink features/source-editing#limitations-and-incompatibilities source editing feature guide} to learn more.\n\t\t\t *\n\t\t\t * If you understand the possible risk of data loss, you can enable the source editing\n\t\t\t * by setting the\n\t\t\t * {@link module:source-editing/sourceeditingconfig~SourceEditingConfig#allowCollaborationFeatures}\n\t\t\t * configuration flag to `true`.\n\t\t\t *\n\t\t\t * @error source-editing-incompatible-with-real-time-collaboration\n\t\t\t */ throw new CKEditorError('source-editing-incompatible-with-real-time-collaboration', null);\n        }\n        const collaborationPluginNamesToWarn = [\n            'CommentsEditing',\n            'TrackChangesEditing',\n            'RevisionHistory'\n        ];\n        // Currently, the basic integration with Collaboration Features is to display a warning in the console.\n        //\n        // If `allowCollaboration` flag is set, do not show these warnings. If the flag is set, we assume that the integrator read\n        // appropriate section of the guide so there's no use to spam the console with warnings.\n        //\n        if (!allowCollaboration && collaborationPluginNamesToWarn.some((pluginName)=>editor.plugins.has(pluginName))) {\n            console.warn('You initialized the editor with the source editing feature and at least one of the collaboration features. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the collaboration features.');\n        }\n        // Restricted Editing integration can also lead to problems. Warn the user accordingly.\n        if (editor.plugins.has('RestrictedEditingModeEditing')) {\n            console.warn('You initialized the editor with the source editing feature and restricted editing feature. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the restricted editing feature.');\n        }\n    }\n    /**\n\t * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n\t * root.\n\t *\n\t * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n\t * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n\t * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n\t * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n\t * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n\t * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n\t * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n\t * Since both children occupy the same grid cell, both have always the same height.\n\t */ _showSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        model.change((writer)=>{\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n        });\n        // It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n        // main root, but this code may help understand and use this feature in external integrations.\n        for (const [rootName, domRootElement] of editingView.domRoots){\n            const data = formatSource(editor.data.get({\n                rootName\n            }));\n            const domSourceEditingElementTextarea = createElement(domRootElement.ownerDocument, 'textarea', {\n                rows: '1',\n                'aria-label': 'Source code editing area'\n            });\n            const domSourceEditingElementWrapper = createElement(domRootElement.ownerDocument, 'div', {\n                class: 'ck-source-editing-area',\n                'data-value': data\n            }, [\n                domSourceEditingElementTextarea\n            ]);\n            domSourceEditingElementTextarea.value = data;\n            // Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n            domSourceEditingElementTextarea.setSelectionRange(0, 0);\n            // Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n            // wrapper's `data-value` property.\n            domSourceEditingElementTextarea.addEventListener('input', ()=>{\n                domSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n                editor.ui.update();\n            });\n            editingView.change((writer)=>{\n                const viewRoot = editingView.document.getRoot(rootName);\n                writer.addClass('ck-hidden', viewRoot);\n            });\n            // Register the element so it becomes available for Alt+F10 and Esc navigation.\n            editor.ui.setEditableElement('sourceEditing:' + rootName, domSourceEditingElementTextarea);\n            this._replacedRoots.set(rootName, domSourceEditingElementWrapper);\n            this._elementReplacer.replace(domRootElement, domSourceEditingElementWrapper);\n            this._dataFromRoots.set(rootName, data);\n        }\n        this._focusSourceEditing();\n    }\n    /**\n\t * Restores all hidden editing roots and sets the source data in them.\n\t */ _hideSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this.updateEditorData();\n        editingView.change((writer)=>{\n            for (const [rootName] of this._replacedRoots){\n                writer.removeClass('ck-hidden', editingView.document.getRoot(rootName));\n            }\n        });\n        this._elementReplacer.restore();\n        this._replacedRoots.clear();\n        this._dataFromRoots.clear();\n        editingView.focus();\n    }\n    /**\n\t * Focuses the textarea containing document source from the first editing root.\n\t */ _focusSourceEditing() {\n        const editor = this.editor;\n        const [domSourceEditingElementWrapper] = this._replacedRoots.values();\n        const textarea = domSourceEditingElementWrapper.querySelector('textarea');\n        // The FocusObserver was disabled by View.render() while the DOM root was getting hidden and the replacer\n        // revealed the textarea. So it couldn't notice that the DOM root got blurred in the process.\n        // Let's sync this state manually here because otherwise Renderer will attempt to render selection\n        // in an invisible DOM root.\n        editor.editing.view.document.isFocused = false;\n        textarea.focus();\n    }\n    /**\n\t * Disables all commands.\n\t */ _disableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()){\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n        // Comments archive UI plugin will be disabled manually too.\n        if (editor.plugins.has('CommentsArchiveUI')) {\n            editor.plugins.get('CommentsArchiveUI').forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n\t */ _enableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()){\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n        // Comments archive UI plugin will be enabled manually too.\n        if (editor.plugins.has('CommentsArchiveUI')) {\n            editor.plugins.get('CommentsArchiveUI').clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n\t *\n\t * @param isReadOnly Indicates whether all textarea elements should be read-only.\n\t */ _handleReadOnlyMode(isReadOnly) {\n        if (!this.isSourceEditingMode) {\n            return;\n        }\n        for (const [, domSourceEditingElementWrapper] of this._replacedRoots){\n            domSourceEditingElementWrapper.querySelector('textarea').readOnly = isReadOnly;\n        }\n    }\n    /**\n\t * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n\t * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n\t */ _isAllowedToHandleSourceEditingMode() {\n        const editor = this.editor;\n        const editable = editor.ui.view.editable;\n        // Checks, if the editor's editable belongs to the editor's DOM tree.\n        return editable && !editable.hasExternalElement;\n    }\n    /**\n\t * If any {@link module:ui/dialog/dialogview~DialogView editor dialog} is currently visible, hide it.\n\t */ _hideVisibleDialog() {\n        if (this.editor.plugins.has('Dialog')) {\n            const dialogPlugin = this.editor.plugins.get('Dialog');\n            if (dialogPlugin.isOpen) {\n                dialogPlugin.hide();\n            }\n        }\n    }\n    _createButton(ButtonClass) {\n        const editor = this.editor;\n        const buttonView = new ButtonClass(editor.locale);\n        buttonView.set({\n            withText: true,\n            isToggleable: true\n        });\n        buttonView.bind('isOn').to(this, 'isSourceEditingMode');\n        // The button should be disabled if one of the following conditions is met:\n        buttonView.bind('isEnabled').to(this, 'isEnabled', editor, 'isReadOnly', editor.plugins.get(PendingActions), 'hasAny', (isEnabled, isEditorReadOnly, hasAnyPendingActions)=>{\n            // (1) The plugin itself is disabled.\n            if (!isEnabled) {\n                return false;\n            }\n            // (2) The editor is in read-only mode.\n            if (isEditorReadOnly) {\n                return false;\n            }\n            // (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n            // until the model is finally set.\n            if (hasAnyPendingActions) {\n                return false;\n            }\n            return true;\n        });\n        this.listenTo(buttonView, 'execute', ()=>{\n            this.isSourceEditingMode = !this.isSourceEditingMode;\n        });\n        return buttonView;\n    }\n}\n/**\n * Formats the content for a better readability.\n *\n * For a non-HTML source the unchanged input string is returned.\n *\n * @param input Input string to check.\n */ function formatSource(input) {\n    if (!isHtml(input)) {\n        return input;\n    }\n    return formatHtml(input);\n}\n/**\n * Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n *\n * @param input Input string to check.\n */ function isHtml(input) {\n    return input.startsWith('<');\n}\n\nexport { SourceEditing };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Typing } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { View, addKeyboardHandlingForGrid, ButtonView, FocusCycler, LabeledFieldView, createLabeledDropdown, ViewModel, addListToDropdown, Dialog, MenuBarMenuListItemButtonView, DialogViewPosition } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { FocusTracker, KeystrokeHandler, global, Collection, CKEditorError } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * A grid of character tiles. It allows browsing special characters and selecting the character to\n * be inserted into the content.\n */ class CharacterGridView extends View {\n    /**\n\t * A collection of the child tile views. Each tile represents a particular character.\n\t */ tiles;\n    /**\n\t * Tracks information about the DOM focus in the grid.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * Creates an instance of a character grid containing tiles representing special characters.\n\t *\n\t * @param locale The localization services instance.\n\t */ constructor(locale){\n        super(locale);\n        this.tiles = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-character-grid__tiles'\n                        ]\n                    },\n                    children: this.tiles\n                }\n            ],\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-character-grid'\n                ]\n            }\n        });\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.tiles,\n            numberOfColumns: ()=>global.window.getComputedStyle(this.element.firstChild) // Responsive .ck-character-grid__tiles\n                .getPropertyValue('grid-template-columns').split(' ').length,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n    }\n    /**\n\t * Creates a new tile for the grid.\n\t *\n\t * @param character A human-readable character displayed as the label (e.g. \"ε\").\n\t * @param name The name of the character (e.g. \"greek small letter epsilon\").\n\t */ createTile(character, name) {\n        const tile = new ButtonView(this.locale);\n        tile.set({\n            label: character,\n            withText: true,\n            class: 'ck-character-grid__tile'\n        });\n        // Labels are vital for the users to understand what character they're looking at.\n        // For now we're using native title attribute for that, see #5817.\n        tile.extendTemplate({\n            attributes: {\n                title: name\n            },\n            on: {\n                mouseover: tile.bindTemplate.to('mouseover'),\n                focus: tile.bindTemplate.to('focus')\n            }\n        });\n        tile.on('mouseover', ()=>{\n            this.fire('tileHover', {\n                name,\n                character\n            });\n        });\n        tile.on('focus', ()=>{\n            this.fire('tileFocus', {\n                name,\n                character\n            });\n        });\n        tile.on('execute', ()=>{\n            this.fire('execute', {\n                name,\n                character\n            });\n        });\n        return tile;\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        for (const item of this.tiles){\n            this.focusTracker.add(item.element);\n        }\n        this.tiles.on('change', (eventInfo, { added, removed })=>{\n            if (added.length > 0) {\n                for (const item of added){\n                    this.focusTracker.add(item.element);\n                }\n            }\n            if (removed.length > 0) {\n                for (const item of removed){\n                    this.focusTracker.remove(item.element);\n                }\n            }\n        });\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the first focusable in {@link ~CharacterGridView#tiles}.\n\t */ focus() {\n        this.tiles.first.focus();\n    }\n}\n\n/**\n * The view displaying detailed information about a special character glyph, e.g. upon\n * hovering it with a mouse.\n */ class CharacterInfoView extends View {\n    constructor(locale){\n        super(locale);\n        const bind = this.bindTemplate;\n        this.set('character', null);\n        this.set('name', null);\n        this.bind('code').to(this, 'character', characterToUnicodeString);\n        this.setTemplate({\n            tag: 'div',\n            children: [\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck-character-info__name'\n                        ]\n                    },\n                    children: [\n                        {\n                            // Note: ZWSP to prevent vertical collapsing.\n                            text: bind.to('name', (name)=>name ? name : '\\u200B')\n                        }\n                    ]\n                },\n                {\n                    tag: 'span',\n                    attributes: {\n                        class: [\n                            'ck-character-info__code'\n                        ]\n                    },\n                    children: [\n                        {\n                            text: bind.to('code')\n                        }\n                    ]\n                }\n            ],\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-character-info'\n                ]\n            }\n        });\n    }\n}\n/**\n * Converts a character into a \"Unicode string\", for instance:\n *\n * \"$\" -> \"U+0024\"\n *\n * Returns an empty string when the character is `null`.\n */ function characterToUnicodeString(character) {\n    if (character === null) {\n        return '';\n    }\n    const hexCode = character.codePointAt(0).toString(16);\n    return 'U+' + ('0000' + hexCode).slice(-4);\n}\n\n/**\n * A view that glues pieces of the special characters dropdown panel together:\n *\n * * the navigation view (allows selecting the category),\n * * the grid view (displays characters as a grid),\n * * and the info view (displays detailed info about a specific character).\n */ class SpecialCharactersView extends View {\n    /**\n\t * A collection of the focusable children of the view.\n\t */ items;\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * Helps cycling over focusable {@link #items} in the view.\n\t */ _focusCycler;\n    /**\n\t * An instance of the `SpecialCharactersCategoriesView`.\n\t */ categoriesView;\n    /**\n\t * An instance of the `CharacterGridView`.\n\t */ gridView;\n    /**\n\t * An instance of the `CharacterInfoView`.\n\t */ infoView;\n    /**\n\t * Creates an instance of the `SpecialCharactersView`.\n\t */ constructor(locale, categoriesView, gridView, infoView){\n        super(locale);\n        this.categoriesView = categoriesView;\n        this.gridView = gridView;\n        this.infoView = infoView;\n        this.items = this.createCollection();\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this._focusCycler = new FocusCycler({\n            focusables: this.items,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                focusPrevious: 'shift + tab',\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            children: [\n                this.categoriesView,\n                this.gridView,\n                this.infoView\n            ],\n            attributes: {\n                // Avoid focus loss when the user clicks the area of the grid that is not a button.\n                // https://github.com/ckeditor/ckeditor5/pull/12319#issuecomment-1231779819\n                tabindex: '-1'\n            }\n        });\n        this.items.add(this.categoriesView);\n        this.items.add(this.gridView);\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this.focusTracker.add(this.categoriesView.element);\n        this.focusTracker.add(this.gridView.element);\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n    /**\n\t * Focuses the first focusable in {@link #items}.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n}\n\nvar specialCharactersIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10 2.5a7.47 7.47 0 0 1 4.231 1.31 7.268 7.268 0 0 1 2.703 3.454 7.128 7.128 0 0 1 .199 4.353c-.39 1.436-1.475 2.72-2.633 3.677h2.013c0-.226.092-.443.254-.603a.876.876 0 0 1 1.229 0c.163.16.254.377.254.603v.853c0 .209-.078.41-.22.567a.873.873 0 0 1-.547.28l-.101.006h-4.695a.517.517 0 0 1-.516-.518v-1.265c0-.21.128-.398.317-.489a5.601 5.601 0 0 0 2.492-2.371 5.459 5.459 0 0 0 .552-3.693 5.53 5.53 0 0 0-1.955-3.2A5.71 5.71 0 0 0 10 4.206 5.708 5.708 0 0 0 6.419 5.46 5.527 5.527 0 0 0 4.46 8.663a5.457 5.457 0 0 0 .554 3.695 5.6 5.6 0 0 0 2.497 2.37.55.55 0 0 1 .317.49v1.264c0 .286-.23.518-.516.518H2.618a.877.877 0 0 1-.614-.25.845.845 0 0 1-.254-.603v-.853c0-.226.091-.443.254-.603a.876.876 0 0 1 1.228 0c.163.16.255.377.255.603h1.925c-1.158-.958-2.155-2.241-2.545-3.678a7.128 7.128 0 0 1 .199-4.352 7.268 7.268 0 0 1 2.703-3.455A7.475 7.475 0 0 1 10 2.5z\\\"/></svg>\";\n\n/**\n * A class representing the navigation part of the special characters UI. It is responsible\n * for describing the feature and allowing the user to select a particular character group.\n */ class SpecialCharactersCategoriesView extends View {\n    _groupNames;\n    _dropdownView;\n    /**\n\t * Creates an instance of the {@link module:special-characters/ui/specialcharacterscategoriesview~SpecialCharactersCategoriesView}\n\t * class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param groupNames The names of the character groups.\n\t */ constructor(locale, groupNames){\n        super(locale);\n        this.set('currentGroupName', Array.from(groupNames.entries())[0][0]);\n        this._groupNames = groupNames;\n        this._dropdownView = new LabeledFieldView(locale, createLabeledDropdown);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-character-categories'\n                ]\n            },\n            children: [\n                this._dropdownView\n            ]\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        this._setupDropdown();\n    }\n    /**\n\t * @inheritDoc\n\t */ focus() {\n        this._dropdownView.focus();\n    }\n    /**\n\t * Creates dropdown item list, sets up bindings and fills properties.\n\t */ _setupDropdown() {\n        const items = new Collection();\n        for (const [name, label] of this._groupNames){\n            const item = {\n                type: 'button',\n                model: new ViewModel({\n                    name,\n                    label,\n                    role: 'menuitemradio',\n                    withText: true\n                })\n            };\n            item.model.bind('isOn').to(this, 'currentGroupName', (value)=>{\n                return value === name;\n            });\n            items.add(item);\n        }\n        const t = this.locale.t;\n        const accessibleLabel = t('Category');\n        this._dropdownView.set({\n            label: accessibleLabel,\n            isEmpty: false\n        });\n        this._dropdownView.fieldView.panelPosition = this.locale.uiLanguageDirection === 'rtl' ? 'se' : 'sw';\n        this._dropdownView.fieldView.buttonView.set({\n            withText: true,\n            tooltip: accessibleLabel,\n            ariaLabel: accessibleLabel,\n            ariaLabelledBy: undefined,\n            isOn: false\n        });\n        this._dropdownView.fieldView.buttonView.bind('label').to(this, 'currentGroupName', (value)=>this._groupNames.get(value));\n        this._dropdownView.fieldView.on('execute', ({ source })=>{\n            this.currentGroupName = source.name;\n        });\n        addListToDropdown(this._dropdownView.fieldView, items, {\n            ariaLabel: accessibleLabel,\n            role: 'menu'\n        });\n    }\n}\n\nconst ALL_SPECIAL_CHARACTERS_GROUP = 'All';\n/**\n * The special characters feature.\n *\n * Introduces the `'specialCharacters'` dropdown.\n */ class SpecialCharacters extends Plugin {\n    /**\n\t * Registered characters. A pair of a character name and its symbol.\n\t */ _characters;\n    /**\n\t * Registered groups. Each group contains a displayed label and a collection with symbol names.\n\t */ _groups;\n    /**\n\t * A label describing the \"All\" special characters category.\n\t */ _allSpecialCharactersGroupLabel;\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Typing,\n            Dialog\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharacters';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        const t = editor.t;\n        this._characters = new Map();\n        this._groups = new Map();\n        this._allSpecialCharactersGroupLabel = t('All');\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('specialCharacters', ()=>{\n            const button = this._createDialogButton(ButtonView);\n            button.set({\n                tooltip: true\n            });\n            return button;\n        });\n        editor.ui.componentFactory.add('menuBar:specialCharacters', ()=>{\n            return this._createDialogButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Adds a collection of special characters to the specified group. The title of a special character must be unique.\n\t *\n\t * **Note:** The \"All\" category name is reserved by the plugin and cannot be used as a new name for a special\n\t * characters category.\n\t */ addItems(groupName, items, options = {\n        label: groupName\n    }) {\n        if (groupName === ALL_SPECIAL_CHARACTERS_GROUP) {\n            /**\n\t\t\t * The name \"All\" for a special category group cannot be used because it is a special category that displays all\n\t\t\t * available special characters.\n\t\t\t *\n\t\t\t * @error special-character-invalid-group-name\n\t\t\t */ throw new CKEditorError('special-character-invalid-group-name', null);\n        }\n        const group = this._getGroup(groupName, options.label);\n        for (const item of items){\n            group.items.add(item.title);\n            this._characters.set(item.title, item.character);\n        }\n    }\n    /**\n\t * Returns special character groups in an order determined based on configuration and registration sequence.\n\t */ getGroups() {\n        const groups = Array.from(this._groups.keys());\n        const order = this.editor.config.get('specialCharacters.order') || [];\n        const invalidGroup = order.find((item)=>!groups.includes(item));\n        if (invalidGroup) {\n            /**\n\t\t\t * One of the special character groups in the \"specialCharacters.order\" configuration doesn't exist.\n\t\t\t *\n\t\t\t * @error special-character-invalid-order-group-name\n\t\t\t */ throw new CKEditorError('special-character-invalid-order-group-name', null, {\n                invalidGroup\n            });\n        }\n        return new Set([\n            ...order,\n            ...groups\n        ]);\n    }\n    /**\n\t * Returns a collection of special characters symbol names (titles).\n\t */ getCharactersForGroup(groupName) {\n        if (groupName === ALL_SPECIAL_CHARACTERS_GROUP) {\n            return new Set(this._characters.keys());\n        }\n        const group = this._groups.get(groupName);\n        if (group) {\n            return group.items;\n        }\n    }\n    /**\n\t * Returns the symbol of a special character for the specified name. If the special character could not be found, `undefined`\n\t * is returned.\n\t *\n\t * @param title The title of a special character.\n\t */ getCharacter(title) {\n        return this._characters.get(title);\n    }\n    /**\n\t * Returns a group of special characters. If the group with the specified name does not exist, it will be created.\n\t *\n\t * @param groupName The name of the group to create.\n\t * @param label The label describing the new group.\n\t */ _getGroup(groupName, label) {\n        if (!this._groups.has(groupName)) {\n            this._groups.set(groupName, {\n                items: new Set(),\n                label\n            });\n        }\n        return this._groups.get(groupName);\n    }\n    /**\n\t * Updates the symbol grid depending on the currently selected character group.\n\t */ _updateGrid(currentGroupName, gridView) {\n        // Updating the grid starts with removing all tiles belonging to the old group.\n        gridView.tiles.clear();\n        const characterTitles = this.getCharactersForGroup(currentGroupName);\n        for (const title of characterTitles){\n            const character = this.getCharacter(title);\n            gridView.tiles.add(gridView.createTile(character, title));\n        }\n    }\n    /**\n\t * Initializes the dropdown, used for lazy loading.\n\t *\n\t * @returns An object with `categoriesView`, `gridView` and `infoView` properties, containing UI parts.\n\t */ _createDropdownPanelContent(locale) {\n        const groupEntries = Array.from(this.getGroups()).map((name)=>[\n                name,\n                this._groups.get(name).label\n            ]);\n        // The map contains a name of category (an identifier) and its label (a translational string).\n        const specialCharsGroups = new Map([\n            // Add a special group that shows all available special characters.\n            [\n                ALL_SPECIAL_CHARACTERS_GROUP,\n                this._allSpecialCharactersGroupLabel\n            ],\n            ...groupEntries\n        ]);\n        const categoriesView = new SpecialCharactersCategoriesView(locale, specialCharsGroups);\n        const gridView = new CharacterGridView(locale);\n        const infoView = new CharacterInfoView(locale);\n        gridView.on('tileHover', (evt, data)=>{\n            infoView.set(data);\n        });\n        gridView.on('tileFocus', (evt, data)=>{\n            infoView.set(data);\n        });\n        // Update the grid of special characters when a user changed the character group.\n        categoriesView.on('change:currentGroupName', (evt, propertyName, newValue)=>{\n            this._updateGrid(newValue, gridView);\n        });\n        // Set the initial content of the special characters grid.\n        this._updateGrid(categoriesView.currentGroupName, gridView);\n        return {\n            categoriesView,\n            gridView,\n            infoView\n        };\n    }\n    /**\n\t * Creates a button for toolbar and menu bar that will show special characters dialog.\n\t */ _createDialogButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const buttonView = new ButtonClass(editor.locale);\n        const command = editor.commands.get('insertText');\n        const t = locale.t;\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        buttonView.set({\n            label: t('Special characters'),\n            icon: specialCharactersIcon,\n            isToggleable: true\n        });\n        buttonView.bind('isOn').to(dialogPlugin, 'id', (id)=>id === 'specialCharacters');\n        buttonView.bind('isEnabled').to(command, 'isEnabled');\n        buttonView.on('execute', ()=>{\n            if (dialogPlugin.id === 'specialCharacters') {\n                dialogPlugin.hide();\n                return;\n            }\n            this._showDialog();\n        });\n        return buttonView;\n    }\n    _showDialog() {\n        const editor = this.editor;\n        const dialog = editor.plugins.get('Dialog');\n        const locale = editor.locale;\n        const t = locale.t;\n        const { categoriesView, gridView, infoView } = this._createDropdownPanelContent(locale);\n        const content = new SpecialCharactersView(locale, categoriesView, gridView, infoView);\n        gridView.on('execute', (evt, data)=>{\n            editor.execute('insertText', {\n                text: data.character\n            });\n        });\n        dialog.show({\n            id: 'specialCharacters',\n            title: t('Special characters'),\n            className: 'ck-special-characters',\n            content,\n            position: DialogViewPosition.EDITOR_TOP_SIDE\n        });\n    }\n}\n\n/**\n * A plugin that provides special characters for the \"Arrows\" category.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersArrows ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersArrows extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersArrows';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const plugin = editor.plugins.get('SpecialCharacters');\n        plugin.addItems('Arrows', [\n            {\n                title: t('leftwards simple arrow'),\n                character: '←'\n            },\n            {\n                title: t('rightwards simple arrow'),\n                character: '→'\n            },\n            {\n                title: t('upwards simple arrow'),\n                character: '↑'\n            },\n            {\n                title: t('downwards simple arrow'),\n                character: '↓'\n            },\n            {\n                title: t('leftwards double arrow'),\n                character: '⇐'\n            },\n            {\n                title: t('rightwards double arrow'),\n                character: '⇒'\n            },\n            {\n                title: t('upwards double arrow'),\n                character: '⇑'\n            },\n            {\n                title: t('downwards double arrow'),\n                character: '⇓'\n            },\n            {\n                title: t('leftwards dashed arrow'),\n                character: '⇠'\n            },\n            {\n                title: t('rightwards dashed arrow'),\n                character: '⇢'\n            },\n            {\n                title: t('upwards dashed arrow'),\n                character: '⇡'\n            },\n            {\n                title: t('downwards dashed arrow'),\n                character: '⇣'\n            },\n            {\n                title: t('leftwards arrow to bar'),\n                character: '⇤'\n            },\n            {\n                title: t('rightwards arrow to bar'),\n                character: '⇥'\n            },\n            {\n                title: t('upwards arrow to bar'),\n                character: '⤒'\n            },\n            {\n                title: t('downwards arrow to bar'),\n                character: '⤓'\n            },\n            {\n                title: t('up down arrow with base'),\n                character: '↨'\n            },\n            {\n                title: t('back with leftwards arrow above'),\n                character: '🔙'\n            },\n            {\n                title: t('end with leftwards arrow above'),\n                character: '🔚'\n            },\n            {\n                title: t('on with exclamation mark with left right arrow above'),\n                character: '🔛'\n            },\n            {\n                title: t('soon with rightwards arrow above'),\n                character: '🔜'\n            },\n            {\n                title: t('top with upwards arrow above'),\n                character: '🔝'\n            }\n        ], {\n            label: t('Arrows')\n        });\n    }\n}\n\n/**\n * A plugin that provides special characters for the \"Text\" category.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersText ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersText extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersText';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const plugin = editor.plugins.get('SpecialCharacters');\n        plugin.addItems('Text', [\n            {\n                character: '‹',\n                title: t('Single left-pointing angle quotation mark')\n            },\n            {\n                character: '›',\n                title: t('Single right-pointing angle quotation mark')\n            },\n            {\n                character: '«',\n                title: t('Left-pointing double angle quotation mark')\n            },\n            {\n                character: '»',\n                title: t('Right-pointing double angle quotation mark')\n            },\n            {\n                character: '‘',\n                title: t('Left single quotation mark')\n            },\n            {\n                character: '’',\n                title: t('Right single quotation mark')\n            },\n            {\n                character: '“',\n                title: t('Left double quotation mark')\n            },\n            {\n                character: '”',\n                title: t('Right double quotation mark')\n            },\n            {\n                character: '‚',\n                title: t('Single low-9 quotation mark')\n            },\n            {\n                character: '„',\n                title: t('Double low-9 quotation mark')\n            },\n            {\n                character: '¡',\n                title: t('Inverted exclamation mark')\n            },\n            {\n                character: '¿',\n                title: t('Inverted question mark')\n            },\n            {\n                character: '‥',\n                title: t('Two dot leader')\n            },\n            {\n                character: '…',\n                title: t('Horizontal ellipsis')\n            },\n            {\n                character: '‡',\n                title: t('Double dagger')\n            },\n            {\n                character: '‰',\n                title: t('Per mille sign')\n            },\n            {\n                character: '‱',\n                title: t('Per ten thousand sign')\n            },\n            {\n                character: '‼',\n                title: t('Double exclamation mark')\n            },\n            {\n                character: '⁈',\n                title: t('Question exclamation mark')\n            },\n            {\n                character: '⁉',\n                title: t('Exclamation question mark')\n            },\n            {\n                character: '⁇',\n                title: t('Double question mark')\n            },\n            {\n                character: '©',\n                title: t('Copyright sign')\n            },\n            {\n                character: '®',\n                title: t('Registered sign')\n            },\n            {\n                character: '™',\n                title: t('Trade mark sign')\n            },\n            {\n                character: '§',\n                title: t('Section sign')\n            },\n            {\n                character: '¶',\n                title: t('Paragraph sign')\n            },\n            {\n                character: '⁋',\n                title: t('Reversed paragraph sign')\n            }\n        ], {\n            label: t('Text')\n        });\n    }\n}\n\n/**\n * A plugin that provides special characters for the \"Mathematical\" category.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersMathematical ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersMathematical extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersMathematical';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const plugin = editor.plugins.get('SpecialCharacters');\n        plugin.addItems('Mathematical', [\n            {\n                character: '<',\n                title: t('Less-than sign')\n            },\n            {\n                character: '>',\n                title: t('Greater-than sign')\n            },\n            {\n                character: '≤',\n                title: t('Less-than or equal to')\n            },\n            {\n                character: '≥',\n                title: t('Greater-than or equal to')\n            },\n            {\n                character: '–',\n                title: t('En dash')\n            },\n            {\n                character: '—',\n                title: t('Em dash')\n            },\n            {\n                character: '¯',\n                title: t('Macron')\n            },\n            {\n                character: '‾',\n                title: t('Overline')\n            },\n            {\n                character: '°',\n                title: t('Degree sign')\n            },\n            {\n                character: '−',\n                title: t('Minus sign')\n            },\n            {\n                character: '±',\n                title: t('Plus-minus sign')\n            },\n            {\n                character: '÷',\n                title: t('Division sign')\n            },\n            {\n                character: '⁄',\n                title: t('Fraction slash')\n            },\n            {\n                character: '×',\n                title: t('Multiplication sign')\n            },\n            {\n                character: 'ƒ',\n                title: t('Latin small letter f with hook')\n            },\n            {\n                character: '∫',\n                title: t('Integral')\n            },\n            {\n                character: '∑',\n                title: t('N-ary summation')\n            },\n            {\n                character: '∞',\n                title: t('Infinity')\n            },\n            {\n                character: '√',\n                title: t('Square root')\n            },\n            {\n                character: '∼',\n                title: t('Tilde operator')\n            },\n            {\n                character: '≅',\n                title: t('Approximately equal to')\n            },\n            {\n                character: '≈',\n                title: t('Almost equal to')\n            },\n            {\n                character: '≠',\n                title: t('Not equal to')\n            },\n            {\n                character: '≡',\n                title: t('Identical to')\n            },\n            {\n                character: '∈',\n                title: t('Element of')\n            },\n            {\n                character: '∉',\n                title: t('Not an element of')\n            },\n            {\n                character: '∋',\n                title: t('Contains as member')\n            },\n            {\n                character: '∏',\n                title: t('N-ary product')\n            },\n            {\n                character: '∧',\n                title: t('Logical and')\n            },\n            {\n                character: '∨',\n                title: t('Logical or')\n            },\n            {\n                character: '¬',\n                title: t('Not sign')\n            },\n            {\n                character: '∩',\n                title: t('Intersection')\n            },\n            {\n                character: '∪',\n                title: t('Union')\n            },\n            {\n                character: '∂',\n                title: t('Partial differential')\n            },\n            {\n                character: '∀',\n                title: t('For all')\n            },\n            {\n                character: '∃',\n                title: t('There exists')\n            },\n            {\n                character: '∅',\n                title: t('Empty set')\n            },\n            {\n                character: '∇',\n                title: t('Nabla')\n            },\n            {\n                character: '∗',\n                title: t('Asterisk operator')\n            },\n            {\n                character: '∝',\n                title: t('Proportional to')\n            },\n            {\n                character: '∠',\n                title: t('Angle')\n            },\n            {\n                character: '¼',\n                title: t('Vulgar fraction one quarter')\n            },\n            {\n                character: '½',\n                title: t('Vulgar fraction one half')\n            },\n            {\n                character: '¾',\n                title: t('Vulgar fraction three quarters')\n            }\n        ], {\n            label: t('Mathematical')\n        });\n    }\n}\n\n/**\n * A plugin that provides special characters for the \"Latin\" category.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersLatin ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersLatin extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersLatin';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const plugin = editor.plugins.get('SpecialCharacters');\n        plugin.addItems('Latin', [\n            {\n                character: 'Ā',\n                title: t('Latin capital letter a with macron')\n            },\n            {\n                character: 'ā',\n                title: t('Latin small letter a with macron')\n            },\n            {\n                character: 'Ă',\n                title: t('Latin capital letter a with breve')\n            },\n            {\n                character: 'ă',\n                title: t('Latin small letter a with breve')\n            },\n            {\n                character: 'Ą',\n                title: t('Latin capital letter a with ogonek')\n            },\n            {\n                character: 'ą',\n                title: t('Latin small letter a with ogonek')\n            },\n            {\n                character: 'Ć',\n                title: t('Latin capital letter c with acute')\n            },\n            {\n                character: 'ć',\n                title: t('Latin small letter c with acute')\n            },\n            {\n                character: 'Ĉ',\n                title: t('Latin capital letter c with circumflex')\n            },\n            {\n                character: 'ĉ',\n                title: t('Latin small letter c with circumflex')\n            },\n            {\n                character: 'Ċ',\n                title: t('Latin capital letter c with dot above')\n            },\n            {\n                character: 'ċ',\n                title: t('Latin small letter c with dot above')\n            },\n            {\n                character: 'Č',\n                title: t('Latin capital letter c with caron')\n            },\n            {\n                character: 'č',\n                title: t('Latin small letter c with caron')\n            },\n            {\n                character: 'Ď',\n                title: t('Latin capital letter d with caron')\n            },\n            {\n                character: 'ď',\n                title: t('Latin small letter d with caron')\n            },\n            {\n                character: 'Đ',\n                title: t('Latin capital letter d with stroke')\n            },\n            {\n                character: 'đ',\n                title: t('Latin small letter d with stroke')\n            },\n            {\n                character: 'Ē',\n                title: t('Latin capital letter e with macron')\n            },\n            {\n                character: 'ē',\n                title: t('Latin small letter e with macron')\n            },\n            {\n                character: 'Ĕ',\n                title: t('Latin capital letter e with breve')\n            },\n            {\n                character: 'ĕ',\n                title: t('Latin small letter e with breve')\n            },\n            {\n                character: 'Ė',\n                title: t('Latin capital letter e with dot above')\n            },\n            {\n                character: 'ė',\n                title: t('Latin small letter e with dot above')\n            },\n            {\n                character: 'Ę',\n                title: t('Latin capital letter e with ogonek')\n            },\n            {\n                character: 'ę',\n                title: t('Latin small letter e with ogonek')\n            },\n            {\n                character: 'Ě',\n                title: t('Latin capital letter e with caron')\n            },\n            {\n                character: 'ě',\n                title: t('Latin small letter e with caron')\n            },\n            {\n                character: 'Ĝ',\n                title: t('Latin capital letter g with circumflex')\n            },\n            {\n                character: 'ĝ',\n                title: t('Latin small letter g with circumflex')\n            },\n            {\n                character: 'Ğ',\n                title: t('Latin capital letter g with breve')\n            },\n            {\n                character: 'ğ',\n                title: t('Latin small letter g with breve')\n            },\n            {\n                character: 'Ġ',\n                title: t('Latin capital letter g with dot above')\n            },\n            {\n                character: 'ġ',\n                title: t('Latin small letter g with dot above')\n            },\n            {\n                character: 'Ģ',\n                title: t('Latin capital letter g with cedilla')\n            },\n            {\n                character: 'ģ',\n                title: t('Latin small letter g with cedilla')\n            },\n            {\n                character: 'Ĥ',\n                title: t('Latin capital letter h with circumflex')\n            },\n            {\n                character: 'ĥ',\n                title: t('Latin small letter h with circumflex')\n            },\n            {\n                character: 'Ħ',\n                title: t('Latin capital letter h with stroke')\n            },\n            {\n                character: 'ħ',\n                title: t('Latin small letter h with stroke')\n            },\n            {\n                character: 'Ĩ',\n                title: t('Latin capital letter i with tilde')\n            },\n            {\n                character: 'ĩ',\n                title: t('Latin small letter i with tilde')\n            },\n            {\n                character: 'Ī',\n                title: t('Latin capital letter i with macron')\n            },\n            {\n                character: 'ī',\n                title: t('Latin small letter i with macron')\n            },\n            {\n                character: 'Ĭ',\n                title: t('Latin capital letter i with breve')\n            },\n            {\n                character: 'ĭ',\n                title: t('Latin small letter i with breve')\n            },\n            {\n                character: 'Į',\n                title: t('Latin capital letter i with ogonek')\n            },\n            {\n                character: 'į',\n                title: t('Latin small letter i with ogonek')\n            },\n            {\n                character: 'İ',\n                title: t('Latin capital letter i with dot above')\n            },\n            {\n                character: 'ı',\n                title: t('Latin small letter dotless i')\n            },\n            {\n                character: 'Ĳ',\n                title: t('Latin capital ligature ij')\n            },\n            {\n                character: 'ĳ',\n                title: t('Latin small ligature ij')\n            },\n            {\n                character: 'Ĵ',\n                title: t('Latin capital letter j with circumflex')\n            },\n            {\n                character: 'ĵ',\n                title: t('Latin small letter j with circumflex')\n            },\n            {\n                character: 'Ķ',\n                title: t('Latin capital letter k with cedilla')\n            },\n            {\n                character: 'ķ',\n                title: t('Latin small letter k with cedilla')\n            },\n            {\n                character: 'ĸ',\n                title: t('Latin small letter kra')\n            },\n            {\n                character: 'Ĺ',\n                title: t('Latin capital letter l with acute')\n            },\n            {\n                character: 'ĺ',\n                title: t('Latin small letter l with acute')\n            },\n            {\n                character: 'Ļ',\n                title: t('Latin capital letter l with cedilla')\n            },\n            {\n                character: 'ļ',\n                title: t('Latin small letter l with cedilla')\n            },\n            {\n                character: 'Ľ',\n                title: t('Latin capital letter l with caron')\n            },\n            {\n                character: 'ľ',\n                title: t('Latin small letter l with caron')\n            },\n            {\n                character: 'Ŀ',\n                title: t('Latin capital letter l with middle dot')\n            },\n            {\n                character: 'ŀ',\n                title: t('Latin small letter l with middle dot')\n            },\n            {\n                character: 'Ł',\n                title: t('Latin capital letter l with stroke')\n            },\n            {\n                character: 'ł',\n                title: t('Latin small letter l with stroke')\n            },\n            {\n                character: 'Ń',\n                title: t('Latin capital letter n with acute')\n            },\n            {\n                character: 'ń',\n                title: t('Latin small letter n with acute')\n            },\n            {\n                character: 'Ņ',\n                title: t('Latin capital letter n with cedilla')\n            },\n            {\n                character: 'ņ',\n                title: t('Latin small letter n with cedilla')\n            },\n            {\n                character: 'Ň',\n                title: t('Latin capital letter n with caron')\n            },\n            {\n                character: 'ň',\n                title: t('Latin small letter n with caron')\n            },\n            {\n                character: 'ŉ',\n                title: t('Latin small letter n preceded by apostrophe')\n            },\n            {\n                character: 'Ŋ',\n                title: t('Latin capital letter eng')\n            },\n            {\n                character: 'ŋ',\n                title: t('Latin small letter eng')\n            },\n            {\n                character: 'Ō',\n                title: t('Latin capital letter o with macron')\n            },\n            {\n                character: 'ō',\n                title: t('Latin small letter o with macron')\n            },\n            {\n                character: 'Ŏ',\n                title: t('Latin capital letter o with breve')\n            },\n            {\n                character: 'ŏ',\n                title: t('Latin small letter o with breve')\n            },\n            {\n                character: 'Ő',\n                title: t('Latin capital letter o with double acute')\n            },\n            {\n                character: 'ő',\n                title: t('Latin small letter o with double acute')\n            },\n            {\n                character: 'Œ',\n                title: t('Latin capital ligature oe')\n            },\n            {\n                character: 'œ',\n                title: t('Latin small ligature oe')\n            },\n            {\n                character: 'Ŕ',\n                title: t('Latin capital letter r with acute')\n            },\n            {\n                character: 'ŕ',\n                title: t('Latin small letter r with acute')\n            },\n            {\n                character: 'Ŗ',\n                title: t('Latin capital letter r with cedilla')\n            },\n            {\n                character: 'ŗ',\n                title: t('Latin small letter r with cedilla')\n            },\n            {\n                character: 'Ř',\n                title: t('Latin capital letter r with caron')\n            },\n            {\n                character: 'ř',\n                title: t('Latin small letter r with caron')\n            },\n            {\n                character: 'Ś',\n                title: t('Latin capital letter s with acute')\n            },\n            {\n                character: 'ś',\n                title: t('Latin small letter s with acute')\n            },\n            {\n                character: 'Ŝ',\n                title: t('Latin capital letter s with circumflex')\n            },\n            {\n                character: 'ŝ',\n                title: t('Latin small letter s with circumflex')\n            },\n            {\n                character: 'Ş',\n                title: t('Latin capital letter s with cedilla')\n            },\n            {\n                character: 'ş',\n                title: t('Latin small letter s with cedilla')\n            },\n            {\n                character: 'Š',\n                title: t('Latin capital letter s with caron')\n            },\n            {\n                character: 'š',\n                title: t('Latin small letter s with caron')\n            },\n            {\n                character: 'Ţ',\n                title: t('Latin capital letter t with cedilla')\n            },\n            {\n                character: 'ţ',\n                title: t('Latin small letter t with cedilla')\n            },\n            {\n                character: 'Ť',\n                title: t('Latin capital letter t with caron')\n            },\n            {\n                character: 'ť',\n                title: t('Latin small letter t with caron')\n            },\n            {\n                character: 'Ŧ',\n                title: t('Latin capital letter t with stroke')\n            },\n            {\n                character: 'ŧ',\n                title: t('Latin small letter t with stroke')\n            },\n            {\n                character: 'Ũ',\n                title: t('Latin capital letter u with tilde')\n            },\n            {\n                character: 'ũ',\n                title: t('Latin small letter u with tilde')\n            },\n            {\n                character: 'Ū',\n                title: t('Latin capital letter u with macron')\n            },\n            {\n                character: 'ū',\n                title: t('Latin small letter u with macron')\n            },\n            {\n                character: 'Ŭ',\n                title: t('Latin capital letter u with breve')\n            },\n            {\n                character: 'ŭ',\n                title: t('Latin small letter u with breve')\n            },\n            {\n                character: 'Ů',\n                title: t('Latin capital letter u with ring above')\n            },\n            {\n                character: 'ů',\n                title: t('Latin small letter u with ring above')\n            },\n            {\n                character: 'Ű',\n                title: t('Latin capital letter u with double acute')\n            },\n            {\n                character: 'ű',\n                title: t('Latin small letter u with double acute')\n            },\n            {\n                character: 'Ų',\n                title: t('Latin capital letter u with ogonek')\n            },\n            {\n                character: 'ų',\n                title: t('Latin small letter u with ogonek')\n            },\n            {\n                character: 'Ŵ',\n                title: t('Latin capital letter w with circumflex')\n            },\n            {\n                character: 'ŵ',\n                title: t('Latin small letter w with circumflex')\n            },\n            {\n                character: 'Ŷ',\n                title: t('Latin capital letter y with circumflex')\n            },\n            {\n                character: 'ŷ',\n                title: t('Latin small letter y with circumflex')\n            },\n            {\n                character: 'Ÿ',\n                title: t('Latin capital letter y with diaeresis')\n            },\n            {\n                character: 'Ź',\n                title: t('Latin capital letter z with acute')\n            },\n            {\n                character: 'ź',\n                title: t('Latin small letter z with acute')\n            },\n            {\n                character: 'Ż',\n                title: t('Latin capital letter z with dot above')\n            },\n            {\n                character: 'ż',\n                title: t('Latin small letter z with dot above')\n            },\n            {\n                character: 'Ž',\n                title: t('Latin capital letter z with caron')\n            },\n            {\n                character: 'ž',\n                title: t('Latin small letter z with caron')\n            },\n            {\n                character: 'ſ',\n                title: t('Latin small letter long s')\n            }\n        ], {\n            label: t('Latin')\n        });\n    }\n}\n\n/**\n * A plugin that provides special characters for the \"Currency\" category.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersCurrency ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersCurrency extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersCurrency';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const plugin = editor.plugins.get('SpecialCharacters');\n        plugin.addItems('Currency', [\n            {\n                character: '$',\n                title: t('Dollar sign')\n            },\n            {\n                character: '€',\n                title: t('Euro sign')\n            },\n            {\n                character: '¥',\n                title: t('Yen sign')\n            },\n            {\n                character: '£',\n                title: t('Pound sign')\n            },\n            {\n                character: '¢',\n                title: t('Cent sign')\n            },\n            {\n                character: '₠',\n                title: t('Euro-currency sign')\n            },\n            {\n                character: '₡',\n                title: t('Colon sign')\n            },\n            {\n                character: '₢',\n                title: t('Cruzeiro sign')\n            },\n            {\n                character: '₣',\n                title: t('French franc sign')\n            },\n            {\n                character: '₤',\n                title: t('Lira sign')\n            },\n            {\n                character: '¤',\n                title: t('Currency sign')\n            },\n            {\n                character: '₿',\n                title: t('Bitcoin sign')\n            },\n            {\n                character: '₥',\n                title: t('Mill sign')\n            },\n            {\n                character: '₦',\n                title: t('Naira sign')\n            },\n            {\n                character: '₧',\n                title: t('Peseta sign')\n            },\n            {\n                character: '₨',\n                title: t('Rupee sign')\n            },\n            {\n                character: '₩',\n                title: t('Won sign')\n            },\n            {\n                character: '₪',\n                title: t('New sheqel sign')\n            },\n            {\n                character: '₫',\n                title: t('Dong sign')\n            },\n            {\n                character: '₭',\n                title: t('Kip sign')\n            },\n            {\n                character: '₮',\n                title: t('Tugrik sign')\n            },\n            {\n                character: '₯',\n                title: t('Drachma sign')\n            },\n            {\n                character: '₰',\n                title: t('German penny sign')\n            },\n            {\n                character: '₱',\n                title: t('Peso sign')\n            },\n            {\n                character: '₲',\n                title: t('Guarani sign')\n            },\n            {\n                character: '₳',\n                title: t('Austral sign')\n            },\n            {\n                character: '₴',\n                title: t('Hryvnia sign')\n            },\n            {\n                character: '₵',\n                title: t('Cedi sign')\n            },\n            {\n                character: '₶',\n                title: t('Livre tournois sign')\n            },\n            {\n                character: '₷',\n                title: t('Spesmilo sign')\n            },\n            {\n                character: '₸',\n                title: t('Tenge sign')\n            },\n            {\n                character: '₹',\n                title: t('Indian rupee sign')\n            },\n            {\n                character: '₺',\n                title: t('Turkish lira sign')\n            },\n            {\n                character: '₻',\n                title: t('Nordic mark sign')\n            },\n            {\n                character: '₼',\n                title: t('Manat sign')\n            },\n            {\n                character: '₽',\n                title: t('Ruble sign')\n            }\n        ], {\n            label: t('Currency')\n        });\n    }\n}\n\n/**\n * A plugin combining a basic set of characters for the special characters plugin.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., SpecialCharacters, SpecialCharactersEssentials ],\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class SpecialCharactersEssentials extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SpecialCharactersEssentials';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SpecialCharactersCurrency,\n            SpecialCharactersText,\n            SpecialCharactersMathematical,\n            SpecialCharactersArrows,\n            SpecialCharactersLatin\n        ];\n    }\n}\n\nexport { SpecialCharacters, SpecialCharactersArrows, SpecialCharactersCurrency, SpecialCharactersEssentials, SpecialCharactersLatin, SpecialCharactersMathematical, SpecialCharactersText };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, Command } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, View, addKeyboardHandlingForGrid, LabelView, ViewCollection, FocusCycler, createDropdown } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { FocusTracker, KeystrokeHandler, first, logWarning } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { isObject } from 'lodash-es';\nimport { findAttributeRange, findAttributeRangeBound } from '@ckeditor/ckeditor5-typing/dist/index.js';\n\n/**\n * A class representing an individual button (style) in the grid. Renders a rich preview of the style.\n */ class StyleGridButtonView extends ButtonView {\n    /**\n\t * Definition of the style the button will apply when executed.\n\t */ styleDefinition;\n    /**\n\t * The view rendering the preview of the style.\n\t */ previewView;\n    /**\n\t * Creates an instance of the {@link module:style/ui/stylegridbuttonview~StyleGridButtonView} class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param styleDefinition Definition of the style.\n\t */ constructor(locale, styleDefinition){\n        super(locale);\n        this.styleDefinition = styleDefinition;\n        this.previewView = this._createPreview();\n        this.set({\n            label: styleDefinition.name,\n            class: 'ck-style-grid__button',\n            withText: true\n        });\n        this.extendTemplate({\n            attributes: {\n                role: 'option'\n            }\n        });\n        this.children.add(this.previewView, 0);\n    }\n    /**\n\t * Creates the view representing the preview of the style.\n\t */ _createPreview() {\n        const previewView = new View(this.locale);\n        previewView.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-reset_all-excluded',\n                    'ck-style-grid__button__preview',\n                    'ck-content'\n                ],\n                // The preview \"AaBbCcDdEeFfGgHhIiJj\" should not be read by screen readers because it is purely presentational.\n                'aria-hidden': 'true'\n            },\n            children: [\n                this.styleDefinition.previewTemplate\n            ]\n        });\n        return previewView;\n    }\n}\n\n/**\n * A class representing a grid of styles ({@link module:style/ui/stylegridbuttonview~StyleGridButtonView buttons}).\n * Allows users to select a style.\n */ class StyleGridView extends View {\n    /**\n\t * Tracks information about the DOM focus in the view.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of style {@link module:style/ui/stylegridbuttonview~StyleGridButtonView buttons}.\n\t */ children;\n    /**\n\t * Creates an instance of the {@link module:style/ui/stylegridview~StyleGridView} class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param styleDefinitions Definitions of the styles.\n\t */ constructor(locale, styleDefinitions){\n        super(locale);\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.set('activeStyles', []);\n        this.set('enabledStyles', []);\n        this.children = this.createCollection();\n        this.children.delegate('execute').to(this);\n        for (const definition of styleDefinitions){\n            const gridTileView = new StyleGridButtonView(locale, definition);\n            this.children.add(gridTileView);\n        }\n        this.on('change:activeStyles', ()=>{\n            for (const child of this.children){\n                child.isOn = this.activeStyles.includes(child.styleDefinition.name);\n            }\n        });\n        this.on('change:enabledStyles', ()=>{\n            for (const child of this.children){\n                child.isEnabled = this.enabledStyles.includes(child.styleDefinition.name);\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-style-grid'\n                ],\n                role: 'listbox'\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        for (const child of this.children){\n            this.focusTracker.add(child.element);\n        }\n        addKeyboardHandlingForGrid({\n            keystrokeHandler: this.keystrokes,\n            focusTracker: this.focusTracker,\n            gridItems: this.children,\n            numberOfColumns: 3,\n            uiLanguageDirection: this.locale && this.locale.uiLanguageDirection\n        });\n        // Start listening for the keystrokes coming from the grid view.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the first style button in the grid.\n\t */ focus() {\n        this.children.first.focus();\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        this.focusTracker.destroy();\n        this.keystrokes.destroy();\n    }\n}\n\n/**\n * A class representing a group of styles (e.g. \"block\" or \"inline\").\n *\n * Renders a {@link module:style/ui/stylegridview~StyleGridView style grid} and a label.\n */ class StyleGroupView extends View {\n    /**\n\t * The styles grid of the group.\n\t */ gridView;\n    /**\n\t * The label of the group.\n\t */ labelView;\n    /**\n\t * Creates an instance of the {@link module:style/ui/stylegroupview~StyleGroupView} class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param label The localized label of the group.\n\t * @param styleDefinitions Definitions of the styles in the group.\n\t */ constructor(locale, label, styleDefinitions){\n        super(locale);\n        this.labelView = new LabelView(locale);\n        this.labelView.text = label;\n        this.gridView = new StyleGridView(locale, styleDefinitions);\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-style-panel__style-group'\n                ],\n                role: 'group',\n                'aria-labelledby': this.labelView.id\n            },\n            children: [\n                this.labelView,\n                this.gridView\n            ]\n        });\n    }\n}\n\n/**\n * A class representing a panel with available content styles. It renders styles in button grids, grouped\n * in categories.\n */ class StylePanelView extends View {\n    /**\n\t * Tracks information about DOM focus in the panel.\n\t */ focusTracker;\n    /**\n\t * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t */ keystrokes;\n    /**\n\t * A collection of panel children.\n\t */ children;\n    /**\n\t * A view representing block styles group.\n\t */ blockStylesGroupView;\n    /**\n\t * A view representing inline styles group\n\t */ inlineStylesGroupView;\n    /**\n\t * A collection of views that can be focused in the panel.\n\t */ _focusables;\n    /**\n\t * Helps cycling over {@link #_focusables} in the panel.\n\t */ _focusCycler;\n    /**\n\t * Creates an instance of the {@link module:style/ui/stylegroupview~StyleGroupView} class.\n\t *\n\t * @param locale The localization services instance.\n\t * @param styleDefinitions Normalized definitions of the styles.\n\t */ constructor(locale, styleDefinitions){\n        super(locale);\n        const t = locale.t;\n        this.focusTracker = new FocusTracker();\n        this.keystrokes = new KeystrokeHandler();\n        this.children = this.createCollection();\n        this.blockStylesGroupView = new StyleGroupView(locale, t('Block styles'), styleDefinitions.block);\n        this.inlineStylesGroupView = new StyleGroupView(locale, t('Text styles'), styleDefinitions.inline);\n        this.set('activeStyles', []);\n        this.set('enabledStyles', []);\n        this._focusables = new ViewCollection();\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate style groups backwards using the <kbd>Shift</kbd> + <kbd>Tab</kbd> keystroke.\n                focusPrevious: [\n                    'shift + tab'\n                ],\n                // Navigate style groups forward using the <kbd>Tab</kbd> key.\n                focusNext: [\n                    'tab'\n                ]\n            }\n        });\n        if (styleDefinitions.block.length) {\n            this.children.add(this.blockStylesGroupView);\n        }\n        if (styleDefinitions.inline.length) {\n            this.children.add(this.inlineStylesGroupView);\n        }\n        this.blockStylesGroupView.gridView.delegate('execute').to(this);\n        this.inlineStylesGroupView.gridView.delegate('execute').to(this);\n        this.blockStylesGroupView.gridView.bind('activeStyles', 'enabledStyles').to(this, 'activeStyles', 'enabledStyles');\n        this.inlineStylesGroupView.gridView.bind('activeStyles', 'enabledStyles').to(this, 'activeStyles', 'enabledStyles');\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-style-panel'\n                ]\n            },\n            children: this.children\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        // Register the views as focusable.\n        this._focusables.add(this.blockStylesGroupView.gridView);\n        this._focusables.add(this.inlineStylesGroupView.gridView);\n        // Register the views in the focus tracker.\n        this.focusTracker.add(this.blockStylesGroupView.gridView.element);\n        this.focusTracker.add(this.inlineStylesGroupView.gridView.element);\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n\t * Focuses the first focusable element in the panel.\n\t */ focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n\t * Focuses the last focusable element in the panel.\n\t */ focusLast() {\n        this._focusCycler.focusLast();\n    }\n}\n\n// These are intermediate element names that can't be rendered as style preview because they don't make sense standalone.\nconst NON_PREVIEWABLE_ELEMENT_NAMES = [\n    'caption',\n    'colgroup',\n    'dd',\n    'dt',\n    'figcaption',\n    'legend',\n    'li',\n    'optgroup',\n    'option',\n    'rp',\n    'rt',\n    'summary',\n    'tbody',\n    'td',\n    'tfoot',\n    'th',\n    'thead',\n    'tr'\n];\nclass StyleUtils extends Plugin {\n    _htmlSupport;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleUtils';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.decorate('isStyleEnabledForBlock');\n        this.decorate('isStyleActiveForBlock');\n        this.decorate('getAffectedBlocks');\n        this.decorate('isStyleEnabledForInlineSelection');\n        this.decorate('isStyleActiveForInlineSelection');\n        this.decorate('getAffectedInlineSelectable');\n        this.decorate('getStylePreview');\n        this.decorate('configureGHSDataFilter');\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._htmlSupport = this.editor.plugins.get('GeneralHtmlSupport');\n    }\n    /**\n\t * Normalizes {@link module:style/styleconfig~StyleConfig#definitions} in the configuration of the styles feature.\n\t * The structure of normalized styles looks as follows:\n\t *\n\t * ```ts\n\t * {\n\t * \tblock: [\n\t * \t\t<module:style/style~StyleDefinition>,\n\t * \t\t<module:style/style~StyleDefinition>,\n\t * \t\t...\n\t * \t],\n\t * \tinline: [\n\t * \t\t<module:style/style~StyleDefinition>,\n\t * \t\t<module:style/style~StyleDefinition>,\n\t * \t\t...\n\t * \t]\n\t * }\n\t * ```\n\t *\n\t * @returns An object with normalized style definitions grouped into `block` and `inline` categories (arrays).\n\t */ normalizeConfig(dataSchema, styleDefinitions = []) {\n        const normalizedDefinitions = {\n            block: [],\n            inline: []\n        };\n        for (const definition of styleDefinitions){\n            const modelElements = [];\n            const ghsAttributes = [];\n            for (const ghsDefinition of dataSchema.getDefinitionsForView(definition.element)){\n                const appliesToBlock = 'appliesToBlock' in ghsDefinition ? ghsDefinition.appliesToBlock : false;\n                if (ghsDefinition.isBlock || appliesToBlock) {\n                    if (typeof appliesToBlock == 'string') {\n                        modelElements.push(appliesToBlock);\n                    } else if (ghsDefinition.isBlock) {\n                        const ghsBlockDefinition = ghsDefinition;\n                        modelElements.push(ghsDefinition.model);\n                        if (ghsBlockDefinition.paragraphLikeModel) {\n                            modelElements.push(ghsBlockDefinition.paragraphLikeModel);\n                        }\n                    }\n                } else {\n                    ghsAttributes.push(ghsDefinition.model);\n                }\n            }\n            const previewTemplate = this.getStylePreview(definition, [\n                {\n                    text: 'AaBbCcDdEeFfGgHhIiJj'\n                }\n            ]);\n            if (modelElements.length) {\n                normalizedDefinitions.block.push({\n                    ...definition,\n                    previewTemplate,\n                    modelElements,\n                    isBlock: true\n                });\n            } else {\n                normalizedDefinitions.inline.push({\n                    ...definition,\n                    previewTemplate,\n                    ghsAttributes\n                });\n            }\n        }\n        return normalizedDefinitions;\n    }\n    /**\n\t * Verifies if the given style is applicable to the provided block element.\n\t *\n\t * @internal\n\t */ isStyleEnabledForBlock(definition, block) {\n        const model = this.editor.model;\n        const attributeName = this._htmlSupport.getGhsAttributeNameForElement(definition.element);\n        if (!model.schema.checkAttribute(block, attributeName)) {\n            return false;\n        }\n        return definition.modelElements.includes(block.name);\n    }\n    /**\n\t * Returns true if the given style is applied to the specified block element.\n\t *\n\t * @internal\n\t */ isStyleActiveForBlock(definition, block) {\n        const attributeName = this._htmlSupport.getGhsAttributeNameForElement(definition.element);\n        const ghsAttributeValue = block.getAttribute(attributeName);\n        return this.hasAllClasses(ghsAttributeValue, definition.classes);\n    }\n    /**\n\t * Returns an array of block elements that style should be applied to.\n\t *\n\t * @internal\n\t */ getAffectedBlocks(definition, block) {\n        if (definition.modelElements.includes(block.name)) {\n            return [\n                block\n            ];\n        }\n        return null;\n    }\n    /**\n\t * Verifies if the given style is applicable to the provided document selection.\n\t *\n\t * @internal\n\t */ isStyleEnabledForInlineSelection(definition, selection) {\n        const model = this.editor.model;\n        for (const ghsAttributeName of definition.ghsAttributes){\n            if (model.schema.checkAttributeInSelection(selection, ghsAttributeName)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Returns true if the given style is applied to the specified document selection.\n\t *\n\t * @internal\n\t */ isStyleActiveForInlineSelection(definition, selection) {\n        for (const ghsAttributeName of definition.ghsAttributes){\n            const ghsAttributeValue = this._getValueFromFirstAllowedNode(selection, ghsAttributeName);\n            if (this.hasAllClasses(ghsAttributeValue, definition.classes)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Returns a selectable that given style should be applied to.\n\t *\n\t * @internal\n\t */ getAffectedInlineSelectable(definition, selection) {\n        return selection;\n    }\n    /**\n\t * Returns the `TemplateDefinition` used by styles dropdown to render style preview.\n\t *\n\t * @internal\n\t */ getStylePreview(definition, children) {\n        const { element, classes } = definition;\n        return {\n            tag: isPreviewable(element) ? element : 'div',\n            attributes: {\n                class: classes\n            },\n            children\n        };\n    }\n    /**\n\t * Verifies if all classes are present in the given GHS attribute.\n\t *\n\t * @internal\n\t */ hasAllClasses(ghsAttributeValue, classes) {\n        return isObject(ghsAttributeValue) && hasClassesProperty(ghsAttributeValue) && classes.every((className)=>ghsAttributeValue.classes.includes(className));\n    }\n    /**\n\t * This is where the styles feature configures the GHS feature. This method translates normalized\n\t * {@link module:style/styleconfig~StyleDefinition style definitions} to\n\t * {@link module:engine/view/matcher~MatcherObjectPattern matcher patterns} and feeds them to the GHS\n\t * {@link module:html-support/datafilter~DataFilter} plugin.\n\t *\n\t * @internal\n\t */ configureGHSDataFilter({ block, inline }) {\n        const ghsDataFilter = this.editor.plugins.get('DataFilter');\n        ghsDataFilter.loadAllowedConfig(block.map(normalizedStyleDefinitionToMatcherPattern));\n        ghsDataFilter.loadAllowedConfig(inline.map(normalizedStyleDefinitionToMatcherPattern));\n    }\n    /**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection, returns the selection attribute.\n\t *\n\t * @param selection The document selection.\n\t * @param attributeName Name of the GHS attribute.\n\t * @returns The attribute value.\n\t */ _getValueFromFirstAllowedNode(selection, attributeName) {\n        const model = this.editor.model;\n        const schema = model.schema;\n        if (selection.isCollapsed) {\n            return selection.getAttribute(attributeName);\n        }\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if (schema.checkAttribute(item, attributeName)) {\n                    return item.getAttribute(attributeName);\n                }\n            }\n        }\n        return null;\n    }\n}\n/**\n * Checks if given object has `classes` property which is an array.\n *\n * @param obj Object to check.\n */ function hasClassesProperty(obj) {\n    return Boolean(obj.classes) && Array.isArray(obj.classes);\n}\n/**\n * Decides whether an element should be created in the preview or a substitute `<div>` should\n * be used instead. This avoids previewing a standalone `<td>`, `<li>`, etc. without a parent.\n *\n * @param elementName Name of the element\n * @returns Boolean indicating whether the element can be rendered.\n */ function isPreviewable(elementName) {\n    return !NON_PREVIEWABLE_ELEMENT_NAMES.includes(elementName);\n}\n/**\n * Translates a normalized style definition to a view matcher pattern.\n */ function normalizedStyleDefinitionToMatcherPattern({ element, classes }) {\n    return {\n        name: element,\n        classes\n    };\n}\n\n/**\n * The UI plugin of the style feature .\n *\n * It registers the `'style'` UI dropdown in the editor's {@link module:ui/componentfactory~ComponentFactory component factory}\n * that displays a grid of styles and allows changing styles of the content.\n */ class StyleUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StyleUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const dataSchema = editor.plugins.get('DataSchema');\n        const styleUtils = editor.plugins.get('StyleUtils');\n        const styleDefinitions = editor.config.get('style.definitions');\n        const normalizedStyleDefinitions = styleUtils.normalizeConfig(dataSchema, styleDefinitions);\n        // Add the dropdown to the component factory.\n        editor.ui.componentFactory.add('style', (locale)=>{\n            const t = locale.t;\n            const dropdown = createDropdown(locale);\n            const styleCommand = editor.commands.get('style');\n            dropdown.once('change:isOpen', ()=>{\n                const panelView = new StylePanelView(locale, normalizedStyleDefinitions);\n                // Put the styles panel is the dropdown.\n                dropdown.panelView.children.add(panelView);\n                // Close the dropdown when a style is selected in the styles panel.\n                panelView.delegate('execute').to(dropdown);\n                // Bind the state of the styles panel to the command.\n                panelView.bind('activeStyles').to(styleCommand, 'value');\n                panelView.bind('enabledStyles').to(styleCommand, 'enabledStyles');\n            });\n            // The entire dropdown will be disabled together with the command (e.g. when the editor goes read-only).\n            dropdown.bind('isEnabled').to(styleCommand);\n            // This dropdown has no icon. It displays text label depending on the selection.\n            dropdown.buttonView.withText = true;\n            // The label of the dropdown is dynamic and depends on how many styles are active at a time.\n            dropdown.buttonView.bind('label').to(styleCommand, 'value', (value)=>{\n                if (value.length > 1) {\n                    return t('Multiple styles');\n                } else if (value.length === 1) {\n                    return value[0];\n                } else {\n                    return t('Styles');\n                }\n            });\n            // The dropdown has a static CSS class for easy customization. There's another CSS class\n            // that gets displayed when multiple styles are active at a time allowing visual customization of\n            // the label.\n            dropdown.bind('class').to(styleCommand, 'value', (value)=>{\n                const classes = [\n                    'ck-style-dropdown'\n                ];\n                if (value.length > 1) {\n                    classes.push('ck-style-dropdown_multiple-active');\n                }\n                return classes.join(' ');\n            });\n            // Execute the command when a style is selected in the styles panel.\n            // Also focus the editable after executing the command.\n            // It overrides a default behaviour where the focus is moved to the dropdown button (#12125).\n            dropdown.on('execute', (evt)=>{\n                editor.execute('style', {\n                    styleName: evt.source.styleDefinition.name\n                });\n                editor.editing.view.focus();\n            });\n            return dropdown;\n        });\n    }\n}\n\n/**\n * Style command.\n *\n * Applies and removes styles from selection and elements.\n */ class StyleCommand extends Command {\n    /**\n\t * Normalized definitions of the styles.\n\t */ _styleDefinitions;\n    /**\n\t * The StyleUtils plugin.\n\t */ _styleUtils;\n    /**\n\t * Creates an instance of the command.\n\t *\n\t * @param editor Editor on which this command will be used.\n\t * @param styleDefinitions Normalized definitions of the styles.\n\t */ constructor(editor, styleDefinitions){\n        super(editor);\n        this.set('value', []);\n        this.set('enabledStyles', []);\n        this._styleDefinitions = styleDefinitions;\n        this._styleUtils = this.editor.plugins.get(StyleUtils);\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const value = new Set();\n        const enabledStyles = new Set();\n        // Inline styles.\n        for (const definition of this._styleDefinitions.inline){\n            // Check if this inline style is enabled.\n            if (this._styleUtils.isStyleEnabledForInlineSelection(definition, selection)) {\n                enabledStyles.add(definition.name);\n            }\n            // Check if this inline style is active.\n            if (this._styleUtils.isStyleActiveForInlineSelection(definition, selection)) {\n                value.add(definition.name);\n            }\n        }\n        // Block styles.\n        const firstBlock = first(selection.getSelectedBlocks()) || selection.getFirstPosition().parent;\n        if (firstBlock) {\n            const ancestorBlocks = firstBlock.getAncestors({\n                includeSelf: true,\n                parentFirst: true\n            });\n            for (const block of ancestorBlocks){\n                if (block.is('rootElement')) {\n                    break;\n                }\n                for (const definition of this._styleDefinitions.block){\n                    // Check if this block style is enabled.\n                    if (!this._styleUtils.isStyleEnabledForBlock(definition, block)) {\n                        continue;\n                    }\n                    enabledStyles.add(definition.name);\n                    // Check if this block style is active.\n                    if (this._styleUtils.isStyleActiveForBlock(definition, block)) {\n                        value.add(definition.name);\n                    }\n                }\n                // E.g. reached a model table when the selection is in a cell. The command should not modify\n                // ancestors of a table.\n                if (model.schema.isObject(block)) {\n                    break;\n                }\n            }\n        }\n        this.enabledStyles = Array.from(enabledStyles).sort();\n        this.isEnabled = this.enabledStyles.length > 0;\n        this.value = this.isEnabled ? Array.from(value).sort() : [];\n    }\n    /**\n\t * Executes the command &ndash; applies the style classes to the selection or removes it from the selection.\n\t *\n\t * If the command value already contains the requested style, it will remove the style classes. Otherwise, it will set it.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection} and the\n\t * style type (inline or block):\n\t *\n\t * * When applying inline styles:\n\t *   * If the selection is on a range, the command applies the style classes to all nodes in that range.\n\t *   * If the selection is collapsed in a non-empty node, the command applies the style classes to the\n\t * {@link module:engine/model/document~Document#selection}.\n\t *\n\t * * When applying block styles:\n\t *   * If the selection is on a range, the command applies the style classes to the nearest block parent element.\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.styleName Style name matching the one defined in the\n\t * {@link module:style/styleconfig~StyleConfig#definitions configuration}.\n\t * @param options.forceValue Whether the command should add given style (`true`) or remove it (`false`) from the selection.\n\t * If not set (default), the command will toggle the style basing on the first selected node. Note, that this will not force\n\t * setting a style on an element that cannot receive given style.\n\t */ execute({ styleName, forceValue }) {\n        if (!this.enabledStyles.includes(styleName)) {\n            /**\n\t\t\t * Style command can be executed only with a correct style name.\n\t\t\t *\n\t\t\t * This warning may be caused by:\n\t\t\t *\n\t\t\t * * passing a name that is not specified in the {@link module:style/styleconfig~StyleConfig#definitions configuration}\n\t\t\t * (e.g. a CSS class name),\n\t\t\t * * when trying to apply a style that is not allowed on a given element.\n\t\t\t *\n\t\t\t * @error style-command-executed-with-incorrect-style-name\n\t\t\t */ logWarning('style-command-executed-with-incorrect-style-name');\n            return;\n        }\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        const htmlSupport = this.editor.plugins.get('GeneralHtmlSupport');\n        const allDefinitions = [\n            ...this._styleDefinitions.inline,\n            ...this._styleDefinitions.block\n        ];\n        const activeDefinitions = allDefinitions.filter(({ name })=>this.value.includes(name));\n        const definition = allDefinitions.find(({ name })=>name == styleName);\n        const shouldAddStyle = forceValue === undefined ? !this.value.includes(definition.name) : forceValue;\n        model.change(()=>{\n            let selectables;\n            if (isBlockStyleDefinition(definition)) {\n                selectables = this._findAffectedBlocks(getBlocksFromSelection(selection), definition);\n            } else {\n                selectables = [\n                    this._styleUtils.getAffectedInlineSelectable(definition, selection)\n                ];\n            }\n            for (const selectable of selectables){\n                if (shouldAddStyle) {\n                    htmlSupport.addModelHtmlClass(definition.element, definition.classes, selectable);\n                } else {\n                    htmlSupport.removeModelHtmlClass(definition.element, getDefinitionExclusiveClasses(activeDefinitions, definition), selectable);\n                }\n            }\n        });\n    }\n    /**\n\t * Returns a set of elements that should be affected by the block-style change.\n\t */ _findAffectedBlocks(selectedBlocks, definition) {\n        const blocks = new Set();\n        for (const selectedBlock of selectedBlocks){\n            const ancestorBlocks = selectedBlock.getAncestors({\n                includeSelf: true,\n                parentFirst: true\n            });\n            for (const block of ancestorBlocks){\n                if (block.is('rootElement')) {\n                    break;\n                }\n                const affectedBlocks = this._styleUtils.getAffectedBlocks(definition, block);\n                if (affectedBlocks) {\n                    for (const affectedBlock of affectedBlocks){\n                        blocks.add(affectedBlock);\n                    }\n                    break;\n                }\n            }\n        }\n        return blocks;\n    }\n}\n/**\n * Returns classes that are defined only in the supplied definition and not in any other active definition. It's used\n * to ensure that classes used by other definitions are preserved when a style is removed. See #11748.\n *\n * @param activeDefinitions All currently active definitions affecting selected element(s).\n * @param definition Definition whose classes will be compared with all other active definition classes.\n * @returns Array of classes exclusive to the supplied definition.\n */ function getDefinitionExclusiveClasses(activeDefinitions, definition) {\n    return activeDefinitions.reduce((classes, currentDefinition)=>{\n        if (currentDefinition.name === definition.name) {\n            return classes;\n        }\n        return classes.filter((className)=>!currentDefinition.classes.includes(className));\n    }, definition.classes);\n}\n/**\n * Checks if provided style definition is of type block.\n */ function isBlockStyleDefinition(definition) {\n    return 'isBlock' in definition;\n}\n/**\n * Gets block elements from selection. If there are none, returns first selected element.\n * @param selection Current document's selection.\n * @returns Selected blocks if there are any, first selected element otherwise.\n */ function getBlocksFromSelection(selection) {\n    const blocks = Array.from(selection.getSelectedBlocks());\n    if (blocks.length) {\n        return blocks;\n    }\n    return [\n        selection.getFirstPosition().parent\n    ];\n}\n\nclass ListStyleSupport extends Plugin {\n    _listUtils;\n    _styleUtils;\n    _htmlSupport;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListStyleSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StyleUtils,\n            'GeneralHtmlSupport'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ListEditing')) {\n            return;\n        }\n        this._styleUtils = editor.plugins.get(StyleUtils);\n        this._listUtils = this.editor.plugins.get('ListUtils');\n        this._htmlSupport = this.editor.plugins.get('GeneralHtmlSupport');\n        this.listenTo(this._styleUtils, 'isStyleEnabledForBlock', (evt, [definition, block])=>{\n            if (this._isStyleEnabledForBlock(definition, block)) {\n                evt.return = true;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'isStyleActiveForBlock', (evt, [definition, block])=>{\n            if (this._isStyleActiveForBlock(definition, block)) {\n                evt.return = true;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'getAffectedBlocks', (evt, [definition, block])=>{\n            const blocks = this._getAffectedBlocks(definition, block);\n            if (blocks) {\n                evt.return = blocks;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'getStylePreview', (evt, [definition, children])=>{\n            const templateDefinition = this._getStylePreview(definition, children);\n            if (templateDefinition) {\n                evt.return = templateDefinition;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Verifies if the given style is applicable to the provided block element.\n\t */ _isStyleEnabledForBlock(definition, block) {\n        const model = this.editor.model;\n        if (![\n            'ol',\n            'ul',\n            'li'\n        ].includes(definition.element)) {\n            return false;\n        }\n        if (!this._listUtils.isListItemBlock(block)) {\n            return false;\n        }\n        const attributeName = this._htmlSupport.getGhsAttributeNameForElement(definition.element);\n        if (definition.element == 'ol' || definition.element == 'ul') {\n            if (!model.schema.checkAttribute(block, attributeName)) {\n                return false;\n            }\n            const isNumbered = this._listUtils.isNumberedListType(block.getAttribute('listType'));\n            const viewElementName = isNumbered ? 'ol' : 'ul';\n            return definition.element == viewElementName;\n        } else {\n            return model.schema.checkAttribute(block, attributeName);\n        }\n    }\n    /**\n\t * Returns true if the given style is applied to the specified block element.\n\t */ _isStyleActiveForBlock(definition, block) {\n        const attributeName = this._htmlSupport.getGhsAttributeNameForElement(definition.element);\n        const ghsAttributeValue = block.getAttribute(attributeName);\n        return this._styleUtils.hasAllClasses(ghsAttributeValue, definition.classes);\n    }\n    /**\n\t * Returns an array of block elements that style should be applied to.\n\t */ _getAffectedBlocks(definition, block) {\n        if (!this._isStyleEnabledForBlock(definition, block)) {\n            return null;\n        }\n        if (definition.element == 'li') {\n            return this._listUtils.expandListBlocksToCompleteItems(block, {\n                withNested: false\n            });\n        } else {\n            return this._listUtils.expandListBlocksToCompleteList(block);\n        }\n    }\n    /**\n\t * Returns a view template definition for the style preview.\n\t */ _getStylePreview(definition, children) {\n        const { element, classes } = definition;\n        if (element == 'ol' || element == 'ul') {\n            return {\n                tag: element,\n                attributes: {\n                    class: classes\n                },\n                children: [\n                    {\n                        tag: 'li',\n                        children\n                    }\n                ]\n            };\n        } else if (element == 'li') {\n            return {\n                tag: 'ol',\n                children: [\n                    {\n                        tag: element,\n                        attributes: {\n                            class: classes\n                        },\n                        children\n                    }\n                ]\n            };\n        }\n        return null;\n    }\n}\n\nclass TableStyleSupport extends Plugin {\n    _tableUtils;\n    _styleUtils;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableStyleSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StyleUtils\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TableEditing')) {\n            return;\n        }\n        this._styleUtils = editor.plugins.get(StyleUtils);\n        this._tableUtils = this.editor.plugins.get('TableUtils');\n        this.listenTo(this._styleUtils, 'isStyleEnabledForBlock', (evt, [definition, block])=>{\n            if (this._isApplicable(definition, block)) {\n                evt.return = this._isStyleEnabledForBlock(definition, block);\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'getAffectedBlocks', (evt, [definition, block])=>{\n            if (this._isApplicable(definition, block)) {\n                evt.return = this._getAffectedBlocks(definition, block);\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'configureGHSDataFilter', (evt, [{ block }])=>{\n            const ghsDataFilter = this.editor.plugins.get('DataFilter');\n            ghsDataFilter.loadAllowedConfig(block.filter((definition)=>definition.element == 'figcaption').map((definition)=>({\n                    name: 'caption',\n                    classes: definition.classes\n                })));\n        });\n    }\n    /**\n\t * Checks if this plugin's custom logic should be applied for defintion-block pair.\n\t *\n\t * @param definition Style definition that is being considered.\n\t * @param block Block element to check if should be styled.\n\t * @returns True if the defintion-block pair meet the plugin criteria, false otherwise.\n\t */ _isApplicable(definition, block) {\n        if ([\n            'td',\n            'th'\n        ].includes(definition.element)) {\n            return block.name == 'tableCell';\n        }\n        if ([\n            'thead',\n            'tbody'\n        ].includes(definition.element)) {\n            return block.name == 'table';\n        }\n        return false;\n    }\n    /**\n\t * Checks if the style definition should be applied to selected block.\n\t *\n\t * @param definition Style definition that is being considered.\n\t * @param block Block element to check if should be styled.\n\t * @returns True if the block should be style with the style description, false otherwise.\n\t */ _isStyleEnabledForBlock(definition, block) {\n        if ([\n            'td',\n            'th'\n        ].includes(definition.element)) {\n            const location = this._tableUtils.getCellLocation(block);\n            const tableRow = block.parent;\n            const table = tableRow.parent;\n            const headingRows = table.getAttribute('headingRows') || 0;\n            const headingColumns = table.getAttribute('headingColumns') || 0;\n            const isHeadingCell = location.row < headingRows || location.column < headingColumns;\n            if (definition.element == 'th') {\n                return isHeadingCell;\n            } else {\n                return !isHeadingCell;\n            }\n        }\n        if ([\n            'thead',\n            'tbody'\n        ].includes(definition.element)) {\n            const headingRows = block.getAttribute('headingRows') || 0;\n            if (definition.element == 'thead') {\n                return headingRows > 0;\n            } else {\n                return headingRows < this._tableUtils.getRows(block);\n            }\n        }\n        /* istanbul ignore next -- @preserve */ return false;\n    }\n    /**\n\t * Gets all blocks that the style should be applied to.\n\t *\n\t * @param definition Style definition that is being considered.\n\t * @param block A block element from selection.\n\t * @returns An array with the block that was passed as an argument if meets the criteria, null otherwise.\n\t */ _getAffectedBlocks(definition, block) {\n        if (!this._isStyleEnabledForBlock(definition, block)) {\n            return null;\n        }\n        return [\n            block\n        ];\n    }\n}\n\nclass LinkStyleSupport extends Plugin {\n    _styleUtils;\n    _htmlSupport;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'LinkStyleSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StyleUtils,\n            'GeneralHtmlSupport'\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('LinkEditing')) {\n            return;\n        }\n        this._styleUtils = editor.plugins.get(StyleUtils);\n        this._htmlSupport = this.editor.plugins.get('GeneralHtmlSupport');\n        this.listenTo(this._styleUtils, 'isStyleEnabledForInlineSelection', (evt, [definition, selection])=>{\n            if (definition.element == 'a') {\n                evt.return = this._isStyleEnabled(definition, selection);\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'isStyleActiveForInlineSelection', (evt, [definition, selection])=>{\n            if (definition.element == 'a') {\n                evt.return = this._isStyleActive(definition, selection);\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n        this.listenTo(this._styleUtils, 'getAffectedInlineSelectable', (evt, [definition, selection])=>{\n            if (definition.element != 'a') {\n                return;\n            }\n            const selectable = this._getAffectedSelectable(definition, selection);\n            if (selectable) {\n                evt.return = selectable;\n                evt.stop();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Verifies if the given style is applicable to the provided document selection.\n\t */ _isStyleEnabled(definition, selection) {\n        const model = this.editor.model;\n        // Handle collapsed selection.\n        if (selection.isCollapsed) {\n            return selection.hasAttribute('linkHref');\n        }\n        // Non-collapsed selection.\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if ((item.is('$textProxy') || model.schema.isInline(item)) && item.hasAttribute('linkHref')) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n\t * Returns true if the given style is applied to the specified document selection.\n\t */ _isStyleActive(definition, selection) {\n        const model = this.editor.model;\n        const attributeName = this._htmlSupport.getGhsAttributeNameForElement(definition.element);\n        // Handle collapsed selection.\n        if (selection.isCollapsed) {\n            if (selection.hasAttribute('linkHref')) {\n                const ghsAttributeValue = selection.getAttribute(attributeName);\n                if (this._styleUtils.hasAllClasses(ghsAttributeValue, definition.classes)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        // Non-collapsed selection.\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if ((item.is('$textProxy') || model.schema.isInline(item)) && item.hasAttribute('linkHref')) {\n                    const ghsAttributeValue = item.getAttribute(attributeName);\n                    return this._styleUtils.hasAllClasses(ghsAttributeValue, definition.classes);\n                }\n            }\n        }\n        return false;\n    }\n    /**\n\t * Returns a selectable that given style should be applied to.\n\t */ _getAffectedSelectable(definition, selection) {\n        const model = this.editor.model;\n        // Handle collapsed selection.\n        if (selection.isCollapsed) {\n            const linkHref = selection.getAttribute('linkHref');\n            return findAttributeRange(selection.getFirstPosition(), 'linkHref', linkHref, model);\n        }\n        // Non-collapsed selection.\n        const ranges = [];\n        for (const range of selection.getRanges()){\n            // First expand range to include the whole link.\n            const expandedRange = model.createRange(expandAttributePosition(range.start, 'linkHref', true, model), expandAttributePosition(range.end, 'linkHref', false, model));\n            // Pick only ranges on links.\n            for (const item of expandedRange.getItems()){\n                if ((item.is('$textProxy') || model.schema.isInline(item)) && item.hasAttribute('linkHref')) {\n                    ranges.push(this.editor.model.createRangeOn(item));\n                }\n            }\n        }\n        // Make sure that we have a continuous range on a link\n        // (not split between text nodes with mixed attributes like bold etc.)\n        return normalizeRanges(ranges);\n    }\n}\n/**\n * Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same attribute value\n * and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n */ function expandAttributePosition(position, attributeName, lookBack, model) {\n    const referenceNode = position.textNode || (lookBack ? position.nodeAfter : position.nodeBefore);\n    if (!referenceNode || !referenceNode.hasAttribute(attributeName)) {\n        return position;\n    }\n    const attributeValue = referenceNode.getAttribute(attributeName);\n    return findAttributeRangeBound(position, attributeName, attributeValue, lookBack, model);\n}\n/**\n * Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n *\n * Note: It assumes that ranges are sorted.\n */ function normalizeRanges(ranges) {\n    for(let i = 1; i < ranges.length; i++){\n        const joinedRange = ranges[i - 1].getJoined(ranges[i]);\n        if (joinedRange) {\n            // Replace the ranges on the list with the new joined range.\n            ranges.splice(--i, 2, joinedRange);\n        }\n    }\n    return ranges;\n}\n\n/**\n * The style engine feature.\n *\n * It configures the {@glink features/html/general-html-support General HTML Support feature} based on\n * {@link module:style/styleconfig~StyleConfig#definitions configured style definitions} and introduces the\n * {@link module:style/stylecommand~StyleCommand style command} that applies styles to the content of the document.\n */ class StyleEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            'GeneralHtmlSupport',\n            StyleUtils,\n            ListStyleSupport,\n            TableStyleSupport,\n            LinkStyleSupport\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const dataSchema = editor.plugins.get('DataSchema');\n        const styleUtils = editor.plugins.get('StyleUtils');\n        const styleDefinitions = editor.config.get('style.definitions');\n        const normalizedStyleDefinitions = styleUtils.normalizeConfig(dataSchema, styleDefinitions);\n        editor.commands.add('style', new StyleCommand(editor, normalizedStyleDefinitions));\n        styleUtils.configureGHSDataFilter(normalizedStyleDefinitions);\n    }\n}\n\n/**\n * The style plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:style/styleediting~StyleEditing style editing feature}\n * and {@link module:style/styleui~StyleUI style UI feature}.\n */ class Style extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Style';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StyleEditing,\n            StyleUI\n        ];\n    }\n}\n\nexport { Style, StyleEditing, StyleUI, StyleUtils };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Template, View } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { env } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { throttle, isElement } from 'lodash-es';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module word-count/utils\n */ /**\n * Returns a plain text representation of an element and its children.\n *\n * @returns Plain text representing the model's data.\n */ function modelElementToPlainText(item) {\n    if (item.is('$text') || item.is('$textProxy')) {\n        return item.data;\n    }\n    const element = item;\n    let text = '';\n    let prev = null;\n    for (const child of element.getChildren()){\n        const childText = modelElementToPlainText(child);\n        // If last block was finish, start from new line.\n        if (prev && prev.is('element')) {\n            text += '\\n';\n        }\n        text += childText;\n        prev = child;\n    }\n    return text;\n}\n\n/**\n * The word count plugin.\n *\n * This plugin calculates all words and characters in all {@link module:engine/model/text~Text text nodes} available in the model.\n * It also provides an HTML element that updates its state whenever the editor content is changed.\n *\n * The model's data is first converted to plain text using {@link module:word-count/utils~modelElementToPlainText}.\n * The number of words and characters in your text are determined based on the created plain text. Please keep in mind\n * that every block in the editor is separated with a newline character, which is included in the calculation.\n *\n * Here are some examples of how the word and character calculations are made:\n *\n * ```html\n * <paragraph>foo</paragraph>\n * <paragraph>bar</paragraph>\n * // Words: 2, Characters: 7\n *\n * <paragraph><$text bold=\"true\">foo</$text>bar</paragraph>\n * // Words: 1, Characters: 6\n *\n * <paragraph>*&^%)</paragraph>\n * // Words: 0, Characters: 5\n *\n * <paragraph>foo(bar)</paragraph>\n * //Words: 1, Characters: 8\n *\n * <paragraph>12345</paragraph>\n * // Words: 1, Characters: 5\n * ```\n */ class WordCount extends Plugin {\n    /**\n\t * The configuration of this plugin.\n\t */ _config;\n    /**\n\t * The reference to a {@link module:ui/view~View view object} that contains the self-updating HTML container.\n\t */ _outputView;\n    /**\n\t * A regular expression used to recognize words in the editor's content.\n\t */ _wordsMatchRegExp;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.set('characters', 0);\n        this.set('words', 0);\n        // Don't wait for the #update event to set the value of the properties but obtain it right away.\n        // This way, accessing the properties directly returns precise numbers, e.g. for validation, etc.\n        // If not accessed directly, the properties will be refreshed upon #update anyway.\n        Object.defineProperties(this, {\n            characters: {\n                get () {\n                    return this.characters = this._getCharacters(this._getText());\n                }\n            },\n            words: {\n                get () {\n                    return this.words = this._getWords(this._getText());\n                }\n            }\n        });\n        this.set('_wordsLabel', undefined);\n        this.set('_charactersLabel', undefined);\n        this._config = editor.config.get('wordCount') || {};\n        this._outputView = undefined;\n        this._wordsMatchRegExp = env.features.isRegExpUnicodePropertySupported ? // Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n        // Groups:\n        // {L} - Any kind of letter from any language.\n        // {N} - Any kind of numeric character in any script.\n        new RegExp('([\\\\p{L}\\\\p{N}]+\\\\S?)+', 'gu') : /([a-zA-Z0-9À-ž]+\\S?)+/gu;\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'WordCount';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get isOfficialPlugin() {\n        return true;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.model.document.on('change:data', throttle(this._refreshStats.bind(this), 250));\n        if (typeof this._config.onUpdate == 'function') {\n            this.on('update', (evt, data)=>{\n                this._config.onUpdate(data);\n            });\n        }\n        if (isElement(this._config.container)) {\n            this._config.container.appendChild(this.wordCountContainer);\n        }\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        if (this._outputView) {\n            this._outputView.element.remove();\n            this._outputView.destroy();\n        }\n        super.destroy();\n    }\n    /**\n\t * Creates a self-updating HTML element. Repeated executions return the same element.\n\t * The returned element has the following HTML structure:\n\t *\n\t * ```html\n\t * <div class=\"ck ck-word-count\">\n\t * \t<div class=\"ck-word-count__words\">Words: 4</div>\n\t * \t<div class=\"ck-word-count__characters\">Characters: 28</div>\n\t * </div>\n\t * ```\n\t */ get wordCountContainer() {\n        const editor = this.editor;\n        const t = editor.t;\n        const displayWords = editor.config.get('wordCount.displayWords');\n        const displayCharacters = editor.config.get('wordCount.displayCharacters');\n        const bind = Template.bind(this, this);\n        const children = [];\n        if (!this._outputView) {\n            this._outputView = new View();\n            if (displayWords || displayWords === undefined) {\n                this.bind('_wordsLabel').to(this, 'words', (words)=>{\n                    return t('Words: %0', words);\n                });\n                children.push({\n                    tag: 'div',\n                    children: [\n                        {\n                            text: [\n                                bind.to('_wordsLabel')\n                            ]\n                        }\n                    ],\n                    attributes: {\n                        class: 'ck-word-count__words'\n                    }\n                });\n            }\n            if (displayCharacters || displayCharacters === undefined) {\n                this.bind('_charactersLabel').to(this, 'characters', (words)=>{\n                    return t('Characters: %0', words);\n                });\n                children.push({\n                    tag: 'div',\n                    children: [\n                        {\n                            text: [\n                                bind.to('_charactersLabel')\n                            ]\n                        }\n                    ],\n                    attributes: {\n                        class: 'ck-word-count__characters'\n                    }\n                });\n            }\n            this._outputView.setTemplate({\n                tag: 'div',\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-word-count'\n                    ]\n                },\n                children\n            });\n            this._outputView.render();\n        }\n        return this._outputView.element;\n    }\n    _getText() {\n        let txt = '';\n        for (const root of this.editor.model.document.getRoots()){\n            if (txt !== '') {\n                // Add a delimiter, so words from each root are treated independently.\n                txt += '\\n';\n            }\n            txt += modelElementToPlainText(root);\n        }\n        return txt;\n    }\n    /**\n\t * Determines the number of characters in the current editor's model.\n\t */ _getCharacters(txt) {\n        return txt.replace(/\\n/g, '').length;\n    }\n    /**\n\t * Determines the number of words in the current editor's model.\n\t */ _getWords(txt) {\n        const detectedWords = txt.match(this._wordsMatchRegExp) || [];\n        return detectedWords.length;\n    }\n    /**\n\t * Determines the number of words and characters in the current editor's model and assigns it to {@link #characters} and {@link #words}.\n\t * It also fires the {@link #event:update}.\n\t *\n\t * @fires update\n\t */ _refreshStats() {\n        const txt = this._getText();\n        const words = this.words = this._getWords(txt);\n        const characters = this.characters = this._getCharacters(txt);\n        this.fire('update', {\n            words,\n            characters\n        });\n    }\n}\n\nexport { WordCount };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nexport * from '@ckeditor/ckeditor5-adapter-ckfinder/dist/index.js';\nexport * from '@ckeditor/ckeditor5-alignment/dist/index.js';\nexport * from '@ckeditor/ckeditor5-autoformat/dist/index.js';\nexport * from '@ckeditor/ckeditor5-autosave/dist/index.js';\nexport * from '@ckeditor/ckeditor5-basic-styles/dist/index.js';\nexport * from '@ckeditor/ckeditor5-block-quote/dist/index.js';\nexport * from '@ckeditor/ckeditor5-ckbox/dist/index.js';\nexport * from '@ckeditor/ckeditor5-ckfinder/dist/index.js';\nexport * from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nexport * from '@ckeditor/ckeditor5-cloud-services/dist/index.js';\nexport * from '@ckeditor/ckeditor5-code-block/dist/index.js';\nexport * from '@ckeditor/ckeditor5-core/dist/index.js';\nexport * from '@ckeditor/ckeditor5-easy-image/dist/index.js';\nexport * from '@ckeditor/ckeditor5-editor-balloon/dist/index.js';\nexport * from '@ckeditor/ckeditor5-editor-classic/dist/index.js';\nexport * from '@ckeditor/ckeditor5-editor-decoupled/dist/index.js';\nexport * from '@ckeditor/ckeditor5-editor-inline/dist/index.js';\nexport * from '@ckeditor/ckeditor5-editor-multi-root/dist/index.js';\nexport * from '@ckeditor/ckeditor5-engine/dist/index.js';\nexport * from '@ckeditor/ckeditor5-enter/dist/index.js';\nexport * from '@ckeditor/ckeditor5-essentials/dist/index.js';\nexport * from '@ckeditor/ckeditor5-find-and-replace/dist/index.js';\nexport * from '@ckeditor/ckeditor5-font/dist/index.js';\nexport * from '@ckeditor/ckeditor5-heading/dist/index.js';\nexport * from '@ckeditor/ckeditor5-highlight/dist/index.js';\nexport * from '@ckeditor/ckeditor5-horizontal-line/dist/index.js';\nexport * from '@ckeditor/ckeditor5-html-embed/dist/index.js';\nexport * from '@ckeditor/ckeditor5-html-support/dist/index.js';\nexport * from '@ckeditor/ckeditor5-image/dist/index.js';\nexport * from '@ckeditor/ckeditor5-indent/dist/index.js';\nexport * from '@ckeditor/ckeditor5-language/dist/index.js';\nexport * from '@ckeditor/ckeditor5-link/dist/index.js';\nexport * from '@ckeditor/ckeditor5-list/dist/index.js';\nexport * from '@ckeditor/ckeditor5-markdown-gfm/dist/index.js';\nexport * from '@ckeditor/ckeditor5-media-embed/dist/index.js';\nexport * from '@ckeditor/ckeditor5-mention/dist/index.js';\nexport * from '@ckeditor/ckeditor5-minimap/dist/index.js';\nexport * from '@ckeditor/ckeditor5-page-break/dist/index.js';\nexport * from '@ckeditor/ckeditor5-paragraph/dist/index.js';\nexport * from '@ckeditor/ckeditor5-paste-from-office/dist/index.js';\nexport * from '@ckeditor/ckeditor5-remove-format/dist/index.js';\nexport * from '@ckeditor/ckeditor5-restricted-editing/dist/index.js';\nexport * from '@ckeditor/ckeditor5-select-all/dist/index.js';\nexport * from '@ckeditor/ckeditor5-show-blocks/dist/index.js';\nexport * from '@ckeditor/ckeditor5-source-editing/dist/index.js';\nexport * from '@ckeditor/ckeditor5-special-characters/dist/index.js';\nexport * from '@ckeditor/ckeditor5-style/dist/index.js';\nexport * from '@ckeditor/ckeditor5-table/dist/index.js';\nexport * from '@ckeditor/ckeditor5-typing/dist/index.js';\nexport * from '@ckeditor/ckeditor5-ui/dist/index.js';\nexport * from '@ckeditor/ckeditor5-undo/dist/index.js';\nexport * from '@ckeditor/ckeditor5-upload/dist/index.js';\nexport * from '@ckeditor/ckeditor5-utils/dist/index.js';\nexport * from '@ckeditor/ckeditor5-watchdog/dist/index.js';\nexport * from '@ckeditor/ckeditor5-widget/dist/index.js';\nexport * from '@ckeditor/ckeditor5-word-count/dist/index.js';\n//# sourceMappingURL=ckeditor5.js.map\n","/**\r\n * @module color-parse\r\n */\r\nimport names from 'color-name'\r\n\r\nexport default parse\r\n\r\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\r\n//FIXME: use external hue detector\r\nvar baseHues = {\r\n\tred: 0,\r\n\torange: 60,\r\n\tyellow: 120,\r\n\tgreen: 180,\r\n\tblue: 240,\r\n\tpurple: 300\r\n}\r\n\r\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\r\nfunction parse (cstr) {\r\n\tvar m, parts = [], alpha = 1, space\r\n\r\n\tif (typeof cstr === 'string') {\r\n\t\t//keyword\r\n\t\tif (names[cstr]) {\r\n\t\t\tparts = names[cstr].slice()\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//reserved words\r\n\t\telse if (cstr === 'transparent') {\r\n\t\t\talpha = 0\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [0,0,0]\r\n\t\t}\r\n\r\n\t\t//hex\r\n\t\telse if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\r\n\t\t\tvar base = cstr.slice(1)\r\n\t\t\tvar size = base.length\r\n\t\t\tvar isShort = size <= 4\r\n\t\t\talpha = 1\r\n\r\n\t\t\tif (isShort) {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[0], 16),\r\n\t\t\t\t\tparseInt(base[1] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[2], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 4) {\r\n\t\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tparts = [\r\n\t\t\t\t\tparseInt(base[0] + base[1], 16),\r\n\t\t\t\t\tparseInt(base[2] + base[3], 16),\r\n\t\t\t\t\tparseInt(base[4] + base[5], 16)\r\n\t\t\t\t]\r\n\t\t\t\tif (size === 8) {\r\n\t\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!parts[0]) parts[0] = 0\r\n\t\t\tif (!parts[1]) parts[1] = 0\r\n\t\t\tif (!parts[2]) parts[2] = 0\r\n\r\n\t\t\tspace = 'rgb'\r\n\t\t}\r\n\r\n\t\t//color space\r\n\t\telse if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\r\n\t\t\tvar name = m[1]\r\n\t\t\tvar isRGB = name === 'rgb'\r\n\t\t\tvar base = name.replace(/a$/, '')\r\n\t\t\tspace = base\r\n\t\t\tvar size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3\r\n\t\t\tparts = m[2].trim()\r\n\t\t\t\t.split(/\\s*[,\\/]\\s*|\\s+/)\r\n\t\t\t\t.map(function (x, i) {\r\n\t\t\t\t\t//<percentage>\r\n\t\t\t\t\tif (/%$/.test(x)) {\r\n\t\t\t\t\t\t//alpha\r\n\t\t\t\t\t\tif (i === size)\treturn parseFloat(x) / 100\r\n\t\t\t\t\t\t//rgb\r\n\t\t\t\t\t\tif (base === 'rgb') return parseFloat(x) * 255 / 100\r\n\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//hue\r\n\t\t\t\t\telse if (base[i] === 'h') {\r\n\t\t\t\t\t\t//<deg>\r\n\t\t\t\t\t\tif (/deg$/.test(x)) {\r\n\t\t\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//<base-hue>\r\n\t\t\t\t\t\telse if (baseHues[x] !== undefined) {\r\n\t\t\t\t\t\t\treturn baseHues[x]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn parseFloat(x)\r\n\t\t\t\t})\r\n\r\n\t\t\tif (name === base) parts.push(1)\r\n\t\t\talpha = (isRGB) ? 1 : (parts[size] === undefined) ? 1 : parts[size]\r\n\t\t\tparts = parts.slice(0, size)\r\n\t\t}\r\n\r\n\t\t//named channels case\r\n\t\telse if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\r\n\t\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\r\n\t\t\t\treturn parseFloat(value)\r\n\t\t\t})\r\n\r\n\t\t\tspace = cstr.match(/([a-z])/ig).join('').toLowerCase()\r\n\t\t}\r\n\t}\r\n\r\n\t//numeric case\r\n\telse if (!isNaN(cstr)) {\r\n\t\tspace = 'rgb'\r\n\t\tparts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff]\r\n\t}\r\n\r\n\t//array-like\r\n\telse if (Array.isArray(cstr) || cstr.length) {\r\n\t\tparts = [cstr[0], cstr[1], cstr[2]]\r\n\t\tspace = 'rgb'\r\n\t\talpha = cstr.length === 4 ? cstr[3] : 1\r\n\t}\r\n\r\n\t//object case - detects css cases of rgb and hsl\r\n\telse if (cstr instanceof Object) {\r\n\t\tif (cstr.r != null || cstr.red != null || cstr.R != null) {\r\n\t\t\tspace = 'rgb'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.r || cstr.red || cstr.R || 0,\r\n\t\t\t\tcstr.g || cstr.green || cstr.G || 0,\r\n\t\t\t\tcstr.b || cstr.blue || cstr.B || 0\r\n\t\t\t]\r\n\t\t}\r\n\t\telse {\r\n\t\t\tspace = 'hsl'\r\n\t\t\tparts = [\r\n\t\t\t\tcstr.h || cstr.hue || cstr.H || 0,\r\n\t\t\t\tcstr.s || cstr.saturation || cstr.S || 0,\r\n\t\t\t\tcstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\talpha = cstr.a || cstr.alpha || cstr.opacity || 1\r\n\r\n\t\tif (cstr.opacity != null) alpha /= 100\r\n\t}\r\n\r\n\treturn {\r\n\t\tspace: space,\r\n\t\tvalues: parts,\r\n\t\talpha: alpha\r\n\t}\r\n}\r\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nexport default createBaseFor;\n","import createBaseFor from './_createBaseFor.js';\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nexport default baseFor;\n","import baseFor from './_baseFor.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nexport default baseForOwn;\n","import castPath from './_castPath.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nexport default baseGet;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import Stack from './_Stack.js';\nimport baseIsEqual from './_baseIsEqual.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport default baseIsMatch;\n","import isObject from './isObject.js';\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nexport default isStrictComparable;\n","import isStrictComparable from './_isStrictComparable.js';\nimport keys from './keys.js';\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nexport default getMatchData;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nexport default matchesStrictComparable;\n","import baseIsMatch from './_baseIsMatch.js';\nimport getMatchData from './_getMatchData.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nexport default baseMatches;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nexport default baseHasIn;\n","import castPath from './_castPath.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isIndex from './_isIndex.js';\nimport isLength from './isLength.js';\nimport toKey from './_toKey.js';\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nexport default hasPath;\n","import baseHasIn from './_baseHasIn.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nexport default hasIn;\n","import baseIsEqual from './_baseIsEqual.js';\nimport get from './get.js';\nimport hasIn from './hasIn.js';\nimport isKey from './_isKey.js';\nimport isStrictComparable from './_isStrictComparable.js';\nimport matchesStrictComparable from './_matchesStrictComparable.js';\nimport toKey from './_toKey.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nexport default baseMatchesProperty;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default baseProperty;\n","import baseGet from './_baseGet.js';\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nexport default basePropertyDeep;\n","import baseProperty from './_baseProperty.js';\nimport basePropertyDeep from './_basePropertyDeep.js';\nimport isKey from './_isKey.js';\nimport toKey from './_toKey.js';\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nexport default property;\n","import baseMatches from './_baseMatches.js';\nimport baseMatchesProperty from './_baseMatchesProperty.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\nimport property from './property.js';\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nexport default baseIteratee;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignMergeValue;\n","import isArrayLike from './isArrayLike.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nexport default isArrayLikeObject;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nexport default safeGet;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nexport default toPlainObject;\n","import assignMergeValue from './_assignMergeValue.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\nimport copyArray from './_copyArray.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isPlainObject from './isPlainObject.js';\nimport isTypedArray from './isTypedArray.js';\nimport safeGet from './_safeGet.js';\nimport toPlainObject from './toPlainObject.js';\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nexport default baseMergeDeep;\n","import Stack from './_Stack.js';\nimport assignMergeValue from './_assignMergeValue.js';\nimport baseFor from './_baseFor.js';\nimport baseMergeDeep from './_baseMergeDeep.js';\nimport isObject from './isObject.js';\nimport keysIn from './keysIn.js';\nimport safeGet from './_safeGet.js';\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nexport default baseMerge;\n","/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default basePropertyOf;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import MapCache from './_MapCache.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nexport default memoize;\n","import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n","import memoizeCapped from './_memoizeCapped.js';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n","import isArray from './isArray.js';\nimport isKey from './_isKey.js';\nimport stringToPath from './_stringToPath.js';\nimport toString from './toString.js';\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nexport default castPath;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nexport default isKey;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default toKey;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import basePropertyOf from './_basePropertyOf.js';\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\nexport default escapeHtmlChar;\n","import escapeHtmlChar from './_escapeHtmlChar.js';\nimport toString from './toString.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nexport default escape;\n","import toString from './toString.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nexport default escapeRegExp;\n","import baseGet from './_baseGet.js';\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nexport default get;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import isArrayLike from './isArrayLike.js';\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nexport default createBaseEach;\n","import baseForOwn from './_baseForOwn.js';\nimport createBaseEach from './_createBaseEach.js';\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nexport default baseEach;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","import baseMerge from './_baseMerge.js';\nimport createAssigner from './_createAssigner.js';\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nexport default merge;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseSet from './_baseSet.js';\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nexport default set;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseGet from './_baseGet.js';\nimport baseSlice from './_baseSlice.js';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","import castPath from './_castPath.js';\nimport last from './last.js';\nimport parent from './_parent.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nexport default baseUnset;\n","import baseUnset from './_baseUnset.js';\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nexport default unset;\n","// Clamps a value between an upper and lower bound.\n// We use ternary operators because it makes the minified code\n// 2 times shorter then `Math.min(Math.max(a,b),c)`\nexport const clamp = (number, min = 0, max = 1) => {\n    return number > max ? max : number < min ? min : number;\n};\nexport const round = (number, digits = 0, base = Math.pow(10, digits)) => {\n    return Math.round(base * number) / base;\n};\n//# sourceMappingURL=math.js.map","import { round } from './math.js';\n/**\n * Valid CSS <angle> units.\n * https://developer.mozilla.org/en-US/docs/Web/CSS/angle\n */\nconst angleUnits = {\n    grad: 360 / 400,\n    turn: 360,\n    rad: 360 / (Math.PI * 2)\n};\nexport const hexToHsva = (hex) => rgbaToHsva(hexToRgba(hex));\nexport const hexToRgba = (hex) => {\n    if (hex[0] === '#')\n        hex = hex.substring(1);\n    if (hex.length < 6) {\n        return {\n            r: parseInt(hex[0] + hex[0], 16),\n            g: parseInt(hex[1] + hex[1], 16),\n            b: parseInt(hex[2] + hex[2], 16),\n            a: hex.length === 4 ? round(parseInt(hex[3] + hex[3], 16) / 255, 2) : 1\n        };\n    }\n    return {\n        r: parseInt(hex.substring(0, 2), 16),\n        g: parseInt(hex.substring(2, 4), 16),\n        b: parseInt(hex.substring(4, 6), 16),\n        a: hex.length === 8 ? round(parseInt(hex.substring(6, 8), 16) / 255, 2) : 1\n    };\n};\nexport const parseHue = (value, unit = 'deg') => {\n    return Number(value) * (angleUnits[unit] || 1);\n};\nexport const hslaStringToHsva = (hslString) => {\n    const matcher = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(hslString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return hslaToHsva({\n        h: parseHue(match[1], match[2]),\n        s: Number(match[3]),\n        l: Number(match[4]),\n        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n    });\n};\nexport const hslStringToHsva = hslaStringToHsva;\nexport const hslaToHsva = ({ h, s, l, a }) => {\n    s *= (l < 50 ? l : 100 - l) / 100;\n    return {\n        h: h,\n        s: s > 0 ? ((2 * s) / (l + s)) * 100 : 0,\n        v: l + s,\n        a\n    };\n};\nexport const hsvaToHex = (hsva) => rgbaToHex(hsvaToRgba(hsva));\nexport const hsvaToHsla = ({ h, s, v, a }) => {\n    const hh = ((200 - s) * v) / 100;\n    return {\n        h: round(h),\n        s: round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n        l: round(hh / 2),\n        a: round(a, 2)\n    };\n};\nexport const hsvaToHsvString = (hsva) => {\n    const { h, s, v } = roundHsva(hsva);\n    return `hsv(${h}, ${s}%, ${v}%)`;\n};\nexport const hsvaToHsvaString = (hsva) => {\n    const { h, s, v, a } = roundHsva(hsva);\n    return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n};\nexport const hsvaToHslString = (hsva) => {\n    const { h, s, l } = hsvaToHsla(hsva);\n    return `hsl(${h}, ${s}%, ${l}%)`;\n};\nexport const hsvaToHslaString = (hsva) => {\n    const { h, s, l, a } = hsvaToHsla(hsva);\n    return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n};\nexport const hsvaToRgba = ({ h, s, v, a }) => {\n    h = (h / 360) * 6;\n    s = s / 100;\n    v = v / 100;\n    const hh = Math.floor(h), b = v * (1 - s), c = v * (1 - (h - hh) * s), d = v * (1 - (1 - h + hh) * s), module = hh % 6;\n    return {\n        r: round([v, c, b, b, d, v][module] * 255),\n        g: round([d, v, v, c, b, b][module] * 255),\n        b: round([b, b, d, v, v, c][module] * 255),\n        a: round(a, 2)\n    };\n};\nexport const hsvaToRgbString = (hsva) => {\n    const { r, g, b } = hsvaToRgba(hsva);\n    return `rgb(${r}, ${g}, ${b})`;\n};\nexport const hsvaToRgbaString = (hsva) => {\n    const { r, g, b, a } = hsvaToRgba(hsva);\n    return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\nexport const hsvaStringToHsva = (hsvString) => {\n    const matcher = /hsva?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(hsvString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return roundHsva({\n        h: parseHue(match[1], match[2]),\n        s: Number(match[3]),\n        v: Number(match[4]),\n        a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n    });\n};\nexport const hsvStringToHsva = hsvaStringToHsva;\nexport const rgbaStringToHsva = (rgbaString) => {\n    const matcher = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n    const match = matcher.exec(rgbaString);\n    if (!match)\n        return { h: 0, s: 0, v: 0, a: 1 };\n    return rgbaToHsva({\n        r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n        g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n        b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n        a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n    });\n};\nexport const rgbStringToHsva = rgbaStringToHsva;\nconst format = (number) => {\n    const hex = number.toString(16);\n    return hex.length < 2 ? '0' + hex : hex;\n};\nexport const rgbaToHex = ({ r, g, b, a }) => {\n    const alphaHex = a < 1 ? format(round(a * 255)) : '';\n    return '#' + format(r) + format(g) + format(b) + alphaHex;\n};\nexport const rgbaToHsva = ({ r, g, b, a }) => {\n    const max = Math.max(r, g, b);\n    const delta = max - Math.min(r, g, b);\n    // prettier-ignore\n    const hh = delta\n        ? max === r\n            ? (g - b) / delta\n            : max === g\n                ? 2 + (b - r) / delta\n                : 4 + (r - g) / delta\n        : 0;\n    return {\n        h: round(60 * (hh < 0 ? hh + 6 : hh)),\n        s: round(max ? (delta / max) * 100 : 0),\n        v: round((max / 255) * 100),\n        a\n    };\n};\nexport const roundHsva = (hsva) => ({\n    h: round(hsva.h),\n    s: round(hsva.s),\n    v: round(hsva.v),\n    a: round(hsva.a, 2)\n});\nexport const rgbaToRgb = ({ r, g, b }) => ({ r, g, b });\nexport const hslaToHsl = ({ h, s, l }) => ({ h, s, l });\nexport const hsvaToHsv = (hsva) => {\n    const { h, s, v } = roundHsva(hsva);\n    return { h, s, v };\n};\n//# sourceMappingURL=convert.js.map","import { hexToRgba } from './convert.js';\nexport const equalColorObjects = (first, second) => {\n    if (first === second)\n        return true;\n    for (const prop in first) {\n        // The following allows for a type-safe calling of this function (first & second have to be HSL, HSV, or RGB)\n        // with type-unsafe iterating over object keys. TS does not allow this without an index (`[key: string]: number`)\n        // on an object to define how iteration is normally done. To ensure extra keys are not allowed on our types,\n        // we must cast our object to unknown (as RGB demands `r` be a key, while `Record<string, x>` does not care if\n        // there is or not), and then as a type TS can iterate over.\n        if (first[prop] !==\n            second[prop])\n            return false;\n    }\n    return true;\n};\nexport const equalColorString = (first, second) => {\n    return first.replace(/\\s/g, '') === second.replace(/\\s/g, '');\n};\nexport const equalHex = (first, second) => {\n    if (first.toLowerCase() === second.toLowerCase())\n        return true;\n    // To compare colors like `#FFF` and `ffffff` we convert them into RGB objects\n    return equalColorObjects(hexToRgba(first), hexToRgba(second));\n};\n//# sourceMappingURL=compare.js.map","const cache = {};\nexport const tpl = (html) => {\n    let template = cache[html];\n    if (!template) {\n        template = document.createElement('template');\n        template.innerHTML = html;\n        cache[html] = template;\n    }\n    return template;\n};\nexport const fire = (target, type, detail) => {\n    target.dispatchEvent(new CustomEvent(type, {\n        bubbles: true,\n        detail\n    }));\n};\n//# sourceMappingURL=dom.js.map","import { fire, tpl } from '../utils/dom.js';\nimport { clamp } from '../utils/math.js';\nlet hasTouched = false;\n// Check if an event was triggered by touch\nconst isTouch = (e) => 'touches' in e;\n// Prevent mobile browsers from handling mouse events (conflicting with touch ones).\n// If we detected a touch interaction before, we prefer reacting to touch events only.\nconst isValid = (event) => {\n    if (hasTouched && !isTouch(event))\n        return false;\n    if (!hasTouched)\n        hasTouched = isTouch(event);\n    return true;\n};\nconst pointerMove = (target, event) => {\n    const pointer = isTouch(event) ? event.touches[0] : event;\n    const rect = target.el.getBoundingClientRect();\n    fire(target.el, 'move', target.getMove({\n        x: clamp((pointer.pageX - (rect.left + window.pageXOffset)) / rect.width),\n        y: clamp((pointer.pageY - (rect.top + window.pageYOffset)) / rect.height)\n    }));\n};\nconst keyMove = (target, event) => {\n    // We use `keyCode` instead of `key` to reduce the size of the library.\n    const keyCode = event.keyCode;\n    // Ignore all keys except arrow ones, Page Up, Page Down, Home and End.\n    if (keyCode > 40 || (target.xy && keyCode < 37) || keyCode < 33)\n        return;\n    // Do not scroll page by keys when color picker element has focus.\n    event.preventDefault();\n    // Send relative offset to the parent component.\n    fire(target.el, 'move', target.getMove({\n        x: keyCode === 39 // Arrow Right\n            ? 0.01\n            : keyCode === 37 // Arrow Left\n                ? -0.01\n                : keyCode === 34 // Page Down\n                    ? 0.05\n                    : keyCode === 33 // Page Up\n                        ? -0.05\n                        : keyCode === 35 // End\n                            ? 1\n                            : keyCode === 36 // Home\n                                ? -1\n                                : 0,\n        y: keyCode === 40 // Arrow down\n            ? 0.01\n            : keyCode === 38 // Arrow Up\n                ? -0.01\n                : 0\n    }, true));\n};\nexport class Slider {\n    constructor(root, part, aria, xy) {\n        const template = tpl(`<div role=\"slider\" tabindex=\"0\" part=\"${part}\" ${aria}><div part=\"${part}-pointer\"></div></div>`);\n        root.appendChild(template.content.cloneNode(true));\n        const el = root.querySelector(`[part=${part}]`);\n        el.addEventListener('mousedown', this);\n        el.addEventListener('touchstart', this);\n        el.addEventListener('keydown', this);\n        this.el = el;\n        this.xy = xy;\n        this.nodes = [el.firstChild, el];\n    }\n    set dragging(state) {\n        const toggleEvent = state ? document.addEventListener : document.removeEventListener;\n        toggleEvent(hasTouched ? 'touchmove' : 'mousemove', this);\n        toggleEvent(hasTouched ? 'touchend' : 'mouseup', this);\n    }\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n            case 'touchstart':\n                event.preventDefault();\n                // event.button is 0 in mousedown for left button activation\n                if (!isValid(event) || (!hasTouched && event.button != 0))\n                    return;\n                this.el.focus();\n                pointerMove(this, event);\n                this.dragging = true;\n                break;\n            case 'mousemove':\n            case 'touchmove':\n                event.preventDefault();\n                pointerMove(this, event);\n                break;\n            case 'mouseup':\n            case 'touchend':\n                this.dragging = false;\n                break;\n            case 'keydown':\n                keyMove(this, event);\n                break;\n        }\n    }\n    style(styles) {\n        styles.forEach((style, i) => {\n            for (const p in style) {\n                this.nodes[i].style.setProperty(p, style[p]);\n            }\n        });\n    }\n}\n//# sourceMappingURL=slider.js.map","import { Slider } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nexport class Hue extends Slider {\n    constructor(root) {\n        super(root, 'hue', 'aria-label=\"Hue\" aria-valuemin=\"0\" aria-valuemax=\"360\"', false);\n    }\n    update({ h }) {\n        this.h = h;\n        this.style([\n            {\n                left: `${(h / 360) * 100}%`,\n                color: hsvaToHslString({ h, s: 100, v: 100, a: 1 })\n            }\n        ]);\n        this.el.setAttribute('aria-valuenow', `${round(h)}`);\n    }\n    getMove(offset, key) {\n        // Hue measured in degrees of the color circle ranging from 0 to 360\n        return { h: key ? clamp(this.h + offset.x * 360, 0, 360) : 360 * offset.x };\n    }\n}\n//# sourceMappingURL=hue.js.map","import { Slider } from './slider.js';\nimport { hsvaToHslString } from '../utils/convert.js';\nimport { clamp, round } from '../utils/math.js';\nexport class Saturation extends Slider {\n    constructor(root) {\n        super(root, 'saturation', 'aria-label=\"Color\"', true);\n    }\n    update(hsva) {\n        this.hsva = hsva;\n        this.style([\n            {\n                top: `${100 - hsva.v}%`,\n                left: `${hsva.s}%`,\n                color: hsvaToHslString(hsva)\n            },\n            {\n                'background-color': hsvaToHslString({ h: hsva.h, s: 100, v: 100, a: 1 })\n            }\n        ]);\n        this.el.setAttribute('aria-valuetext', `Saturation ${round(hsva.s)}%, Brightness ${round(hsva.v)}%`);\n    }\n    getMove(offset, key) {\n        // Saturation and brightness always fit into [0, 100] range\n        return {\n            s: key ? clamp(this.hsva.s + offset.x * 100, 0, 100) : offset.x * 100,\n            v: key ? clamp(this.hsva.v - offset.y * 100, 0, 100) : Math.round(100 - offset.y * 100)\n        };\n    }\n}\n//# sourceMappingURL=saturation.js.map","export default `:host{display:flex;flex-direction:column;position:relative;width:200px;height:200px;user-select:none;-webkit-user-select:none;cursor:default}:host([hidden]){display:none!important}[role=slider]{position:relative;touch-action:none;user-select:none;-webkit-user-select:none;outline:0}[role=slider]:last-child{border-radius:0 0 8px 8px}[part$=pointer]{position:absolute;z-index:1;box-sizing:border-box;width:28px;height:28px;display:flex;place-content:center center;transform:translate(-50%,-50%);background-color:#fff;border:2px solid #fff;border-radius:50%;box-shadow:0 2px 4px rgba(0,0,0,.2)}[part$=pointer]::after{content:\"\";width:100%;height:100%;border-radius:inherit;background-color:currentColor}[role=slider]:focus [part$=pointer]{transform:translate(-50%,-50%) scale(1.1)}`;\n//# sourceMappingURL=color-picker.js.map","export default `[part=hue]{flex:0 0 24px;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}[part=hue-pointer]{top:50%;z-index:2}`;\n//# sourceMappingURL=hue.js.map","export default `[part=saturation]{flex-grow:1;border-color:transparent;border-bottom:12px solid #000;border-radius:8px 8px 0 0;background-image:linear-gradient(to top,#000,transparent),linear-gradient(to right,#fff,rgba(255,255,255,0));box-shadow:inset 0 0 0 1px rgba(0,0,0,.05)}[part=saturation-pointer]{z-index:3}`;\n//# sourceMappingURL=saturation.js.map","import { equalColorObjects } from '../utils/compare.js';\nimport { fire, tpl } from '../utils/dom.js';\nimport { Hue } from './hue.js';\nimport { Saturation } from './saturation.js';\nimport css from '../styles/color-picker.js';\nimport hueCss from '../styles/hue.js';\nimport saturationCss from '../styles/saturation.js';\nconst $isSame = Symbol('same');\nconst $color = Symbol('color');\nconst $hsva = Symbol('hsva');\nconst $update = Symbol('update');\nconst $parts = Symbol('parts');\nexport const $css = Symbol('css');\nexport const $sliders = Symbol('sliders');\nexport class ColorPicker extends HTMLElement {\n    static get observedAttributes() {\n        return ['color'];\n    }\n    get [$css]() {\n        return [css, hueCss, saturationCss];\n    }\n    get [$sliders]() {\n        return [Saturation, Hue];\n    }\n    get color() {\n        return this[$color];\n    }\n    set color(newColor) {\n        if (!this[$isSame](newColor)) {\n            const newHsva = this.colorModel.toHsva(newColor);\n            this[$update](newHsva);\n            this[$color] = newColor;\n        }\n    }\n    constructor() {\n        super();\n        const template = tpl(`<style>${this[$css].join('')}</style>`);\n        const root = this.attachShadow({ mode: 'open' });\n        root.appendChild(template.content.cloneNode(true));\n        root.addEventListener('move', this);\n        this[$parts] = this[$sliders].map((slider) => new slider(root));\n    }\n    connectedCallback() {\n        // A user may set a property on an _instance_ of an element,\n        // before its prototype has been connected to this class.\n        // If so, we need to run it through the proper class setter.\n        if (this.hasOwnProperty('color')) {\n            const value = this.color;\n            delete this['color'];\n            this.color = value;\n        }\n        else if (!this.color) {\n            this.color = this.colorModel.defaultColor;\n        }\n    }\n    attributeChangedCallback(_attr, _oldVal, newVal) {\n        const color = this.colorModel.fromAttr(newVal);\n        if (!this[$isSame](color)) {\n            this.color = color;\n        }\n    }\n    handleEvent(event) {\n        // Merge the current HSV color object with updated params.\n        const oldHsva = this[$hsva];\n        const newHsva = { ...oldHsva, ...event.detail };\n        this[$update](newHsva);\n        let newColor;\n        if (!equalColorObjects(newHsva, oldHsva) &&\n            !this[$isSame]((newColor = this.colorModel.fromHsva(newHsva)))) {\n            this[$color] = newColor;\n            fire(this, 'color-changed', { value: newColor });\n        }\n    }\n    [$isSame](color) {\n        return this.color && this.colorModel.equal(color, this.color);\n    }\n    [$update](hsva) {\n        this[$hsva] = hsva;\n        this[$parts].forEach((part) => part.update(hsva));\n    }\n}\n//# sourceMappingURL=color-picker.js.map","import { ColorPicker } from '../components/color-picker.js';\nimport { hexToHsva, hsvaToHex } from '../utils/convert.js';\nimport { equalHex } from '../utils/compare.js';\nconst colorModel = {\n    defaultColor: '#000',\n    toHsva: hexToHsva,\n    fromHsva: ({ h, s, v }) => hsvaToHex({ h, s, v, a: 1 }),\n    equal: equalHex,\n    fromAttr: (color) => color\n};\nexport class HexBase extends ColorPicker {\n    get colorModel() {\n        return colorModel;\n    }\n}\n//# sourceMappingURL=hex.js.map"],"names":[],"sourceRoot":""}