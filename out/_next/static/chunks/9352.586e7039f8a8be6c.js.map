{"version":3,"file":"static/chunks/9352.586e7039f8a8be6c.js","mappings":"AAaA","sources":["webpack://_N_E/./node_modules/@mui/material/ListItemText/ListItemText.js","webpack://_N_E/./src/app/components/PdfPreviewButton.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Typography, { typographyClasses } from \"../Typography/index.js\";\nimport ListContext from \"../List/ListContext.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport listItemTextClasses, { getListItemTextUtilityClass } from \"./listItemTextClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    inset,\n    primary,\n    secondary,\n    dense\n  } = ownerState;\n  const slots = {\n    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],\n    primary: ['primary'],\n    secondary: ['secondary']\n  };\n  return composeClasses(slots, getListItemTextUtilityClass, classes);\n};\nconst ListItemTextRoot = styled('div', {\n  name: 'MuiListItemText',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${listItemTextClasses.primary}`]: styles.primary\n    }, {\n      [`& .${listItemTextClasses.secondary}`]: styles.secondary\n    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];\n  }\n})({\n  flex: '1 1 auto',\n  minWidth: 0,\n  marginTop: 4,\n  marginBottom: 4,\n  [`.${typographyClasses.root}:where(& .${listItemTextClasses.primary})`]: {\n    display: 'block'\n  },\n  [`.${typographyClasses.root}:where(& .${listItemTextClasses.secondary})`]: {\n    display: 'block'\n  },\n  variants: [{\n    props: ({\n      ownerState\n    }) => ownerState.primary && ownerState.secondary,\n    style: {\n      marginTop: 6,\n      marginBottom: 6\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.inset,\n    style: {\n      paddingLeft: 56\n    }\n  }]\n});\nconst ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListItemText'\n  });\n  const {\n    children,\n    className,\n    disableTypography = false,\n    inset = false,\n    primary: primaryProp,\n    primaryTypographyProps,\n    secondary: secondaryProp,\n    secondaryTypographyProps,\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const {\n    dense\n  } = React.useContext(ListContext);\n  let primary = primaryProp != null ? primaryProp : children;\n  let secondary = secondaryProp;\n  const ownerState = {\n    ...props,\n    disableTypography,\n    inset,\n    primary: !!primary,\n    secondary: !!secondary,\n    dense\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots,\n    slotProps: {\n      primary: primaryTypographyProps,\n      secondary: secondaryTypographyProps,\n      ...slotProps\n    }\n  };\n  const [PrimarySlot, primarySlotProps] = useSlot('primary', {\n    className: classes.primary,\n    elementType: Typography,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SecondarySlot, secondarySlotProps] = useSlot('secondary', {\n    className: classes.secondary,\n    elementType: Typography,\n    externalForwardedProps,\n    ownerState\n  });\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/_jsx(PrimarySlot, {\n      variant: dense ? 'body2' : 'body1',\n      component: primarySlotProps?.variant ? undefined : 'span',\n      ...primarySlotProps,\n      children: primary\n    });\n  }\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/_jsx(SecondarySlot, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      ...secondarySlotProps,\n      children: secondary\n    });\n  }\n  return /*#__PURE__*/_jsxs(ListItemTextRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other,\n    children: [primary, secondary]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Alias for the `primary` prop.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * If `true`, the children are indented.\n   * This should be used if there is no left avatar or left icon.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The main content element.\n   */\n  primary: PropTypes.node,\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   * @deprecated Use `slotProps.primary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  primaryTypographyProps: PropTypes.object,\n  /**\n   * The secondary content element.\n   */\n  secondary: PropTypes.node,\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   * @deprecated Use `slotProps.secondary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  secondaryTypographyProps: PropTypes.object,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    primary: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    secondary: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    primary: PropTypes.elementType,\n    secondary: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemText;","\"use client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  Modal,\r\n  ToggleButton,\r\n  ToggleButtonGroup,\r\n  Skeleton,\r\n  FormControl,\r\n  Select,\r\n  ListItemText,\r\n  MenuItem,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { generatePdfBufferById, readPdfTemplate } from \"../services/pdfService\";\r\nimport LaunchIcon from \"@mui/icons-material/Launch\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"@/redux/store\";\r\n\r\nconst PdfPreviewButton = ({\r\n  htmlContent,\r\n  isIconButton,\r\n  id,\r\n  organization_id,\r\n  subcategories,\r\n}: {\r\n  htmlContent: string | null;\r\n  isIconButton: boolean;\r\n  id: number | null;\r\n  organization_id: number;\r\n  subcategories: string[];\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n  const iframeRef = useRef<HTMLIFrameElement>(null);\r\n  const [htmlCntnt, setHtmlCntnt] = useState(htmlContent);\r\n  const [pdfUrl, setPdfUrl] = useState(\"\");\r\n  const [previewMode, setPreviewMode] = useState(\"withoutData\");\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [dataError, setDataError] = useState(\"\");\r\n  const [pdfSubcategories, setPdfSubcategories] = useState(subcategories || []);\r\n  const [subcategoriesFilter, setSubcategoriesFilter] = useState([]);\r\n\r\n  const { token } = useSelector((state: RootState) => state.session);\r\n  // Open and close modal handlers\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTimeout(() => URL.revokeObjectURL(pdfUrl), 0);\r\n    setDataLoaded(false);\r\n    setPreviewMode(\"withoutData\");\r\n    setDataError(\"\");\r\n    setLoading(false);\r\n    setSubcategoriesFilter([]);\r\n  };\r\n\r\n  const handleToggle = (event: any, newMode: any) => {\r\n    setPreviewMode((prev) => (newMode !== prev ? newMode : prev));\r\n    if (!id) setHtmlCntnt(htmlContent);\r\n    // console.log(htmlContent)\r\n  };\r\n\r\n  const handleOpenById = async () => {\r\n    if (id && token) {\r\n      setLoading(true);\r\n      try {\r\n        const response = await generatePdfBufferById(\r\n          id,\r\n          organization_id,\r\n          token,\r\n          subcategoriesFilter\r\n        );\r\n        if (response.status == 200) {\r\n          const { pdf } = response.data;\r\n          const blobUrl = await openPdfInDialog(pdf);\r\n          if (blobUrl) {\r\n            setPdfUrl(blobUrl);\r\n            if (!open) setOpen(true);\r\n          }\r\n        }\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.log(e);\r\n        setDataError(\"PDF generation failed. Please try again later.\");\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const openPdfInDialog = (pdfData: any) => {\r\n    try {\r\n      const binaryPdf = atob(pdfData);\r\n      // Convert the binary string into an ArrayBuffer\r\n      const len = binaryPdf.length;\r\n      const buffer = new Uint8Array(len);\r\n      for (let i = 0; i < len; i++) {\r\n        buffer[i] = binaryPdf.charCodeAt(i);\r\n      }\r\n      const blob = new Blob([buffer], { type: \"application/pdf\" });\r\n      const blobUrl = URL.createObjectURL(blob);\r\n      return blobUrl; // Return blob URL to render in Dialog\r\n    } catch (error) {\r\n      console.error(\"Error preparing PDF for preview:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleOpenWithData = () => {\r\n    if (id && token) {\r\n      setLoading(true);\r\n      const fetchData = async () => {\r\n        try {\r\n          let response = await readPdfTemplate(id, token);\r\n          if (response.status == 200) {\r\n              response = response.data;\r\n            //   console.log(response.data)\r\n            setHtmlCntnt(`<div className=\"ck ck-editor__main\">\r\n                                    <div class=\"ck ck-content\">\r\n                                    <div>${response.data.headerContent}</div>\r\n                                    ${response.data.bodyContent}\r\n                                    ${response.data.sections ? response.data.sections.map((se: any) => se.htmlContent) : ''}\r\n                                    <footer>${response.data.footerContent}</footer>\r\n                                    </div>\r\n                                    </div>\r\n                            `);\r\n              setPdfSubcategories(response.data.subcategories?.map((sc:any)=> sc.name) || []);\r\n            setOpen(true);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching data for edit mode:\", error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n//   useEffect(() => {\r\n//     if (iframeRef.current && htmlCntnt) {\r\n//       // const sanitizedHtmlContent = DOMPurify.sanitize(htmlCntnt, {\r\n//       //     ALLOWED_TAGS: ['img', 'div', 'p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'br'],\r\n//       //     ALLOWED_ATTR: ['src', 'alt', 'title', 'class', 'style'],\r\n//       // });\r\n//       const doc = iframeRef.current.contentDocument;\r\n//       if (doc) {\r\n//         doc.open();\r\n//         doc.write(`\r\n//             <!DOCTYPE html>\r\n//             <html lang=\"en\">\r\n//             <head>\r\n//                 <style>\r\n//                     /* Include CKEditor styles here or link to the external stylesheet */\r\n//                     @import url('https://cdn.ckeditor.com/ckeditor5/35.0.1/classic/theme.css');\r\n//                     body {\r\n//                         margin: 0;\r\n//                         padding: 0;\r\n//                     }\r\n//                     .image {\r\n//                                 text-align: center;\r\n//                             }\r\n//                             .image img {\r\n//                                 max-width: 100%;\r\n//                                 height: auto;\r\n//                                 display: block;\r\n//                                 margin: 0 auto;\r\n//                             }\r\n//                             .image_resized {\r\n//                                 display: block;\r\n//                                 margin: 0 auto;\r\n//                             }\r\n//                 </style>\r\n//             </head>\r\n//             <body>\r\n//             <div  className=\"ck ck-editor__main\">\r\n//                 <div class=\"ck ck-content\">${htmlCntnt}</div>\r\n//                 </div>\r\n//             </body>\r\n//             </html>\r\n//         `); // Write HTML content to iframe\r\n//         doc.close();\r\n//       }\r\n//     }\r\n//   }, [htmlCntnt]); // Re-render iframe when htmlContent changes\r\n\r\n  // Handle loading state based on iframe content\r\n//   useEffect(() => {\r\n//     if (iframeRef.current && htmlCntnt) {\r\n//       // setLoading(true);\r\n//       const iframe = iframeRef.current;\r\n//       iframe.onload = () => setLoading(false); // Set loading to false once iframe content is loaded\r\n//     }\r\n//   }, [htmlCntnt, previewMode]);\r\n\r\n  useEffect(() => {\r\n    if (previewMode != \"withoutData\" && !dataLoaded) {\r\n      handleOpenById();\r\n      setDataLoaded(true);\r\n    }\r\n  }, [previewMode, subcategoriesFilter]);\r\n  useEffect(() => {\r\n    setHtmlCntnt(htmlContent);\r\n  //     return () => {\r\n  //         setDataLoaded(false);\r\n  //         setPreviewMode('withoutData');\r\n  //         setDataError('')\r\n  //     }\r\n  }, [open]);\r\n  return (\r\n    <Box>\r\n      {/* Button to open the modal */}\r\n      {isIconButton ? (\r\n        <LaunchIcon onClick={handleOpenWithData} sx={{ cursor: \"pointer\" }} />\r\n      ) : (\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          onClick={handleOpen}\r\n          disabled={!htmlCntnt} // Disable button if no HTML content\r\n          size=\"small\"\r\n        >\r\n          Preview HTML\r\n        </Button>\r\n      )}\r\n\r\n      {/* Modal for preview */}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"pdf-preview-title\"\r\n        aria-describedby=\"pdf-preview-description\"\r\n      >\r\n        <Box\r\n          sx={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"80%\",\r\n            height: \"80%\",\r\n            bgcolor: \"background.paper\",\r\n            // border: '2px solid #000',\r\n            // boxShadow: 24,\r\n            p: 4,\r\n            pb: 15,\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          <Box sx={{ display: \"flex\", mb: 2 }}>\r\n            <Typography\r\n              id=\"pdf-preview-title\"\r\n              variant=\"h5\"\r\n              component=\"h2\"\r\n              gutterBottom\r\n            >\r\n              HTML Preview\r\n            </Typography>\r\n            {id && (\r\n              <ToggleButtonGroup\r\n                value={previewMode}\r\n                exclusive\r\n                onChange={handleToggle}\r\n                aria-label=\"preview mode\"\r\n                sx={{\r\n                  ml: 2,\r\n                  mt: 0.6,\r\n                  \"& .MuiToggleButton-root\": {\r\n                    // borderRadius: \"2px\",\r\n                    width: 125,\r\n                    height: 25,\r\n                  },\r\n                }}\r\n              >\r\n                <ToggleButton\r\n                  size=\"small\"\r\n                  id=\"withoutData\"\r\n                  value=\"withoutData\"\r\n                  aria-label=\"Preview without Data\"\r\n                >\r\n                  Without Data\r\n                </ToggleButton>\r\n                <ToggleButton\r\n                  size=\"small\"\r\n                  id=\"withData\"\r\n                  value=\"withData\"\r\n                  aria-label=\"Preview with Data\"\r\n                >\r\n                  With Data\r\n                </ToggleButton>\r\n              </ToggleButtonGroup>\r\n            )}\r\n            {previewMode != \"withoutData\" && (\r\n              <FormControl\r\n                variant=\"standard\"\r\n                sx={{ ml: 1, width: 200 }}\r\n                size=\"small\"\r\n              >\r\n                {/* <InputLabel id=\"demo-multiple-checkbox-label\">Section Filter</InputLabel> */}\r\n                <Select\r\n                  labelId=\"demo-multiple-checkbox-label\"\r\n                  id=\"demo-multiple-checkbox\"\r\n                  multiple\r\n                  value={subcategoriesFilter}\r\n                  onChange={(event: SelectChangeEvent<any>) => {\r\n                    const {\r\n                      target: { value },\r\n                    } = event;\r\n                    setSubcategoriesFilter(() =>\r\n                      // On autofill we get a stringified value.\r\n                      typeof value === \"string\" ? value.split(\",\") : value\r\n                    );\r\n                    setDataLoaded(false);\r\n                  }}\r\n                  // input={<OutlinedInput label=\"Section Filter\" />}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  // MenuProps={MenuProps}\r\n                  size=\"small\"\r\n                >\r\n                  {pdfSubcategories?.map((name) => (\r\n                    <MenuItem key={name} value={name}>\r\n                      <ListItemText primary={name} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n          </Box>\r\n          {/* Show loading state while iframe is loading */}\r\n          {loading && (\r\n            <Box\r\n              display=\"flex\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              height=\"100%\"\r\n              // position=\"absolute\"\r\n              top={0}\r\n              left={0}\r\n              width=\"100%\"\r\n              zIndex={1}\r\n              // bgcolor=\"white\"\r\n            >\r\n              <Skeleton variant=\"rectangular\" width=\"90%\" height=\"90%\" />\r\n            </Box>\r\n          )}\r\n          {previewMode != \"withoutData\" && !loading && pdfUrl && (\r\n            <iframe\r\n              src={pdfUrl}\r\n              title=\"PDF Preview\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              style={{ border: \"none\" }}\r\n              // frameBorder=\"0\"\r\n            />\r\n          )}\r\n          {previewMode != \"withoutData\" && dataError && !loading && (\r\n            <Typography\r\n              id=\"pdf-preview-description\"\r\n              color=\"error\"\r\n              align=\"center\"\r\n              variant=\"h6\"\r\n            >\r\n              {dataError}\r\n            </Typography>\r\n          )}\r\n          {/* {htmlContent} */}\r\n          {/* PDF iframe */}\r\n          {htmlCntnt ? (\r\n            <Box\r\n              sx={{\r\n                opacity: previewMode == \"withoutData\" ? 1 : 0,\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                position:\r\n                  previewMode == \"withoutData\" ? \"relative\" : \"absolute\",\r\n                mt: previewMode == \"withoutData\" ? 0 : 1500,\r\n              }}\r\n            >\r\n              <iframe\r\n                ref={iframeRef}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                title=\"HTML Preview\"\r\n                style={{ border: \"none\" }}\r\n                srcDoc={`\r\n                                    <!DOCTYPE html>\r\n                                    <html lang=\"en\">\r\n                                    <head>\r\n                                    <link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/44.1.0/ckeditor5.css\">\r\n                                        <style>\r\n                                            body {\r\n                                                margin: 0;\r\n                                                padding: 0;\r\n                                            },\r\n                                            .ck-content {\r\n                                                 margin: 0 auto;\r\n                                            }\r\n                                        </style>\r\n                                    </head>\r\n                                    <body>\r\n                                    ${htmlCntnt}\r\n                                    </body>\r\n                                    </html>\r\n                                `}\r\n                // src=''\r\n              />\r\n            </Box>\r\n          ) : (\r\n            <Typography\r\n              id=\"pdf-preview-description\"\r\n              color=\"error\"\r\n              align=\"center\"\r\n              variant=\"h6\"\r\n            >\r\n              {previewMode == \"withoutData\" && !loading\r\n                ? \"No HTML content available.\"\r\n                : \"\"}\r\n            </Typography>\r\n          )}\r\n\r\n          {/* Close button */}\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"info\"\r\n            onClick={handleClose}\r\n            sx={{ mt: 2, float: \"right\" }}\r\n            size=\"small\"\r\n          >\r\n            Close\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PdfPreviewButton;\r\n"],"names":[],"sourceRoot":""}